#! /usr/bin/env ruby

require 'localeapp'
require 'digest/sha1'
require 'json'
require 'httparty'
require 'timeout'
require_relative './socrata_localeapp_utils.rb'

# Force console output to show up immediately. We're having issues
# with the jenkins console being very slow to report sync progress.
$stdout.sync = true

# Overriding LocaleApp's default #report_success method
# so we can get access to the job_id within the response
class Pusher < Localeapp::CLI::Push
  def report_success(response)
    super
    $locale_app_success_response = response
  end
end

project_name = ARGV[0]
api_key = ARGV[1] || SocrataLocaleAppUtils::LOCALEAPP_API_KEY[project_name]

is_blank = lambda { |x| x.nil? || x.empty? }
if [ project_name, api_key ].any?(&is_blank)
  puts 'Usage: push_locale <frontend|storyteller|common> <api_key_for_project>'
  puts 'API key can be read from LastPass \'LocaleApp\' note or directly in LocaleApp UI'
  exit(1)
end

# Check that API key aligns with project name
SocrataLocaleAppUtils.verify_api_key(project_name, api_key)

file_directory = File.dirname(__FILE__)
path = SocrataLocaleAppUtils.get_path_to_en_yml(project_name, file_directory)

puts "Pushing locales from: #{path}"

pusher = Pusher.new({k: api_key})
pusher.execute(path)

# handle execute error
if $locale_app_success_response.nil? # never reached report_success
  puts 'Push failed'
  exit(1)
end

response = JSON.parse($locale_app_success_response)
job_id = response['id']

if job_id.nil?
  puts 'Couldn\'t find a job ID, unable to poll'
  exit(0)
end


# Poll localeapp api until push job is complete with some backoff
max_interval = 32
interval = 2
timeout_mins = 120

relevant_job = nil

begin
  Timeout::timeout(60 * timeout_mins) do
    begin
      print "Checking LocaleApp job #{job_id} status... "
      sleep interval
      relevant_job =
        HTTParty.get("https://api.localeapp.com/v1/projects/#{api_key}/imports.json").
          parsed_response['imports'].
          find { |job| job['id'] == job_id }
      job_complete = relevant_job['state'] == 'succeeded'
      interval = [ max_interval, interval * 2 ].min
      puts "#{relevant_job['state']}, next check in #{interval}s" unless job_complete
    end until job_complete

    puts "Job: #{job_id} complete!"
    puts relevant_job['output']
  end
rescue Timeout::Error
  puts "Job #{job_id} took more than #{timeout_mins} minutes to complete. Exiting job"
  exit(1)
end

unless is_blank.call(relevant_job['warnings'])
  puts
  puts "The following translations could not be imported:"
  relevant_job['warnings'].each do |translation_key, warning_text|
    puts "* #{translation_key} #{warning_text}"
  end
  puts
  puts "See this doc for known warnings: https://github.com/socrata/platform-ui/blob/master/frontend/doc/update-translations.md#warnings-and-errors"
  exit(1)
end
