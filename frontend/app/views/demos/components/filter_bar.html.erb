<% content_for :head do %>
  <title>Example Usage: EditBar</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF8">
  <%= rendered_stylesheet_tag 'component_example_pages' %>
<% end %>

<section class="styleguide-section" id="color-picker">
  <p>
    <a class="btn btn-default" href='/internal/demos/components'><span class="socrata-icon-arrow-left"></span> Components</a>
  </p>
  <h2 class="styleguide-header">Edit Bar</h2>
  <div class="styleguide-example">
    <h3 class="styleguide-subheader">
      Editable Filter Bar
      <button id="toggle" class="btn btn-xs btn-default">Toggle isReadOnly</button>
    </h3>
    <div id="filter-bar-container"></div>

    <h3 class="styleguide-subheader">Non-Editable Filter Bar <span class="small">(hidden if there are no visible filters)</span></h3>
    <div id="non-editable-filter-bar-container"></div>

    <h3 class="styleguide-subheader">Output</h3>
    <pre id="output" style="white-space: pre-wrap;"></pre>
  </div>
  <div class="styleguide-code-example" id="styleguide-code-example-1"></div>
</section>

<% content_for :scripts do %>
  <%= render_demos_javascript_environment %>
  <%= include_webpack_bundle 'component_example_pages/main.js' %>

  <script type="text/javascript" id="example-1">
    $(() => {
      const output = document.querySelector('#output');
      const filters = [
        {
          function: 'valueRange',
          columnName: 'some_number',
          arguments: {
            start: 3,
            end: 7
          },
          isHidden: false
        }
      ];

      let props = {
        columns: [ // Note! Not regular view metadata columns. See comments on FilterBar propTypes.
          {
            name: 'Some Number',
            fieldName: 'some_number',
            dataTypeName: 'number',
            rangeMin: 1,
            rangeMax: 10
          },
          {
            name: 'Some Money',
            fieldName: 'some_money',
            dataTypeName: 'money',
            rangeMin: 1,
            rangeMax: 10
          },
          {
            name: 'Some Word',
            fieldName: 'some_word',
            dataTypeName: 'text',
            top: [
              { item: 'purple', count: 23 },
              { item: 'pesto', count: 11 },
              { item: 'russian', count: 8 },
              { item: 'cheese', count: 3 },
              { item: 'cherry', count: 2 },
              { item: 'mango', count: 2 },
              { item: 'raspberry', count: 2 },
              { item: 'apple', count: 1 }
            ]
          },
          {
            name: 'Some Calendar Date',
            fieldName: 'some_calendar_date',
            dataTypeName: 'calendar_date',
            rangeMin: '2014-06-10T00:00:00',
            rangeMax: '2016-06-10T23:59:59'
          }
        ],
        filters,
        isReadOnly: false,
        onUpdate,
        isValidTextFilterColumnValue: (column, value) => {
          return new Promise((resolve, reject) => setTimeout(resolve, 3000));
        }
      };

      function render() {
        output.innerHTML = JSON.stringify(props.filters, null, 2);

        ReactDOM.render(
          React.createElement(components.FilterBar, props),
          document.getElementById('filter-bar-container')
        );

        const nonEditableProps = _.merge({}, props, {
          isReadOnly: true
        });

        ReactDOM.render(
          React.createElement(components.FilterBar, nonEditableProps),
          document.getElementById('non-editable-filter-bar-container')
        );
      }

      function onUpdate(newFilters) {
        props.filters = newFilters;
        render();
      }

      $('#toggle').click(() => {
        props.isReadOnly = !props.isReadOnly
        render();
      });

      render();
    });
  </script>
<% end %>
