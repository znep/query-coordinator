def npm(command, path: 'karma_config')
  sh("cd #{path} && npm #{command}") do |ok, res|
    yield(ok, res) if block_given?
  end
end

def bundle(command, path: 'site_chrome')
  sh("cd #{path} && bundle #{command}") do |ok, res|
    yield(ok, res) if block_given?
  end
end

def rspec(path)
  sh("cd #{path} && rspec") do |ok, res|
    yield(ok, res) if block_given?
  end
end

def guard(path)
  sh("cd #{path} && guard") do |ok, res|
    yield(ok, res) if block_given?
  end
end

Dir.glob('tasks/*.rake').each(&method(:load))
# Load tasks from site_chrome.
Dir.glob('site_chrome/lib/tasks/*.rake').each(&method(:load))

desc 'Run linter'
task lint: :deps do
  # --silent suppresses the (in this case) useless NPM error spew. It does _NOT_
  # silence the linter output, which prints its own useful error messages.
  npm('run lint --silent') do |ok, res|
    unless ok
      # TODO: See EN-19293 for a better solution we can implement once eslint implements a feature.
      puts "\n\033[31mIf you are seeing restricted module warnings on common/components, be advised:
In common/{components,notifications,autocomplete}, importing common/components
causes dependency cycles. Prefer direct import instead:

import { Checkbox } from 'common/components'; // No
import Checkbox from 'common/components/Checkbox'; // Yes

See EN-19294 for details.
\033[0m"
      abort 'Lint failed.'
    end
  end
end

task :deps do
  Rake.application['karma:deps'].invoke
  Rake.application['rspec:deps'].invoke
end

desc 'Run lint and tests'
task default: %i(lint test)

desc 'Run all tests'
task test: %i(karma spec)
