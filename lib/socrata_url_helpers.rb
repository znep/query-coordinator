module SocrataUrlHelpers

  def default_url_options
    options = {}
    options[:locale] = I18n.locale.to_s if I18n.locale.to_s != CurrentDomain.default_locale
    options
  end

  def view_url(view)
    if view.is_api?
      # use the view's federation resolution but throw away the rest for the resource name instead.
      # todo
      developer_docs_url(view.route_params.only( :host ).merge( resource: view.resourceName || '' ))
    elsif view.data_lens? || view.standalone_visualization?
      "//#{view.canonical_domain_name}#{locale_url_prefix}/view/#{view.id}"
    elsif view.story?
      story_url(view)
    elsif view.pulse?
      "//#{view.canonical_domain_name}/pulse/view/#{view.id}"
    else
      super # Autogenerated Rails route helper.
    end
  end

  def short_view_url(view)
    if view.is_api? || view.data_lens? || view.standalone_visualization? || view.pulse?
      view_url(view)
    elsif view.story?
      "//#{view.canonical_domain_name}/stories/s/#{view.id}"
    else
      super # Autogenerated Rails route helper.
    end
  end

  def edit_story_url(view)
    raise RuntimeError.new('view is not a story') unless view.story?
    "#{story_url(view)}/edit"
  end

  def preview_story_url(view)
    raise RuntimeError.new('view is not a story') unless view.story?
    "#{story_url(view)}/preview"
  end

  def seo_friendly_url(view, request = nil)
    base_url = request.try(:base_url) || "https://#{CurrentDomain.cname}"
    base_url + locale_url_prefix + view_path(view)
  end

  def encoded_seo_friendly_url(view, request = nil)
    ERB::Util.url_encode(seo_friendly_url(view, request))
  end

  def tweetable_link(view)
    translation_key = view.story? ? 'controls.common.share.share_story_text' : 'controls.common.share.share_text'
    I18n.t(translation_key, :name => view.name, :site => CurrentDomain.strings.company) + short_view_url(view)
  end

  private

  # a snippet that can be included before any non-localized url
  # to provide a localized url without unnecessary path segments
  # in the case of the default locale
  def locale_url_prefix
    I18n.locale.to_s == CurrentDomain.default_locale ? '' : "/#{I18n.locale}"
  end


  def story_url(view)
    path = view.name.blank? ? "/stories/s/#{view.id}" : "/stories/s/#{view.name.convert_to_url}/#{view.id}"
    "//#{view.canonical_domain_name}#{path}"
  end
end
