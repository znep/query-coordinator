<% content_for :head do %>
<%= rendered_stylesheet_tag 'internal' %>
<title>Feature Flag Report <%= "for #{params[:for]}" if params[:for] %>
  | Internal Panel | <%= get_site_title %></title>
<% end %>

<%= render '/internal/left_nav' %>

<div class="contentBox withLeftNavigation internalPanelRedesign featureFlagReport">
  <div class="signallerEnvironment" title="According to Feature Flag Signaller">
    <label>Current Environment:</label>
    <span><%= Signaller.environment %></span>
  </div>
  <h1>Feature Flag Report for <%= select_tag('for', list_of_feature_flags_as_options) %></h1>
  <%= display_standard_flashes %>
  <%- if defined? @default %>
    <p>Description: <%= @description %></p>
    <p>Default Value: <%= @default %></p>

    <div class="environmentFeatureFlag">
      <h2>Environment Value<%= ' (unset)' if @environment.nil? %></h2>
      <%= form_tag set_environment_feature_flag_path, method: :post do %>
        <%= feature_flag_input(params[:for],
                               Hashie::Mash.new(FeatureFlags.config_for(params[:for])),
                               @environment) %>
        <input type="submit" id="update-env-feature-flag" value="Update" />
        <input type="submit" id="unset-env-feature-flag" name="reset_to_default[<%= params[:for] %>]" value="Unset" />
      <%- end %>
    </div>

    <div class="domainFeatureFlags">
      <h2>Domain Values</h2>
      <h3>Summary</h3>
      <%- @domains.group_by { |(cname, value)| value }.each do |value, domains| %>
        <div>
          <div class="label"><%= value %></div>
          <div class="value"><%= list_of_cnames_as_links(domains) %></div>
        </div>
      <%- end %>

      <h3>By Domain</h3>
      <%- @domains.sort.each do |cname, value| %>
        <div>
          <div class="label"><%= link_to(cname, show_domain_path(domain_id: cname)) %></div>
          <div class="value">
            <%= link_to('(modify)', feature_flags_config_path(domain_id: cname)) %>
            <%= value %>
          </div>
        </div>
      <%- end %>
    </div>


    <div class="multipleDomainActions expandable">
      <%= expandable_section('Actions on Multiple Domains') do %>
        <div>
          <%= form_tag update_feature_flags_on_multiple_domains_path, :class => 'oneButtonForm' do %>
            <input type="hidden" name="flag" value="<%= params[:for] %>" />
            <div><input type="checkbox" id="dry_run" name="dry_run"><label for="dry_run">Dry Run</label></div>
            <div class="domain_selection">
              <label>Choose domains to affect:</label>
              <input type="text" name="domain_list" />
              <ul class="multiple_domains_list"></ul>
            </div>
            <div class="action_taking_div">
              <%= feature_flag_input(
                params[:for],
                Hashie::Mash.new(FeatureFlags.config_for(params[:for])),
                nil,
                namespace: 'multiple_domains'
              ) %>
              <%= submit_tag('Set') %>
              <%= submit_tag('Reset') %>
            </div>
          <%- end %>
        </div>
      <%- end %>
    </div>
  <%- else %>
    <p>Select a feature flag from the options above.</p>
    <p>&nbsp;</p>
    <%- if defined? @version_information %>
      <%- @version_information.each do |key, value| %>
        <p><b><%= key.titleize %>:</b> <%= value %></p>
      <%- end %>
      <p>(<%= link_to 'Machine Readable Version', :signaller_version %>)</p>
    <%- end %>
  <%- end %>
</div>

<% content_for :js_footer do %>
  <script type="text/javascript">
    $(function() {
      // Warn user if they click the 'Update' button for env-wide feature flags
      $('#update-env-feature-flag').on('click', function() {
        // Drop everything up to 'for=', and anything after the next '&'
        var featureFlag = this.baseURI.split('for=').slice(-1)[0].split('&')[0];
        var featureFlagValue = $(this.form).find('input:checked').val();

        if (!featureFlagValue) {
          console.warn('No value set - ignoring');
          return false;
        };

        if (featureFlagValue.toLowerCase() === 'on') {
          featureFlagValue = $('#feature_flag_value').val();
        };

        var confirmationMessage = 'You are about to set the feature flag' +
          " '" + featureFlag +  "' to '" + featureFlagValue + "'" +
          ' for the entire environment.\n\nAre you sure?\n\n' +
          '(Please update feature_flags.yml if this is the new default)';

        if (!confirm(confirmationMessage)) return false;
      });

      // Warn user if they click the 'Unset' button for env-wide feature flags
      $('#unset-env-feature-flag').on('click', function() {
        var confirmationMessage = 'You are about to unset the feature flag' +
          ' for the entire environment.\n\nAre you sure?'

        if (!confirm(confirmationMessage)) return false;
      });

      $('.featureFlagReport select').change(function() {
        var flag = $(this).val();

        if (!_.isUndefined(blist.feature_flags[flag])) {
          window.location.href = '/internal/feature_flag_report?for={0}'.format(flag);
        }
      });

      var $form = $('.environmentFeatureFlag form, .multipleDomainActions form');
      $('input:text, select', $form).on('focus change', function() {
        $(this).siblings('input.other').click();
      });
      $form.submit(function(e) {
        var $this = $(this);
        var otherNotSelected = $this.find('.other').not(':checked').exists();
        var otherPresent = $this.find('.other').exists();
        if (otherNotSelected && otherPresent) {
          $this.find('input:text[name!="domain_list"], select').prop('disabled', true);
        }
      });

      var $domainSelection = $('.domain_selection');
      var $domainSelectionInput = $('.domain_selection > input');
      var $multipleDomainsList = $domainSelection.find('ul.multiple_domains_list');
      var selectedDomains = [];
      $domainSelectionInput.focus(function() {
        blist.internal.fetchDomainList($domainSelection, {
          onComplete: function(domain) {
            if (!_.include(selectedDomains, domain.cname)) {
              selectedDomains.push(domain.cname);
            }
            $domainSelectionInput.val('');
            renderMultipleDomainList();
          }
        });
      });

      var renderMultipleDomainList = function() {
        $multipleDomainsList.empty();
        _.each(selectedDomains, function(domain) {
          $multipleDomainsList.append($.tag2({
            _: 'li',
            contents: [
              {
                _: 'input',
                type: 'hidden',
                name: 'domains[]',
                value: domain
              },
              {
                _: 'a',
                class: 'remove',
                contents: 'x'
              },
              domain
            ]
          }));
          $multipleDomainsList.find('a.remove').click(function() {
            var $domain = $(this).parent();
            var domainToRemove = $domain.find('input').val();
            selectedDomains = _.without(selectedDomains, domainToRemove);
            $domain.remove();
          });
        });
      };
    });
  </script>
<% end %>
