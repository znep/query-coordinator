<% content_for :head do %>
<%= rendered_stylesheet_tag 'internal' %>
<title>Config <%= @config.nil? ? '' : @config.name %> |
  Domain <%= @domain.nil? ? '' : @domain.name %> | Internal Panel |
  <%= CurrentDomain.strings.site_title %></title>
<% end %>

<%= render :partial => 'left_nav' %>

<div class="contentBox withLeftNavigation">
    <div class='content'>

      <%- if @domain.nil? || @config.nil? -%>
        <p>Domain or Configuration could not be found</p>

      <%- else -%>
      <%= render :partial => 'production_warning' %>
      <h1><%= @config.name %> for
        <%= link_to "#{@domain.name} (#{@domain.cname})",
                    show_domain_path(org_id: @domain.organizationId,
                                     domain_id: @domain.cname) %>
        (<%= 'not ' unless @config.default %>default for <%= @config.type %>)
      </h1>

      <a href="#export" class="exportLink">Export mode</a>
      <a href="#import" class="importLink">Import mode</a>

      <%= form_tag "/internal/orgs/#{@domain.organizationId}/domains/#{@domain.cname}/default_site_config", :class => 'oneButtonForm' do %>
        <input type="hidden" name="default-site-config" value="<%= @config.id %>" />
        <input type="submit" value="Set this config as Default" />
      <% end unless @config.default %>
      <%= form_tag "/internal/orgs/#{@domain.organizationId}/domains/#{@domain.cname}/delete_config/#{@config.id}", :class => 'oneButtonForm deleteConfig' do %>
        <input type="submit" value="Delete this ENTIRE PAGE OF CONFIG SETTINGS" />
      <% end unless editing_this_page_is_dangerous? %>

      <input type="text" class="importExportBox" />
      <a href="#doImport" class="doImportLink">Import this</a>

      <%- props = @config.data['properties'] -%>
      <%- cur_props = Hash.new -%>
      <h2>Properties:</h2>
      <%- if props.nil? -%>
      <p>No properties for this configuration</p>

      <%- else -%>
      <%= form_tag('/internal/orgs/' + @domain.organizationId.to_s +
        '/domains/' + @domain.cname + '/site_config/' + @config.id.to_s +
        '/property', {:class => 'wide configProperties'}) do %>
        <%- @config.data['properties'].sort{ |a, b| a['name'] <=> b['name'] }.each do |prop| -%>
        <div class='line'>
          <%- cur_props[prop['name']] = true -%>
          <label><%= prop['name'] %></label>
          <%= text_area_tag 'properties[' + prop['name'] + ']',
              prop['value'].nil? ? '' :
              (prop['value'].is_a?(String) ? prop['value'] : prop['value'].to_json) %>
        <%= check_box_tag 'delete_properties[' + prop['name'] + ']',
          'delete' %>
        <span class="deleteLink">(Delete)</span>
        <%= link_to 'Edit this field alone.',
                    "/internal/orgs/#{@domain.organizationId}/domains/#{@domain.cname}" +
                    "/site_config/#{@config.id}/edit_property?property_id=#{prop['name']}",
                    :class => 'editLink' %>
      </div>
      <%- end -%>
      <input type="submit" value="Save"/>
    <% end %>
    <%- end -%>

    <%- if !@parent_config.nil? && !@parent_config.data['properties'].nil? -%>
      <h2>Inherited Properties (from
        <%= link_to @parent_config.name, show_config_path(org_id: @parent_domain.organizationId,
                                                          domain_id: @parent_domain.cname,
                                                          id: @parent_config.id) %>):</h2>
    <form class='wide inheritedProperties'>
      <%- @parent_config.data['properties'].
        sort{ |a, b| a['name'] <=> b['name'] }.
        each do |prop| -%>
      <%- next if cur_props[prop['name']] -%>

      <div class='line'>
      <label><%= prop['name'] %></label>
      <textarea readonly='true'><%= prop['value'].is_a?(String) ? prop['value'] : prop['value'].to_json %></textarea>
      </div>
      <%- end -%>
    </form>
    <%- end -%>

    <h2>Add Property</h2>
    <%= form_tag('/internal/orgs/' + @domain.organizationId.to_s +
      '/domains/' + @domain.cname + '/site_config/' + @config.id.to_s +
      '/property', {:class => 'wide newProperty'}) do %>
      <div class='line'>
        <%= text_field_tag 'new-property_name' %>
        <%= text_area_tag 'new-property_value' %>
      </div>
      <input type="submit" value="Add"/>
    <% end %>
    <%= form_tag rename_config_path(id: @config.id), :class => 'oneButtonForm renameConfig' do %>
        <input type="text" name="rename-config-to" value="<%= @config.name %>" />
        <input type="hidden" name="rename-config" value="<%= @config.id %>" />
        <input type="submit" value="Rename Config" />
      <% end %>

      <dl class="config_type_description"><% @type_description.try(:each) do |key, value| %>
        <%- next if key == 'hide_from_creator' %>
        <dt><%= key.titleize %></dt>
        <dd><%=
          if /^http/ =~ value.to_s
            link_to value, value, target: '_blank'
          else
            value
          end
        %></dd>
      <% end %></dl>

    <%- end -%>

  </div>
</div>

<% content_for :js_footer do %>
  <script type="text/javascript">
    $(function()
    {
      $('.deleteConfig').submit(function() {
        return confirm('Are you sure you want to delete this config?');
      });
      $('.exportLink').click(function(event)
      {
        event.preventDefault();
        $('.configProperties .line').find('input, span, a').remove();
        $('.configProperties .line textarea').after($.tag([{
          tagName: 'input', type: 'checkbox', 'class': 'exportCheck'
        }, {
          tagName: 'span', contents: 'Export this'
        }], true));
        $('.importExportBox').val('').show();

        $.live('.exportCheck', 'click', function(event)
        {
          var aggrData = {};
          $('.exportCheck:checked').each(function()
          {
            var $this = $(this);
            aggrData[$this.siblings('label').text()] = $this.siblings('textarea').text();
          });
          $('.importExportBox').val(JSON.stringify(aggrData));
        });
      });

      $('.importLink').click(function(event)
      {
        event.preventDefault();
        $('.importExportBox, .doImportLink').val('').show();
      });

      $('.doImportLink').click(function(event)
      {
        event.preventDefault();

        var refcount = 0;

        var aggrData = JSON.parse($('.importExportBox').val());
        _.each(aggrData, function(v, k)
        {
          var $textarea = $('#properties_' + k.replace(/\./, '\\.'));
          if ($textarea.length === 0)
          {
            refcount++;
            $.ajax({
              type: 'POST', url: $('.newProperty').attr('action'),
              data: { 'new-property_name': k, 'new-property_value': v },
              success: function()
              {
                if (--refcount === 0)
                {
                  $('.configProperties').submit();
                }
              },
              error: function()
              {
                alert('warning: ' + k + ' didn\'t submit right.');
              }
            });
          }
          else
          {
            $textarea.text(v);
          }
        });

        if (refcount === 0)
        {
          $('.configProperties').submit();
        }
      });

      var propertyTyping = <%== @property_type_checking.to_json %> || {};
      $('form.configProperties, form.newProperty').find('textarea').change(function() {
        var $this = $(this);
        var propertyName = $this.attr('name');
        var deleting = false;
        if (propertyName === 'new-property_value') {
          propertyName = $this.siblings('input').val();
        } else {
          propertyName = $this.siblings('label').text();
          deleting = !!$this.siblings('input').attr('checked');
        }

        if (!deleting && propertyTyping[propertyName]) {
          var validJSON, jsonIsNotValid;

          try {
            validJSON = JSON.parse($this.val());
          } catch(e) {
            if (e.name !== 'SyntaxError') {
              console.error(e);
            }
            jsonIsNotValid = true;
          }

          if (jsonIsNotValid ||
            (propertyTyping[propertyName] === 'Array' && !_.isArray(validJSON)) ||
            (propertyTyping[propertyName] === 'Object' && !_.isPlainObject(validJSON)) ||
            (propertyTyping[propertyName] === 'Number' && !_.isNumber(validJSON))
          ) {
            var errorMessage = [
              'This should be a valid JSON {0} but it is not.',
              'Make sure you\'re using double-quotes!'
            ];

            // Double-quotes are kinda irrelevant if it's a number.
            if (propertyTyping[propertyName] === 'Number') {
              errorMessage.pop();
            }
            errorMessage = errorMessage.join(' ').format(propertyTyping[propertyName]);

            $this.css('background-color', '#FF9494');
            $this.socrataTip({
              trigger: 'none',
              isSolo: true,
              message: errorMessage,
              'parent': 'body'
            });
            $this.btOn();
          } else {
            $this.css('background-color', 'white');
            $this.btOff();
          }
        }
      });
    });
  </script>
<% end %>
