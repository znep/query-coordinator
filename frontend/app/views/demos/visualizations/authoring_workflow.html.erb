<% content_for :head do %>
  <title>Example Usage: AuthoringWorkflow</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <%= rendered_stylesheet_tag 'visualizations' %>
  <%= rendered_stylesheet_tag 'authoring-workflow' %>
  <style>
    .custom-vif {
      background-color: purple;
    }

    .delete-custom-vif {
      margin-right: 10px;
    }

    .custom-dataset-uid {
      background-color: orange;
    }

    #chart {
      display: block;
      position: relative;
      width: 640px;
      height: 490px;
    }

    #outputs .text-output pre {
      background: #ddd;
      width: 100%;
      word-wrap: break-word;
    }
  </style>
<% end %>


<% content_for :scripts do %>
  <%= render_demos_javascript_environment %>

  <%= include_webpack_bundle 'visualization_example_pages/main.js' %>

  <script type="text/javascript">
    var AuthoringWorkflow = socrata.AuthoringWorkflow;
    var VisualizationRenderer = socrata.visualizations.VisualizationRenderer;
    var container = document.querySelector('#authoring-workflow');
    var vifOutput = document.querySelector('#vif-output');
    var embedCodeOutput = document.querySelector('#embed-code-output');
    var filterOutput = document.querySelector('#filter-output');
    var chart = document.querySelector('#chart');
    var visualization;
    var filters;

    $('#edit, #save, #outputs').hide();

    function printFeatureFlags() {
      $('#feature-flags').text(JSON.stringify(window.socrata.featureFlags, null, '  '));
    }

    function getLocalVifs() {
      window.localVifs = window.localVifs || {};
      if (window.localStorage) {
        try {
          localVifs = JSON.parse(window.localStorage.getItem('ax-demo-vifs') || '{}');
        } catch (e) {
          console.error('Error reading from localStorage, nuking and starting fresh.', e);
          window.localStorage.removeItem('ax-demo-vifs');
        }
      }

      return localVifs;
    }

    function setLocalVifs(localVifs) {
      window.localVifs = localVifs || {};
      if (window.localStorage) {
        window.localStorage.setItem('ax-demo-vifs', JSON.stringify(window.localVifs));
      }
    }

    function renderLocalVifButtons() {
      var localVifs = getLocalVifs();
      var container = $('#local-vifs').empty();

      if (_.isEmpty(localVifs)) {
        $('#local-vifs').text('(empty)');
      } else {
        _.each(localVifs, function(vif, vifName) {
          $('#local-vifs').append([
            $('<button class="launch btn btn-primary custom-vif">' + vifName + '</button>').
              data('vif', vif).
              addClass('vif'),
            $('<button class="delete btn btn-secondary delete-custom-vif">X</button>').
              data('vifName', vifName).
              addClass('delete-vif'),
            ]
          );
        });
      }
    }

    printFeatureFlags();
    renderLocalVifButtons();

    $('#edit-feature-flags').click(function() {
      var flag = prompt('Flag name');
      if (!flag) { return; }
      var value = prompt('Flag value');
      if (!value) { return; }
      if (value === 'true') {
        value = true;
      }
      if (value === 'false') {
        value = false;
      }
      window.socrata.featureFlags[flag] = value;
      printFeatureFlags();
    });

    _.each(window.socrata.sampleVifs, function(vif, vifName) {
      $('#preloaded-vifs').append(
        $('<button class="launch btn btn-primary">' + vifName + '</button>').
          data('vif', vif).
          addClass('vif')
      );
    });

    var onComplete = function(result) {
      vif = result.vif;
      filters = result.filters;
      vifOutput.innerHTML = JSON.stringify(vif, null, 2);
      filterOutput.innerHTML = JSON.stringify(filters, null, 2);

      $(embedCodeOutput).text(socrata.generateEmbedCode(vif, {
        height: 500,
        width: 400
      }));

      if (visualization) {
        visualization.destroy();
      }

      visualization = new VisualizationRenderer(result.vif, chart);

      authoringWorkflow.destroy();
      $('#edit, #save, #outputs').show();
    };

    var onCancel = function() {
      authoringWorkflow.destroy();
    };

    var onBack = function() {
      console.log('Back to somewhere!');
    };

    function launchAx(vifToLoad) {
      authoringWorkflow = new AuthoringWorkflow(container, {
        vif: vifToLoad,
        filters: filters,
        backButtonText: 'Back to Dataset Selection',
        enableFiltering: true,
        onComplete: onComplete,
        onCancel: onCancel,
        onBack: onBack,
        useLogger: true
      });
    }

    function addLocalVif(vif, vifName) {
      var localVifs = getLocalVifs();
      localVifs[vifName] = vif;
      setLocalVifs(localVifs);
      renderLocalVifButtons();
    }

    $('#custom-vif').click(function() {
      var customVif = prompt('Paste yer vif here.');
      try {
        if (customVif) {
          customVif = JSON.parse(customVif);
          addLocalVif(customVif, _.uniqueId('Custom VIF '));
        }
      } catch (e) {
        alert(e);
      }
    });

    $('#custom-dataset-uid').click(function() {
      var domain = prompt('Dataset domain', 'localhost');
      var customDatasetUid = prompt('Dataset UID');
      try {
        if (customDatasetUid) {
          var customVif = {
            format: {
              type: 'visualization_interchange_format',
              version: 2
            },
            series: [
              {
                dataSource: {
                  domain: domain,
                  datasetUid: customDatasetUid
                }
              }
            ]
          };

          var datasetName = customDatasetUid + ' on ' + domain;
          addLocalVif(customVif, datasetName);
        }
      } catch (e) {
        alert(e);
      }
    });

    $(document.body).on('click', 'button.vif', function(evt) {
      launchAx($(evt.target).data('vif'));
    });
    $(document.body).on('click', 'button.delete-vif', function(evt) {
      var vifName = $(evt.target).data('vifName');
      var localVifs = getLocalVifs();
      delete localVifs[vifName];
      setLocalVifs(localVifs);
      renderLocalVifButtons();
    });
    $('#edit').click(function() { launchAx(vif); });
    $('#save').click(function() {
      var vifName = prompt('Name your VIF:', _.uniqueId('Untitled '));
      addLocalVif(vif, vifName);
    });
    $('button.select').click(function(evt) {
      document.getSelection().removeAllRanges();
      var range = document.createRange();
      range.selectNode($(evt.target).nextAll('pre, code')[0]);
      window.getSelection().addRange(range);
    });
  </script>
<% end %>

<a href="/internal">Internal Panel Home</a><br>
<a href="/internal/demos/visualizations">Back to demo list</a><br>
<h3>My VIFs (local storage):</h3>
<div id="local-vifs"></div>
<p>
  <button id="custom-vif" class="btn">+ Paste a VIF</button>
  <button id="custom-dataset-uid" class="btn">+ Choose a dataset (any domain)</button>
</p>
<h3>Preloaded VIFs:</h3>
<div id="preloaded-vifs"></div>

<hr>
<button id="edit" class="btn btn-secondary">Edit</button>
<button id="save" class="btn btn-secondary">Save to My VIFs</button>
<div id="authoring-workflow"></div>

<section id='outputs'>
  <div id="chart"></div>

  <strong>Vif:</strong>
  <div class="text-output">
    <button class="select">Select</button>
    <pre id="vif-output"></pre>
  </div>

  <strong>Embed code:</strong>
  <div class="text-output">
    <button class="select">Select</button>
    <pre id="embed-code-output"></pre>
  </div>

  <strong>Filters:</strong>
  <div class="text-output">
    <pre id="filter-output"></pre>
  </div>
</section>

<strong>Feature Flags:</strong>
<button id="edit-feature-flags">Set</button>
<pre id="feature-flags"></pre>
