/*!
 * Socrata Styleguide v0.5.0
 * Copyright 2015-2016 Socrata, Inc.
 * Licensed under MIT
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.styleguide=e():t.styleguide=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return t[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports={Dropdown:n(1),FlannelFactory:n(2),FlyoutFactory:n(3),MenuFactory:n(4),ModalFactory:n(5),ToggleFactory:n(6),TourFactory:n(7)}},function(t,e){var n=t.exports=function(t){this.dd=t,this.orientation=t.getAttribute("data-orientation")||"bottom",this.dd.classList.add("dropdown-orientation-"+this.orientation),this.placeholder=this.dd.querySelector("span"),this.opts=Array.prototype.slice.call(this.dd.querySelectorAll(".dropdown-options > li")),this.val="",this.index=-1,this.initEvents()};n.prototype={initEvents:function(){var t=this;t.dd.addEventListener("click",function(e){return e.stopPropagation(),t.dd.classList.toggle("active"),!1}),t.opts.forEach(function(e){e.addEventListener("click",function(n){n.preventDefault();for(var o=e,i=0;null!==(o=o.previousElementSibling);)i++;return t.val=e.textContent,t.index=i,!1})})}}},function(t,e){t.exports=function(t){var e=10,n=Array.prototype.slice.apply(document.querySelectorAll("[data-flannel]"));n.forEach(function(t){var n=document.querySelector("#"+t.getAttribute("data-flannel")),o=Array.prototype.slice.apply(n.querySelectorAll("[data-flannel-dismiss]"));o.forEach(function(e){e.addEventListener("click",function(){n.classList.add("flannel-hidden"),t.classList.remove("active")})}),t.addEventListener("click",function(){n.classList.toggle("flannel-hidden");var o=t,i=0,r=0;do i+=o.offsetLeft,r+=o.offsetTop;while(null!==(o=o.offsetParent));i+=t.offsetWidth/2,r=r+t.offsetHeight+e,n.style.left=i+"px",n.style.top=r+"px"}),document.body.addEventListener("click",function(t){})})}},function(t,e){t.exports=function(t){var e=10,n=Array.prototype.slice.apply(document.querySelectorAll("[data-flyout]"));n.forEach(function(t){var n=document.querySelector("#"+t.getAttribute("data-flyout"));t.addEventListener("mouseover",function(){n.classList.remove("flyout-hidden");var o=t,i=0,r=0;do i+=o.offsetLeft,r+=o.offsetTop;while(null!==(o=o.offsetParent));i+=t.offsetWidth/2,r=r+t.offsetHeight+e,n.style.left=i+"px",n.style.top=r+"px"}),t.addEventListener("mouseout",function(){n.classList.add("flyout-hidden")})})}},function(t,e){t.exports=function(t){var e=Array.prototype.slice.call(t.querySelectorAll(".menu")),n=Array.prototype.slice.call(t.querySelectorAll("[data-menu-toggle]"));n.forEach(function(e){e.addEventListener("click",function(){var n=t.querySelector("#"+e.getAttribute("data-menu-toggle"));n.classList.toggle("active")})}),e.forEach(function(t){var e=Array.prototype.slice.call(t.querySelectorAll("[data-menu-dismiss]"));e.forEach(function(e){e.addEventListener("click",function(){t.classList.remove("active"),document.querySelector('[data-menu-toggle="'+t.id+'"]').classList.remove("active")})})})}},function(t,e){var n=t.exports=function(t){this.root=t,this.dismissals=Array.prototype.slice.apply(t.querySelectorAll("[data-modal-dismiss]")),this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-modal]")),this.attachEvents()};n.prototype={attachEvents:function(){this.dismissals.forEach(function(t){t.addEventListener("click",this.dismiss.bind(this))},this),this.openers.forEach(function(t){t.addEventListener("click",this.open.bind(this))},this),document.addEventListener("keyup",function(t){var e=t.which||t.keyCode;if(27===e){var n=Array.prototype.slice.call(document.querySelectorAll(".modal:not(.modal-hidden)"));n.forEach(function(t){t.classList.add("modal-hidden")})}})},open:function(t){var e=t.target.getAttribute("data-modal");e=this.root.querySelector("#"+e),e.classList.remove("modal-hidden")},dismiss:function(t){var e=t.target,n=e===t.currentTarget&&e.classList.contains("modal-overlay");do if(e.hasAttribute("data-modal-dismiss")&&!e.classList.contains("modal"))n=!0;else{if(e.classList.contains("modal")&&n)return e.classList.add("modal-hidden");if(e.classList.contains("modal"))return}while((e=e.parentNode)!==this.root)}}},function(t,e){var n=t.exports=function(t){var e=Array.prototype.slice.apply(t.querySelectorAll("[data-toggle]"));this.element=t,e.forEach(function(t){t.addEventListener("click",this.toggle.bind(this))},this)};n.prototype={toggle:function(t){var e=t.target;do if(e.hasAttribute("data-toggle"))return e.classList.toggle("active");while((e=e.parentNode)!==this.element)}}},function(t,e,n){var o=n(8),i=function(t,e){var n={bubbles:!1,cancelable:!1,detail:void 0};for(var o in e)e.hasOwnProperty(o)&&(n[o]=e[o]);var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),i},r=t.exports=function(t){if(this.root=t,this.tourElements=Array.prototype.slice.apply(t.querySelectorAll("[data-tour]")),this.tourElements.length>0){this.tours={},this.currentTourName=null,this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-tour-opener]"));var e=document.createElement("div");if(e.classList.add("tour-overlay","overlay-hidden"),this.tourOverlay=t.body.appendChild(e),this.initialize(),this.openers.length<this.tourElements.length){var n=this,o=n.openers.map(function(t){return t.getAttribute("data-tour-opener")});n.tourElements.forEach(function(t){var e=t.getAttribute("data-tour-name");o.includes(e)||n.openTour(e)})}}};r.prototype={initialize:function(){var t=this;t.tourElements.forEach(function(e){t.initializeTour(e)}),t.attachEvents()},initializeTour:function(t){var e=this,n=t.getAttribute("data-tour-name"),i=new o.Tour({defaults:{showCancelLink:!0,buttons:[{text:t.getAttribute("data-tour-skip"),classes:"btn-default",action:function(){e.closeTour(n)}},{text:t.getAttribute("data-tour-next"),classes:"btn-primary",action:function(){e.clickNext(n)}}]}});e.tours[n]={tour:i,name:n},e.addSteps(i,t)},addSteps:function(t,e){var n=this,o=Array.prototype.slice.apply(e.querySelectorAll("[data-tour-step]")),i=o.sort(function(t,e){var n=parseInt(t.getAttribute("data-step-number")),o=parseInt(e.getAttribute("data-step-number"));return n>o?1:o>n?-1:0});i.forEach(function(o,r){var s={title:o.getAttribute("data-title")||"",text:o.innerHTML},a=o.getAttribute("data-classes")||"",l=o.getAttribute("data-attach-to-element"),h=o.getAttribute("data-attach-to-position"),f={left:"0 25px",right:"0 -25px",top:"25px 0",bottom:"-25px 0"}[h];a&&(s.classes=a.split(" ")),l&&h&&f&&(s.attachTo={element:l,on:h},s.tetherOptions={offset:f}),i.length-1===r&&(s.buttons=[{text:e.getAttribute("data-tour-done"),classes:"btn-primary",action:t.complete}]),t.addStep(s),t.on("active",function(){n.tourOverlay.classList.remove("overlay-hidden")}),t.on("inactive",function(){n.tourOverlay.classList.add("overlay-hidden")})})},attachEvents:function(){var t=this;t.openers.forEach(function(e){e.addEventListener("click",t.openTour.bind(t,e.getAttribute("data-tour-opener")))},t),document.addEventListener("keyup",function(e){var n=e.which||e.keyCode;27===n&&t.closeTour(t.currentTourName)}),t.tourOverlay.addEventListener("click",function(){t.closeTour(t.currentTourName)})},openTour:function(t){var e=this.tours[t];this.currentTourName=e.name,e.tour.start(),this.tourOverlay.classList.remove("tour-overlay-hidden")},clickNext:function(t){var e=this.tours[t],n={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new i("next",{detail:n})),e.tour.next()},closeTour:function(t){var e=this.tours[t],n={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new i("cancel",{detail:n})),e.tour.cancel()}}},function(t,e,n){var o,i,r;/*! tether-shepherd 1.2.0 */
!function(s,a){i=[n(9)],o=a,r="function"==typeof o?o.apply(e,i):o,!(void 0!==r&&(t.exports=r))}(this,function(t){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function o(t){var e=document.createElement("div");return e.innerHTML=t,e.children[0]}function i(t,e){var n=void 0;return"undefined"!=typeof t.matches?n=t.matches:"undefined"!=typeof t.matchesSelector?n=t.matchesSelector:"undefined"!=typeof t.msMatchesSelector?n=t.msMatchesSelector:"undefined"!=typeof t.webkitMatchesSelector?n=t.webkitMatchesSelector:"undefined"!=typeof t.mozMatchesSelector?n=t.mozMatchesSelector:"undefined"!=typeof t.oMatchesSelector&&(n=t.oMatchesSelector),n.call(t,e)}function r(t,e){if(null===t||"undefined"==typeof t)return t;if("object"==typeof t)return t;var n=t.split(" "),o=n.length,i=e.length;o>i&&(n[0]=n.slice(0,o-i+1).join(" "),n.splice(1,i));for(var r={},s=0;i>s;++s){var a=e[s];r[a]=n[s]}return r}var s=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),a=function(t,e,n){for(var o=!0;o;){var i=t,r=e,s=n;a=h=l=void 0,o=!1,null===i&&(i=Function.prototype);var a=Object.getOwnPropertyDescriptor(i,r);if(void 0!==a){if("value"in a)return a.value;var l=a.get;if(void 0===l)return;return l.call(s)}var h=Object.getPrototypeOf(i);if(null===h)return;t=h,e=r,n=s,o=!0}},l=t.Utils,h=l.Evented,f=l.addClass,u=l.extend,d=l.hasClass,c=l.removeClass,p=l.uniqueId,g=new h,v={top:"bottom center",left:"middle right",right:"middle left",bottom:"top center",center:"middle center"},m=function(l){function h(t,n){return e(this,h),a(Object.getPrototypeOf(h.prototype),"constructor",this).call(this,t,n),this.tour=t,this.bindMethods(),this.setOptions(n),this}return n(h,l),s(h,[{key:"bindMethods",value:function(){var t=this,e=["_show","show","hide","isOpen","cancel","complete","scrollTo","destroy"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"setOptions",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t,this.destroy(),this.id=this.options.id||this.id||"step-"+p();var e=this.options.when;if(e)for(var n in e)if({}.hasOwnProperty.call(e,n)){var o=e[n];this.on(n,o,this)}this.options.buttons||(this.options.buttons=[{text:"Next",action:this.tour.next}])}},{key:"getTour",value:function(){return this.tour}},{key:"bindAdvance",value:function(){var t=this,e=r(this.options.advanceOn,["selector","event"]),n=e.event,o=e.selector,s=function(e){t.isOpen()&&("undefined"!=typeof o?i(e.target,o)&&t.tour.next():t.el&&e.target===t.el&&t.tour.next())};document.body.addEventListener(n,s),this.on("destroy",function(){return document.body.removeEventListener(n,s)})}},{key:"getAttachTo",value:function(){var t=r(this.options.attachTo,["element","on"])||{},e=t.element;if("string"==typeof e&&(t.element=document.querySelector(e),!t.element))throw new Error("The element for this Shepherd step was not found "+e);return t}},{key:"setupTether",value:function(){if("undefined"==typeof t)throw new Error("Using the attachment feature of Shepherd requires the Tether library");var e=this.getAttachTo(),n=v[e.on||"right"];"undefined"==typeof e.element&&(e.element="viewport",n="middle center");var o={classPrefix:"shepherd",element:this.el,constraints:[{to:"window",pin:!0,attachment:"together"}],target:e.element,offset:e.offset||"0 0",attachment:n};this.tether&&this.tether.destroy(),this.tether=new t(u(o,this.options.tetherOptions))}},{key:"show",value:function(){var t=this;if("undefined"!=typeof this.options.beforeShowPromise){var e=this.options.beforeShowPromise();if("undefined"!=typeof e)return e.then(function(){return t._show()})}this._show()}},{key:"_show",value:function(){var t=this;this.trigger("before-show"),this.el||this.render(),f(this.el,"shepherd-open"),document.body.setAttribute("data-shepherd-step",this.id),this.setupTether(),this.options.scrollTo&&setTimeout(function(){t.scrollTo()}),this.trigger("show")}},{key:"hide",value:function(){this.trigger("before-hide"),c(this.el,"shepherd-open"),document.body.removeAttribute("data-shepherd-step"),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("hide")}},{key:"isOpen",value:function(){return d(this.el,"shepherd-open")}},{key:"cancel",value:function(){this.tour.cancel(),this.trigger("cancel")}},{key:"complete",value:function(){this.tour.complete(),this.trigger("complete")}},{key:"scrollTo",value:function(){var t=this.getAttachTo(),e=t.element;"undefined"!=typeof this.options.scrollToHandler?this.options.scrollToHandler(e):"undefined"!=typeof e&&e.scrollIntoView()}},{key:"destroy",value:function(){"undefined"!=typeof this.el&&(document.body.removeChild(this.el),delete this.el),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("destroy")}},{key:"render",value:function(){var t=this;"undefined"!=typeof this.el&&this.destroy(),this.el=o("<div class='shepherd-step "+(this.options.classes||"")+"' data-id='"+this.id+"' "+(this.options.idAttribute?'id="'+this.options.idAttribute+'"':"")+"></div>");var e=document.createElement("div");e.className="shepherd-content",this.el.appendChild(e);var n=document.createElement("header");if(e.appendChild(n),"undefined"!=typeof this.options.title&&(n.innerHTML+="<h3 class='shepherd-title'>"+this.options.title+"</h3>",this.el.className+=" shepherd-has-title"),this.options.showCancelLink){var i=o("<a href class='shepherd-cancel-link'>✕</a>");n.appendChild(i),this.el.className+=" shepherd-has-cancel-link",this.bindCancelLink(i)}"undefined"!=typeof this.options.text&&!function(){var n=o("<div class='shepherd-text'></div>"),i=t.options.text;"function"==typeof i&&(i=i.call(t,n)),i instanceof HTMLElement?n.appendChild(i):("string"==typeof i&&(i=[i]),i.map(function(t){n.innerHTML+="<p>"+t+"</p>"})),e.appendChild(n)}();var r=document.createElement("footer");this.options.buttons&&!function(){var e=o("<ul class='shepherd-buttons'></ul>");t.options.buttons.map(function(n){var i=o("<li><a class='shepherd-button "+(n.classes||"")+"'>"+n.text+"</a>");e.appendChild(i),t.bindButtonEvents(n,i.querySelector("a"))}),r.appendChild(e)}(),e.appendChild(r),document.body.appendChild(this.el),this.setupTether(),this.options.advanceOn&&this.bindAdvance()}},{key:"bindCancelLink",value:function(t){var e=this;t.addEventListener("click",function(t){t.preventDefault(),e.cancel()})}},{key:"bindButtonEvents",value:function(t,e){var n=this;t.events=t.events||{},"undefined"!=typeof t.action&&(t.events.click=t.action);for(var o in t.events)if({}.hasOwnProperty.call(t.events,o)){var i=t.events[o];"string"==typeof i&&!function(){var t=i;i=function(){return n.tour.show(t)}}(),e.addEventListener(o,i)}this.on("destroy",function(){for(var n in t.events)if({}.hasOwnProperty.call(t.events,n)){var o=t.events[n];e.removeEventListener(n,o)}})}}]),h}(h),y=function(t){function o(){var t=this,n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];e(this,o),a(Object.getPrototypeOf(o.prototype),"constructor",this).call(this,n),this.bindMethods(),this.options=n,this.steps=this.options.steps||[];var i=["complete","cancel","hide","start","show","active","inactive"];return i.map(function(e){!function(e){t.on(e,function(n){n=n||{},n.tour=t,g.trigger(e,n)})}(e)}),this}return n(o,t),s(o,[{key:"bindMethods",value:function(){var t=this,e=["next","back","cancel","complete","hide"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"addStep",value:function(t,e){return"undefined"==typeof e&&(e=t),e instanceof m?e.tour=this:(("string"==typeof t||"number"==typeof t)&&(e.id=t.toString()),e=u({},this.options.defaults,e),e=new m(this,e)),this.steps.push(e),this}},{key:"getById",value:function(t){for(var e=0;e<this.steps.length;++e){var n=this.steps[e];if(n.id===t)return n}}},{key:"getCurrentStep",value:function(){return this.currentStep}},{key:"next",value:function(){var t=this.steps.indexOf(this.currentStep);t===this.steps.length-1?(this.hide(t),this.trigger("complete"),this.done()):this.show(t+1,!0)}},{key:"back",value:function(){var t=this.steps.indexOf(this.currentStep);this.show(t-1,!1)}},{key:"cancel",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("cancel"),this.done()}},{key:"complete",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("complete"),this.done()}},{key:"hide",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("hide"),this.done()}},{key:"done",value:function(){g.activeTour=null,c(document.body,"shepherd-active"),this.trigger("inactive",{tour:this})}},{key:"show",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];this.currentStep?this.currentStep.hide():(f(document.body,"shepherd-active"),this.trigger("active",{tour:this})),g.activeTour=this;var n=void 0;if(n="string"==typeof t?this.getById(t):this.steps[t])if("undefined"==typeof n.options.showOn||n.options.showOn())this.trigger("show",{step:n,previous:this.currentStep}),this.currentStep=n,n.show();else{var o=this.steps.indexOf(n),i=e?o+1:o-1;this.show(i,e)}}},{key:"start",value:function(){this.trigger("start"),this.currentStep=null,this.next()}}]),o}(h);return u(g,{Tour:y,Step:m,Evented:h}),g})},function(t,e,n){var o,i;/*! tether 1.2.0 */
!function(r,s){o=s,i="function"==typeof o?o.call(e,n,e,t):o,!(void 0!==i&&(t.exports=i))}(this,function(t,e,n){"use strict";function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t){var e=getComputedStyle(t)||{},n=e.position;if("fixed"===n)return t;for(var o=t;o=o.parentNode;){var i=void 0;try{i=getComputedStyle(o)}catch(r){}if("undefined"==typeof i||null===i)return o;var s=i,a=s.overflow,l=s.overflowX,h=s.overflowY;if(/(auto|scroll)/.test(a+h+l)&&("absolute"!==n||["relative","absolute","fixed"].indexOf(i.position)>=0))return o}return document.body}function r(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var n=e.documentElement,o={},i=t.getBoundingClientRect();for(var r in i)o[r]=i[r];var s=O(e);return o.top-=s.top,o.left-=s.left,"undefined"==typeof o.width&&(o.width=document.body.scrollWidth-o.left-o.right),"undefined"==typeof o.height&&(o.height=document.body.scrollHeight-o.top-o.bottom),o.top=o.top-n.clientTop,o.left=o.left-n.clientLeft,o.right=e.body.clientWidth-o.width-o.left,o.bottom=e.body.clientHeight-o.height-o.top,o}function s(t){return t.offsetParent||document.documentElement}function a(){var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");l(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var n=t.offsetWidth;e.style.overflow="scroll";var o=t.offsetWidth;n===o&&(o=e.clientWidth),document.body.removeChild(e);var i=n-o;return{width:i,height:i}}function l(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var n in e)({}).hasOwnProperty.call(e,n)&&(t[n]=e[n])}),t}function h(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var n=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),o=d(t).replace(n," ");c(t,o)}}function f(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{h(t,e);var n=d(t)+(" "+e);c(t,n)}}function u(t,e){if("undefined"!=typeof t.classList)return t.classList.contains(e);var n=d(t);return new RegExp("(^| )"+e+"( |$)","gi").test(n)}function d(t){return t.className instanceof SVGAnimatedString?t.className.baseVal:t.className}function c(t,e){t.setAttribute("class",e)}function p(t,e,n){n.forEach(function(n){-1===e.indexOf(n)&&u(t,n)&&h(t,n)}),e.forEach(function(e){u(t,e)||f(t,e)})}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function g(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+n>=e&&e>=t-n}function v(){return"undefined"!=typeof performance&&"undefined"!=typeof performance.now?performance.now():+new Date}function m(){for(var t={top:0,left:0},e=arguments.length,n=Array(e),o=0;e>o;o++)n[o]=arguments[o];return n.forEach(function(e){var n=e.top,o=e.left;"string"==typeof n&&(n=parseFloat(n,10)),"string"==typeof o&&(o=parseFloat(o,10)),t.top+=n,t.left+=o}),t}function y(t,e){return"string"==typeof t.left&&-1!==t.left.indexOf("%")&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&-1!==t.top.indexOf("%")&&(t.top=parseFloat(t.top,10)/100*e.height),t}function b(t,e){return"scrollParent"===e?e=t.scrollParent:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),"undefined"!=typeof e.nodeType&&!function(){var t=r(e),n=t,o=getComputedStyle(e);e=[n.left,n.top,t.width+n.left,t.height+n.top],I.forEach(function(t,n){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[n]+=parseFloat(o["border"+t+"Width"]):e[n]-=parseFloat(o["border"+t+"Width"])})}(),e}var w=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),E=void 0;"undefined"==typeof E&&(E={modules:[]});var C=function(){var t=0;return function(){return++t}}(),x={},O=function(t){var e=t._tetherZeroElement;"undefined"==typeof e&&(e=t.createElement("div"),e.setAttribute("data-tether-id",C()),l(e.style,{top:0,left:0,position:"absolute"}),t.body.appendChild(e),t._tetherZeroElement=e);var n=e.getAttribute("data-tether-id");if("undefined"==typeof x[n]){x[n]={};var o=e.getBoundingClientRect();for(var i in o)x[n][i]=o[i];S(function(){delete x[n]})}return x[n]},A=[],S=function(t){A.push(t)},k=function(){for(var t=void 0;t=A.pop();)t()},T=function(){function t(){o(this,t)}return w(t,[{key:"on",value:function(t,e,n){var o=arguments.length<=3||void 0===arguments[3]?!1:arguments[3];"undefined"==typeof this.bindings&&(this.bindings={}),"undefined"==typeof this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:o})}},{key:"once",value:function(t,e,n){this.on(t,e,n,!0)}},{key:"off",value:function(t,e){if("undefined"==typeof this.bindings||"undefined"==typeof this.bindings[t])if("undefined"==typeof e)delete this.bindings[t];else for(var n=0;n<this.bindings[t].length;)this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):++n}},{key:"trigger",value:function(t){if("undefined"!=typeof this.bindings&&this.bindings[t]){for(var e=0,n=arguments.length,o=Array(n>1?n-1:0),i=1;n>i;i++)o[i-1]=arguments[i];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],s=r.handler,a=r.ctx,l=r.once,h=a;"undefined"==typeof h&&(h=this),s.apply(h,o),l?this.bindings[t].splice(e,1):++e}}}}]),t}();E.Utils={getScrollParent:i,getBounds:r,getOffsetParent:s,extend:l,addClass:f,removeClass:h,hasClass:u,updateClasses:p,defer:S,flush:k,uniqueId:C,Evented:T,getScrollBarSize:a};var L=function(){function t(t,e){var n=[],o=!0,i=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(l){i=!0,r=l}finally{try{!o&&a["return"]&&a["return"]()}finally{if(i)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),w=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();if("undefined"==typeof E)throw new Error("You must include the utils.js file before tether.js");var M=E.Utils,i=M.getScrollParent,r=M.getBounds,s=M.getOffsetParent,l=M.extend,f=M.addClass,h=M.removeClass,p=M.updateClasses,S=M.defer,k=M.flush,a=M.getScrollBarSize,P=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","webkitTransform","OTransform","MozTransform","msTransform"],n=0;n<e.length;++n){var o=e[n];if(void 0!==t.style[o])return o}}(),q=[],_=function(){q.forEach(function(t){t.position(!1)}),k()};!function(){var t=null,e=null,n=null,o=function i(){return"undefined"!=typeof e&&e>16?(e=Math.min(e-16,250),void(n=setTimeout(i,250))):void("undefined"!=typeof t&&v()-t<10||("undefined"!=typeof n&&(clearTimeout(n),n=null),t=v(),_(),e=v()-t))};"undefined"!=typeof window&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,o)})}();var W={center:"center",left:"right",right:"left"},z={middle:"middle",top:"bottom",bottom:"top"},F={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},N=function(t,e){var n=t.left,o=t.top;return"auto"===n&&(n=W[e.left]),"auto"===o&&(o=z[e.top]),{left:n,top:o}},j=function(t){var e=t.left,n=t.top;return"undefined"!=typeof F[t.left]&&(e=F[t.left]),"undefined"!=typeof F[t.top]&&(n=F[t.top]),{left:e,top:n}},B=function(t){var e=t.split(" "),n=L(e,2),o=n[0],i=n[1];return{top:o,left:i}},H=B,Y=function(){function t(e){var n=this;o(this,t),this.position=this.position.bind(this),q.push(this),this.history=[],this.setOptions(e,!1),E.modules.forEach(function(t){"undefined"!=typeof t.initialize&&t.initialize.call(n)}),this.position()}return w(t,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return"undefined"!=typeof e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,n=arguments.length<=1||void 0===arguments[1]?!0:arguments[1],o={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=l(o,t);var r=this.options,s=r.element,a=r.target,h=r.targetModifier;if(this.element=s,this.target=a,this.targetModifier=h,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if("undefined"==typeof e[t])throw new Error("Tether Error: Both element and target must be defined");"undefined"!=typeof e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),f(this.element,this.getClass("element")),this.options.addTargetClasses!==!1&&f(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=H(this.options.targetAttachment),this.attachment=H(this.options.attachment),this.offset=B(this.options.offset),this.targetOffset=B(this.options.targetOffset),"undefined"!=typeof this.scrollParent&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParent=this.target:this.scrollParent=i(this.target),this.options.enabled!==!1&&this.enable(n)}},{key:"getTargetBounds",value:function(){if("undefined"==typeof this.targetModifier)return r(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=r(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,n=this.target;n===document.body?(n=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=r(n);var o=getComputedStyle(n),i=n.scrollWidth>n.clientWidth||[o.overflow,o.overflowX].indexOf("scroll")>=0||this.target!==document.body,s=0;i&&(s=15);var a=t.height-parseFloat(o.borderTopWidth)-parseFloat(o.borderBottomWidth)-s,e={width:15,height:.975*a*(a/n.scrollHeight),left:t.left+t.width-parseFloat(o.borderLeftWidth)-15},l=0;408>a&&this.target===document.body&&(l=-11e-5*Math.pow(a,2)-.00727*a+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var h=this.target.scrollTop/(n.scrollHeight-a);return e.top=h*(a-e.height-l)+t.top+parseFloat(o.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return"undefined"==typeof this._cache&&(this._cache={}),"undefined"==typeof this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];this.options.addTargetClasses!==!1&&f(this.target,this.getClass("enabled")),f(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParent!==document&&this.scrollParent.addEventListener("scroll",this.position),t&&this.position()}},{key:"disable",value:function(){h(this.target,this.getClass("enabled")),h(this.element,this.getClass("enabled")),this.enabled=!1,"undefined"!=typeof this.scrollParent&&this.scrollParent.removeEventListener("scroll",this.position)}},{key:"destroy",value:function(){var t=this;this.disable(),q.forEach(function(e,n){return e===t?void q.splice(n,1):void 0})}},{key:"updateAttachClasses",value:function(t,e){var n=this;t=t||this.attachment,e=e||this.targetAttachment;var o=["left","top","bottom","right","middle","center"];"undefined"!=typeof this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),"undefined"==typeof this._addAttachClasses&&(this._addAttachClasses=[]);var i=this._addAttachClasses;t.top&&i.push(this.getClass("element-attached")+"-"+t.top),t.left&&i.push(this.getClass("element-attached")+"-"+t.left),e.top&&i.push(this.getClass("target-attached")+"-"+e.top),e.left&&i.push(this.getClass("target-attached")+"-"+e.left);var r=[];o.forEach(function(t){r.push(n.getClass("element-attached")+"-"+t),r.push(n.getClass("target-attached")+"-"+t)}),S(function(){"undefined"!=typeof n._addAttachClasses&&(p(n.element,n._addAttachClasses,r),n.options.addTargetClasses!==!1&&p(n.target,n._addAttachClasses,r),delete n._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];if(this.enabled){this.clearCache();var n=N(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,n);var o=this.cache("element-bounds",function(){return r(t.element)}),i=o.width,l=o.height;if(0===i&&0===l&&"undefined"!=typeof this.lastSize){var h=this.lastSize;i=h.width,l=h.height}else this.lastSize={width:i,height:l};var f=this.cache("target-bounds",function(){return t.getTargetBounds()}),u=f,d=y(j(this.attachment),{width:i,height:l}),c=y(j(n),u),p=y(this.offset,{width:i,height:l}),g=y(this.targetOffset,u);d=m(d,p),c=m(c,g);for(var v=f.left+c.left-d.left,b=f.top+c.top-d.top,w=0;w<E.modules.length;++w){var C=E.modules[w],x=C.position.call(this,{left:v,top:b,targetAttachment:n,targetPos:f,elementPos:o,offset:d,targetOffset:c,manualOffset:p,manualTargetOffset:g,scrollbarSize:A,attachment:this.attachment});if(x===!1)return!1;"undefined"!=typeof x&&"object"==typeof x&&(b=x.top,v=x.left)}var O={page:{top:b,left:v},viewport:{top:b-pageYOffset,bottom:pageYOffset-b-l+innerHeight,left:v-pageXOffset,right:pageXOffset-v-i+innerWidth}},A=void 0;return document.body.scrollWidth>window.innerWidth&&(A=this.cache("scrollbar-size",a),O.viewport.bottom-=A.height),document.body.scrollHeight>window.innerHeight&&(A=this.cache("scrollbar-size",a),O.viewport.right-=A.width),(-1===["","static"].indexOf(document.body.style.position)||-1===["","static"].indexOf(document.body.parentElement.style.position))&&(O.page.bottom=document.body.scrollHeight-b-l,O.page.right=document.body.scrollWidth-v-i),"undefined"!=typeof this.options.optimizations&&this.options.optimizations.moveElement!==!1&&"undefined"==typeof this.targetModifier&&!function(){var e=t.cache("target-offsetparent",function(){return s(t.target)}),n=t.cache("target-offsetparent-bounds",function(){return r(e)}),o=getComputedStyle(e),i=n,a={};if(["Top","Left","Bottom","Right"].forEach(function(t){a[t.toLowerCase()]=parseFloat(o["border"+t+"Width"])}),n.right=document.body.scrollWidth-n.left-i.width+a.right,n.bottom=document.body.scrollHeight-n.top-i.height+a.bottom,O.page.top>=n.top+a.top&&O.page.bottom>=n.bottom&&O.page.left>=n.left+a.left&&O.page.right>=n.right){var l=e.scrollTop,h=e.scrollLeft;O.offset={top:O.page.top-n.top+l-a.top,left:O.page.left-n.left+h-a.left}}}(),this.move(O),this.history.unshift(O),this.history.length>3&&this.history.pop(),e&&k(),!0}}},{key:"move",value:function(t){var e=this;if("undefined"!=typeof this.element.parentNode){var n={};for(var o in t){n[o]={};for(var i in t[o]){for(var r=!1,a=0;a<this.history.length;++a){var h=this.history[a];if("undefined"!=typeof h[o]&&!g(h[o][i],t[o][i])){r=!0;break}}r||(n[o][i]=!0)}}var f={top:"",left:"",right:"",bottom:""},u=function(t,n){var o="undefined"!=typeof e.options.optimizations,i=o?e.options.optimizations.gpu:null;if(i!==!1){var r=void 0,s=void 0;t.top?(f.top=0,r=n.top):(f.bottom=0,r=-n.bottom),t.left?(f.left=0,s=n.left):(f.right=0,s=-n.right),f[P]="translateX("+Math.round(s)+"px) translateY("+Math.round(r)+"px)","msTransform"!==P&&(f[P]+=" translateZ(0)")}else t.top?f.top=n.top+"px":f.bottom=n.bottom+"px",t.left?f.left=n.left+"px":f.right=n.right+"px"},d=!1;if((n.page.top||n.page.bottom)&&(n.page.left||n.page.right)?(f.position="absolute",u(n.page,t.page)):(n.viewport.top||n.viewport.bottom)&&(n.viewport.left||n.viewport.right)?(f.position="fixed",u(n.viewport,t.viewport)):"undefined"!=typeof n.offset&&n.offset.top&&n.offset.left?!function(){f.position="absolute";var o=e.cache("target-offsetparent",function(){return s(e.target)});s(e.element)!==o&&S(function(){e.element.parentNode.removeChild(e.element),o.appendChild(e.element)}),u(n.offset,t.offset),d=!0}():(f.position="absolute",u({top:!0,left:!0},t.page)),!d){for(var c=!0,p=this.element.parentNode;p&&"BODY"!==p.tagName;){if("static"!==getComputedStyle(p).position){c=!1;break}p=p.parentNode}c||(this.element.parentNode.removeChild(this.element),document.body.appendChild(this.element))}var v={},m=!1;for(var i in f){var y=f[i],b=this.element.style[i];""!==b&&""!==y&&["top","left","bottom","right"].indexOf(i)>=0&&(b=parseFloat(b),y=parseFloat(y)),b!==y&&(m=!0,v[i]=y)}m&&S(function(){l(e.element.style,v)})}}}]),t}();Y.modules=[],E.position=_;var X=l(Y,E),L=function(){function t(t,e){var n=[],o=!0,i=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(l){i=!0,r=l}finally{try{!o&&a["return"]&&a["return"]()}finally{if(i)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),M=E.Utils,r=M.getBounds,l=M.extend,p=M.updateClasses,S=M.defer,I=["left","top","right","bottom"];E.modules.push({position:function(t){var e=this,n=t.top,o=t.left,i=t.targetAttachment;if(!this.options.constraints)return!0;var s=this.cache("element-bounds",function(){return r(e.element)}),a=s.height,h=s.width;if(0===h&&0===a&&"undefined"!=typeof this.lastSize){var f=this.lastSize;h=f.width,a=f.height}var u=this.cache("target-bounds",function(){return e.getTargetBounds()}),d=u.height,c=u.width,g=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,n=t.pinnedClass;e&&g.push(e),n&&g.push(n)}),g.forEach(function(t){["left","top","right","bottom"].forEach(function(e){g.push(t+"-"+e)})});var v=[],m=l({},i),y=l({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,s=t.attachment,l=t.pin;"undefined"==typeof s&&(s="");var f=void 0,u=void 0;if(s.indexOf(" ")>=0){var p=s.split(" "),g=L(p,2);u=g[0],f=g[1]}else f=u=s;var w=b(e,r);("target"===u||"both"===u)&&(n<w[1]&&"top"===m.top&&(n+=d,m.top="bottom"),n+a>w[3]&&"bottom"===m.top&&(n-=d,m.top="top")),"together"===u&&(n<w[1]&&"top"===m.top&&("bottom"===y.top?(n+=d,m.top="bottom",n+=a,y.top="top"):"top"===y.top&&(n+=d,m.top="bottom",n-=a,y.top="bottom")),n+a>w[3]&&"bottom"===m.top&&("top"===y.top?(n-=d,m.top="top",n-=a,y.top="bottom"):"bottom"===y.top&&(n-=d,m.top="top",n+=a,y.top="top")),"middle"===m.top&&(n+a>w[3]&&"top"===y.top?(n-=a,y.top="bottom"):n<w[1]&&"bottom"===y.top&&(n+=a,y.top="top"))),("target"===f||"both"===f)&&(o<w[0]&&"left"===m.left&&(o+=c,m.left="right"),o+h>w[2]&&"right"===m.left&&(o-=c,m.left="left")),"together"===f&&(o<w[0]&&"left"===m.left?"right"===y.left?(o+=c,m.left="right",o+=h,y.left="left"):"left"===y.left&&(o+=c,m.left="right",o-=h,y.left="right"):o+h>w[2]&&"right"===m.left?"left"===y.left?(o-=c,m.left="left",o-=h,y.left="right"):"right"===y.left&&(o-=c,m.left="left",o+=h,y.left="left"):"center"===m.left&&(o+h>w[2]&&"left"===y.left?(o-=h,y.left="right"):o<w[0]&&"right"===y.left&&(o+=h,y.left="left"))),("element"===u||"both"===u)&&(n<w[1]&&"bottom"===y.top&&(n+=a,y.top="top"),n+a>w[3]&&"top"===y.top&&(n-=a,y.top="bottom")),("element"===f||"both"===f)&&(o<w[0]&&("right"===y.left?(o+=h,y.left="left"):"center"===y.left&&(o+=h/2,y.left="left")),o+h>w[2]&&("left"===y.left?(o-=h,y.left="right"):"center"===y.left&&(o-=h/2,y.left="right"))),"string"==typeof l?l=l.split(",").map(function(t){return t.trim()}):l===!0&&(l=["top","left","right","bottom"]),l=l||[];var E=[],C=[];n<w[1]&&(l.indexOf("top")>=0?(n=w[1],E.push("top")):C.push("top")),n+a>w[3]&&(l.indexOf("bottom")>=0?(n=w[3]-a,E.push("bottom")):C.push("bottom")),o<w[0]&&(l.indexOf("left")>=0?(o=w[0],E.push("left")):C.push("left")),o+h>w[2]&&(l.indexOf("right")>=0?(o=w[2]-h,E.push("right")):C.push("right")),E.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),v.push(t),E.forEach(function(e){v.push(t+"-"+e)})}(),C.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),v.push(t),C.forEach(function(e){v.push(t+"-"+e)})}(),(E.indexOf("left")>=0||E.indexOf("right")>=0)&&(y.left=m.left=!1),(E.indexOf("top")>=0||E.indexOf("bottom")>=0)&&(y.top=m.top=!1),(m.top!==i.top||m.left!==i.left||y.top!==e.attachment.top||y.left!==e.attachment.left)&&e.updateAttachClasses(y,m)}),S(function(){e.options.addTargetClasses!==!1&&p(e.target,v,g),p(e.element,v,g)}),{top:n,left:o}}});var M=E.Utils,r=M.getBounds,p=M.updateClasses,S=M.defer;E.modules.push({position:function(t){var e=this,n=t.top,o=t.left,i=this.cache("element-bounds",function(){return r(e.element)}),s=i.height,a=i.width,l=this.getTargetBounds(),h=n+s,f=o+a,u=[];n<=l.bottom&&h>=l.top&&["left","right"].forEach(function(t){var e=l[t];(e===o||e===f)&&u.push(t)}),o<=l.right&&f>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];(e===n||e===h)&&u.push(t)});var d=[],c=[],g=["left","top","right","bottom"];return d.push(this.getClass("abutted")),g.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),u.length&&c.push(this.getClass("abutted")),u.forEach(function(t){c.push(e.getClass("abutted")+"-"+t)}),S(function(){e.options.addTargetClasses!==!1&&p(e.target,c,d),p(e.element,c,d)}),!0}});var L=function(){function t(t,e){var n=[],o=!0,i=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(l){i=!0,r=l}finally{try{!o&&a["return"]&&a["return"]()}finally{if(i)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return E.modules.push({position:function(t){var e=t.top,n=t.left;if(this.options.shift){var o=this.options.shift;"function"==typeof this.options.shift&&(o=this.options.shift.call(this,{top:e,left:n}));var i=void 0,r=void 0;if("string"==typeof o){o=o.split(" "),o[1]=o[1]||o[0];var s=o,a=L(s,2);i=a[0],r=a[1],i=parseFloat(i,10),r=parseFloat(r,10)}else i=o.top,r=o.left;return e+=i,n+=r,{top:e,left:n}}}}),X})}])});
//# sourceMappingURL=data:application/json;base64,
