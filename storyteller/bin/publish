#!/bin/bash

set -ex

# Log the author name and email of the last commit
echo "Change committed by: $(git log HEAD -1 --pretty=format:"%an (%ae)")"
SERVICE_SHA="$(git rev-parse HEAD)"

# Testing, duh.
echo "RUN_TESTS=${RUN_TESTS}"
if [ "${RUN_TESTS}" = "true" ]; then
  # Consider refactoring bin/test_on_jenkins
  # if storyteller builds on Jenkins are ever
  # built concurrently.
  bin/test
else
  bin/install_deps # bin/test install deps for us already.
  echo "Skipping tests because RUN_TESTS is false"
fi

SERVICE_NAME='storyteller'
SERVICE_VERSION=`bundle exec semver format "%M.%m.%p"`

# We need to run the build from the root of the platform-ui repo.
# Otherwise, docker won't be able to read files in ../common/
# (docker builds cannot read files above the current directory).

cd "${WORKSPACE}"

## Pull platform-ui/common locales
pushd common/i18n
  mkdir -p log
  touch log/localeapp.yml
  LOCALEAPP_API_KEY=$COMMON_LOCALEAPP_API_KEY localeapp pull
popd

rm -f marathon.properties
rm -f dockerize.properties
touch dockerize.properties

echo "DOCKER_PATH=." >> dockerize.properties # Relative to the root of the repo!
echo "SERVICE=${SERVICE_NAME}" >> dockerize.properties
echo "SERVICE_BUILD_NUMBER=${BUILD_NUMBER}" >> dockerize.properties
echo "CURRENT_REVISION_FILE_NAME=REVISION" >> dockerize.properties
echo "SERVICE_VERSION=${SERVICE_VERSION}" >> dockerize.properties
echo "DOCKER_BUILD_ARGS=\"-f storyteller/Dockerfile --build-arg ARTIFACTORY_USER=\${ARTIFACTORY_USER} --build-arg ARTIFACTORY_PASSWORD=\${ARTIFACTORY_PASSWORD}\"" >> dockerize.properties

# Write REVISION file
echo ${SERVICE_SHA} > "$WORKSPACE/storyteller/REVISION"

# write current Cheetah revision to a file

# don't include $WORKSPACE in path since we are already in the workspace
# and whitespace in the workspace name causes an "ambiguous redirect" error when we try and write to it
cheetah_revision_file="storyteller/CHEETAH_REVISION"

# get current SHA from HEAD:master
echo 'Getting latest Cheetah revision from api.github...'
current_cheetah_revision=$(curl -sH "Authorization: token $GITHUB_API_TOKEN" \
  https://api.github.com/repos/socrata/cheetah/branches/master | jq -r '.commit.sha')

# will return "null" if $GITHUB_API_TOKEN not set/incorrect OR in the rare case of object not found
# assure file is removed in this case and downstream logic will set cheetahRevision to ''
if [ $current_cheetah_revision == "null" ]; then
  echo 'WARNING >> Call to api.github failed. Make sure $GITHUB_API_TOKEN is set. cheetahRevision will get set to empty string'
  rm -f $cheetah_revision_file
else
  echo "Recording current Cheetah revision: $current_cheetah_revision to $cheetah_revision_file"
  echo $current_cheetah_revision > $cheetah_revision_file
fi

echo "AUTO_DEPLOY=${AUTO_DEPLOY}"
if [ "${AUTO_DEPLOY}" = "true" ]; then
  ./ops-tools/jenkins/dockerize/dockerize-marathon dockerize.properties
else
  ./ops-tools/jenkins/dockerize/dockerize dockerize.properties
fi
