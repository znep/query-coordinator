<% content_for :head do %>
<%= rendered_stylesheet_tag 'internal' %>
<title>Domain <%= @domain.nil? ? '' : @domain.name %> | Internal Panel |
  <%= CurrentDomain.strings.site_title %></title>
<% end %>

<%= render :partial => 'left_nav' %>


<div class="contentBox withLeftNavigation">
  <div class='content'>

    <% if @domain.nil? %>
      <p>Domain could not be found</p>

    <% else %>
      <%= render :partial => 'production_warning' %>
      <h1><%= @domain.name %> (<%= @domain.cname %>)</h1>

      <p>This is a
      <a href="/internal/tiers/<%= @domain.accountTier.name %>">
        <em><%= @domain.accountTier.name %></em>
      </a>
      domain.</p>
      <p>Domain ID: <%= @domain.id %></p>

      <h2>Domain/Aliases:</h2>
      <%= form_tag '/internal/orgs/' + @domain.organizationId.to_s +
        '/domains/' + @domain.cname + '/aliases' do %>
        <div class='line'>
          <label>Primary CName</label>
          <input type='text' name='new_cname' value="<%= @domain.cname %>" />
        </div>
        <div class='line'>
          <label>Aliases</label>
          <input type='text' name='aliases' value="<%= @domain.aliases %>"
                 title="separated by comma"
            />
        </div>
        <input type='submit' value='Update' />
      <% end %>

      <h2>Configurations</h2>
      <ul>
        <%- @configs.each do |conf|
          case conf.type
          when 'feature_flags'
        -%>
        <li><a href="/internal/orgs/<%= @domain.organizationId %>/domains/<%= @domain.cname %>/feature_flags">Feature Flags</a></li>
        <%-
          else
        -%>
        <li<%== ' class="isDefault"' if conf.default %>>
        <a href='<%= show_config_path(org_id: @domain.organizationId,
                                      domain_id: @domain.cname,
                                      config_id: conf.id) %>'>
          (<%= conf.type %>) <%= conf.name %>
        </a>
        </li>
          <%- end -%>
        <%- end -%>
      </ul>

      <h2>Add Configuration:</h2>
      <%= form_tag '/internal/orgs/' + @domain.organizationId.to_s +
        '/domains/' + @domain.cname + '/site_config', :class => 'addConfigForm' do %>
        <div class='line'>
          <label>Name</label>
          <input type='text' name='config[name]' />
        </div>
        <div class='line'>
          <label>Type</label>
          <input class="add_config_type" type='text' name='config[type]' value='' />
        </div>
        <input type='submit' value='Create' />
      <% end %>

      <h2>Features:</h2>
      <%= form_tag '/internal/orgs/' + @domain.organizationId.to_s +
        '/domains/' + @domain.cname + '/feature' do %>
        <%- @domain.features.each do |feature, enabled| -%>
        <div class='line'>
          <label><%= feature %></label>
          <%= hidden_field_tag 'features[name[' + feature + ']]',
            feature %>
          <%= check_box_tag 'features[enabled[' + feature + ']]',
            'enabled', enabled %>
        </div>
        <%- end -%>
        <input type="submit" value="Update"/>
      <% end %>

      <h2>Add Feature</h2>
      <%= form_tag '/internal/orgs/' + @domain.organizationId.to_s +
        '/domains/' + @domain.cname + '/feature' do %>
        <div class='line'>
          <input type="text" name="new-feature_name" />
          <%= check_box_tag 'new-feature_enabled', 'enabled', true %>
        </div>
        <input type="submit" value="Add"/>
      <% end %>

      <h2>Account Modules:</h2>
      <% if @domain.accountModules.nil? || @domain.accountModules.size <= 0 %>
        <p>No account modules configured.</p>
      <% else %>
        <ul>
          <% @domain.accountModules.each do |mod| %>
            <li><%= mod.name %> (<%= mod.description %>)</li>
          <% end %>
        </ul>
      <% end %>

      <h2>Add an account module</h2>
      <%= form_tag '/internal/orgs/' + @domain.organizationId.to_s +
        '/domains/' + @domain.cname + '/account_modules' do %>
        <div class='line'>
          <label>Module:</label>
          <select name="module[name]">
            <% @modules.each do |mod| %>
            <option value="<%= mod.name %>"><%= mod.name %></option>
            <% end %>
          </select>
        </div>
        <input type="submit" value="Add"/>
      <% end %>

      <%= render :partial => 'bulk_feature_flag_update', :locals => {
        flags: @bulk_updates[:enable_nbe],
        enable_text: 'Enable NBE-only',
        disable_text: 'Reset from NBE-only',
        feature_description: 'This will bulk-change feature flags to turn on and off NBE-only, effecting imports, redirects, and enabled features. Be careful.'
      } %>
    <% end %>

  </div>
</div>

<% content_for :js_footer do %>
  <script type="text/javascript">
    $(function() {
      var existingConfigTypes = <%== @configs.inject([]) { |memo, conf| memo << conf.type }.uniq.to_json %>;
      var $form = $('.addConfigForm');
      $form.submit(function() {
        var configType = $form.find('input[name="config[type]"]').val();
        if (_.include(existingConfigTypes, configType)) {
          return confirm('Hey, a config with type "{0}" already exists. Are you sure you want to add another one?'.format(configType));
        } else {
          return true;
        }
      });

      var configTypeRenderFunction = function(dataItem, topMatch, config) {
        var toRender = [];
        toRender.push(
          $.tag2({ _: 'p', className: 'title', contents: dataItem[config.nameField] }));
        _.each(_.without(_.keys(dataItem), 'name'), function(key) {
          var value = dataItem[key];
          // Autolink because that seems obvious.
          // There's more refined autolinking theoretically possible, but it's more
          // effort to figure out than it's worth.
          if (/^http/.test(value)) {
            value = {
              _: 'a',
              target: '_blank',
              // Nuke all the html tags that awesomecomplete adds when matching.
              href: $('<div>' + value + '</div>').text(),
              contents: value
            };
          }
          toRender.push(
            $.tag2({ _: 'p', className: 'matchRow', contents: [
              { _: 'span', className: 'matchedField', contents: key },
              value]
            }));
        });
        return _.pluck(toRender, '0.outerHTML').join('');
      };

      $('.add_config_type').focus(_.once(function() {
        $(this).awesomecomplete({
          highlightMatches: true,
          ignoreCase: true,
          renderFunction: configTypeRenderFunction,
          staticData: <%== @known_config_types.to_json %>,
          suggestionListClass: 'autocomplete config_type_autocomplete'
        });
      }));
    });
  </script>
<% end %>
