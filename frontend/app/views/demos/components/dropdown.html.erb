<% content_for :head do %>
  <title>Example Usage: Dropdown</title>
  <meta http-equiv="content-type" content="text/html; charset=UTF8">
  <%= rendered_stylesheet_tag 'component_example_pages' %>
<% end %>

<section class="styleguide-section" id="color-picker">
  <p>
    <a class="btn btn-default" href='/internal/demos/components'>
      <span class="socrata-icon-arrow-left"></span>
      Components
    </a>
  </p>
  <h2 class="styleguide-header">Dropdown</h2>
  <div class="styleguide-example">
    <div id="dropdown-container"></div>
  </div>
  <div class="styleguide-code-example" id="styleguide-code-example-1"></div>

  <h2 class="styleguide-header">Dropdown with icons</h2>
  <div class="styleguide-example">
    <div id="icon-dropdown-container"></div>
  </div>
  <div class="styleguide-code-example" id="styleguide-code-example-2"></div>

  <h2 class="styleguide-header">Dropdown with custom renderer &amp; placeholder</h2>
  <div class="styleguide-example">
    <div id="custom-dropdown-container"></div>
  </div>
  <div class="styleguide-code-example" id="styleguide-code-example-3"></div>

  <h2 class="styleguide-header">Dropdown below the handle</h2>
  <div class="styleguide-example">
    <div id="dropdown-below-handle-container"></div>
  </div>
  <div class="styleguide-code-example" id="styleguide-code-example-4"></div>
</section>

<% content_for :scripts do %>
  <%= render_demos_javascript_environment %>
  <%= include_webpack_bundle 'shared/componentExamplePagesMain' %>

  <script type="text/javascript" id="example-1">
    $(() => {
      const props = {
        onSelection: (option) => {
          console.log('option selected:', option.title, option.value);
        },
        options: [
          { title: "Floating Frog's Feet", value: 'potion-one', group: 'Potions' },
          { title: 'Skittering Spider Silk', value: 'potion-two', group: 'Potions' },
          { title: 'Blue Barbed Berries', value: 'potion-three', group: 'Potions' },
          { title: 'Traditionally Truffled Tapioca', value: 'potion-four', group: 'Edibles' },
          { title: 'Pandemonious Pear Paste', value: 'potion-five', group: 'Edibles' },
        ]
      };

      ReactDOM.render(
        React.createElement(components.Dropdown, props),
        document.getElementById('dropdown-container')
      );
    });
  </script>

  <script type="text/javascript" id="example-2">
    $(() => {
      const facebookIcon = React.createElement(components.SocrataIcon, { name: 'facebook' });
      const twitterIcon = React.createElement(components.SocrataIcon, { name: 'twitter' });
      const datasetIcon = React.createElement(components.SocrataIcon, { name: 'dataset' });

      const props = {
        displayTrueWidthOptions: true,
        onSelection: (option) => {
          const { title, value } = option;
          console.log(`option selected: ${title}, ${value}`);
        },
        placeholder: () => React.createElement('div', {key: 0}, [
          React.createElement(components.SocrataIcon, {key: 1, name: 'featured'}),
          React.createElement('span', {key: 2}, ' Select a thing...')
        ]),
        options: [
          { title: 'Emotional technicality', value: 'emotecho', icon: facebookIcon },
          { title: 'Pontificate harder', value: 'ponfer', icon: twitterIcon },
          { title: 'No one misses these', value: 'noone', icon: datasetIcon }
        ]
      };

      ReactDOM.render(
        React.createElement(components.Dropdown, props),
        document.getElementById('icon-dropdown-container')
      );
    });
  </script>

  <script type="text/javascript" id="example-3">
    $(() => {
      const DropdownWithRenderer = (props) => {
        const { iconClassName, title, value } = props;

        return (
          React.createElement('div', {className: 'special-dropdown-option'}, [
            React.createElement('div', { key: 'enclosing_div' }, title.toUpperCase()),
            React.createElement('span', {className: iconClassName, key: value}),
            React.createElement('span', {className: iconClassName, key: value + '1'}),
            React.createElement('span', {className: iconClassName, key: value + '2'}),
            React.createElement('span', {className: iconClassName, key: value + '3'})
          ])
        );
      };

      const renderer = (option) => React.createElement(DropdownWithRenderer, option);

      const customRenderProps = {
        displayTrueWidthOptions: true,
        onSelection: (option) => {
          const { title, value } = option;
          console.log(`option selected: ${title}, ${value}`);
        },
        placeholder: () => React.createElement('button', {className: 'btn btn-alternate-3'}, 'Hello, World!'),
        options: [
          { title: 'Classless society', value: 'noclass', iconClassName: 'socrata-icon-official2', render: renderer },
          { title: 'Voltaic pile', value: 'paragraph-center3', iconClassName: 'socrata-icon-paragraph-center3', render: renderer },
          { title: "It's blist!", value: 'blist', iconClassName: 'socrata-icon-logo', render: renderer }
        ]
      };

      ReactDOM.render(
        React.createElement(components.Dropdown, customRenderProps),
        document.getElementById('custom-dropdown-container')
      );
    });
  </script>

  <script type="text/javascript" id="example-4">
    $(() => {
      const DropdownBelowHandle = (props) => {
        const { iconClassName, title, value } = props;

        return (
          React.createElement('div', {className: 'special-dropdown-option'}, [
            React.createElement('div', { key: 'enclosing_div' }, title.toUpperCase()),
            React.createElement('span', {className: iconClassName, key: value}),
            React.createElement('span', {className: iconClassName, key: value + '1'}),
            React.createElement('span', {className: iconClassName, key: value + '2'}),
            React.createElement('span', {className: iconClassName, key: value + '3'})
          ])
        );
      };

      const renderer = (option) => React.createElement(DropdownBelowHandle, option);

      const customRenderProps = {
        showOptionsBelowHandle: true,
        onSelection: (option) => {
          const { title, value } = option;
          console.log(`option selected: ${title}, ${value}`);
        },
        placeholder: () => React.createElement('button', {className: 'btn btn-alternate-3'}, 'Hello, World!'),
        options: [
          { title: 'One', value: 'one' },
          { title: 'Two', value: 'two' },
          { title: "Three", value: 'three' }
        ]
      };

      ReactDOM.render(
        React.createElement(components.Dropdown, customRenderProps),
        document.getElementById('dropdown-below-handle-container')
      );
    });
  </script>
<% end %>
