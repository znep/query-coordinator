/*!
 * Socrata Styleguide v0.5.0
 * Copyright 2015-2016 Socrata, Inc.
 * Licensed under MIT
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.styleguide=e():t.styleguide=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return t[o].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports={Dropdown:n(1),FlannelFactory:n(2),FlyoutFactory:n(4),MenuFactory:n(5),ModalFactory:n(6),ToggleFactory:n(7),TourFactory:n(8)}},function(t,e){var n=t.exports=function(t){this.dd=t,this.orientation=t.getAttribute("data-orientation")||"bottom",this.selectable=t.hasAttribute("data-selectable"),this.dd.classList.add("dropdown-orientation-"+this.orientation),this.placeholder=this.dd.querySelector("span"),this.opts=Array.prototype.slice.call(this.dd.querySelectorAll(".dropdown-options > li")),this.val="",this.index=-1,this.initEvents()};n.prototype={initEvents:function(){var t=this;t.dd.addEventListener("click",function(e){return e.stopPropagation(),t.dd.classList.toggle("active"),!1}),t.opts.forEach(function(e){e.addEventListener("click",function(n){n.preventDefault();for(var o=e,i=0;null!==(o=o.previousElementSibling);)i++;return t.val=e.textContent,t.index=i,t.selectable&&(t.placeholder.innerHTML=e.innerText.trim()),!1})})}}},function(t,e,n){var o=n(3);t.exports=function(t){function e(t,e){document.body.offsetWidth<i?(o(t,{left:document.body.offsetWidth},{duration:350,complete:function(){t.classList.add("flannel-hidden"),e.classList.remove("active")}}),document.body.style.overflow=""):(t.classList.add("flannel-hidden"),e.classList.remove("active"))}function n(t,e){var n=e,a=0,s=0,l=t.getBoundingClientRect().width,u=document.body.offsetWidth;do a+=n.offsetLeft,s+=n.offsetTop;while(null!==(n=n.offsetParent));a+=e.offsetWidth/2,s=s+e.offsetHeight+r,a+l>u&&u>=i?(t.classList.remove("flannel-right"),t.classList.add("flannel-left"),a-=l):(t.classList.remove("flannel-left"),t.classList.add("flannel-right")),u>=i?(t.style.left=a+"px",t.style.top=s+"px"):(t.style.left=u+"px",t.style.top=0,o(t,{left:0},350),document.body.style.overflow="hidden")}var i=420,r=10,a=Array.prototype.slice.apply(document.querySelectorAll("[data-flannel]"));a.forEach(function(t){var o=t.getAttribute("data-flannel"),i=document.querySelector("#"+o),r=Array.prototype.slice.apply(i.querySelectorAll("[data-flannel-dismiss]"));r.forEach(function(n){n.addEventListener("click",function(){e(i,t)})}),t.addEventListener("click",function(e){e.stopPropagation(),i.classList.toggle("flannel-hidden"),n(i,t)}),document.body.addEventListener("click",function(n){for(var r=n.target;r.parentElement;){if(r.id===o)return;r=r.parentElement}e(i,t)}),document.body.addEventListener("keyup",function(n){var o=n.which||n.keyCode;27===o&&e(i,t)}),window.addEventListener("resize",function(){i.classList.contains("flannel-hidden")||n(i,t)})})}},function(t,e,n){var o,i;!function(t){function e(t){var e=t.length,o=n.type(t);return"function"===o||n.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===o||0===e||"number"==typeof e&&e>0&&e-1 in t}if(!t.jQuery){var n=function(t,e){return new n.fn.init(t,e)};n.isWindow=function(t){return null!=t&&t==t.window},n.type=function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[a.call(t)]||"object":typeof t},n.isArray=Array.isArray||function(t){return"array"===n.type(t)},n.isPlainObject=function(t){var e;if(!t||"object"!==n.type(t)||t.nodeType||n.isWindow(t))return!1;try{if(t.constructor&&!r.call(t,"constructor")&&!r.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(o){return!1}for(e in t);return void 0===e||r.call(t,e)},n.each=function(t,n,o){var i,r=0,a=t.length,s=e(t);if(o){if(s)for(;a>r&&(i=n.apply(t[r],o),i!==!1);r++);else for(r in t)if(i=n.apply(t[r],o),i===!1)break}else if(s)for(;a>r&&(i=n.call(t[r],r,t[r]),i!==!1);r++);else for(r in t)if(i=n.call(t[r],r,t[r]),i===!1)break;return t},n.data=function(t,e,i){if(void 0===i){var r=t[n.expando],a=r&&o[r];if(void 0===e)return a;if(a&&e in a)return a[e]}else if(void 0!==e){var r=t[n.expando]||(t[n.expando]=++n.uuid);return o[r]=o[r]||{},o[r][e]=i,i}},n.removeData=function(t,e){var i=t[n.expando],r=i&&o[i];r&&n.each(e,function(t,e){delete r[e]})},n.extend=function(){var t,e,o,i,r,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[l]||{},l++),"object"!=typeof s&&"function"!==n.type(s)&&(s={}),l===u&&(s=this,l--);u>l;l++)if(null!=(r=arguments[l]))for(i in r)t=s[i],o=r[i],s!==o&&(c&&o&&(n.isPlainObject(o)||(e=n.isArray(o)))?(e?(e=!1,a=t&&n.isArray(t)?t:[]):a=t&&n.isPlainObject(t)?t:{},s[i]=n.extend(c,a,o)):void 0!==o&&(s[i]=o));return s},n.queue=function(t,o,i){function r(t,n){var o=n||[];return null!=t&&(e(Object(t))?!function(t,e){for(var n=+e.length,o=0,i=t.length;n>o;)t[i++]=e[o++];if(n!==n)for(;void 0!==e[o];)t[i++]=e[o++];return t.length=i,t}(o,"string"==typeof t?[t]:t):[].push.call(o,t)),o}if(t){o=(o||"fx")+"queue";var a=n.data(t,o);return i?(!a||n.isArray(i)?a=n.data(t,o,r(i)):a.push(i),a):a||[]}},n.dequeue=function(t,e){n.each(t.nodeType?[t]:t,function(t,o){e=e||"fx";var i=n.queue(o,e),r=i.shift();"inprogress"===r&&(r=i.shift()),r&&("fx"===e&&i.unshift("inprogress"),r.call(o,function(){n.dequeue(o,e)}))})},n.fn=n.prototype={init:function(t){if(t.nodeType)return this[0]=t,this;throw new Error("Not a DOM node.")},offset:function(){var e=this[0].getBoundingClientRect?this[0].getBoundingClientRect():{top:0,left:0};return{top:e.top+(t.pageYOffset||document.scrollTop||0)-(document.clientTop||0),left:e.left+(t.pageXOffset||document.scrollLeft||0)-(document.clientLeft||0)}},position:function(){function t(){for(var t=this.offsetParent||document;t&&"html"===!t.nodeType.toLowerCase&&"static"===t.style.position;)t=t.offsetParent;return t||document}var e=this[0],t=t.apply(e),o=this.offset(),i=/^(?:body|html)$/i.test(t.nodeName)?{top:0,left:0}:n(t).offset();return o.top-=parseFloat(e.style.marginTop)||0,o.left-=parseFloat(e.style.marginLeft)||0,t.style&&(i.top+=parseFloat(t.style.borderTopWidth)||0,i.left+=parseFloat(t.style.borderLeftWidth)||0),{top:o.top-i.top,left:o.left-i.left}}};var o={};n.expando="velocity"+(new Date).getTime(),n.uuid=0;for(var i={},r=i.hasOwnProperty,a=i.toString,s="Boolean Number String Function Array Date RegExp Object Error".split(" "),l=0;l<s.length;l++)i["[object "+s[l]+"]"]=s[l].toLowerCase();n.fn.init.prototype=n.fn,t.Velocity={Utilities:n}}}(window),function(r){"object"==typeof t&&"object"==typeof t.exports?t.exports=r():(o=r,i="function"==typeof o?o.call(e,n,e,t):o,!(void 0!==i&&(t.exports=i)))}(function(){return function(t,e,n,o){/* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */
function i(t){for(var e=-1,n=t?t.length:0,o=[];++e<n;){var i=t[e];i&&o.push(i)}return o}function r(t){return g.isWrapped(t)?t=[].slice.call(t):g.isNode(t)&&(t=[t]),t}function a(t){var e=d.data(t,"velocity");return null===e?o:e}function s(t){return function(e){return Math.round(e*t)*(1/t)}}/* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
function l(t,n,o,i){function r(t,e){return 1-3*e+3*t}function a(t,e){return 3*e-6*t}function s(t){return 3*t}function l(t,e,n){return((r(e,n)*t+a(e,n))*t+s(e))*t}function u(t,e,n){return 3*r(e,n)*t*t+2*a(e,n)*t+s(e)}function c(e,n){for(var i=0;g>i;++i){var r=u(n,t,o);if(0===r)return n;var a=l(n,t,o)-e;n-=a/r}return n}function f(){for(var e=0;b>e;++e)C[e]=l(e*x,t,o)}function d(e,n,i){var r,a,s=0;do a=n+(i-n)/2,r=l(a,t,o)-e,r>0?i=a:n=a;while(Math.abs(r)>y&&++s<m);return a}function p(e){for(var n=0,i=1,r=b-1;i!=r&&C[i]<=e;++i)n+=x;--i;var a=(e-C[i])/(C[i+1]-C[i]),s=n+a*x,l=u(s,t,o);return l>=v?c(e,s):0==l?s:d(e,n,n+x)}function h(){T=!0,t==n&&o==i||f()}var g=4,v=.001,y=1e-7,m=10,b=11,x=1/(b-1),w="Float32Array"in e;if(4!==arguments.length)return!1;for(var S=0;4>S;++S)if("number"!=typeof arguments[S]||isNaN(arguments[S])||!isFinite(arguments[S]))return!1;t=Math.min(t,1),o=Math.min(o,1),t=Math.max(t,0),o=Math.max(o,0);var C=w?new Float32Array(b):new Array(b),T=!1,E=function(e){return T||h(),t===n&&o===i?e:0===e?0:1===e?1:l(p(e),n,i)};E.getControlPoints=function(){return[{x:t,y:n},{x:o,y:i}]};var k="generateBezier("+[t,n,o,i]+")";return E.toString=function(){return k},E}function u(t,e){var n=t;return g.isString(t)?b.Easings[t]||(n=!1):n=g.isArray(t)&&1===t.length?s.apply(null,t):g.isArray(t)&&2===t.length?x.apply(null,t.concat([e])):g.isArray(t)&&4===t.length?l.apply(null,t):!1,n===!1&&(n=b.Easings[b.defaults.easing]?b.defaults.easing:m),n}function c(t){if(t){var e=(new Date).getTime(),n=b.State.calls.length;n>1e4&&(b.State.calls=i(b.State.calls));for(var r=0;n>r;r++)if(b.State.calls[r]){var s=b.State.calls[r],l=s[0],u=s[2],p=s[3],h=!!p,v=null;p||(p=b.State.calls[r][3]=e-16);for(var y=Math.min((e-p)/u.duration,1),m=0,x=l.length;x>m;m++){var S=l[m],T=S.element;if(a(T)){var E=!1;if(u.display!==o&&null!==u.display&&"none"!==u.display){if("flex"===u.display){var k=["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex"];d.each(k,function(t,e){w.setPropertyValue(T,"display",e)})}w.setPropertyValue(T,"display",u.display)}u.visibility!==o&&"hidden"!==u.visibility&&w.setPropertyValue(T,"visibility",u.visibility);for(var P in S)if("element"!==P){var A,O=S[P],V=g.isString(O.easing)?b.Easings[O.easing]:O.easing;if(1===y)A=O.endValue;else{var L=O.endValue-O.startValue;if(A=O.startValue+L*V(y,u,L),!h&&A===O.currentValue)continue}if(O.currentValue=A,"tween"===P)v=A;else{if(w.Hooks.registered[P]){var F=w.Hooks.getRoot(P),j=a(T).rootPropertyValueCache[F];j&&(O.rootPropertyValue=j)}var N=w.setPropertyValue(T,P,O.currentValue+(0===parseFloat(A)?"":O.unitType),O.rootPropertyValue,O.scrollData);w.Hooks.registered[P]&&(w.Normalizations.registered[F]?a(T).rootPropertyValueCache[F]=w.Normalizations.registered[F]("extract",null,N[1]):a(T).rootPropertyValueCache[F]=N[1]),"transform"===N[0]&&(E=!0)}}u.mobileHA&&a(T).transformCache.translate3d===o&&(a(T).transformCache.translate3d="(0px, 0px, 0px)",E=!0),E&&w.flushTransformCache(T)}}u.display!==o&&"none"!==u.display&&(b.State.calls[r][2].display=!1),u.visibility!==o&&"hidden"!==u.visibility&&(b.State.calls[r][2].visibility=!1),u.progress&&u.progress.call(s[1],s[1],y,Math.max(0,p+u.duration-e),p,v),1===y&&f(r)}}b.State.isTicking&&C(c)}function f(t,e){if(!b.State.calls[t])return!1;for(var n=b.State.calls[t][0],i=b.State.calls[t][1],r=b.State.calls[t][2],s=b.State.calls[t][4],l=!1,u=0,c=n.length;c>u;u++){var f=n[u].element;if(e||r.loop||("none"===r.display&&w.setPropertyValue(f,"display",r.display),"hidden"===r.visibility&&w.setPropertyValue(f,"visibility",r.visibility)),r.loop!==!0&&(d.queue(f)[1]===o||!/\.velocityQueueEntryFlag/i.test(d.queue(f)[1]))&&a(f)){a(f).isAnimating=!1,a(f).rootPropertyValueCache={};var p=!1;d.each(w.Lists.transforms3D,function(t,e){var n=/^scale/.test(e)?1:0,i=a(f).transformCache[e];a(f).transformCache[e]!==o&&new RegExp("^\\("+n+"[^.]").test(i)&&(p=!0,delete a(f).transformCache[e])}),r.mobileHA&&(p=!0,delete a(f).transformCache.translate3d),p&&w.flushTransformCache(f),w.Values.removeClass(f,"velocity-animating")}if(!e&&r.complete&&!r.loop&&u===c-1)try{r.complete.call(i,i)}catch(h){setTimeout(function(){throw h},1)}s&&r.loop!==!0&&s(i),a(f)&&r.loop===!0&&!e&&(d.each(a(f).tweensContainer,function(t,e){/^rotate/.test(t)&&360===parseFloat(e.endValue)&&(e.endValue=0,e.startValue=360),/^backgroundPosition/.test(t)&&100===parseFloat(e.endValue)&&"%"===e.unitType&&(e.endValue=0,e.startValue=100)}),b(f,"reverse",{loop:!0,delay:r.delay})),r.queue!==!1&&d.dequeue(f,r.queue)}b.State.calls[t]=!1;for(var g=0,v=b.State.calls.length;v>g;g++)if(b.State.calls[g]!==!1){l=!0;break}l===!1&&(b.State.isTicking=!1,delete b.State.calls,b.State.calls=[])}var d,p=function(){if(n.documentMode)return n.documentMode;for(var t=7;t>4;t--){var e=n.createElement("div");if(e.innerHTML="<!--[if IE "+t+"]><span></span><![endif]-->",e.getElementsByTagName("span").length)return e=null,t}return o}(),h=function(){var t=0;return e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||function(e){var n,o=(new Date).getTime();/* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
return n=Math.max(0,16-(o-t)),t=o+n,setTimeout(function(){e(o+n)},n)}}(),g={isString:function(t){return"string"==typeof t},isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},isFunction:function(t){return"[object Function]"===Object.prototype.toString.call(t)},isNode:function(t){return t&&t.nodeType},/* Copyright Martin Bohm. MIT License: https://gist.github.com/Tomalak/818a78a226a0738eaade */
isNodeList:function(t){return"object"==typeof t&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(t))&&t.length!==o&&(0===t.length||"object"==typeof t[0]&&t[0].nodeType>0)},isWrapped:function(t){return t&&(t.jquery||e.Zepto&&e.Zepto.zepto.isZ(t))},isSVG:function(t){return e.SVGElement&&t instanceof e.SVGElement},isEmptyObject:function(t){for(var e in t)return!1;return!0}},v=!1;if(t.fn&&t.fn.jquery?(d=t,v=!0):d=e.Velocity.Utilities,8>=p&&!v)throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");if(7>=p)return void(jQuery.fn.velocity=jQuery.fn.animate);var y=400,m="swing",b={State:{isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isAndroid:/Android/i.test(navigator.userAgent),isGingerbread:/Android 2\.3\.[3-7]/i.test(navigator.userAgent),isChrome:e.chrome,isFirefox:/Firefox/i.test(navigator.userAgent),prefixElement:n.createElement("div"),prefixMatches:{},scrollAnchor:null,scrollPropertyLeft:null,scrollPropertyTop:null,isTicking:!1,calls:[]},CSS:{},Utilities:d,Redirects:{},Easings:{},Promise:e.Promise,defaults:{queue:"",duration:y,easing:m,begin:o,complete:o,progress:o,display:o,visibility:o,loop:!1,delay:!1,mobileHA:!0,_cacheValues:!0},init:function(t){d.data(t,"velocity",{isSVG:g.isSVG(t),isAnimating:!1,computedStyle:null,tweensContainer:null,rootPropertyValueCache:{},transformCache:{}})},hook:null,mock:!1,version:{major:1,minor:2,patch:2},debug:!1};e.pageYOffset!==o?(b.State.scrollAnchor=e,b.State.scrollPropertyLeft="pageXOffset",b.State.scrollPropertyTop="pageYOffset"):(b.State.scrollAnchor=n.documentElement||n.body.parentNode||n.body,b.State.scrollPropertyLeft="scrollLeft",b.State.scrollPropertyTop="scrollTop");/* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
var x=function(){function t(t){return-t.tension*t.x-t.friction*t.v}function e(e,n,o){var i={x:e.x+o.dx*n,v:e.v+o.dv*n,tension:e.tension,friction:e.friction};return{dx:i.v,dv:t(i)}}function n(n,o){var i={dx:n.v,dv:t(n)},r=e(n,.5*o,i),a=e(n,.5*o,r),s=e(n,o,a),l=1/6*(i.dx+2*(r.dx+a.dx)+s.dx),u=1/6*(i.dv+2*(r.dv+a.dv)+s.dv);return n.x=n.x+l*o,n.v=n.v+u*o,n}return function o(t,e,i){var r,a,s,l={x:-1,v:0,tension:null,friction:null},u=[0],c=0,f=1e-4,d=.016;for(t=parseFloat(t)||500,e=parseFloat(e)||20,i=i||null,l.tension=t,l.friction=e,r=null!==i,r?(c=o(t,e),a=c/i*d):a=d;;)if(s=n(s||l,a),u.push(1+s.x),c+=16,!(Math.abs(s.x)>f&&Math.abs(s.v)>f))break;return r?function(t){return u[t*(u.length-1)|0]}:c}}();b.Easings={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},spring:function(t){return 1-Math.cos(4.5*t*Math.PI)*Math.exp(6*-t)}},d.each([["ease",[.25,.1,.25,1]],["ease-in",[.42,0,1,1]],["ease-out",[0,0,.58,1]],["ease-in-out",[.42,0,.58,1]],["easeInSine",[.47,0,.745,.715]],["easeOutSine",[.39,.575,.565,1]],["easeInOutSine",[.445,.05,.55,.95]],["easeInQuad",[.55,.085,.68,.53]],["easeOutQuad",[.25,.46,.45,.94]],["easeInOutQuad",[.455,.03,.515,.955]],["easeInCubic",[.55,.055,.675,.19]],["easeOutCubic",[.215,.61,.355,1]],["easeInOutCubic",[.645,.045,.355,1]],["easeInQuart",[.895,.03,.685,.22]],["easeOutQuart",[.165,.84,.44,1]],["easeInOutQuart",[.77,0,.175,1]],["easeInQuint",[.755,.05,.855,.06]],["easeOutQuint",[.23,1,.32,1]],["easeInOutQuint",[.86,0,.07,1]],["easeInExpo",[.95,.05,.795,.035]],["easeOutExpo",[.19,1,.22,1]],["easeInOutExpo",[1,0,0,1]],["easeInCirc",[.6,.04,.98,.335]],["easeOutCirc",[.075,.82,.165,1]],["easeInOutCirc",[.785,.135,.15,.86]]],function(t,e){b.Easings[e[0]]=l.apply(null,e[1])});var w=b.CSS={RegEx:{isHex:/^#([A-f\d]{3}){1,2}$/i,valueUnwrap:/^[A-z]+\((.*)\)$/i,wrappedValueAlreadyExtracted:/[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,valueSplit:/([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi},Lists:{colors:["fill","stroke","stopColor","color","backgroundColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor"],transformsBase:["translateX","translateY","scale","scaleX","scaleY","skewX","skewY","rotateZ"],transforms3D:["transformPerspective","translateZ","scaleZ","rotateX","rotateY"]},Hooks:{templates:{textShadow:["Color X Y Blur","black 0px 0px 0px"],boxShadow:["Color X Y Blur Spread","black 0px 0px 0px 0px"],clip:["Top Right Bottom Left","0px 0px 0px 0px"],backgroundPosition:["X Y","0% 0%"],transformOrigin:["X Y Z","50% 50% 0px"],perspectiveOrigin:["X Y","50% 50%"]},registered:{},register:function(){for(var t=0;t<w.Lists.colors.length;t++){var e="color"===w.Lists.colors[t]?"0 0 0 1":"255 255 255 1";w.Hooks.templates[w.Lists.colors[t]]=["Red Green Blue Alpha",e]}var n,o,i;if(p)for(n in w.Hooks.templates){o=w.Hooks.templates[n],i=o[0].split(" ");var r=o[1].match(w.RegEx.valueSplit);"Color"===i[0]&&(i.push(i.shift()),r.push(r.shift()),w.Hooks.templates[n]=[i.join(" "),r.join(" ")])}for(n in w.Hooks.templates){o=w.Hooks.templates[n],i=o[0].split(" ");for(var t in i){var a=n+i[t],s=t;w.Hooks.registered[a]=[n,s]}}},getRoot:function(t){var e=w.Hooks.registered[t];return e?e[0]:t},cleanRootPropertyValue:function(t,e){return w.RegEx.valueUnwrap.test(e)&&(e=e.match(w.RegEx.valueUnwrap)[1]),w.Values.isCSSNullValue(e)&&(e=w.Hooks.templates[t][1]),e},extractValue:function(t,e){var n=w.Hooks.registered[t];if(n){var o=n[0],i=n[1];return e=w.Hooks.cleanRootPropertyValue(o,e),e.toString().match(w.RegEx.valueSplit)[i]}return e},injectValue:function(t,e,n){var o=w.Hooks.registered[t];if(o){var i,r,a=o[0],s=o[1];return n=w.Hooks.cleanRootPropertyValue(a,n),i=n.toString().match(w.RegEx.valueSplit),i[s]=e,r=i.join(" ")}return n}},Normalizations:{registered:{clip:function(t,e,n){switch(t){case"name":return"clip";case"extract":var o;return w.RegEx.wrappedValueAlreadyExtracted.test(n)?o=n:(o=n.toString().match(w.RegEx.valueUnwrap),o=o?o[1].replace(/,(\s+)?/g," "):n),o;case"inject":return"rect("+n+")"}},blur:function(t,e,n){switch(t){case"name":return b.State.isFirefox?"filter":"-webkit-filter";case"extract":var o=parseFloat(n);if(!o&&0!==o){var i=n.toString().match(/blur\(([0-9]+[A-z]+)\)/i);o=i?i[1]:0}return o;case"inject":return parseFloat(n)?"blur("+n+")":"none"}},opacity:function(t,e,n){if(8>=p)switch(t){case"name":return"filter";case"extract":var o=n.toString().match(/alpha\(opacity=(.*)\)/i);return n=o?o[1]/100:1;case"inject":return e.style.zoom=1,parseFloat(n)>=1?"":"alpha(opacity="+parseInt(100*parseFloat(n),10)+")"}else switch(t){case"name":return"opacity";case"extract":return n;case"inject":return n}}},register:function(){9>=p||b.State.isGingerbread||(w.Lists.transformsBase=w.Lists.transformsBase.concat(w.Lists.transforms3D));for(var t=0;t<w.Lists.transformsBase.length;t++)!function(){var e=w.Lists.transformsBase[t];w.Normalizations.registered[e]=function(t,n,i){switch(t){case"name":return"transform";case"extract":return a(n)===o||a(n).transformCache[e]===o?/^scale/i.test(e)?1:0:a(n).transformCache[e].replace(/[()]/g,"");case"inject":var r=!1;switch(e.substr(0,e.length-1)){case"translate":r=!/(%|px|em|rem|vw|vh|\d)$/i.test(i);break;case"scal":case"scale":b.State.isAndroid&&a(n).transformCache[e]===o&&1>i&&(i=1),r=!/(\d)$/i.test(i);break;case"skew":r=!/(deg|\d)$/i.test(i);break;case"rotate":r=!/(deg|\d)$/i.test(i)}return r||(a(n).transformCache[e]="("+i+")"),a(n).transformCache[e]}}}();for(var t=0;t<w.Lists.colors.length;t++)!function(){var e=w.Lists.colors[t];w.Normalizations.registered[e]=function(t,n,i){switch(t){case"name":return e;case"extract":var r;if(w.RegEx.wrappedValueAlreadyExtracted.test(i))r=i;else{var a,s={black:"rgb(0, 0, 0)",blue:"rgb(0, 0, 255)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",red:"rgb(255, 0, 0)",white:"rgb(255, 255, 255)"};/^[A-z]+$/i.test(i)?a=s[i]!==o?s[i]:s.black:w.RegEx.isHex.test(i)?a="rgb("+w.Values.hexToRgb(i).join(" ")+")":/^rgba?\(/i.test(i)||(a=s.black),r=(a||i).toString().match(w.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g," ")}return 8>=p||3!==r.split(" ").length||(r+=" 1"),r;case"inject":return 8>=p?4===i.split(" ").length&&(i=i.split(/\s+/).slice(0,3).join(" ")):3===i.split(" ").length&&(i+=" 1"),(8>=p?"rgb":"rgba")+"("+i.replace(/\s+/g,",").replace(/\.(\d)+(?=,)/g,"")+")"}}}()}},Names:{camelCase:function(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})},SVGAttribute:function(t){var e="width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";return(p||b.State.isAndroid&&!b.State.isChrome)&&(e+="|transform"),new RegExp("^("+e+")$","i").test(t)},prefixCheck:function(t){if(b.State.prefixMatches[t])return[b.State.prefixMatches[t],!0];for(var e=["","Webkit","Moz","ms","O"],n=0,o=e.length;o>n;n++){var i;if(i=0===n?t:e[n]+t.replace(/^\w/,function(t){return t.toUpperCase()}),g.isString(b.State.prefixElement.style[i]))return b.State.prefixMatches[t]=i,[i,!0]}return[t,!1]}},Values:{/* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
hexToRgb:function(t){var e,n=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,o=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;return t=t.replace(n,function(t,e,n,o){return e+e+n+n+o+o}),e=o.exec(t),e?[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]:[0,0,0]},isCSSNullValue:function(t){return 0==t||/^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(t)},getUnitType:function(t){return/^(rotate|skew)/i.test(t)?"deg":/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(t)?"":"px"},getDisplayType:function(t){var e=t&&t.tagName.toString().toLowerCase();return/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(e)?"inline":/^(li)$/i.test(e)?"list-item":/^(tr)$/i.test(e)?"table-row":/^(table)$/i.test(e)?"table":/^(tbody)$/i.test(e)?"table-row-group":"block"},addClass:function(t,e){t.classList?t.classList.add(e):t.className+=(t.className.length?" ":"")+e},removeClass:function(t,e){t.classList?t.classList.remove(e):t.className=t.className.toString().replace(new RegExp("(^|\\s)"+e.split(" ").join("|")+"(\\s|$)","gi")," ")}},getPropertyValue:function(t,n,i,r){function s(t,n){function i(){u&&w.setPropertyValue(t,"display","none")}var l=0;if(8>=p)l=d.css(t,n);else{var u=!1;if(/^(width|height)$/.test(n)&&0===w.getPropertyValue(t,"display")&&(u=!0,w.setPropertyValue(t,"display",w.Values.getDisplayType(t))),!r){if("height"===n&&"border-box"!==w.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var c=t.offsetHeight-(parseFloat(w.getPropertyValue(t,"borderTopWidth"))||0)-(parseFloat(w.getPropertyValue(t,"borderBottomWidth"))||0)-(parseFloat(w.getPropertyValue(t,"paddingTop"))||0)-(parseFloat(w.getPropertyValue(t,"paddingBottom"))||0);return i(),c}if("width"===n&&"border-box"!==w.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var f=t.offsetWidth-(parseFloat(w.getPropertyValue(t,"borderLeftWidth"))||0)-(parseFloat(w.getPropertyValue(t,"borderRightWidth"))||0)-(parseFloat(w.getPropertyValue(t,"paddingLeft"))||0)-(parseFloat(w.getPropertyValue(t,"paddingRight"))||0);return i(),f}}var h;h=a(t)===o?e.getComputedStyle(t,null):a(t).computedStyle?a(t).computedStyle:a(t).computedStyle=e.getComputedStyle(t,null),"borderColor"===n&&(n="borderTopColor"),l=9===p&&"filter"===n?h.getPropertyValue(n):h[n],""!==l&&null!==l||(l=t.style[n]),i()}if("auto"===l&&/^(top|right|bottom|left)$/i.test(n)){var g=s(t,"position");("fixed"===g||"absolute"===g&&/top|left/i.test(n))&&(l=d(t).position()[n]+"px")}return l}var l;if(w.Hooks.registered[n]){var u=n,c=w.Hooks.getRoot(u);i===o&&(i=w.getPropertyValue(t,w.Names.prefixCheck(c)[0])),w.Normalizations.registered[c]&&(i=w.Normalizations.registered[c]("extract",t,i)),l=w.Hooks.extractValue(u,i)}else if(w.Normalizations.registered[n]){var f,h;f=w.Normalizations.registered[n]("name",t),"transform"!==f&&(h=s(t,w.Names.prefixCheck(f)[0]),w.Values.isCSSNullValue(h)&&w.Hooks.templates[n]&&(h=w.Hooks.templates[n][1])),l=w.Normalizations.registered[n]("extract",t,h)}if(!/^[\d-]/.test(l))if(a(t)&&a(t).isSVG&&w.Names.SVGAttribute(n))if(/^(height|width)$/i.test(n))try{l=t.getBBox()[n]}catch(g){l=0}else l=t.getAttribute(n);else l=s(t,w.Names.prefixCheck(n)[0]);return w.Values.isCSSNullValue(l)&&(l=0),b.debug>=2&&console.log("Get "+n+": "+l),l},setPropertyValue:function(t,n,o,i,r){var s=n;if("scroll"===n)r.container?r.container["scroll"+r.direction]=o:"Left"===r.direction?e.scrollTo(o,r.alternateValue):e.scrollTo(r.alternateValue,o);else if(w.Normalizations.registered[n]&&"transform"===w.Normalizations.registered[n]("name",t))w.Normalizations.registered[n]("inject",t,o),s="transform",o=a(t).transformCache[n];else{if(w.Hooks.registered[n]){var l=n,u=w.Hooks.getRoot(n);i=i||w.getPropertyValue(t,u),o=w.Hooks.injectValue(l,o,i),n=u}if(w.Normalizations.registered[n]&&(o=w.Normalizations.registered[n]("inject",t,o),n=w.Normalizations.registered[n]("name",t)),s=w.Names.prefixCheck(n)[0],8>=p)try{t.style[s]=o}catch(c){b.debug&&console.log("Browser does not support ["+o+"] for ["+s+"]")}else a(t)&&a(t).isSVG&&w.Names.SVGAttribute(n)?t.setAttribute(n,o):t.style[s]=o;b.debug>=2&&console.log("Set "+n+" ("+s+"): "+o)}return[s,o]},flushTransformCache:function(t){function e(e){return parseFloat(w.getPropertyValue(t,e))}var n="";if((p||b.State.isAndroid&&!b.State.isChrome)&&a(t).isSVG){var o={translate:[e("translateX"),e("translateY")],skewX:[e("skewX")],skewY:[e("skewY")],scale:1!==e("scale")?[e("scale"),e("scale")]:[e("scaleX"),e("scaleY")],rotate:[e("rotateZ"),0,0]};d.each(a(t).transformCache,function(t){/^translate/i.test(t)?t="translate":/^scale/i.test(t)?t="scale":/^rotate/i.test(t)&&(t="rotate"),o[t]&&(n+=t+"("+o[t].join(" ")+") ",delete o[t])})}else{var i,r;d.each(a(t).transformCache,function(e){return i=a(t).transformCache[e],"transformPerspective"===e?(r=i,!0):(9===p&&"rotateZ"===e&&(e="rotate"),void(n+=e+i+" "))}),r&&(n="perspective"+r+" "+n)}w.setPropertyValue(t,"transform",n)}};w.Hooks.register(),w.Normalizations.register(),b.hook=function(t,e,n){var i=o;return t=r(t),d.each(t,function(t,r){if(a(r)===o&&b.init(r),n===o)i===o&&(i=b.CSS.getPropertyValue(r,e));else{var s=b.CSS.setPropertyValue(r,e,n);"transform"===s[0]&&b.CSS.flushTransformCache(r),i=s}}),i};var S=function(){function t(){return s?P.promise||null:l}function i(){function t(t){function f(t,e){var n=o,i=o,a=o;return g.isArray(t)?(n=t[0],!g.isArray(t[1])&&/^[\d-]/.test(t[1])||g.isFunction(t[1])||w.RegEx.isHex.test(t[1])?a=t[1]:(g.isString(t[1])&&!w.RegEx.isHex.test(t[1])||g.isArray(t[1]))&&(i=e?t[1]:u(t[1],s.duration),t[2]!==o&&(a=t[2]))):n=t,e||(i=i||s.easing),g.isFunction(n)&&(n=n.call(r,T,C)),g.isFunction(a)&&(a=a.call(r,T,C)),[n||0,i,a]}function p(t,e){var n,o;return o=(e||"0").toString().toLowerCase().replace(/[%A-z]+$/,function(t){return n=t,""}),n||(n=w.Values.getUnitType(t)),[o,n]}function y(){var t={myParent:r.parentNode||n.body,position:w.getPropertyValue(r,"position"),fontSize:w.getPropertyValue(r,"fontSize")},o=t.position===N.lastPosition&&t.myParent===N.lastParent,i=t.fontSize===N.lastFontSize;N.lastParent=t.myParent,N.lastPosition=t.position,N.lastFontSize=t.fontSize;var s=100,l={};if(i&&o)l.emToPx=N.lastEmToPx,l.percentToPxWidth=N.lastPercentToPxWidth,l.percentToPxHeight=N.lastPercentToPxHeight;else{var u=a(r).isSVG?n.createElementNS("http://www.w3.org/2000/svg","rect"):n.createElement("div");b.init(u),t.myParent.appendChild(u),d.each(["overflow","overflowX","overflowY"],function(t,e){b.CSS.setPropertyValue(u,e,"hidden")}),b.CSS.setPropertyValue(u,"position",t.position),b.CSS.setPropertyValue(u,"fontSize",t.fontSize),b.CSS.setPropertyValue(u,"boxSizing","content-box"),d.each(["minWidth","maxWidth","width","minHeight","maxHeight","height"],function(t,e){b.CSS.setPropertyValue(u,e,s+"%")}),b.CSS.setPropertyValue(u,"paddingLeft",s+"em"),l.percentToPxWidth=N.lastPercentToPxWidth=(parseFloat(w.getPropertyValue(u,"width",null,!0))||1)/s,l.percentToPxHeight=N.lastPercentToPxHeight=(parseFloat(w.getPropertyValue(u,"height",null,!0))||1)/s,l.emToPx=N.lastEmToPx=(parseFloat(w.getPropertyValue(u,"paddingLeft"))||1)/s,t.myParent.removeChild(u)}return null===N.remToPx&&(N.remToPx=parseFloat(w.getPropertyValue(n.body,"fontSize"))||16),null===N.vwToPx&&(N.vwToPx=parseFloat(e.innerWidth)/100,N.vhToPx=parseFloat(e.innerHeight)/100),l.remToPx=N.remToPx,l.vwToPx=N.vwToPx,l.vhToPx=N.vhToPx,b.debug>=1&&console.log("Unit ratios: "+JSON.stringify(l),r),l}if(s.begin&&0===T)try{s.begin.call(h,h)}catch(x){setTimeout(function(){throw x},1)}if("scroll"===A){var S,E,k,O=/^x$/i.test(s.axis)?"Left":"Top",V=parseFloat(s.offset)||0;s.container?g.isWrapped(s.container)||g.isNode(s.container)?(s.container=s.container[0]||s.container,S=s.container["scroll"+O],k=S+d(r).position()[O.toLowerCase()]+V):s.container=null:(S=b.State.scrollAnchor[b.State["scrollProperty"+O]],E=b.State.scrollAnchor[b.State["scrollProperty"+("Left"===O?"Top":"Left")]],k=d(r).offset()[O.toLowerCase()]+V),l={scroll:{rootPropertyValue:!1,startValue:S,currentValue:S,endValue:k,unitType:"",easing:s.easing,scrollData:{container:s.container,direction:O,alternateValue:E}},element:r},b.debug&&console.log("tweensContainer (scroll): ",l.scroll,r)}else if("reverse"===A){if(!a(r).tweensContainer)return void d.dequeue(r,s.queue);"none"===a(r).opts.display&&(a(r).opts.display="auto"),"hidden"===a(r).opts.visibility&&(a(r).opts.visibility="visible"),a(r).opts.loop=!1,a(r).opts.begin=null,a(r).opts.complete=null,m.easing||delete s.easing,m.duration||delete s.duration,s=d.extend({},a(r).opts,s);var L=d.extend(!0,{},a(r).tweensContainer);for(var F in L)if("element"!==F){var j=L[F].startValue;L[F].startValue=L[F].currentValue=L[F].endValue,L[F].endValue=j,g.isEmptyObject(m)||(L[F].easing=s.easing),b.debug&&console.log("reverse tweensContainer ("+F+"): "+JSON.stringify(L[F]),r)}l=L}else if("start"===A){var L;a(r).tweensContainer&&a(r).isAnimating===!0&&(L=a(r).tweensContainer),d.each(v,function(t,e){if(RegExp("^"+w.Lists.colors.join("$|^")+"$").test(t)){var n=f(e,!0),i=n[0],r=n[1],a=n[2];if(w.RegEx.isHex.test(i)){for(var s=["Red","Green","Blue"],l=w.Values.hexToRgb(i),u=a?w.Values.hexToRgb(a):o,c=0;c<s.length;c++){var d=[l[c]];r&&d.push(r),u!==o&&d.push(u[c]),v[t+s[c]]=d}delete v[t]}}});for(var M in v){var z=f(v[M]),q=z[0],W=z[1],R=z[2];M=w.Names.camelCase(M);var B=w.Hooks.getRoot(M),I=!1;if(a(r).isSVG||"tween"===B||w.Names.prefixCheck(B)[1]!==!1||w.Normalizations.registered[B]!==o){(s.display!==o&&null!==s.display&&"none"!==s.display||s.visibility!==o&&"hidden"!==s.visibility)&&/opacity|filter/.test(M)&&!R&&0!==q&&(R=0),s._cacheValues&&L&&L[M]?(R===o&&(R=L[M].endValue+L[M].unitType),I=a(r).rootPropertyValueCache[B]):w.Hooks.registered[M]?R===o?(I=w.getPropertyValue(r,B),R=w.getPropertyValue(r,M,I)):I=w.Hooks.templates[B][1]:R===o&&(R=w.getPropertyValue(r,M));var $,Y,X,_=!1;if($=p(M,R),R=$[0],X=$[1],$=p(M,q),q=$[0].replace(/^([+-\/*])=/,function(t,e){return _=e,""}),Y=$[1],R=parseFloat(R)||0,q=parseFloat(q)||0,"%"===Y&&(/^(fontSize|lineHeight)$/.test(M)?(q/=100,Y="em"):/^scale/.test(M)?(q/=100,Y=""):/(Red|Green|Blue)$/i.test(M)&&(q=q/100*255,Y="")),/[\/*]/.test(_))Y=X;else if(X!==Y&&0!==R)if(0===q)Y=X;else{i=i||y();var D=/margin|padding|left|right|width|text|word|letter/i.test(M)||/X$/.test(M)||"x"===M?"x":"y";switch(X){case"%":R*="x"===D?i.percentToPxWidth:i.percentToPxHeight;break;case"px":break;default:R*=i[X+"ToPx"]}switch(Y){case"%":R*=1/("x"===D?i.percentToPxWidth:i.percentToPxHeight);break;case"px":break;default:R*=1/i[Y+"ToPx"]}}switch(_){case"+":q=R+q;break;case"-":q=R-q;break;case"*":q=R*q;break;case"/":q=R/q}l[M]={rootPropertyValue:I,startValue:R,currentValue:R,endValue:q,unitType:Y,easing:W},b.debug&&console.log("tweensContainer ("+M+"): "+JSON.stringify(l[M]),r)}else b.debug&&console.log("Skipping ["+B+"] due to a lack of browser support.")}l.element=r}l.element&&(w.Values.addClass(r,"velocity-animating"),H.push(l),""===s.queue&&(a(r).tweensContainer=l,a(r).opts=s),a(r).isAnimating=!0,T===C-1?(b.State.calls.push([H,h,s,null,P.resolver]),b.State.isTicking===!1&&(b.State.isTicking=!0,c())):T++)}var i,r=this,s=d.extend({},b.defaults,m),l={};switch(a(r)===o&&b.init(r),parseFloat(s.delay)&&s.queue!==!1&&d.queue(r,s.queue,function(t){b.velocityQueueEntryFlag=!0,a(r).delayTimer={setTimeout:setTimeout(t,parseFloat(s.delay)),next:t}}),s.duration.toString().toLowerCase()){case"fast":s.duration=200;break;case"normal":s.duration=y;break;case"slow":s.duration=600;break;default:s.duration=parseFloat(s.duration)||1}b.mock!==!1&&(b.mock===!0?s.duration=s.delay=1:(s.duration*=parseFloat(b.mock)||1,s.delay*=parseFloat(b.mock)||1)),s.easing=u(s.easing,s.duration),s.begin&&!g.isFunction(s.begin)&&(s.begin=null),s.progress&&!g.isFunction(s.progress)&&(s.progress=null),s.complete&&!g.isFunction(s.complete)&&(s.complete=null),s.display!==o&&null!==s.display&&(s.display=s.display.toString().toLowerCase(),"auto"===s.display&&(s.display=b.CSS.Values.getDisplayType(r))),s.visibility!==o&&null!==s.visibility&&(s.visibility=s.visibility.toString().toLowerCase()),s.mobileHA=s.mobileHA&&b.State.isMobile&&!b.State.isGingerbread,s.queue===!1?s.delay?setTimeout(t,s.delay):t():d.queue(r,s.queue,function(e,n){return n===!0?(P.promise&&P.resolver(h),!0):(b.velocityQueueEntryFlag=!0,void t(e))}),""!==s.queue&&"fx"!==s.queue||"inprogress"===d.queue(r)[0]||d.dequeue(r)}var s,l,p,h,v,m,x=arguments[0]&&(arguments[0].p||d.isPlainObject(arguments[0].properties)&&!arguments[0].properties.names||g.isString(arguments[0].properties));if(g.isWrapped(this)?(s=!1,p=0,h=this,l=this):(s=!0,p=1,h=x?arguments[0].elements||arguments[0].e:arguments[0]),h=r(h)){x?(v=arguments[0].properties||arguments[0].p,m=arguments[0].options||arguments[0].o):(v=arguments[p],m=arguments[p+1]);var C=h.length,T=0;if(!/^(stop|finish|finishAll)$/i.test(v)&&!d.isPlainObject(m)){var E=p+1;m={};for(var k=E;k<arguments.length;k++)g.isArray(arguments[k])||!/^(fast|normal|slow)$/i.test(arguments[k])&&!/^\d/.test(arguments[k])?g.isString(arguments[k])||g.isArray(arguments[k])?m.easing=arguments[k]:g.isFunction(arguments[k])&&(m.complete=arguments[k]):m.duration=arguments[k]}var P={promise:null,resolver:null,rejecter:null};s&&b.Promise&&(P.promise=new b.Promise(function(t,e){P.resolver=t,P.rejecter=e}));var A;switch(v){case"scroll":A="scroll";break;case"reverse":A="reverse";break;case"finish":case"finishAll":case"stop":d.each(h,function(t,e){a(e)&&a(e).delayTimer&&(clearTimeout(a(e).delayTimer.setTimeout),a(e).delayTimer.next&&a(e).delayTimer.next(),delete a(e).delayTimer),"finishAll"!==v||m!==!0&&!g.isString(m)||(d.each(d.queue(e,g.isString(m)?m:""),function(t,e){g.isFunction(e)&&e()}),d.queue(e,g.isString(m)?m:"",[]))});var O=[];return d.each(b.State.calls,function(t,e){e&&d.each(e[1],function(n,i){var r=m===o?"":m;return r===!0||e[2].queue===r||m===o&&e[2].queue===!1?void d.each(h,function(n,o){o===i&&((m===!0||g.isString(m))&&(d.each(d.queue(o,g.isString(m)?m:""),function(t,e){g.isFunction(e)&&e(null,!0)}),d.queue(o,g.isString(m)?m:"",[])),"stop"===v?(a(o)&&a(o).tweensContainer&&r!==!1&&d.each(a(o).tweensContainer,function(t,e){e.endValue=e.currentValue}),O.push(t)):"finish"!==v&&"finishAll"!==v||(e[2].duration=1))}):!0})}),"stop"===v&&(d.each(O,function(t,e){f(e,!0)}),P.promise&&P.resolver(h)),t();default:if(!d.isPlainObject(v)||g.isEmptyObject(v)){if(g.isString(v)&&b.Redirects[v]){var V=d.extend({},m),L=V.duration,F=V.delay||0;return V.backwards===!0&&(h=d.extend(!0,[],h).reverse()),d.each(h,function(t,e){parseFloat(V.stagger)?V.delay=F+parseFloat(V.stagger)*t:g.isFunction(V.stagger)&&(V.delay=F+V.stagger.call(e,t,C)),V.drag&&(V.duration=parseFloat(L)||(/^(callout|transition)/.test(v)?1e3:y),V.duration=Math.max(V.duration*(V.backwards?1-t/C:(t+1)/C),.75*V.duration,200)),b.Redirects[v].call(e,e,V||{},t,C,h,P.promise?P:o)}),t()}var j="Velocity: First argument ("+v+") was not a property map, a known action, or a registered redirect. Aborting.";return P.promise?P.rejecter(new Error(j)):console.log(j),t()}A="start"}var N={lastParent:null,lastPosition:null,lastFontSize:null,lastPercentToPxWidth:null,lastPercentToPxHeight:null,lastEmToPx:null,remToPx:null,vwToPx:null,vhToPx:null},H=[];d.each(h,function(t,e){g.isNode(e)&&i.call(e)});var M,V=d.extend({},b.defaults,m);if(V.loop=parseInt(V.loop),M=2*V.loop-1,V.loop)for(var z=0;M>z;z++){var q={delay:V.delay,progress:V.progress};z===M-1&&(q.display=V.display,q.visibility=V.visibility,q.complete=V.complete),S(h,"reverse",q)}return t()}};b=d.extend(S,b),b.animate=S;var C=e.requestAnimationFrame||h;return b.State.isMobile||n.hidden===o||n.addEventListener("visibilitychange",function(){n.hidden?(C=function(t){return setTimeout(function(){t(!0)},16)},c()):C=e.requestAnimationFrame||h}),t.Velocity=b,t!==e&&(t.fn.velocity=S,t.fn.velocity.defaults=b.defaults),d.each(["Down","Up"],function(t,e){b.Redirects["slide"+e]=function(t,n,i,r,a,s){var l=d.extend({},n),u=l.begin,c=l.complete,f={height:"",marginTop:"",marginBottom:"",paddingTop:"",paddingBottom:""},p={};l.display===o&&(l.display="Down"===e?"inline"===b.CSS.Values.getDisplayType(t)?"inline-block":"block":"none"),l.begin=function(){u&&u.call(a,a);for(var n in f){p[n]=t.style[n];var o=b.CSS.getPropertyValue(t,n);f[n]="Down"===e?[o,0]:[0,o]}p.overflow=t.style.overflow,t.style.overflow="hidden"},l.complete=function(){for(var e in p)t.style[e]=p[e];c&&c.call(a,a),s&&s.resolver(a)},b(t,f,l)}}),d.each(["In","Out"],function(t,e){b.Redirects["fade"+e]=function(t,n,i,r,a,s){var l=d.extend({},n),u={opacity:"In"===e?1:0},c=l.complete;i!==r-1?l.complete=l.begin=null:l.complete=function(){c&&c.call(a,a),s&&s.resolver(a)},l.display===o&&(l.display="In"===e?"auto":"none"),b(this,u,l)}}),b}(window.jQuery||window.Zepto||window,window,document)})},function(t,e){t.exports=function(t){var e=10,n=Array.prototype.slice.apply(document.querySelectorAll("[data-flyout]"));n.forEach(function(t){var n=document.querySelector("#"+t.getAttribute("data-flyout"));t.addEventListener("mouseover",function(){n.classList.remove("flyout-hidden");var o=t,i=0,r=0;do i+=o.offsetLeft,r+=o.offsetTop;while(null!==(o=o.offsetParent));i+=t.offsetWidth/2,r=r+t.offsetHeight+e,n.style.left=i+"px",n.style.top=r+"px"}),t.addEventListener("mouseout",function(){n.classList.add("flyout-hidden")})})}},function(t,e){t.exports=function(t){var e=Array.prototype.slice.call(t.querySelectorAll(".menu")),n=Array.prototype.slice.call(t.querySelectorAll("[data-menu-toggle]"));n.forEach(function(e){e.addEventListener("click",function(){var n=t.querySelector("#"+e.getAttribute("data-menu-toggle"));n.classList.toggle("active")})}),e.forEach(function(t){var e=Array.prototype.slice.call(t.querySelectorAll("[data-menu-dismiss]"));e.forEach(function(e){e.addEventListener("click",function(){t.classList.remove("active"),document.querySelector('[data-menu-toggle="'+t.id+'"]').classList.remove("active")})})})}},function(t,e){var n=t.exports=function(t){this.root=t,this.dismissals=Array.prototype.slice.apply(t.querySelectorAll("[data-modal-dismiss]")),this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-modal]")),this.attachEvents()};n.prototype={attachEvents:function(){this.dismissals.forEach(function(t){t.addEventListener("click",this.dismiss.bind(this))},this),this.openers.forEach(function(t){t.addEventListener("click",this.open.bind(this))},this),document.addEventListener("keyup",function(t){var e=t.which||t.keyCode;if(27===e){var n=Array.prototype.slice.call(document.querySelectorAll(".modal:not(.modal-hidden)"));n.forEach(function(t){t.classList.add("modal-hidden")})}})},open:function(t){var e=t.target.getAttribute("data-modal");e=this.root.querySelector("#"+e),e.classList.remove("modal-hidden")},dismiss:function(t){var e=t.target,n=e===t.currentTarget&&e.classList.contains("modal-overlay");do if(e.hasAttribute("data-modal-dismiss")&&!e.classList.contains("modal"))n=!0;else{if(e.classList.contains("modal")&&n)return e.classList.add("modal-hidden");if(e.classList.contains("modal"))return}while((e=e.parentNode)!==this.root)}}},function(t,e){var n=t.exports=function(t){var e=Array.prototype.slice.apply(t.querySelectorAll("[data-toggle]"));this.element=t,e.forEach(function(t){t.addEventListener("click",this.toggle.bind(this))},this)};n.prototype={toggle:function(t){var e=t.target;do if(e.hasAttribute("data-toggle"))return e.classList.toggle("active");while((e=e.parentNode)!==this.element)}}},function(t,e,n){var o=n(9),i=function(t,e){var n={bubbles:!1,cancelable:!1,detail:void 0};for(var o in e)e.hasOwnProperty(o)&&(n[o]=e[o]);var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),i},r=t.exports=function(t){if(this.root=t,this.tourElements=Array.prototype.slice.apply(t.querySelectorAll("[data-tour]")),this.tourElements.length>0){this.tours={},this.currentTourName=null,this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-tour-opener]"));var e=document.createElement("div");if(e.classList.add("tour-overlay","overlay-hidden"),this.tourOverlay=t.body.appendChild(e),this.initialize(),this.openers.length<this.tourElements.length){var n=this,o=n.openers.map(function(t){return t.getAttribute("data-tour-opener")});n.tourElements.forEach(function(t){var e=t.getAttribute("data-tour-name");o.includes(e)||n.openTour(e)})}}};r.prototype={initialize:function(){var t=this;t.tourElements.forEach(function(e){t.initializeTour(e)}),t.attachEvents()},initializeTour:function(t){var e=this,n=t.getAttribute("data-tour-name"),i=new o.Tour({defaults:{showCancelLink:!0,buttons:[{text:t.getAttribute("data-tour-skip"),classes:"btn-default",action:function(){e.closeTour(n)}},{text:t.getAttribute("data-tour-next"),classes:"btn-primary",action:function(){e.clickNext(n)}}]}});e.tours[n]={tour:i,name:n},e.addSteps(i,t)},addSteps:function(t,e){var n=this,o=Array.prototype.slice.apply(e.querySelectorAll("[data-tour-step]")),i=o.sort(function(t,e){var n=parseInt(t.getAttribute("data-step-number")),o=parseInt(e.getAttribute("data-step-number"));return n>o?1:o>n?-1:0});i.forEach(function(o,r){var a={title:o.getAttribute("data-title")||"",text:o.innerHTML},s=o.getAttribute("data-classes")||"",l=o.getAttribute("data-attach-to-element"),u=o.getAttribute("data-attach-to-position"),c={left:"0 25px",right:"0 -25px",top:"25px 0",bottom:"-25px 0"}[u];s&&(a.classes=s.split(" ")),l&&u&&c&&(a.attachTo={element:l,on:u},a.tetherOptions={offset:c}),i.length-1===r&&(a.buttons=[{text:e.getAttribute("data-tour-done"),classes:"btn-primary",action:t.complete}]),t.addStep(a),t.on("active",function(){n.tourOverlay.classList.remove("overlay-hidden")}),t.on("inactive",function(){n.tourOverlay.classList.add("overlay-hidden")})})},attachEvents:function(){var t=this;t.openers.forEach(function(e){e.addEventListener("click",t.openTour.bind(t,e.getAttribute("data-tour-opener")))},t),document.addEventListener("keyup",function(e){var n=e.which||e.keyCode;null!==t.currentTourName&&27===n&&t.closeTour(t.currentTourName)}),t.tourOverlay.addEventListener("click",function(){t.closeTour(t.currentTourName)})},openTour:function(t){var e=this.tours[t];this.currentTourName=e.name,e.tour.start(),this.tourOverlay.classList.remove("tour-overlay-hidden")},clickNext:function(t){var e=this.tours[t],n={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new i("next",{detail:n})),e.tour.next()},closeTour:function(t){var e=this.tours[t],n={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new i("cancel",{detail:n})),e.tour.cancel()}}},function(t,e,n){var o,i,r;/*! tether-shepherd 1.2.0 */
!function(a,s){i=[n(10)],o=s,r="function"==typeof o?o.apply(e,i):o,!(void 0!==r&&(t.exports=r))}(this,function(t){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function o(t){var e=document.createElement("div");return e.innerHTML=t,e.children[0]}function i(t,e){var n=void 0;return"undefined"!=typeof t.matches?n=t.matches:"undefined"!=typeof t.matchesSelector?n=t.matchesSelector:"undefined"!=typeof t.msMatchesSelector?n=t.msMatchesSelector:"undefined"!=typeof t.webkitMatchesSelector?n=t.webkitMatchesSelector:"undefined"!=typeof t.mozMatchesSelector?n=t.mozMatchesSelector:"undefined"!=typeof t.oMatchesSelector&&(n=t.oMatchesSelector),n.call(t,e)}function r(t,e){if(null===t||"undefined"==typeof t)return t;if("object"==typeof t)return t;var n=t.split(" "),o=n.length,i=e.length;o>i&&(n[0]=n.slice(0,o-i+1).join(" "),n.splice(1,i));for(var r={},a=0;i>a;++a){var s=e[a];r[s]=n[a]}return r}var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),s=function(t,e,n){for(var o=!0;o;){var i=t,r=e,a=n;s=u=l=void 0,o=!1,null===i&&(i=Function.prototype);var s=Object.getOwnPropertyDescriptor(i,r);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(i);if(null===u)return;t=u,e=r,n=a,o=!0}},l=t.Utils,u=l.Evented,c=l.addClass,f=l.extend,d=l.hasClass,p=l.removeClass,h=l.uniqueId,g=new u,v={top:"bottom center",left:"middle right",right:"middle left",bottom:"top center",center:"middle center"},y=function(l){function u(t,n){return e(this,u),s(Object.getPrototypeOf(u.prototype),"constructor",this).call(this,t,n),this.tour=t,this.bindMethods(),this.setOptions(n),this}return n(u,l),a(u,[{key:"bindMethods",value:function(){var t=this,e=["_show","show","hide","isOpen","cancel","complete","scrollTo","destroy"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"setOptions",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t,this.destroy(),this.id=this.options.id||this.id||"step-"+h();var e=this.options.when;if(e)for(var n in e)if({}.hasOwnProperty.call(e,n)){var o=e[n];this.on(n,o,this)}this.options.buttons||(this.options.buttons=[{text:"Next",action:this.tour.next}])}},{key:"getTour",value:function(){return this.tour}},{key:"bindAdvance",value:function(){var t=this,e=r(this.options.advanceOn,["selector","event"]),n=e.event,o=e.selector,a=function(e){t.isOpen()&&("undefined"!=typeof o?i(e.target,o)&&t.tour.next():t.el&&e.target===t.el&&t.tour.next())};document.body.addEventListener(n,a),this.on("destroy",function(){return document.body.removeEventListener(n,a)})}},{key:"getAttachTo",value:function(){var t=r(this.options.attachTo,["element","on"])||{},e=t.element;if("string"==typeof e&&(t.element=document.querySelector(e),!t.element))throw new Error("The element for this Shepherd step was not found "+e);return t}},{key:"setupTether",value:function(){if("undefined"==typeof t)throw new Error("Using the attachment feature of Shepherd requires the Tether library");var e=this.getAttachTo(),n=v[e.on||"right"];"undefined"==typeof e.element&&(e.element="viewport",n="middle center");var o={classPrefix:"shepherd",element:this.el,constraints:[{to:"window",pin:!0,attachment:"together"}],target:e.element,offset:e.offset||"0 0",attachment:n};this.tether&&this.tether.destroy(),this.tether=new t(f(o,this.options.tetherOptions))}},{key:"show",value:function(){var t=this;if("undefined"!=typeof this.options.beforeShowPromise){var e=this.options.beforeShowPromise();if("undefined"!=typeof e)return e.then(function(){return t._show()})}this._show()}},{key:"_show",value:function(){var t=this;this.trigger("before-show"),this.el||this.render(),c(this.el,"shepherd-open"),document.body.setAttribute("data-shepherd-step",this.id),this.setupTether(),this.options.scrollTo&&setTimeout(function(){t.scrollTo()}),this.trigger("show")}},{key:"hide",value:function(){this.trigger("before-hide"),p(this.el,"shepherd-open"),document.body.removeAttribute("data-shepherd-step"),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("hide")}},{key:"isOpen",value:function(){return d(this.el,"shepherd-open")}},{key:"cancel",value:function(){this.tour.cancel(),this.trigger("cancel")}},{key:"complete",value:function(){this.tour.complete(),this.trigger("complete")}},{key:"scrollTo",value:function(){var t=this.getAttachTo(),e=t.element;"undefined"!=typeof this.options.scrollToHandler?this.options.scrollToHandler(e):"undefined"!=typeof e&&e.scrollIntoView()}},{key:"destroy",value:function(){"undefined"!=typeof this.el&&(document.body.removeChild(this.el),delete this.el),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("destroy")}},{key:"render",value:function(){var t=this;"undefined"!=typeof this.el&&this.destroy(),this.el=o("<div class='shepherd-step "+(this.options.classes||"")+"' data-id='"+this.id+"' "+(this.options.idAttribute?'id="'+this.options.idAttribute+'"':"")+"></div>");var e=document.createElement("div");e.className="shepherd-content",this.el.appendChild(e);var n=document.createElement("header");if(e.appendChild(n),"undefined"!=typeof this.options.title&&(n.innerHTML+="<h3 class='shepherd-title'>"+this.options.title+"</h3>",this.el.className+=" shepherd-has-title"),this.options.showCancelLink){var i=o("<a href class='shepherd-cancel-link'>✕</a>");n.appendChild(i),this.el.className+=" shepherd-has-cancel-link",this.bindCancelLink(i)}"undefined"!=typeof this.options.text&&!function(){var n=o("<div class='shepherd-text'></div>"),i=t.options.text;"function"==typeof i&&(i=i.call(t,n)),i instanceof HTMLElement?n.appendChild(i):("string"==typeof i&&(i=[i]),i.map(function(t){n.innerHTML+="<p>"+t+"</p>"})),e.appendChild(n)}();var r=document.createElement("footer");this.options.buttons&&!function(){var e=o("<ul class='shepherd-buttons'></ul>");t.options.buttons.map(function(n){var i=o("<li><a class='shepherd-button "+(n.classes||"")+"'>"+n.text+"</a>");e.appendChild(i),t.bindButtonEvents(n,i.querySelector("a"))}),r.appendChild(e)}(),e.appendChild(r),document.body.appendChild(this.el),this.setupTether(),this.options.advanceOn&&this.bindAdvance()}},{key:"bindCancelLink",value:function(t){var e=this;t.addEventListener("click",function(t){t.preventDefault(),e.cancel()})}},{key:"bindButtonEvents",value:function(t,e){var n=this;t.events=t.events||{},"undefined"!=typeof t.action&&(t.events.click=t.action);for(var o in t.events)if({}.hasOwnProperty.call(t.events,o)){var i=t.events[o];"string"==typeof i&&!function(){var t=i;i=function(){return n.tour.show(t)}}(),e.addEventListener(o,i)}this.on("destroy",function(){for(var n in t.events)if({}.hasOwnProperty.call(t.events,n)){var o=t.events[n];e.removeEventListener(n,o)}})}}]),u}(u),m=function(t){function o(){var t=this,n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];e(this,o),s(Object.getPrototypeOf(o.prototype),"constructor",this).call(this,n),this.bindMethods(),this.options=n,this.steps=this.options.steps||[];var i=["complete","cancel","hide","start","show","active","inactive"];return i.map(function(e){!function(e){t.on(e,function(n){n=n||{},n.tour=t,g.trigger(e,n)})}(e)}),this}return n(o,t),a(o,[{key:"bindMethods",value:function(){var t=this,e=["next","back","cancel","complete","hide"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"addStep",value:function(t,e){return"undefined"==typeof e&&(e=t),e instanceof y?e.tour=this:("string"!=typeof t&&"number"!=typeof t||(e.id=t.toString()),e=f({},this.options.defaults,e),e=new y(this,e)),this.steps.push(e),this}},{key:"getById",value:function(t){for(var e=0;e<this.steps.length;++e){var n=this.steps[e];if(n.id===t)return n}}},{key:"getCurrentStep",value:function(){return this.currentStep}},{key:"next",value:function(){var t=this.steps.indexOf(this.currentStep);t===this.steps.length-1?(this.hide(t),this.trigger("complete"),this.done()):this.show(t+1,!0)}},{key:"back",value:function(){var t=this.steps.indexOf(this.currentStep);this.show(t-1,!1)}},{key:"cancel",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("cancel"),this.done()}},{key:"complete",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("complete"),this.done()}},{key:"hide",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("hide"),this.done()}},{key:"done",value:function(){g.activeTour=null,p(document.body,"shepherd-active"),this.trigger("inactive",{tour:this})}},{key:"show",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];this.currentStep?this.currentStep.hide():(c(document.body,"shepherd-active"),this.trigger("active",{tour:this})),g.activeTour=this;var n=void 0;if(n="string"==typeof t?this.getById(t):this.steps[t])if("undefined"==typeof n.options.showOn||n.options.showOn())this.trigger("show",{step:n,previous:this.currentStep}),this.currentStep=n,n.show();else{var o=this.steps.indexOf(n),i=e?o+1:o-1;this.show(i,e)}}},{key:"start",value:function(){this.trigger("start"),this.currentStep=null,this.next()}}]),o}(u);return f(g,{Tour:m,Step:y,Evented:u}),g})},function(t,e,n){var o,i;/*! tether 1.2.0 */
!function(r,a){o=a,i="function"==typeof o?o.call(e,n,e,t):o,!(void 0!==i&&(t.exports=i))}(this,function(t,e,n){"use strict";function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t){var e=getComputedStyle(t)||{},n=e.position;if("fixed"===n)return t;for(var o=t;o=o.parentNode;){var i=void 0;try{i=getComputedStyle(o)}catch(r){}if("undefined"==typeof i||null===i)return o;var a=i,s=a.overflow,l=a.overflowX,u=a.overflowY;if(/(auto|scroll)/.test(s+u+l)&&("absolute"!==n||["relative","absolute","fixed"].indexOf(i.position)>=0))return o}return document.body}function r(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var n=e.documentElement,o={},i=t.getBoundingClientRect();for(var r in i)o[r]=i[r];var a=T(e);return o.top-=a.top,o.left-=a.left,"undefined"==typeof o.width&&(o.width=document.body.scrollWidth-o.left-o.right),"undefined"==typeof o.height&&(o.height=document.body.scrollHeight-o.top-o.bottom),o.top=o.top-n.clientTop,o.left=o.left-n.clientLeft,o.right=e.body.clientWidth-o.width-o.left,o.bottom=e.body.clientHeight-o.height-o.top,o}function a(t){return t.offsetParent||document.documentElement}function s(){var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");l(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var n=t.offsetWidth;e.style.overflow="scroll";var o=t.offsetWidth;n===o&&(o=e.clientWidth),document.body.removeChild(e);var i=n-o;return{width:i,height:i}}function l(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var n in e)({}).hasOwnProperty.call(e,n)&&(t[n]=e[n])}),t}function u(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var n=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),o=d(t).replace(n," ");p(t,o)}}function c(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{u(t,e);var n=d(t)+(" "+e);p(t,n)}}function f(t,e){if("undefined"!=typeof t.classList)return t.classList.contains(e);var n=d(t);return new RegExp("(^| )"+e+"( |$)","gi").test(n)}function d(t){return t.className instanceof SVGAnimatedString?t.className.baseVal:t.className}function p(t,e){t.setAttribute("class",e)}function h(t,e,n){n.forEach(function(n){-1===e.indexOf(n)&&f(t,n)&&u(t,n)}),e.forEach(function(e){f(t,e)||c(t,e)})}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function g(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+n>=e&&e>=t-n}function v(){return"undefined"!=typeof performance&&"undefined"!=typeof performance.now?performance.now():+new Date}function y(){for(var t={top:0,left:0},e=arguments.length,n=Array(e),o=0;e>o;o++)n[o]=arguments[o];return n.forEach(function(e){var n=e.top,o=e.left;"string"==typeof n&&(n=parseFloat(n,10)),"string"==typeof o&&(o=parseFloat(o,10)),t.top+=n,t.left+=o}),t}function m(t,e){return"string"==typeof t.left&&-1!==t.left.indexOf("%")&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&-1!==t.top.indexOf("%")&&(t.top=parseFloat(t.top,10)/100*e.height),t}function b(t,e){return"scrollParent"===e?e=t.scrollParent:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),"undefined"!=typeof e.nodeType&&!function(){var t=r(e),n=t,o=getComputedStyle(e);e=[n.left,n.top,t.width+n.left,t.height+n.top],$.forEach(function(t,n){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[n]+=parseFloat(o["border"+t+"Width"]):e[n]-=parseFloat(o["border"+t+"Width"])})}(),e}var x=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),w=void 0;"undefined"==typeof w&&(w={modules:[]});var S=function(){var t=0;return function(){return++t}}(),C={},T=function(t){var e=t._tetherZeroElement;"undefined"==typeof e&&(e=t.createElement("div"),e.setAttribute("data-tether-id",S()),l(e.style,{top:0,left:0,position:"absolute"}),t.body.appendChild(e),t._tetherZeroElement=e);var n=e.getAttribute("data-tether-id");if("undefined"==typeof C[n]){C[n]={};var o=e.getBoundingClientRect();for(var i in o)C[n][i]=o[i];k(function(){delete C[n]})}return C[n]},E=[],k=function(t){E.push(t)},P=function(){for(var t=void 0;t=E.pop();)t()},A=function(){function t(){o(this,t)}return x(t,[{key:"on",value:function(t,e,n){var o=arguments.length<=3||void 0===arguments[3]?!1:arguments[3];"undefined"==typeof this.bindings&&(this.bindings={}),"undefined"==typeof this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:o})}},{key:"once",value:function(t,e,n){this.on(t,e,n,!0)}},{key:"off",value:function(t,e){if("undefined"==typeof this.bindings||"undefined"==typeof this.bindings[t])if("undefined"==typeof e)delete this.bindings[t];else for(var n=0;n<this.bindings[t].length;)this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):++n}},{key:"trigger",value:function(t){if("undefined"!=typeof this.bindings&&this.bindings[t]){for(var e=0,n=arguments.length,o=Array(n>1?n-1:0),i=1;n>i;i++)o[i-1]=arguments[i];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],a=r.handler,s=r.ctx,l=r.once,u=s;"undefined"==typeof u&&(u=this),a.apply(u,o),l?this.bindings[t].splice(e,1):++e}}}}]),t}();w.Utils={getScrollParent:i,getBounds:r,getOffsetParent:a,extend:l,addClass:c,removeClass:u,hasClass:f,updateClasses:h,defer:k,flush:P,uniqueId:S,Evented:A,getScrollBarSize:s};var O=function(){function t(t,e){var n=[],o=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(l){i=!0,r=l}finally{try{!o&&s["return"]&&s["return"]()}finally{if(i)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),x=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();if("undefined"==typeof w)throw new Error("You must include the utils.js file before tether.js");var V=w.Utils,i=V.getScrollParent,r=V.getBounds,a=V.getOffsetParent,l=V.extend,c=V.addClass,u=V.removeClass,h=V.updateClasses,k=V.defer,P=V.flush,s=V.getScrollBarSize,L=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","webkitTransform","OTransform","MozTransform","msTransform"],n=0;n<e.length;++n){var o=e[n];if(void 0!==t.style[o])return o}}(),F=[],j=function(){F.forEach(function(t){t.position(!1)}),P()};!function(){var t=null,e=null,n=null,o=function i(){return"undefined"!=typeof e&&e>16?(e=Math.min(e-16,250),void(n=setTimeout(i,250))):void("undefined"!=typeof t&&v()-t<10||("undefined"!=typeof n&&(clearTimeout(n),n=null),t=v(),j(),e=v()-t))};"undefined"!=typeof window&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,o)})}();var N={center:"center",left:"right",right:"left"},H={middle:"middle",top:"bottom",bottom:"top"},M={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},z=function(t,e){var n=t.left,o=t.top;return"auto"===n&&(n=N[e.left]),"auto"===o&&(o=H[e.top]),{left:n,top:o}},q=function(t){var e=t.left,n=t.top;return"undefined"!=typeof M[t.left]&&(e=M[t.left]),"undefined"!=typeof M[t.top]&&(n=M[t.top]),{left:e,top:n}},W=function(t){var e=t.split(" "),n=O(e,2),o=n[0],i=n[1];return{top:o,left:i}},R=W,B=function(){function t(e){var n=this;o(this,t),this.position=this.position.bind(this),F.push(this),this.history=[],this.setOptions(e,!1),w.modules.forEach(function(t){"undefined"!=typeof t.initialize&&t.initialize.call(n)}),this.position()}return x(t,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return"undefined"!=typeof e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,n=arguments.length<=1||void 0===arguments[1]?!0:arguments[1],o={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=l(o,t);var r=this.options,a=r.element,s=r.target,u=r.targetModifier;if(this.element=a,this.target=s,this.targetModifier=u,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if("undefined"==typeof e[t])throw new Error("Tether Error: Both element and target must be defined");"undefined"!=typeof e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),c(this.element,this.getClass("element")),this.options.addTargetClasses!==!1&&c(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=R(this.options.targetAttachment),this.attachment=R(this.options.attachment),this.offset=W(this.options.offset),this.targetOffset=W(this.options.targetOffset),"undefined"!=typeof this.scrollParent&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParent=this.target:this.scrollParent=i(this.target),this.options.enabled!==!1&&this.enable(n)}},{key:"getTargetBounds",value:function(){if("undefined"==typeof this.targetModifier)return r(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=r(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,n=this.target;n===document.body?(n=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=r(n);var o=getComputedStyle(n),i=n.scrollWidth>n.clientWidth||[o.overflow,o.overflowX].indexOf("scroll")>=0||this.target!==document.body,a=0;i&&(a=15);var s=t.height-parseFloat(o.borderTopWidth)-parseFloat(o.borderBottomWidth)-a,e={width:15,height:.975*s*(s/n.scrollHeight),left:t.left+t.width-parseFloat(o.borderLeftWidth)-15},l=0;408>s&&this.target===document.body&&(l=-11e-5*Math.pow(s,2)-.00727*s+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var u=this.target.scrollTop/(n.scrollHeight-s);return e.top=u*(s-e.height-l)+t.top+parseFloat(o.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return"undefined"==typeof this._cache&&(this._cache={}),"undefined"==typeof this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];this.options.addTargetClasses!==!1&&c(this.target,this.getClass("enabled")),c(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParent!==document&&this.scrollParent.addEventListener("scroll",this.position),t&&this.position()}},{key:"disable",value:function(){u(this.target,this.getClass("enabled")),u(this.element,this.getClass("enabled")),this.enabled=!1,"undefined"!=typeof this.scrollParent&&this.scrollParent.removeEventListener("scroll",this.position)}},{key:"destroy",value:function(){var t=this;this.disable(),F.forEach(function(e,n){return e===t?void F.splice(n,1):void 0})}},{key:"updateAttachClasses",value:function(t,e){var n=this;t=t||this.attachment,e=e||this.targetAttachment;var o=["left","top","bottom","right","middle","center"];"undefined"!=typeof this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),"undefined"==typeof this._addAttachClasses&&(this._addAttachClasses=[]);var i=this._addAttachClasses;t.top&&i.push(this.getClass("element-attached")+"-"+t.top),t.left&&i.push(this.getClass("element-attached")+"-"+t.left),e.top&&i.push(this.getClass("target-attached")+"-"+e.top),e.left&&i.push(this.getClass("target-attached")+"-"+e.left);var r=[];o.forEach(function(t){r.push(n.getClass("element-attached")+"-"+t),r.push(n.getClass("target-attached")+"-"+t)}),k(function(){"undefined"!=typeof n._addAttachClasses&&(h(n.element,n._addAttachClasses,r),n.options.addTargetClasses!==!1&&h(n.target,n._addAttachClasses,r),delete n._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];if(this.enabled){this.clearCache();var n=z(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,n);var o=this.cache("element-bounds",function(){return r(t.element)}),i=o.width,l=o.height;if(0===i&&0===l&&"undefined"!=typeof this.lastSize){var u=this.lastSize;i=u.width,l=u.height}else this.lastSize={width:i,height:l};var c=this.cache("target-bounds",function(){return t.getTargetBounds()}),f=c,d=m(q(this.attachment),{width:i,height:l}),p=m(q(n),f),h=m(this.offset,{width:i,height:l}),g=m(this.targetOffset,f);d=y(d,h),p=y(p,g);for(var v=c.left+p.left-d.left,b=c.top+p.top-d.top,x=0;x<w.modules.length;++x){var S=w.modules[x],C=S.position.call(this,{left:v,top:b,targetAttachment:n,targetPos:c,elementPos:o,offset:d,targetOffset:p,manualOffset:h,manualTargetOffset:g,scrollbarSize:E,attachment:this.attachment});if(C===!1)return!1;"undefined"!=typeof C&&"object"==typeof C&&(b=C.top,v=C.left)}var T={page:{top:b,left:v},viewport:{top:b-pageYOffset,bottom:pageYOffset-b-l+innerHeight,left:v-pageXOffset,right:pageXOffset-v-i+innerWidth}},E=void 0;return document.body.scrollWidth>window.innerWidth&&(E=this.cache("scrollbar-size",s),T.viewport.bottom-=E.height),document.body.scrollHeight>window.innerHeight&&(E=this.cache("scrollbar-size",s),T.viewport.right-=E.width),-1!==["","static"].indexOf(document.body.style.position)&&-1!==["","static"].indexOf(document.body.parentElement.style.position)||(T.page.bottom=document.body.scrollHeight-b-l,T.page.right=document.body.scrollWidth-v-i),"undefined"!=typeof this.options.optimizations&&this.options.optimizations.moveElement!==!1&&"undefined"==typeof this.targetModifier&&!function(){var e=t.cache("target-offsetparent",function(){return a(t.target)}),n=t.cache("target-offsetparent-bounds",function(){return r(e)}),o=getComputedStyle(e),i=n,s={};if(["Top","Left","Bottom","Right"].forEach(function(t){s[t.toLowerCase()]=parseFloat(o["border"+t+"Width"])}),n.right=document.body.scrollWidth-n.left-i.width+s.right,n.bottom=document.body.scrollHeight-n.top-i.height+s.bottom,T.page.top>=n.top+s.top&&T.page.bottom>=n.bottom&&T.page.left>=n.left+s.left&&T.page.right>=n.right){var l=e.scrollTop,u=e.scrollLeft;T.offset={top:T.page.top-n.top+l-s.top,left:T.page.left-n.left+u-s.left}}}(),this.move(T),this.history.unshift(T),this.history.length>3&&this.history.pop(),e&&P(),!0}}},{key:"move",value:function(t){var e=this;if("undefined"!=typeof this.element.parentNode){var n={};for(var o in t){n[o]={};for(var i in t[o]){for(var r=!1,s=0;s<this.history.length;++s){var u=this.history[s];if("undefined"!=typeof u[o]&&!g(u[o][i],t[o][i])){r=!0;break}}r||(n[o][i]=!0)}}var c={top:"",left:"",right:"",bottom:""},f=function(t,n){var o="undefined"!=typeof e.options.optimizations,i=o?e.options.optimizations.gpu:null;if(i!==!1){var r=void 0,a=void 0;t.top?(c.top=0,r=n.top):(c.bottom=0,r=-n.bottom),t.left?(c.left=0,a=n.left):(c.right=0,a=-n.right),c[L]="translateX("+Math.round(a)+"px) translateY("+Math.round(r)+"px)","msTransform"!==L&&(c[L]+=" translateZ(0)")}else t.top?c.top=n.top+"px":c.bottom=n.bottom+"px",t.left?c.left=n.left+"px":c.right=n.right+"px"},d=!1;if((n.page.top||n.page.bottom)&&(n.page.left||n.page.right)?(c.position="absolute",f(n.page,t.page)):(n.viewport.top||n.viewport.bottom)&&(n.viewport.left||n.viewport.right)?(c.position="fixed",f(n.viewport,t.viewport)):"undefined"!=typeof n.offset&&n.offset.top&&n.offset.left?!function(){c.position="absolute";var o=e.cache("target-offsetparent",function(){return a(e.target)});a(e.element)!==o&&k(function(){e.element.parentNode.removeChild(e.element),o.appendChild(e.element)}),f(n.offset,t.offset),d=!0}():(c.position="absolute",f({top:!0,left:!0},t.page)),!d){for(var p=!0,h=this.element.parentNode;h&&"BODY"!==h.tagName;){if("static"!==getComputedStyle(h).position){p=!1;break}h=h.parentNode}p||(this.element.parentNode.removeChild(this.element),document.body.appendChild(this.element))}var v={},y=!1;for(var i in c){var m=c[i],b=this.element.style[i];""!==b&&""!==m&&["top","left","bottom","right"].indexOf(i)>=0&&(b=parseFloat(b),m=parseFloat(m)),b!==m&&(y=!0,v[i]=m)}y&&k(function(){l(e.element.style,v)})}}}]),t}();B.modules=[],w.position=j;var I=l(B,w),O=function(){function t(t,e){var n=[],o=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(l){i=!0,r=l}finally{try{!o&&s["return"]&&s["return"]()}finally{if(i)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),V=w.Utils,r=V.getBounds,l=V.extend,h=V.updateClasses,k=V.defer,$=["left","top","right","bottom"];w.modules.push({position:function(t){var e=this,n=t.top,o=t.left,i=t.targetAttachment;if(!this.options.constraints)return!0;var a=this.cache("element-bounds",function(){return r(e.element)}),s=a.height,u=a.width;if(0===u&&0===s&&"undefined"!=typeof this.lastSize){var c=this.lastSize;u=c.width,s=c.height}var f=this.cache("target-bounds",function(){return e.getTargetBounds()}),d=f.height,p=f.width,g=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,n=t.pinnedClass;e&&g.push(e),n&&g.push(n)}),g.forEach(function(t){["left","top","right","bottom"].forEach(function(e){g.push(t+"-"+e)})});var v=[],y=l({},i),m=l({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,a=t.attachment,l=t.pin;"undefined"==typeof a&&(a="");var c=void 0,f=void 0;if(a.indexOf(" ")>=0){var h=a.split(" "),g=O(h,2);f=g[0],c=g[1]}else c=f=a;var x=b(e,r);"target"!==f&&"both"!==f||(n<x[1]&&"top"===y.top&&(n+=d,y.top="bottom"),n+s>x[3]&&"bottom"===y.top&&(n-=d,y.top="top")),"together"===f&&(n<x[1]&&"top"===y.top&&("bottom"===m.top?(n+=d,y.top="bottom",n+=s,m.top="top"):"top"===m.top&&(n+=d,y.top="bottom",n-=s,m.top="bottom")),n+s>x[3]&&"bottom"===y.top&&("top"===m.top?(n-=d,y.top="top",n-=s,m.top="bottom"):"bottom"===m.top&&(n-=d,y.top="top",n+=s,m.top="top")),"middle"===y.top&&(n+s>x[3]&&"top"===m.top?(n-=s,m.top="bottom"):n<x[1]&&"bottom"===m.top&&(n+=s,m.top="top"))),"target"!==c&&"both"!==c||(o<x[0]&&"left"===y.left&&(o+=p,y.left="right"),o+u>x[2]&&"right"===y.left&&(o-=p,y.left="left")),"together"===c&&(o<x[0]&&"left"===y.left?"right"===m.left?(o+=p,y.left="right",o+=u,m.left="left"):"left"===m.left&&(o+=p,y.left="right",o-=u,m.left="right"):o+u>x[2]&&"right"===y.left?"left"===m.left?(o-=p,y.left="left",o-=u,m.left="right"):"right"===m.left&&(o-=p,y.left="left",o+=u,m.left="left"):"center"===y.left&&(o+u>x[2]&&"left"===m.left?(o-=u,m.left="right"):o<x[0]&&"right"===m.left&&(o+=u,m.left="left"))),"element"!==f&&"both"!==f||(n<x[1]&&"bottom"===m.top&&(n+=s,m.top="top"),n+s>x[3]&&"top"===m.top&&(n-=s,m.top="bottom")),"element"!==c&&"both"!==c||(o<x[0]&&("right"===m.left?(o+=u,m.left="left"):"center"===m.left&&(o+=u/2,m.left="left")),o+u>x[2]&&("left"===m.left?(o-=u,m.left="right"):"center"===m.left&&(o-=u/2,m.left="right"))),"string"==typeof l?l=l.split(",").map(function(t){return t.trim()}):l===!0&&(l=["top","left","right","bottom"]),l=l||[];var w=[],S=[];n<x[1]&&(l.indexOf("top")>=0?(n=x[1],w.push("top")):S.push("top")),n+s>x[3]&&(l.indexOf("bottom")>=0?(n=x[3]-s,w.push("bottom")):S.push("bottom")),o<x[0]&&(l.indexOf("left")>=0?(o=x[0],w.push("left")):S.push("left")),o+u>x[2]&&(l.indexOf("right")>=0?(o=x[2]-u,w.push("right")):S.push("right")),w.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),v.push(t),w.forEach(function(e){v.push(t+"-"+e)})}(),S.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),v.push(t),S.forEach(function(e){v.push(t+"-"+e)})}(),(w.indexOf("left")>=0||w.indexOf("right")>=0)&&(m.left=y.left=!1),(w.indexOf("top")>=0||w.indexOf("bottom")>=0)&&(m.top=y.top=!1),y.top===i.top&&y.left===i.left&&m.top===e.attachment.top&&m.left===e.attachment.left||e.updateAttachClasses(m,y)}),k(function(){e.options.addTargetClasses!==!1&&h(e.target,v,g),h(e.element,v,g)}),{top:n,left:o}}});var V=w.Utils,r=V.getBounds,h=V.updateClasses,k=V.defer;w.modules.push({position:function(t){var e=this,n=t.top,o=t.left,i=this.cache("element-bounds",function(){return r(e.element)}),a=i.height,s=i.width,l=this.getTargetBounds(),u=n+a,c=o+s,f=[];n<=l.bottom&&u>=l.top&&["left","right"].forEach(function(t){var e=l[t];e!==o&&e!==c||f.push(t)}),o<=l.right&&c>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];e!==n&&e!==u||f.push(t)});var d=[],p=[],g=["left","top","right","bottom"];return d.push(this.getClass("abutted")),g.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),f.length&&p.push(this.getClass("abutted")),f.forEach(function(t){p.push(e.getClass("abutted")+"-"+t)}),k(function(){e.options.addTargetClasses!==!1&&h(e.target,p,d),h(e.element,p,d)}),!0}});var O=function(){function t(t,e){var n=[],o=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(l){i=!0,r=l}finally{try{!o&&s["return"]&&s["return"]()}finally{if(i)throw r}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return w.modules.push({position:function(t){var e=t.top,n=t.left;if(this.options.shift){var o=this.options.shift;"function"==typeof this.options.shift&&(o=this.options.shift.call(this,{top:e,left:n}));var i=void 0,r=void 0;if("string"==typeof o){o=o.split(" "),o[1]=o[1]||o[0];var a=o,s=O(a,2);i=s[0],r=s[1],i=parseFloat(i,10),r=parseFloat(r,10)}else i=o.top,r=o.left;return e+=i,n+=r,{top:e,left:n}}}}),I})}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlZ3VpZGUuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiRHJvcGRvd24iLCJGbGFubmVsRmFjdG9yeSIsIkZseW91dEZhY3RvcnkiLCJNZW51RmFjdG9yeSIsIk1vZGFsRmFjdG9yeSIsIlRvZ2dsZUZhY3RvcnkiLCJUb3VyRmFjdG9yeSIsImVsZW1lbnQiLCJkZCIsIm9yaWVudGF0aW9uIiwiZ2V0QXR0cmlidXRlIiwic2VsZWN0YWJsZSIsImhhc0F0dHJpYnV0ZSIsImNsYXNzTGlzdCIsImFkZCIsInBsYWNlaG9sZGVyIiwicXVlcnlTZWxlY3RvciIsIm9wdHMiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsInZhbCIsImluZGV4IiwiaW5pdEV2ZW50cyIsIm9iaiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInRvZ2dsZSIsImZvckVhY2giLCJvcHQiLCJwcmV2ZW50RGVmYXVsdCIsIm5vZGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwidGV4dENvbnRlbnQiLCJpbm5lckhUTUwiLCJpbm5lclRleHQiLCJ0cmltIiwidmVsb2NpdHkiLCJoaWRlRmxhbm5lbCIsImZsYW5uZWwiLCJob3ZlcmFibGUiLCJkb2N1bWVudCIsImJvZHkiLCJvZmZzZXRXaWR0aCIsIm1vYmlsZUJyZWFrcG9pbnQiLCJsZWZ0IiwiZHVyYXRpb24iLCJjb21wbGV0ZSIsInJlbW92ZSIsInN0eWxlIiwib3ZlcmZsb3ciLCJwb3NpdGlvbkZsYW5uZWwiLCJ0b3AiLCJmbGFubmVsV2lkdGgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsIndpbmRvd1dpZHRoIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFBhcmVudCIsIm9mZnNldEhlaWdodCIsInBhZGRpbmciLCJob3ZlcmFibGVzIiwiYXBwbHkiLCJmbGFubmVsSWQiLCJkaXNtaXNzYWxzIiwiZGlzbWlzc2FsIiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImtleSIsIndoaWNoIiwia2V5Q29kZSIsIndpbmRvdyIsImNvbnRhaW5zIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJpc0FycmF5bGlrZSIsImxlbmd0aCIsInR5cGUiLCIkIiwiaXNXaW5kb3ciLCJub2RlVHlwZSIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwiY29uc3RydWN0b3IiLCJoYXNPd24iLCJlIiwidW5kZWZpbmVkIiwiZWFjaCIsImNhbGxiYWNrIiwiYXJncyIsInZhbHVlIiwiaSIsImRhdGEiLCJleHBhbmRvIiwic3RvcmUiLCJjYWNoZSIsInV1aWQiLCJyZW1vdmVEYXRhIiwia2V5cyIsIl8iLCJleHRlbmQiLCJzcmMiLCJjb3B5SXNBcnJheSIsImNvcHkiLCJuYW1lIiwib3B0aW9ucyIsImNsb25lIiwiYXJndW1lbnRzIiwiZGVlcCIsInF1ZXVlIiwiZWxlbSIsIiRtYWtlQXJyYXkiLCJhcnIiLCJyZXN1bHRzIiwicmV0IiwiT2JqZWN0IiwiZmlyc3QiLCJzZWNvbmQiLCJsZW4iLCJqIiwicHVzaCIsInEiLCJkZXF1ZXVlIiwiZWxlbXMiLCJzaGlmdCIsInVuc2hpZnQiLCJFcnJvciIsIm9mZnNldCIsImJveCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0IiwiY2xpZW50TGVmdCIsInBvc2l0aW9uIiwidG9Mb3dlckNhc2UiLCJwYXJlbnRPZmZzZXQiLCJ0ZXN0Iiwibm9kZU5hbWUiLCJwYXJzZUZsb2F0IiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwiRGF0ZSIsImdldFRpbWUiLCJoYXNPd25Qcm9wZXJ0eSIsInR5cGVzIiwic3BsaXQiLCJWZWxvY2l0eSIsIlV0aWxpdGllcyIsImdsb2JhbCIsImNvbXBhY3RTcGFyc2VBcnJheSIsImFycmF5IiwicmVzdWx0Iiwic2FuaXRpemVFbGVtZW50cyIsImVsZW1lbnRzIiwiVHlwZSIsImlzV3JhcHBlZCIsImlzTm9kZSIsIkRhdGEiLCJyZXNwb25zZSIsImdlbmVyYXRlU3RlcCIsInN0ZXBzIiwiTWF0aCIsInJvdW5kIiwiZ2VuZXJhdGVCZXppZXIiLCJtWDEiLCJtWTEiLCJtWDIiLCJtWTIiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYVgiLCJhR3Vlc3NUIiwiTkVXVE9OX0lURVJBVElPTlMiLCJjdXJyZW50U2xvcGUiLCJjdXJyZW50WCIsImNhbGNTYW1wbGVWYWx1ZXMiLCJrU3BsaW5lVGFibGVTaXplIiwibVNhbXBsZVZhbHVlcyIsImtTYW1wbGVTdGVwU2l6ZSIsImJpbmFyeVN1YmRpdmlkZSIsImFBIiwiYUIiLCJjdXJyZW50VCIsImFicyIsIlNVQkRJVklTSU9OX1BSRUNJU0lPTiIsIlNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TIiwiZ2V0VEZvclgiLCJpbnRlcnZhbFN0YXJ0IiwiY3VycmVudFNhbXBsZSIsImxhc3RTYW1wbGUiLCJkaXN0IiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiTkVXVE9OX01JTl9TTE9QRSIsInByZWNvbXB1dGUiLCJfcHJlY29tcHV0ZWQiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJpc05hTiIsImlzRmluaXRlIiwibWluIiwibWF4IiwiRmxvYXQzMkFycmF5IiwiZiIsImdldENvbnRyb2xQb2ludHMiLCJ4IiwieSIsInN0ciIsImdldEVhc2luZyIsImVhc2luZyIsImlzU3RyaW5nIiwiRWFzaW5ncyIsImdlbmVyYXRlU3ByaW5nUks0IiwiY29uY2F0IiwiZGVmYXVsdHMiLCJFQVNJTkdfREVGQVVMVCIsInRpY2siLCJ0aW1lc3RhbXAiLCJ0aW1lQ3VycmVudCIsImNhbGxzTGVuZ3RoIiwiU3RhdGUiLCJjYWxscyIsImNhbGxDb250YWluZXIiLCJ0aW1lU3RhcnQiLCJmaXJzdFRpY2siLCJ0d2VlbkR1bW15VmFsdWUiLCJwZXJjZW50Q29tcGxldGUiLCJjYWxsTGVuZ3RoIiwidHdlZW5zQ29udGFpbmVyIiwidHJhbnNmb3JtUHJvcGVydHlFeGlzdHMiLCJkaXNwbGF5IiwiZmxleFZhbHVlcyIsImZsZXhWYWx1ZSIsIkNTUyIsInNldFByb3BlcnR5VmFsdWUiLCJ2aXNpYmlsaXR5IiwicHJvcGVydHkiLCJjdXJyZW50VmFsdWUiLCJ0d2VlbiIsImVuZFZhbHVlIiwidHdlZW5EZWx0YSIsInN0YXJ0VmFsdWUiLCJIb29rcyIsInJlZ2lzdGVyZWQiLCJob29rUm9vdCIsImdldFJvb3QiLCJyb290UHJvcGVydHlWYWx1ZUNhY2hlIiwicm9vdFByb3BlcnR5VmFsdWUiLCJhZGp1c3RlZFNldERhdGEiLCJ1bml0VHlwZSIsInNjcm9sbERhdGEiLCJOb3JtYWxpemF0aW9ucyIsIm1vYmlsZUhBIiwidHJhbnNmb3JtQ2FjaGUiLCJ0cmFuc2xhdGUzZCIsImZsdXNoVHJhbnNmb3JtQ2FjaGUiLCJwcm9ncmVzcyIsImNvbXBsZXRlQ2FsbCIsImlzVGlja2luZyIsInRpY2tlciIsImNhbGxJbmRleCIsImlzU3RvcHBlZCIsInJlc29sdmVyIiwicmVtYWluaW5nQ2FsbHNFeGlzdCIsImxvb3AiLCJpc0FuaW1hdGluZyIsInRyYW5zZm9ybUhBUHJvcGVydHlFeGlzdHMiLCJMaXN0cyIsInRyYW5zZm9ybXMzRCIsInRyYW5zZm9ybU5hbWUiLCJkZWZhdWx0VmFsdWUiLCJSZWdFeHAiLCJWYWx1ZXMiLCJyZW1vdmVDbGFzcyIsImVycm9yIiwic2V0VGltZW91dCIsInByb3BlcnR5TmFtZSIsInR3ZWVuQ29udGFpbmVyIiwiZGVsYXkiLCJJRSIsImRvY3VtZW50TW9kZSIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJBRlNoaW0iLCJ0aW1lTGFzdCIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRpbWVEZWx0YSIsInZhcmlhYmxlIiwiaXNGdW5jdGlvbiIsImlzTm9kZUxpc3QiLCJqcXVlcnkiLCJaZXB0byIsInplcHRvIiwiaXNaIiwiaXNTVkciLCJTVkdFbGVtZW50IiwiaXNFbXB0eU9iamVjdCIsImlzSlF1ZXJ5IiwiYW5pbWF0ZSIsIkRVUkFUSU9OX0RFRkFVTFQiLCJpc01vYmlsZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzQW5kcm9pZCIsImlzR2luZ2VyYnJlYWQiLCJpc0Nocm9tZSIsImNocm9tZSIsImlzRmlyZWZveCIsInByZWZpeEVsZW1lbnQiLCJwcmVmaXhNYXRjaGVzIiwic2Nyb2xsQW5jaG9yIiwic2Nyb2xsUHJvcGVydHlMZWZ0Iiwic2Nyb2xsUHJvcGVydHlUb3AiLCJSZWRpcmVjdHMiLCJQcm9taXNlIiwiYmVnaW4iLCJfY2FjaGVWYWx1ZXMiLCJjb21wdXRlZFN0eWxlIiwiaG9vayIsIm1vY2siLCJ2ZXJzaW9uIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwiZGVidWciLCJkb2N1bWVudEVsZW1lbnQiLCJwYXJlbnROb2RlIiwic3ByaW5nQWNjZWxlcmF0aW9uRm9yU3RhdGUiLCJzdGF0ZSIsInRlbnNpb24iLCJmcmljdGlvbiIsInYiLCJzcHJpbmdFdmFsdWF0ZVN0YXRlV2l0aERlcml2YXRpdmUiLCJpbml0aWFsU3RhdGUiLCJkdCIsImRlcml2YXRpdmUiLCJkeCIsImR2Iiwic3ByaW5nSW50ZWdyYXRlU3RhdGUiLCJhIiwiYiIsImQiLCJkeGR0IiwiZHZkdCIsInNwcmluZ1JLNEZhY3RvcnkiLCJoYXZlX2R1cmF0aW9uIiwibGFzdF9zdGF0ZSIsImluaXRTdGF0ZSIsInBhdGgiLCJ0aW1lX2xhcHNlZCIsInRvbGVyYW5jZSIsIkRUIiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsInNwcmluZyIsImV4cCIsImVhc2luZ0FycmF5IiwiUmVnRXgiLCJpc0hleCIsInZhbHVlVW53cmFwIiwid3JhcHBlZFZhbHVlQWxyZWFkeUV4dHJhY3RlZCIsInZhbHVlU3BsaXQiLCJjb2xvcnMiLCJ0cmFuc2Zvcm1zQmFzZSIsInRlbXBsYXRlcyIsInRleHRTaGFkb3ciLCJib3hTaGFkb3ciLCJjbGlwIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwidHJhbnNmb3JtT3JpZ2luIiwicGVyc3BlY3RpdmVPcmlnaW4iLCJyZWdpc3RlciIsInJnYkNvbXBvbmVudHMiLCJyb290UHJvcGVydHkiLCJob29rVGVtcGxhdGUiLCJob29rTmFtZXMiLCJkZWZhdWx0VmFsdWVzIiwibWF0Y2giLCJqb2luIiwiZnVsbEhvb2tOYW1lIiwiaG9va1Bvc2l0aW9uIiwiaG9va0RhdGEiLCJjbGVhblJvb3RQcm9wZXJ0eVZhbHVlIiwiaXNDU1NOdWxsVmFsdWUiLCJleHRyYWN0VmFsdWUiLCJpbmplY3RWYWx1ZSIsImhvb2tWYWx1ZSIsInJvb3RQcm9wZXJ0eVZhbHVlUGFydHMiLCJyb290UHJvcGVydHlWYWx1ZVVwZGF0ZWQiLCJwcm9wZXJ0eVZhbHVlIiwiZXh0cmFjdGVkIiwicmVwbGFjZSIsImJsdXIiLCJibHVyQ29tcG9uZW50Iiwib3BhY2l0eSIsInpvb20iLCJwYXJzZUludCIsImludmFsaWQiLCJzdWJzdHIiLCJjb2xvck5hbWUiLCJjb252ZXJ0ZWQiLCJjb2xvck5hbWVzIiwiYmxhY2siLCJibHVlIiwiZ3JheSIsImdyZWVuIiwicmVkIiwid2hpdGUiLCJoZXhUb1JnYiIsIk5hbWVzIiwiY2FtZWxDYXNlIiwic3ViTWF0Y2giLCJ0b1VwcGVyQ2FzZSIsIlNWR0F0dHJpYnV0ZSIsIlNWR0F0dHJpYnV0ZXMiLCJwcmVmaXhDaGVjayIsInZlbmRvcnMiLCJ2ZW5kb3JzTGVuZ3RoIiwicHJvcGVydHlQcmVmaXhlZCIsImhleCIsInJnYlBhcnRzIiwic2hvcnRmb3JtUmVnZXgiLCJsb25nZm9ybVJlZ2V4IiwiciIsImciLCJleGVjIiwiZ2V0VW5pdFR5cGUiLCJnZXREaXNwbGF5VHlwZSIsInRhZ05hbWUiLCJhZGRDbGFzcyIsImNsYXNzTmFtZSIsImdldFByb3BlcnR5VmFsdWUiLCJmb3JjZVN0eWxlTG9va3VwIiwiY29tcHV0ZVByb3BlcnR5VmFsdWUiLCJyZXZlcnREaXNwbGF5IiwidG9nZ2xlRGlzcGxheSIsImNvbXB1dGVkVmFsdWUiLCJjc3MiLCJjb250ZW50Qm94SGVpZ2h0IiwiY29udGVudEJveFdpZHRoIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm5vcm1hbGl6ZWRQcm9wZXJ0eU5hbWUiLCJub3JtYWxpemVkUHJvcGVydHlWYWx1ZSIsImdldEJCb3giLCJjb25zb2xlIiwibG9nIiwiY29udGFpbmVyIiwiZGlyZWN0aW9uIiwic2Nyb2xsVG8iLCJhbHRlcm5hdGVWYWx1ZSIsImhvb2tOYW1lIiwic2V0QXR0cmlidXRlIiwiZ2V0VHJhbnNmb3JtRmxvYXQiLCJ0cmFuc2Zvcm1Qcm9wZXJ0eSIsInRyYW5zZm9ybVN0cmluZyIsIlNWR1RyYW5zZm9ybXMiLCJ0cmFuc2xhdGUiLCJza2V3WCIsInNrZXdZIiwic2NhbGUiLCJyb3RhdGUiLCJ0cmFuc2Zvcm1WYWx1ZSIsInBlcnNwZWN0aXZlIiwiYXJnMiIsImFyZzMiLCJhZGp1c3RlZFNldCIsImdldENoYWluIiwiaXNVdGlsaXR5IiwicHJvbWlzZURhdGEiLCJwcm9taXNlIiwiZWxlbWVudHNXcmFwcGVkIiwicHJvY2Vzc0VsZW1lbnQiLCJidWlsZFF1ZXVlIiwibmV4dCIsInBhcnNlUHJvcGVydHlWYWx1ZSIsInZhbHVlRGF0YSIsInNraXBSZXNvbHZpbmdFYXNpbmciLCJlbGVtZW50c0luZGV4IiwiZWxlbWVudHNMZW5ndGgiLCJzZXBhcmF0ZVZhbHVlIiwibnVtZXJpY1ZhbHVlIiwiY2FsY3VsYXRlVW5pdFJhdGlvcyIsInNhbWVSYXRpb0luZGljYXRvcnMiLCJteVBhcmVudCIsImZvbnRTaXplIiwic2FtZVBlcmNlbnRSYXRpbyIsImNhbGxVbml0Q29udmVyc2lvbkRhdGEiLCJsYXN0UG9zaXRpb24iLCJsYXN0UGFyZW50Iiwic2FtZUVtUmF0aW8iLCJsYXN0Rm9udFNpemUiLCJtZWFzdXJlbWVudCIsInVuaXRSYXRpb3MiLCJlbVRvUHgiLCJsYXN0RW1Ub1B4IiwicGVyY2VudFRvUHhXaWR0aCIsImxhc3RQZXJjZW50VG9QeFdpZHRoIiwicGVyY2VudFRvUHhIZWlnaHQiLCJsYXN0UGVyY2VudFRvUHhIZWlnaHQiLCJkdW1teSIsImNyZWF0ZUVsZW1lbnROUyIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJyZW1Ub1B4IiwidndUb1B4IiwiaW5uZXJXaWR0aCIsInZoVG9QeCIsImlubmVySGVpZ2h0IiwiSlNPTiIsInN0cmluZ2lmeSIsImFjdGlvbiIsInNjcm9sbFBvc2l0aW9uQ3VycmVudCIsInNjcm9sbFBvc2l0aW9uQ3VycmVudEFsdGVybmF0ZSIsInNjcm9sbFBvc2l0aW9uRW5kIiwic2Nyb2xsRGlyZWN0aW9uIiwiYXhpcyIsInNjcm9sbE9mZnNldCIsInNjcm9sbCIsImxhc3RUd2VlbnNDb250YWluZXIiLCJsYXN0VHdlZW4iLCJsYXN0U3RhcnRWYWx1ZSIsInByb3BlcnRpZXNNYXAiLCJjb2xvckNvbXBvbmVudHMiLCJlbmRWYWx1ZVJHQiIsInN0YXJ0VmFsdWVSR0IiLCJkYXRhQXJyYXkiLCJzZXBhcmF0ZWRWYWx1ZSIsImVuZFZhbHVlVW5pdFR5cGUiLCJzdGFydFZhbHVlVW5pdFR5cGUiLCJvcGVyYXRvciIsImVsZW1lbnRVbml0Q29udmVyc2lvbkRhdGEiLCJ2ZWxvY2l0eVF1ZXVlRW50cnlGbGFnIiwiZGVsYXlUaW1lciIsImNsZWFyUXVldWUiLCJhcmd1bWVudEluZGV4Iiwic3ludGFjdGljU3VnYXIiLCJwcm9wZXJ0aWVzIiwibmFtZXMiLCJvIiwic3RhcnRpbmdBcmd1bWVudFBvc2l0aW9uIiwicmVqZWN0ZXIiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2xlYXJUaW1lb3V0IiwiaXRlbSIsImNhbGxzVG9TdG9wIiwiYWN0aXZlQ2FsbCIsImsiLCJhY3RpdmVFbGVtZW50IiwicXVldWVOYW1lIiwibCIsImFjdGl2ZVR3ZWVuIiwiZHVyYXRpb25PcmlnaW5hbCIsImRlbGF5T3JpZ2luYWwiLCJiYWNrd2FyZHMiLCJyZXZlcnNlIiwiZWxlbWVudEluZGV4Iiwic3RhZ2dlciIsImRyYWciLCJhYm9ydEVycm9yIiwicmV2ZXJzZUNhbGxzQ291bnQiLCJyZXZlcnNlT3B0aW9ucyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhpZGRlbiIsImVsZW1lbnRzU2l6ZSIsImNvbXB1dGVkVmFsdWVzIiwiaGVpZ2h0IiwibWFyZ2luQm90dG9tIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJpbmxpbmVWYWx1ZXMiLCJvcmlnaW5hbENvbXBsZXRlIiwiZmx5b3V0IiwibWVudXMiLCJ0b2dnbGVzIiwibWVudSIsIm9wZW5lcnMiLCJhdHRhY2hFdmVudHMiLCJkaXNtaXNzIiwiYmluZCIsIm9wZW5lciIsIm9wZW4iLCJtb2RhbHMiLCJtb2RhbCIsImNsb3NlYWJsZSIsImN1cnJlbnRUYXJnZXQiLCJTaGVwaGVyZCIsIkN1c3RvbUV2ZW50IiwiZXZlbnROYW1lIiwicGFyYW1zIiwiZXZlbnRQYXJhbXMiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJ0b3VyRWxlbWVudHMiLCJ0b3VycyIsImN1cnJlbnRUb3VyTmFtZSIsInRvdXJPdmVybGF5RWxlbWVudCIsInRvdXJPdmVybGF5IiwiaW5pdGlhbGl6ZSIsInRoYXQiLCJvcGVuZXJOYW1lcyIsIm1hcCIsInRvdXJFbGVtZW50IiwidG91ck5hbWUiLCJpbmNsdWRlcyIsIm9wZW5Ub3VyIiwiaW5pdGlhbGl6ZVRvdXIiLCJ0b3VyIiwiVG91ciIsInNob3dDYW5jZWxMaW5rIiwiYnV0dG9ucyIsInRleHQiLCJjbGFzc2VzIiwiY2xvc2VUb3VyIiwiY2xpY2tOZXh0IiwiYWRkU3RlcHMiLCJzb3J0ZWRTdGVwcyIsInNvcnQiLCJzdGVwQSIsInN0ZXBCIiwic3RlcCIsInN0ZXBDb25maWciLCJ0aXRsZSIsImF0dGFjaFRvRWxlbWVudCIsImF0dGFjaFRvUG9zaXRpb24iLCJwb3NpdGlvbk9mZnNldCIsInJpZ2h0IiwiYm90dG9tIiwiYXR0YWNoVG8iLCJvbiIsInRldGhlck9wdGlvbnMiLCJhZGRTdGVwIiwidG91ck9iamVjdCIsInN0YXJ0IiwicGF5bG9hZCIsImN1cnJlbnRTdGVwIiwiZ2V0Q3VycmVudFN0ZXAiLCJkaXNwYXRjaEV2ZW50IiwiY2FuY2VsIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIlRldGhlciIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImNyZWF0ZUZyb21IVE1MIiwiaHRtbCIsImVsIiwiY2hpbGRyZW4iLCJtYXRjaGVzU2VsZWN0b3IiLCJzZWwiLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwicGFyc2VTaG9ydGhhbmQiLCJwcm9wcyIsInZhbHMiLCJ2YWxzTGVuIiwicHJvcHNMZW4iLCJzcGxpY2UiLCJvdXQiLCJwcm9wIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9nZXQiLCJfeDUiLCJfeDYiLCJfeDciLCJfYWdhaW4iLCJvYmplY3QiLCJyZWNlaXZlciIsImRlc2MiLCJwYXJlbnQiLCJnZXR0ZXIiLCJGdW5jdGlvbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsImdldFByb3RvdHlwZU9mIiwiX1RldGhlciRVdGlscyIsIlV0aWxzIiwiRXZlbnRlZCIsImhhc0NsYXNzIiwidW5pcXVlSWQiLCJBVFRBQ0hNRU5UIiwiY2VudGVyIiwiU3RlcCIsIl9FdmVudGVkIiwiYmluZE1ldGhvZHMiLCJzZXRPcHRpb25zIiwiX3RoaXMiLCJtZXRob2RzIiwibWV0aG9kIiwiZGVzdHJveSIsIndoZW4iLCJfZXZlbnQiLCJoYW5kbGVyIiwiX3RoaXMyIiwiX3BhcnNlU2hvcnRoYW5kIiwiYWR2YW5jZU9uIiwiaXNPcGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImdldEF0dGFjaFRvIiwiYXR0YWNobWVudCIsInRldGhlck9wdHMiLCJjbGFzc1ByZWZpeCIsImNvbnN0cmFpbnRzIiwidG8iLCJwaW4iLCJ0ZXRoZXIiLCJfdGhpczMiLCJiZWZvcmVTaG93UHJvbWlzZSIsInRoZW4iLCJfc2hvdyIsIl90aGlzNCIsInRyaWdnZXIiLCJyZW5kZXIiLCJzZXR1cFRldGhlciIsInJlbW92ZUF0dHJpYnV0ZSIsIl9nZXRBdHRhY2hUbyIsInNjcm9sbFRvSGFuZGxlciIsInNjcm9sbEludG9WaWV3IiwiX3RoaXM1IiwiaWRBdHRyaWJ1dGUiLCJjb250ZW50IiwiaGVhZGVyIiwibGluayIsImJpbmRDYW5jZWxMaW5rIiwicGFyYWdyYXBocyIsIkhUTUxFbGVtZW50IiwicGFyYWdyYXBoIiwiZm9vdGVyIiwiY2ZnIiwiYnV0dG9uIiwiYmluZEJ1dHRvbkV2ZW50cyIsImJpbmRBZHZhbmNlIiwiX3RoaXM2IiwiX3RoaXM3IiwiZXZlbnRzIiwiY2xpY2siLCJfZXZlbnQyIiwicGFnZSIsInNob3ciLCJfZXZlbnQzIiwiX0V2ZW50ZWQyIiwiX3RoaXM4IiwiX3RoaXM5IiwiaW5kZXhPZiIsImhpZGUiLCJkb25lIiwiYWN0aXZlVG91ciIsImZvcndhcmQiLCJnZXRCeUlkIiwic2hvd09uIiwicHJldmlvdXMiLCJuZXh0SW5kZXgiLCJyZXF1aXJlIiwiZ2V0U2Nyb2xsUGFyZW50IiwiZXJyIiwiX3N0eWxlIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiZ2V0Qm91bmRzIiwiZG9jIiwib3duZXJEb2N1bWVudCIsImRvY0VsIiwicmVjdCIsIm9yaWdpbiIsImdldE9yaWdpbiIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRPZmZzZXRQYXJlbnQiLCJnZXRTY3JvbGxCYXJTaXplIiwiaW5uZXIiLCJvdXRlciIsInBvaW50ZXJFdmVudHMiLCJ3aWR0aENvbnRhaW5lZCIsIndpZHRoU2Nyb2xsIiwiY2xzIiwicmVnZXgiLCJnZXRDbGFzc05hbWUiLCJzZXRDbGFzc05hbWUiLCJTVkdBbmltYXRlZFN0cmluZyIsImJhc2VWYWwiLCJ1cGRhdGVDbGFzc2VzIiwiYWxsIiwid2l0aGluIiwiZGlmZiIsIm5vdyIsInBlcmZvcm1hbmNlIiwiYWRkT2Zmc2V0IiwiX2xlbiIsIm9mZnNldHMiLCJfa2V5IiwiX3JlZiIsIm9mZnNldFRvUHgiLCJzaXplIiwiZ2V0Qm91bmRpbmdSZWN0Iiwic2Nyb2xsUGFyZW50IiwicG9zIiwiQk9VTkRTX0ZPUk1BVCIsInNpZGUiLCJUZXRoZXJCYXNlIiwiemVyb1Bvc0NhY2hlIiwiX3RldGhlclplcm9FbGVtZW50IiwiZGVmZXIiLCJkZWZlcnJlZCIsImZsdXNoIiwicG9wIiwiY3R4Iiwib25jZSIsImJpbmRpbmdzIiwiX2JpbmRpbmdzJGV2ZW50JGkiLCJfc2xpY2VkVG9BcnJheSIsInNsaWNlSXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX1RldGhlckJhc2UkVXRpbHMiLCJ0cmFuc2Zvcm1LZXkiLCJ0cmFuc2Zvcm1zIiwidGV0aGVycyIsImxhc3RDYWxsIiwibGFzdER1cmF0aW9uIiwicGVuZGluZ1RpbWVvdXQiLCJNSVJST1JfTFIiLCJNSVJST1JfVEIiLCJtaWRkbGUiLCJPRkZTRVRfTUFQIiwiYXV0b1RvRml4ZWRBdHRhY2htZW50IiwicmVsYXRpdmVUb0F0dGFjaG1lbnQiLCJhdHRhY2htZW50VG9PZmZzZXQiLCJwYXJzZU9mZnNldCIsIl92YWx1ZSRzcGxpdCIsIl92YWx1ZSRzcGxpdDIiLCJwYXJzZUF0dGFjaG1lbnQiLCJUZXRoZXJDbGFzcyIsImhpc3RvcnkiLCJ0YXJnZXRPZmZzZXQiLCJ0YXJnZXRBdHRhY2htZW50IiwiX29wdGlvbnMiLCJ0YXJnZXRNb2RpZmllciIsImdldENsYXNzIiwiYWRkVGFyZ2V0Q2xhc3NlcyIsImRpc2FibGUiLCJlbmFibGVkIiwiZW5hYmxlIiwiYm91bmRzIiwiaGFzQm90dG9tU2Nyb2xsIiwic2Nyb2xsQm90dG9tIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJmaXRBZGoiLCJwb3ciLCJzY3JvbGxQZXJjZW50YWdlIiwiX2NhY2hlIiwiZWxlbWVudEF0dGFjaCIsInRhcmdldEF0dGFjaCIsInNpZGVzIiwiX2FkZEF0dGFjaENsYXNzZXMiLCJmbHVzaENoYW5nZXMiLCJjbGVhckNhY2hlIiwidXBkYXRlQXR0YWNoQ2xhc3NlcyIsImVsZW1lbnRQb3MiLCJsYXN0U2l6ZSIsIl9sYXN0U2l6ZSIsInRhcmdldFBvcyIsImdldFRhcmdldEJvdW5kcyIsInRhcmdldFNpemUiLCJtYW51YWxPZmZzZXQiLCJtYW51YWxUYXJnZXRPZmZzZXQiLCJfbW9kdWxlMiIsInNjcm9sbGJhclNpemUiLCJ2aWV3cG9ydCIsIm9wdGltaXphdGlvbnMiLCJtb3ZlRWxlbWVudCIsIm9mZnNldFBvc2l0aW9uIiwib2Zmc2V0UGFyZW50U3R5bGUiLCJvZmZzZXRQYXJlbnRTaXplIiwib2Zmc2V0Qm9yZGVyIiwibW92ZSIsInNhbWUiLCJmb3VuZCIsInBvaW50IiwidHJhbnNjcmliZSIsIl9zYW1lIiwiX3BvcyIsImhhc09wdGltaXphdGlvbnMiLCJncHUiLCJ5UG9zIiwieFBvcyIsIm1vdmVkIiwib2Zmc2V0UGFyZW50SXNCb2R5IiwiY3VycmVudE5vZGUiLCJ3cml0ZUNTUyIsIndyaXRlIiwiZWxWYWwiLCJ0YXJnZXRIZWlnaHQiLCJ0YXJnZXRXaWR0aCIsImFsbENsYXNzZXMiLCJjb25zdHJhaW50Iiwib3V0T2ZCb3VuZHNDbGFzcyIsInBpbm5lZENsYXNzIiwiYWRkQ2xhc3NlcyIsInRBdHRhY2htZW50IiwiZUF0dGFjaG1lbnQiLCJjaGFuZ2VBdHRhY2hYIiwiY2hhbmdlQXR0YWNoWSIsIl9hdHRhY2htZW50JHNwbGl0IiwiX2F0dGFjaG1lbnQkc3BsaXQyIiwicGlubmVkIiwib29iIiwib29iQ2xhc3MiLCJhYnV0dGVkIiwidGFyZ2V0UG9zU2lkZSIsInNoaWZ0VG9wIiwic2hpZnRMZWZ0IiwiX3NoaWZ0IiwiX3NoaWZ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Q0FNQSxTQUEyQ0EsRUFBTUMsR0FDMUIsZ0JBQVpDLFVBQTBDLGdCQUFYQyxRQUN4Q0EsT0FBT0QsUUFBVUQsSUFDUSxrQkFBWEcsU0FBeUJBLE9BQU9DLElBQzlDRCxVQUFXSCxHQUNlLGdCQUFaQyxTQUNkQSxRQUFvQixXQUFJRCxJQUV4QkQsRUFBaUIsV0FBSUMsS0FDcEJLLEtBQU0sV0FDVCxNQUFnQixVQUFVQyxHQUtoQixRQUFTQyxHQUFvQkMsR0FHNUIsR0FBR0MsRUFBaUJELEdBQ25CLE1BQU9DLEdBQWlCRCxHQUFVUCxPQUduQyxJQUFJQyxHQUFTTyxFQUFpQkQsSUFDN0JQLFdBQ0FTLEdBQUlGLEVBQ0pHLFFBQVEsRUFVVCxPQU5BTCxHQUFRRSxHQUFVSSxLQUFLVixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTTSxHQUcvREwsRUFBT1MsUUFBUyxFQUdUVCxFQUFPRCxRQXZCZixHQUFJUSxLQXFDSixPQVRBRixHQUFvQk0sRUFBSVAsRUFHeEJDLEVBQW9CTyxFQUFJTCxFQUd4QkYsRUFBb0JRLEVBQUks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QSxHQUFRakosS0FBSzhILFFBQVFtQixLQUNTLG1CQUF2QmpKLE1BQUs4SCxRQUFRbUIsUUFDdEJBLEVBQVFqSixLQUFLOEgsUUFBUW1CLE1BQU0xSSxLQUFLUCxNQUFRaUUsSUFBS0EsRUFBS1AsS0FBTUEsSUFHMUQsSUFBSW81QixHQUFXbjJCLE9BQ1hvMkIsRUFBWXAyQixNQUNoQixJQUFxQixnQkFBVnNDLEdBQW9CLENBQzdCQSxFQUFRQSxFQUFNeUIsTUFBTSxLQUNwQnpCLEVBQU0sR0FBS0EsRUFBTSxJQUFNQSxFQUFNLEVBRTdCLElBQUkrekIsR0FBUy96QixFQUVUZzBCLEVBQVU3RyxFQUFlNEcsRUFBUSxFQUVyQ0YsR0FBV0csRUFBUSxHQUNuQkYsRUFBWUUsRUFBUSxHQUVwQkgsRUFBVzd5QixXQUFXNnlCLEVBQVUsSUFDaENDLEVBQVk5eUIsV0FBVzh5QixFQUFXLFFBRWxDRCxHQUFXN3pCLEVBQU1oRixJQUNqQjg0QixFQUFZOXpCLEVBQU12RixJQU1wQixPQUhBTyxJQUFPNjRCLEVBQ1BwNUIsR0FBUXE1QixHQUVDOTRCLElBQUtBLEVBQUtQLEtBQU1BLE9BR3RCNm1CIiwiZmlsZSI6InN0eWxlZ3VpZGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBTb2NyYXRhIFN0eWxlZ3VpZGUgdjAuNS4wXG4gKiBDb3B5cmlnaHQgMjAxNS0yMDE2IFNvY3JhdGEsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICovXG5cbihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInN0eWxlZ3VpZGVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wic3R5bGVndWlkZVwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICBEcm9wZG93bjogX193ZWJwYWNrX3JlcXVpcmVfXygxKSxcblx0ICBGbGFubmVsRmFjdG9yeTogX193ZWJwYWNrX3JlcXVpcmVfXygyKSxcblx0ICBGbHlvdXRGYWN0b3J5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLFxuXHQgIE1lbnVGYWN0b3J5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpLFxuXHQgIE1vZGFsRmFjdG9yeTogX193ZWJwYWNrX3JlcXVpcmVfXyg2KSxcblx0ICBUb2dnbGVGYWN0b3J5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpLFxuXHQgIFRvdXJGYWN0b3J5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpXG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBEcm9wZG93biA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZWxlbWVudCkge1xuXHQgIHRoaXMuZGQgPSBlbGVtZW50O1xuXHQgIHRoaXMub3JpZW50YXRpb24gPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmllbnRhdGlvbicpIHx8ICdib3R0b20nO1xuXHQgIHRoaXMuc2VsZWN0YWJsZSA9IGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLXNlbGVjdGFibGUnKTtcblx0ICB0aGlzLmRkLmNsYXNzTGlzdC5hZGQoJ2Ryb3Bkb3duLW9yaWVudGF0aW9uLScgKyB0aGlzLm9yaWVudGF0aW9uKTtcblxuXHQgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLmRkLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4nKTtcblx0ICB0aGlzLm9wdHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmRkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcm9wZG93bi1vcHRpb25zID4gbGknKSk7XG5cdCAgdGhpcy52YWwgPSAnJztcblx0ICB0aGlzLmluZGV4ID0gLTE7XG5cblx0ICB0aGlzLmluaXRFdmVudHMoKTtcblx0fVxuXG5cdERyb3Bkb3duLnByb3RvdHlwZSA9IHtcblx0ICBpbml0RXZlbnRzOiBmdW5jdGlvbigpIHtcblx0ICAgIHZhciBvYmogPSB0aGlzO1xuXG5cdCAgICBvYmouZGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0ICAgICAgb2JqLmRkLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9KTtcblxuXHQgICAgb2JqLm9wdHMuZm9yRWFjaChmdW5jdGlvbihvcHQpIHtcblx0ICAgICAgb3B0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdCAgICAgICAgdmFyIG5vZGUgPSBvcHQ7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gMDtcblxuXHQgICAgICAgIHdoaWxlICgobm9kZSA9IG5vZGUucHJldmlvdXNFbGVtZW50U2libGluZykgIT09IG51bGwpIHtcblx0ICAgICAgICAgIGluZGV4Kys7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgb2JqLnZhbCA9IG9wdC50ZXh0Q29udGVudDtcblx0ICAgICAgICBvYmouaW5kZXggPSBpbmRleDtcblxuXHQgICAgICAgIGlmIChvYmouc2VsZWN0YWJsZSkge1xuXHQgICAgICAgICAgb2JqLnBsYWNlaG9sZGVyLmlubmVySFRNTCA9IG9wdC5pbm5lclRleHQudHJpbSgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0ICB9XG5cdH1cblxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIHZlbG9jaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXHR2YXIgRmxhbm5lbEZhY3RvcnkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICB2YXIgbW9iaWxlQnJlYWtwb2ludCA9IDQyMDtcblx0ICB2YXIgcGFkZGluZyA9IDEwO1xuXHQgIHZhciBob3ZlcmFibGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWZsYW5uZWxdJykpO1xuXG5cdCAgZnVuY3Rpb24gaGlkZUZsYW5uZWwoZmxhbm5lbCwgaG92ZXJhYmxlKSB7XG5cdCAgICBpZiAoZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCA8IG1vYmlsZUJyZWFrcG9pbnQpIHtcblx0ICAgICAgdmVsb2NpdHkoZmxhbm5lbCwge1xuXHQgICAgICAgIGxlZnQ6IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGhcblx0ICAgICAgfSwge1xuXHQgICAgICAgIGR1cmF0aW9uOiAzNTAsXG5cdCAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgZmxhbm5lbC5jbGFzc0xpc3QuYWRkKCdmbGFubmVsLWhpZGRlbicpO1xuXHQgICAgICAgICAgaG92ZXJhYmxlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cblx0ICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZmxhbm5lbC5jbGFzc0xpc3QuYWRkKCdmbGFubmVsLWhpZGRlbicpO1xuXHQgICAgICBob3ZlcmFibGUuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgZnVuY3Rpb24gcG9zaXRpb25GbGFubmVsKGZsYW5uZWwsIGhvdmVyYWJsZSkge1xuXHQgICAgdmFyIG5vZGUgPSBob3ZlcmFibGU7XG5cdCAgICB2YXIgbGVmdCA9IDA7XG5cdCAgICB2YXIgdG9wID0gMDtcblx0ICAgIHZhciBmbGFubmVsV2lkdGggPSBmbGFubmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuXHQgICAgdmFyIHdpbmRvd1dpZHRoID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcblxuXHQgICAgZG8ge1xuXHQgICAgICBsZWZ0ICs9IG5vZGUub2Zmc2V0TGVmdDtcblx0ICAgICAgdG9wICs9IG5vZGUub2Zmc2V0VG9wO1xuXHQgICAgfSB3aGlsZSAoKG5vZGUgPSBub2RlLm9mZnNldFBhcmVudCkgIT09IG51bGwpO1xuXG5cdCAgICBsZWZ0ID0gbGVmdCArIGhvdmVyYWJsZS5vZmZzZXRXaWR0aCAvIDI7XG5cdCAgICB0b3AgPSB0b3AgKyBob3ZlcmFibGUub2Zmc2V0SGVpZ2h0ICsgcGFkZGluZztcblxuXHQgICAgaWYgKGxlZnQgKyBmbGFubmVsV2lkdGggPiB3aW5kb3dXaWR0aCAmJiB3aW5kb3dXaWR0aCA+PSBtb2JpbGVCcmVha3BvaW50KSB7XG5cdCAgICAgIGZsYW5uZWwuY2xhc3NMaXN0LnJlbW92ZSgnZmxhbm5lbC1yaWdodCcpO1xuXHQgICAgICBmbGFubmVsLmNsYXNzTGlzdC5hZGQoJ2ZsYW5uZWwtbGVmdCcpO1xuXHQgICAgICBsZWZ0IC09IGZsYW5uZWxXaWR0aDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGZsYW5uZWwuY2xhc3NMaXN0LnJlbW92ZSgnZmxhbm5lbC1sZWZ0Jyk7XG5cdCAgICAgIGZsYW5uZWwuY2xhc3NMaXN0LmFkZCgnZmxhbm5lbC1yaWdodCcpO1xuXHQgICAgfVxuXG5cdCAgICBpZiAod2luZG93V2lkdGggPj0gbW9iaWxlQnJlYWtwb2ludCkge1xuXHQgICAgICBmbGFubmVsLnN0eWxlLmxlZnQgPSBsZWZ0ICsgJ3B4Jztcblx0ICAgICAgZmxhbm5lbC5zdHlsZS50b3AgPSB0b3AgKyAncHgnO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgZmxhbm5lbC5zdHlsZS5sZWZ0ID0gd2luZG93V2lkdGggKyAncHgnO1xuXHQgICAgICBmbGFubmVsLnN0eWxlLnRvcCA9IDA7XG5cdCAgICAgIHZlbG9jaXR5KGZsYW5uZWwsIHtcblx0ICAgICAgICBsZWZ0OiAwXG5cdCAgICAgIH0sIDM1MCk7XG5cdCAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblx0ICAgIH1cblx0ICB9XG5cblx0ICBob3ZlcmFibGVzLmZvckVhY2goZnVuY3Rpb24oaG92ZXJhYmxlKSB7XG5cdCAgICB2YXIgZmxhbm5lbElkID0gaG92ZXJhYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS1mbGFubmVsJyk7XG5cdCAgICB2YXIgZmxhbm5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgZmxhbm5lbElkKTtcblx0ICAgIHZhciBkaXNtaXNzYWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGZsYW5uZWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZmxhbm5lbC1kaXNtaXNzXScpKTtcblxuXHQgICAgZGlzbWlzc2Fscy5mb3JFYWNoKGZ1bmN0aW9uKGRpc21pc3NhbCkge1xuXHQgICAgICBkaXNtaXNzYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICBoaWRlRmxhbm5lbChmbGFubmVsLCBob3ZlcmFibGUpO1xuXHQgICAgICB9KTtcblx0ICAgIH0pO1xuXG5cdCAgICBob3ZlcmFibGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHQgICAgICBmbGFubmVsLmNsYXNzTGlzdC50b2dnbGUoJ2ZsYW5uZWwtaGlkZGVuJyk7XG5cdCAgICAgIHBvc2l0aW9uRmxhbm5lbChmbGFubmVsLCBob3ZlcmFibGUpO1xuXHQgICAgfSk7XG5cblx0ICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICB2YXIgbm9kZSA9IGV2ZW50LnRhcmdldDtcblxuXHQgICAgICB3aGlsZSAobm9kZS5wYXJlbnRFbGVtZW50KSB7XG5cdCAgICAgICAgaWYgKG5vZGUuaWQgPT09IGZsYW5uZWxJZCkge1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG5cdCAgICAgIH1cblxuXHQgICAgICBoaWRlRmxhbm5lbChmbGFubmVsLCBob3ZlcmFibGUpO1xuXHQgICAgfSk7XG5cblx0ICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICB2YXIga2V5ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZTtcblxuXHQgICAgICAvLyBFU0Ncblx0ICAgICAgaWYgKGtleSA9PT0gMjcpIHtcblx0ICAgICAgICBoaWRlRmxhbm5lbChmbGFubmVsLCBob3ZlcmFibGUpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkge1xuXHQgICAgICBpZiAoIWZsYW5uZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmbGFubmVsLWhpZGRlbicpKSB7XG5cdCAgICAgICAgcG9zaXRpb25GbGFubmVsKGZsYW5uZWwsIGhvdmVyYWJsZSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH0pO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qISBWZWxvY2l0eUpTLm9yZyAoMS4yLjMpLiAoQykgMjAxNCBKdWxpYW4gU2hhcGlyby4gTUlUIEBsaWNlbnNlOiBlbi53aWtpcGVkaWEub3JnL3dpa2kvTUlUX0xpY2Vuc2UgKi9cblxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICBWZWxvY2l0eSBqUXVlcnkgU2hpbVxuXHQqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdC8qISBWZWxvY2l0eUpTLm9yZyBqUXVlcnkgU2hpbSAoMS4wLjEpLiAoQykgMjAxNCBUaGUgalF1ZXJ5IEZvdW5kYXRpb24uIE1JVCBAbGljZW5zZTogZW4ud2lraXBlZGlhLm9yZy93aWtpL01JVF9MaWNlbnNlLiAqL1xuXG5cdC8qIFRoaXMgZmlsZSBjb250YWlucyB0aGUgalF1ZXJ5IGZ1bmN0aW9ucyB0aGF0IFZlbG9jaXR5IHJlbGllcyBvbiwgdGhlcmVieSByZW1vdmluZyBWZWxvY2l0eSdzIGRlcGVuZGVuY3kgb24gYSBmdWxsIGNvcHkgb2YgalF1ZXJ5LCBhbmQgYWxsb3dpbmcgaXQgdG8gd29yayBpbiBhbnkgZW52aXJvbm1lbnQuICovXG5cdC8qIFRoZXNlIHNoaW1tZWQgZnVuY3Rpb25zIGFyZSBvbmx5IHVzZWQgaWYgalF1ZXJ5IGlzbid0IHByZXNlbnQuIElmIGJvdGggdGhpcyBzaGltIGFuZCBqUXVlcnkgYXJlIGxvYWRlZCwgVmVsb2NpdHkgZGVmYXVsdHMgdG8galF1ZXJ5IHByb3Blci4gKi9cblx0LyogQnJvd3NlciBzdXBwb3J0OiBVc2luZyB0aGlzIHNoaW0gaW5zdGVhZCBvZiBqUXVlcnkgcHJvcGVyIHJlbW92ZXMgc3VwcG9ydCBmb3IgSUU4LiAqL1xuXG5cdDsoZnVuY3Rpb24gKHdpbmRvdykge1xuXHQgICAgLyoqKioqKioqKioqKioqKlxuXHQgICAgICAgICBTZXR1cFxuXHQgICAgKioqKioqKioqKioqKioqL1xuXG5cdCAgICAvKiBJZiBqUXVlcnkgaXMgYWxyZWFkeSBsb2FkZWQsIHRoZXJlJ3Mgbm8gcG9pbnQgaW4gbG9hZGluZyB0aGlzIHNoaW0uICovXG5cdCAgICBpZiAod2luZG93LmpRdWVyeSkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgLyogalF1ZXJ5IGJhc2UuICovXG5cdCAgICB2YXIgJCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgY29udGV4dCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgJC5mbi5pbml0KHNlbGVjdG9yLCBjb250ZXh0KTtcblx0ICAgIH07XG5cblx0ICAgIC8qKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgUHJpdmF0ZSBNZXRob2RzXG5cdCAgICAqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgLyogalF1ZXJ5ICovXG5cdCAgICAkLmlzV2luZG93ID0gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgIC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXG5cdCAgICAgICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PSBvYmoud2luZG93O1xuXHQgICAgfTtcblxuXHQgICAgLyogalF1ZXJ5ICovXG5cdCAgICAkLnR5cGUgPSBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvYmogKyBcIlwiO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdCAgICAgICAgICAgIGNsYXNzMnR5cGVbdG9TdHJpbmcuY2FsbChvYmopXSB8fCBcIm9iamVjdFwiIDpcblx0ICAgICAgICAgICAgdHlwZW9mIG9iajtcblx0ICAgIH07XG5cblx0ICAgIC8qIGpRdWVyeSAqL1xuXHQgICAgJC5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgcmV0dXJuICQudHlwZShvYmopID09PSBcImFycmF5XCI7XG5cdCAgICB9O1xuXG5cdCAgICAvKiBqUXVlcnkgKi9cblx0ICAgIGZ1bmN0aW9uIGlzQXJyYXlsaWtlIChvYmopIHtcblx0ICAgICAgICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aCxcblx0ICAgICAgICAgICAgdHlwZSA9ICQudHlwZShvYmopO1xuXG5cdCAgICAgICAgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCAkLmlzV2luZG93KG9iaikpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChvYmoubm9kZVR5cGUgPT09IDEgJiYgbGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8IHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAobGVuZ3RoIC0gMSkgaW4gb2JqO1xuXHQgICAgfVxuXG5cdCAgICAvKioqKioqKioqKioqKioqXG5cdCAgICAgICAkIE1ldGhvZHNcblx0ICAgICoqKioqKioqKioqKioqKi9cblxuXHQgICAgLyogalF1ZXJ5OiBTdXBwb3J0IHJlbW92ZWQgZm9yIElFPDkuICovXG5cdCAgICAkLmlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgdmFyIGtleTtcblxuXHQgICAgICAgIGlmICghb2JqIHx8ICQudHlwZShvYmopICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCAkLmlzV2luZG93KG9iaikpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGlmIChvYmouY29uc3RydWN0b3IgJiZcblx0ICAgICAgICAgICAgICAgICFoYXNPd24uY2FsbChvYmosIFwiY29uc3RydWN0b3JcIikgJiZcblx0ICAgICAgICAgICAgICAgICFoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIikpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZvciAoa2V5IGluIG9iaikge31cblxuXHQgICAgICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCB8fCBoYXNPd24uY2FsbChvYmosIGtleSk7XG5cdCAgICB9O1xuXG5cdCAgICAvKiBqUXVlcnkgKi9cblx0ICAgICQuZWFjaCA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2ssIGFyZ3MpIHtcblx0ICAgICAgICB2YXIgdmFsdWUsXG5cdCAgICAgICAgICAgIGkgPSAwLFxuXHQgICAgICAgICAgICBsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHQgICAgICAgICAgICBpc0FycmF5ID0gaXNBcnJheWxpa2Uob2JqKTtcblxuXHQgICAgICAgIGlmIChhcmdzKSB7XG5cdCAgICAgICAgICAgIGlmIChpc0FycmF5KSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5hcHBseShvYmpbaV0sIGFyZ3MpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5hcHBseShvYmpbaV0sIGFyZ3MpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChpc0FycmF5KSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbChvYmpbaV0sIGksIG9ialtpXSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBvYmo7XG5cdCAgICB9O1xuXG5cdCAgICAvKiBDdXN0b20gKi9cblx0ICAgICQuZGF0YSA9IGZ1bmN0aW9uIChub2RlLCBrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgLyogJC5nZXREYXRhKCkgKi9cblx0ICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICB2YXIgaWQgPSBub2RlWyQuZXhwYW5kb10sXG5cdCAgICAgICAgICAgICAgICBzdG9yZSA9IGlkICYmIGNhY2hlW2lkXTtcblxuXHQgICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChzdG9yZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGtleSBpbiBzdG9yZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZVtrZXldO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgLyogJC5zZXREYXRhKCkgKi9cblx0ICAgICAgICB9IGVsc2UgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHZhciBpZCA9IG5vZGVbJC5leHBhbmRvXSB8fCAobm9kZVskLmV4cGFuZG9dID0gKyskLnV1aWQpO1xuXG5cdCAgICAgICAgICAgIGNhY2hlW2lkXSA9IGNhY2hlW2lkXSB8fCB7fTtcblx0ICAgICAgICAgICAgY2FjaGVbaWRdW2tleV0gPSB2YWx1ZTtcblxuXHQgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyogQ3VzdG9tICovXG5cdCAgICAkLnJlbW92ZURhdGEgPSBmdW5jdGlvbiAobm9kZSwga2V5cykge1xuXHQgICAgICAgIHZhciBpZCA9IG5vZGVbJC5leHBhbmRvXSxcblx0ICAgICAgICAgICAgc3RvcmUgPSBpZCAmJiBjYWNoZVtpZF07XG5cblx0ICAgICAgICBpZiAoc3RvcmUpIHtcblx0ICAgICAgICAgICAgJC5lYWNoKGtleXMsIGZ1bmN0aW9uKF8sIGtleSkge1xuXHQgICAgICAgICAgICAgICAgZGVsZXRlIHN0b3JlW2tleV07XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qIGpRdWVyeSAqL1xuXHQgICAgJC5leHRlbmQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHNyYywgY29weUlzQXJyYXksIGNvcHksIG5hbWUsIG9wdGlvbnMsIGNsb25lLFxuXHQgICAgICAgICAgICB0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdCAgICAgICAgICAgIGkgPSAxLFxuXHQgICAgICAgICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHQgICAgICAgICAgICBkZWVwID0gZmFsc2U7XG5cblx0ICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIpIHtcblx0ICAgICAgICAgICAgZGVlcCA9IHRhcmdldDtcblxuXHQgICAgICAgICAgICB0YXJnZXQgPSBhcmd1bWVudHNbaV0gfHwge307XG5cdCAgICAgICAgICAgIGkrKztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAkLnR5cGUodGFyZ2V0KSAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdCAgICAgICAgICAgIHRhcmdldCA9IHt9O1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChpID09PSBsZW5ndGgpIHtcblx0ICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcztcblx0ICAgICAgICAgICAgaS0tO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgaWYgKChvcHRpb25zID0gYXJndW1lbnRzW2ldKSAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuXHQgICAgICAgICAgICAgICAgICAgIHNyYyA9IHRhcmdldFtuYW1lXTtcblx0ICAgICAgICAgICAgICAgICAgICBjb3B5ID0gb3B0aW9uc1tuYW1lXTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IGNvcHkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgY29weSAmJiAoJC5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9ICQuaXNBcnJheShjb3B5KSkpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5SXNBcnJheSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weUlzQXJyYXkgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmICQuaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lID0gc3JjICYmICQuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSAkLmV4dGVuZChkZWVwLCBjbG9uZSwgY29weSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvcHkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBjb3B5O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB0YXJnZXQ7XG5cdCAgICB9O1xuXG5cdCAgICAvKiBqUXVlcnkgMS40LjMgKi9cblx0ICAgICQucXVldWUgPSBmdW5jdGlvbiAoZWxlbSwgdHlwZSwgZGF0YSkge1xuXHQgICAgICAgIGZ1bmN0aW9uICRtYWtlQXJyYXkgKGFyciwgcmVzdWx0cykge1xuXHQgICAgICAgICAgICB2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoYXJyICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpc0FycmF5bGlrZShPYmplY3QoYXJyKSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiAkLm1lcmdlICovXG5cdCAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gZmlyc3QubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdFtpKytdID0gc2Vjb25kW2orK107XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuICE9PSBsZW4pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzZWNvbmRbal0gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0W2krK10gPSBzZWNvbmRbaisrXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0O1xuXHQgICAgICAgICAgICAgICAgICAgIH0pKHJldCwgdHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/IFthcnJdIDogYXJyKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgW10ucHVzaC5jYWxsKHJldCwgYXJyKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiByZXQ7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKCFlbGVtKSB7XG5cdCAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0eXBlID0gKHR5cGUgfHwgXCJmeFwiKSArIFwicXVldWVcIjtcblxuXHQgICAgICAgIHZhciBxID0gJC5kYXRhKGVsZW0sIHR5cGUpO1xuXG5cdCAgICAgICAgaWYgKCFkYXRhKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBxIHx8IFtdO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICghcSB8fCAkLmlzQXJyYXkoZGF0YSkpIHtcblx0ICAgICAgICAgICAgcSA9ICQuZGF0YShlbGVtLCB0eXBlLCAkbWFrZUFycmF5KGRhdGEpKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBxLnB1c2goZGF0YSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHE7XG5cdCAgICB9O1xuXG5cdCAgICAvKiBqUXVlcnkgMS40LjMgKi9cblx0ICAgICQuZGVxdWV1ZSA9IGZ1bmN0aW9uIChlbGVtcywgdHlwZSkge1xuXHQgICAgICAgIC8qIEN1c3RvbTogRW1iZWQgZWxlbWVudCBpdGVyYXRpb24uICovXG5cdCAgICAgICAgJC5lYWNoKGVsZW1zLm5vZGVUeXBlID8gWyBlbGVtcyBdIDogZWxlbXMsIGZ1bmN0aW9uKGksIGVsZW0pIHtcblx0ICAgICAgICAgICAgdHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdCAgICAgICAgICAgIHZhciBxdWV1ZSA9ICQucXVldWUoZWxlbSwgdHlwZSksXG5cdCAgICAgICAgICAgICAgICBmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cblx0ICAgICAgICAgICAgaWYgKGZuID09PSBcImlucHJvZ3Jlc3NcIikge1xuXHQgICAgICAgICAgICAgICAgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKGZuKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJmeFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcXVldWUudW5zaGlmdChcImlucHJvZ3Jlc3NcIik7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGZuLmNhbGwoZWxlbSwgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgJC5kZXF1ZXVlKGVsZW0sIHR5cGUpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cblx0ICAgIC8qKioqKioqKioqKioqKioqKipcblx0ICAgICAgICQuZm4gTWV0aG9kc1xuXHQgICAgKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAvKiBqUXVlcnkgKi9cblx0ICAgICQuZm4gPSAkLnByb3RvdHlwZSA9IHtcblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0ICAgICAgICAgICAgLyogSnVzdCByZXR1cm4gdGhlIGVsZW1lbnQgd3JhcHBlZCBpbnNpZGUgYW4gYXJyYXk7IGRvbid0IHByb2NlZWQgd2l0aCB0aGUgYWN0dWFsIGpRdWVyeSBub2RlIHdyYXBwaW5nIHByb2Nlc3MuICovXG5cdCAgICAgICAgICAgIGlmIChzZWxlY3Rvci5ub2RlVHlwZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpc1swXSA9IHNlbGVjdG9yO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhIERPTSBub2RlLlwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLyogalF1ZXJ5IGFsdGVyZWQgY29kZTogRHJvcHBlZCBkaXNjb25uZWN0ZWQgRE9NIG5vZGUgY2hlY2tpbmcuICovXG5cdCAgICAgICAgICAgIHZhciBib3ggPSB0aGlzWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCA/IHRoaXNbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICB0b3A6IGJveC50b3AgKyAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LnNjcm9sbFRvcCAgfHwgMCkgIC0gKGRvY3VtZW50LmNsaWVudFRvcCAgfHwgMCksXG5cdCAgICAgICAgICAgICAgICBsZWZ0OiBib3gubGVmdCArICh3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuc2Nyb2xsTGVmdCAgfHwgMCkgLSAoZG9jdW1lbnQuY2xpZW50TGVmdCB8fCAwKVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBwb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvKiBqUXVlcnkgKi9cblx0ICAgICAgICAgICAgZnVuY3Rpb24gb2Zmc2V0UGFyZW50KCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50O1xuXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmICghb2Zmc2V0UGFyZW50Lm5vZGVUeXBlLnRvTG93ZXJDYXNlID09PSBcImh0bWxcIiAmJiBvZmZzZXRQYXJlbnQuc3R5bGUucG9zaXRpb24gPT09IFwic3RhdGljXCIpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qIFplcHRvICovXG5cdCAgICAgICAgICAgIHZhciBlbGVtID0gdGhpc1swXSxcblx0ICAgICAgICAgICAgICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5hcHBseShlbGVtKSxcblx0ICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0KCksXG5cdCAgICAgICAgICAgICAgICBwYXJlbnRPZmZzZXQgPSAvXig/OmJvZHl8aHRtbCkkL2kudGVzdChvZmZzZXRQYXJlbnQubm9kZU5hbWUpID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6ICQob2Zmc2V0UGFyZW50KS5vZmZzZXQoKVxuXG5cdCAgICAgICAgICAgIG9mZnNldC50b3AgLT0gcGFyc2VGbG9hdChlbGVtLnN0eWxlLm1hcmdpblRvcCkgfHwgMDtcblx0ICAgICAgICAgICAgb2Zmc2V0LmxlZnQgLT0gcGFyc2VGbG9hdChlbGVtLnN0eWxlLm1hcmdpbkxlZnQpIHx8IDA7XG5cblx0ICAgICAgICAgICAgaWYgKG9mZnNldFBhcmVudC5zdHlsZSkge1xuXHQgICAgICAgICAgICAgICAgcGFyZW50T2Zmc2V0LnRvcCArPSBwYXJzZUZsb2F0KG9mZnNldFBhcmVudC5zdHlsZS5ib3JkZXJUb3BXaWR0aCkgfHwgMFxuXHQgICAgICAgICAgICAgICAgcGFyZW50T2Zmc2V0LmxlZnQgKz0gcGFyc2VGbG9hdChvZmZzZXRQYXJlbnQuc3R5bGUuYm9yZGVyTGVmdFdpZHRoKSB8fCAwXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCxcblx0ICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnRcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgUHJpdmF0ZSBWYXJpYWJsZXNcblx0ICAgICoqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgIC8qIEZvciAkLmRhdGEoKSAqL1xuXHQgICAgdmFyIGNhY2hlID0ge307XG5cdCAgICAkLmV4cGFuZG8gPSBcInZlbG9jaXR5XCIgKyAobmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuXHQgICAgJC51dWlkID0gMDtcblxuXHQgICAgLyogRm9yICQucXVldWUoKSAqL1xuXHQgICAgdmFyIGNsYXNzMnR5cGUgPSB7fSxcblx0ICAgICAgICBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5LFxuXHQgICAgICAgIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxuXHQgICAgdmFyIHR5cGVzID0gXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpO1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIGNsYXNzMnR5cGVbXCJbb2JqZWN0IFwiICsgdHlwZXNbaV0gKyBcIl1cIl0gPSB0eXBlc1tpXS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgfVxuXG5cdCAgICAvKiBNYWtlcyAkKG5vZGUpIHBvc3NpYmxlLCB3aXRob3V0IGhhdmluZyB0byBjYWxsIGluaXQuICovXG5cdCAgICAkLmZuLmluaXQucHJvdG90eXBlID0gJC5mbjtcblxuXHQgICAgLyogR2xvYmFsaXplIFZlbG9jaXR5IG9udG8gdGhlIHdpbmRvdywgYW5kIGFzc2lnbiBpdHMgVXRpbGl0aWVzIHByb3BlcnR5LiAqL1xuXHQgICAgd2luZG93LlZlbG9jaXR5ID0geyBVdGlsaXRpZXM6ICQgfTtcblx0fSkod2luZG93KTtcblxuXHQvKioqKioqKioqKioqKioqKioqXG5cdCAgICBWZWxvY2l0eS5qc1xuXHQqKioqKioqKioqKioqKioqKiovXG5cblx0OyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHQgICAgLyogQ29tbW9uSlMgbW9kdWxlLiAqL1xuXHQgICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdCAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdCAgICAvKiBBTUQgbW9kdWxlLiAqL1xuXHQgICAgfSBlbHNlIGlmICh0cnVlKSB7XG5cdCAgICAgICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgPyAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXywgZXhwb3J0cywgbW9kdWxlKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG5cdCAgICAvKiBCcm93c2VyIGdsb2JhbHMuICovXG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIGZhY3RvcnkoKTtcblx0ICAgIH1cblx0fShmdW5jdGlvbigpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChnbG9iYWwsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdCAgICAvKioqKioqKioqKioqKioqXG5cdCAgICAgICAgU3VtbWFyeVxuXHQgICAgKioqKioqKioqKioqKioqL1xuXG5cdCAgICAvKlxuXHQgICAgLSBDU1M6IENTUyBzdGFjayB0aGF0IHdvcmtzIGluZGVwZW5kZW50bHkgZnJvbSB0aGUgcmVzdCBvZiBWZWxvY2l0eS5cblx0ICAgIC0gYW5pbWF0ZSgpOiBDb3JlIGFuaW1hdGlvbiBtZXRob2QgdGhhdCBpdGVyYXRlcyBvdmVyIHRoZSB0YXJnZXRlZCBlbGVtZW50cyBhbmQgcXVldWVzIHRoZSBpbmNvbWluZyBjYWxsIG9udG8gZWFjaCBlbGVtZW50IGluZGl2aWR1YWxseS5cblx0ICAgICAgLSBQcmUtUXVldWVpbmc6IFByZXBhcmUgdGhlIGVsZW1lbnQgZm9yIGFuaW1hdGlvbiBieSBpbnN0YW50aWF0aW5nIGl0cyBkYXRhIGNhY2hlIGFuZCBwcm9jZXNzaW5nIHRoZSBjYWxsJ3Mgb3B0aW9ucy5cblx0ICAgICAgLSBRdWV1ZWluZzogVGhlIGxvZ2ljIHRoYXQgcnVucyBvbmNlIHRoZSBjYWxsIGhhcyByZWFjaGVkIGl0cyBwb2ludCBvZiBleGVjdXRpb24gaW4gdGhlIGVsZW1lbnQncyAkLnF1ZXVlKCkgc3RhY2suXG5cdCAgICAgICAgICAgICAgICAgIE1vc3QgbG9naWMgaXMgcGxhY2VkIGhlcmUgdG8gYXZvaWQgcmlza2luZyBpdCBiZWNvbWluZyBzdGFsZSAoaWYgdGhlIGVsZW1lbnQncyBwcm9wZXJ0aWVzIGhhdmUgY2hhbmdlZCkuXG5cdCAgICAgIC0gUHVzaGluZzogQ29uc29saWRhdGlvbiBvZiB0aGUgdHdlZW4gZGF0YSBmb2xsb3dlZCBieSBpdHMgcHVzaCBvbnRvIHRoZSBnbG9iYWwgaW4tcHJvZ3Jlc3MgY2FsbHMgY29udGFpbmVyLlxuXHQgICAgLSB0aWNrKCk6IFRoZSBzaW5nbGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGxvb3AgcmVzcG9uc2libGUgZm9yIHR3ZWVuaW5nIGFsbCBpbi1wcm9ncmVzcyBjYWxscy5cblx0ICAgIC0gY29tcGxldGVDYWxsKCk6IEhhbmRsZXMgdGhlIGNsZWFudXAgcHJvY2VzcyBmb3IgZWFjaCBWZWxvY2l0eSBjYWxsLlxuXHQgICAgKi9cblxuXHQgICAgLyoqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgSGVscGVyIEZ1bmN0aW9uc1xuXHQgICAgKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAvKiBJRSBkZXRlY3Rpb24uIEdpc3Q6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2p1bGlhbnNoYXBpcm8vOTA5ODYwOSAqL1xuXHQgICAgdmFyIElFID0gKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudE1vZGUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50TW9kZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gNzsgaSA+IDQ7IGktLSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0ICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBcIjwhLS1baWYgSUUgXCIgKyBpICsgXCJdPjxzcGFuPjwvc3Bhbj48IVtlbmRpZl0tLT5cIjtcblxuXHQgICAgICAgICAgICAgICAgaWYgKGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNwYW5cIikubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGl2ID0gbnVsbDtcblxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0ICAgIH0pKCk7XG5cblx0ICAgIC8qIHJBRiBzaGltLiBHaXN0OiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qdWxpYW5zaGFwaXJvLzk0OTc1MTMgKi9cblx0ICAgIHZhciByQUZTaGltID0gKGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciB0aW1lTGFzdCA9IDA7XG5cblx0ICAgICAgICByZXR1cm4gd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICAgIHZhciB0aW1lQ3VycmVudCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCksXG5cdCAgICAgICAgICAgICAgICB0aW1lRGVsdGE7XG5cblx0ICAgICAgICAgICAgLyogRHluYW1pY2FsbHkgc2V0IGRlbGF5IG9uIGEgcGVyLXRpY2sgYmFzaXMgdG8gbWF0Y2ggNjBmcHMuICovXG5cdCAgICAgICAgICAgIC8qIFRlY2huaXF1ZSBieSBFcmlrIE1vbGxlci4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3BhdWxpcmlzaC8xNTc5NjcxICovXG5cdCAgICAgICAgICAgIHRpbWVEZWx0YSA9IE1hdGgubWF4KDAsIDE2IC0gKHRpbWVDdXJyZW50IC0gdGltZUxhc3QpKTtcblx0ICAgICAgICAgICAgdGltZUxhc3QgPSB0aW1lQ3VycmVudCArIHRpbWVEZWx0YTtcblxuXHQgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sodGltZUN1cnJlbnQgKyB0aW1lRGVsdGEpOyB9LCB0aW1lRGVsdGEpO1xuXHQgICAgICAgIH07XG5cdCAgICB9KSgpO1xuXG5cdCAgICAvKiBBcnJheSBjb21wYWN0aW5nLiBDb3B5cmlnaHQgTG8tRGFzaC4gTUlUIExpY2Vuc2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0ICovXG5cdCAgICBmdW5jdGlvbiBjb21wYWN0U3BhcnNlQXJyYXkgKGFycmF5KSB7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gLTEsXG5cdCAgICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMCxcblx0ICAgICAgICAgICAgcmVzdWx0ID0gW107XG5cblx0ICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cblx0ICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBzYW5pdGl6ZUVsZW1lbnRzIChlbGVtZW50cykge1xuXHQgICAgICAgIC8qIFVud3JhcCBqUXVlcnkvWmVwdG8gb2JqZWN0cy4gKi9cblx0ICAgICAgICBpZiAoVHlwZS5pc1dyYXBwZWQoZWxlbWVudHMpKSB7XG5cdCAgICAgICAgICAgIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChlbGVtZW50cyk7XG5cdCAgICAgICAgLyogV3JhcCBhIHNpbmdsZSBlbGVtZW50IGluIGFuIGFycmF5IHNvIHRoYXQgJC5lYWNoKCkgY2FuIGl0ZXJhdGUgd2l0aCB0aGUgZWxlbWVudCBpbnN0ZWFkIG9mIGl0cyBub2RlJ3MgY2hpbGRyZW4uICovXG5cdCAgICAgICAgfSBlbHNlIGlmIChUeXBlLmlzTm9kZShlbGVtZW50cykpIHtcblx0ICAgICAgICAgICAgZWxlbWVudHMgPSBbIGVsZW1lbnRzIF07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgVHlwZSA9IHtcblx0ICAgICAgICBpc1N0cmluZzogZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHZhcmlhYmxlID09PSBcInN0cmluZ1wiKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGlzQXJyYXk6IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFyaWFibGUpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBpc0Z1bmN0aW9uOiBmdW5jdGlvbiAodmFyaWFibGUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YXJpYWJsZSkgPT09IFwiW29iamVjdCBGdW5jdGlvbl1cIjtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGlzTm9kZTogZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB2YXJpYWJsZSAmJiB2YXJpYWJsZS5ub2RlVHlwZTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIC8qIENvcHlyaWdodCBNYXJ0aW4gQm9obS4gTUlUIExpY2Vuc2U6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL1RvbWFsYWsvODE4YTc4YTIyNmEwNzM4ZWFhZGUgKi9cblx0ICAgICAgICBpc05vZGVMaXN0OiBmdW5jdGlvbiAodmFyaWFibGUpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PT0gXCJvYmplY3RcIiAmJlxuXHQgICAgICAgICAgICAgICAgL15cXFtvYmplY3QgKEhUTUxDb2xsZWN0aW9ufE5vZGVMaXN0fE9iamVjdClcXF0kLy50ZXN0KE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YXJpYWJsZSkpICYmXG5cdCAgICAgICAgICAgICAgICB2YXJpYWJsZS5sZW5ndGggIT09IHVuZGVmaW5lZCAmJlxuXHQgICAgICAgICAgICAgICAgKHZhcmlhYmxlLmxlbmd0aCA9PT0gMCB8fCAodHlwZW9mIHZhcmlhYmxlWzBdID09PSBcIm9iamVjdFwiICYmIHZhcmlhYmxlWzBdLm5vZGVUeXBlID4gMCkpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgLyogRGV0ZXJtaW5lIGlmIHZhcmlhYmxlIGlzIGEgd3JhcHBlZCBqUXVlcnkgb3IgWmVwdG8gZWxlbWVudC4gKi9cblx0ICAgICAgICBpc1dyYXBwZWQ6IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdmFyaWFibGUgJiYgKHZhcmlhYmxlLmpxdWVyeSB8fCAod2luZG93LlplcHRvICYmIHdpbmRvdy5aZXB0by56ZXB0by5pc1oodmFyaWFibGUpKSk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBpc1NWRzogZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB3aW5kb3cuU1ZHRWxlbWVudCAmJiAodmFyaWFibGUgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiAodmFyaWFibGUpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB2YXJpYWJsZSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqKioqKioqKioqKioqKioqXG5cdCAgICAgICBEZXBlbmRlbmNpZXNcblx0ICAgICoqKioqKioqKioqKioqKioqL1xuXG5cdCAgICB2YXIgJCxcblx0ICAgICAgICBpc0pRdWVyeSA9IGZhbHNlO1xuXG5cdCAgICBpZiAoZ2xvYmFsLmZuICYmIGdsb2JhbC5mbi5qcXVlcnkpIHtcblx0ICAgICAgICAkID0gZ2xvYmFsO1xuXHQgICAgICAgIGlzSlF1ZXJ5ID0gdHJ1ZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgJCA9IHdpbmRvdy5WZWxvY2l0eS5VdGlsaXRpZXM7XG5cdCAgICB9XG5cblx0ICAgIGlmIChJRSA8PSA4ICYmICFpc0pRdWVyeSkge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZlbG9jaXR5OiBJRTggYW5kIGJlbG93IHJlcXVpcmUgalF1ZXJ5IHRvIGJlIGxvYWRlZCBiZWZvcmUgVmVsb2NpdHkuXCIpO1xuXHQgICAgfSBlbHNlIGlmIChJRSA8PSA3KSB7XG5cdCAgICAgICAgLyogUmV2ZXJ0IHRvIGpRdWVyeSdzICQuYW5pbWF0ZSgpLCBhbmQgbG9zZSBWZWxvY2l0eSdzIGV4dHJhIGZlYXR1cmVzLiAqL1xuXHQgICAgICAgIGpRdWVyeS5mbi52ZWxvY2l0eSA9IGpRdWVyeS5mbi5hbmltYXRlO1xuXG5cdCAgICAgICAgLyogTm93IHRoYXQgJC5mbi52ZWxvY2l0eSBpcyBhbGlhc2VkLCBhYm9ydCB0aGlzIFZlbG9jaXR5IGRlY2xhcmF0aW9uLiAqL1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgLyoqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgQ29uc3RhbnRzXG5cdCAgICAqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgdmFyIERVUkFUSU9OX0RFRkFVTFQgPSA0MDAsXG5cdCAgICAgICAgRUFTSU5HX0RFRkFVTFQgPSBcInN3aW5nXCI7XG5cblx0ICAgIC8qKioqKioqKioqKioqXG5cdCAgICAgICAgU3RhdGVcblx0ICAgICoqKioqKioqKioqKiovXG5cblx0ICAgIHZhciBWZWxvY2l0eSA9IHtcblx0ICAgICAgICAvKiBDb250YWluZXIgZm9yIHBhZ2Utd2lkZSBWZWxvY2l0eSBzdGF0ZSBkYXRhLiAqL1xuXHQgICAgICAgIFN0YXRlOiB7XG5cdCAgICAgICAgICAgIC8qIERldGVjdCBtb2JpbGUgZGV2aWNlcyB0byBkZXRlcm1pbmUgaWYgbW9iaWxlSEEgc2hvdWxkIGJlIHR1cm5lZCBvbi4gKi9cblx0ICAgICAgICAgICAgaXNNb2JpbGU6IC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcblx0ICAgICAgICAgICAgLyogVGhlIG1vYmlsZUhBIG9wdGlvbidzIGJlaGF2aW9yIGNoYW5nZXMgb24gb2xkZXIgQW5kcm9pZCBkZXZpY2VzIChHaW5nZXJicmVhZCwgdmVyc2lvbnMgMi4zLjMtMi4zLjcpLiAqL1xuXHQgICAgICAgICAgICBpc0FuZHJvaWQ6IC9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcblx0ICAgICAgICAgICAgaXNHaW5nZXJicmVhZDogL0FuZHJvaWQgMlxcLjNcXC5bMy03XS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG5cdCAgICAgICAgICAgIGlzQ2hyb21lOiB3aW5kb3cuY2hyb21lLFxuXHQgICAgICAgICAgICBpc0ZpcmVmb3g6IC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcblx0ICAgICAgICAgICAgLyogQ3JlYXRlIGEgY2FjaGVkIGVsZW1lbnQgZm9yIHJlLXVzZSB3aGVuIGNoZWNraW5nIGZvciBDU1MgcHJvcGVydHkgcHJlZml4ZXMuICovXG5cdCAgICAgICAgICAgIHByZWZpeEVsZW1lbnQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdCAgICAgICAgICAgIC8qIENhY2hlIGV2ZXJ5IHByZWZpeCBtYXRjaCB0byBhdm9pZCByZXBlYXRpbmcgbG9va3Vwcy4gKi9cblx0ICAgICAgICAgICAgcHJlZml4TWF0Y2hlczoge30sXG5cdCAgICAgICAgICAgIC8qIENhY2hlIHRoZSBhbmNob3IgdXNlZCBmb3IgYW5pbWF0aW5nIHdpbmRvdyBzY3JvbGxpbmcuICovXG5cdCAgICAgICAgICAgIHNjcm9sbEFuY2hvcjogbnVsbCxcblx0ICAgICAgICAgICAgLyogQ2FjaGUgdGhlIGJyb3dzZXItc3BlY2lmaWMgcHJvcGVydHkgbmFtZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzY3JvbGwgYW5jaG9yLiAqL1xuXHQgICAgICAgICAgICBzY3JvbGxQcm9wZXJ0eUxlZnQ6IG51bGwsXG5cdCAgICAgICAgICAgIHNjcm9sbFByb3BlcnR5VG9wOiBudWxsLFxuXHQgICAgICAgICAgICAvKiBLZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3VyIFJBRiB0aWNrIGlzIHJ1bm5pbmcuICovXG5cdCAgICAgICAgICAgIGlzVGlja2luZzogZmFsc2UsXG5cdCAgICAgICAgICAgIC8qIENvbnRhaW5lciBmb3IgZXZlcnkgaW4tcHJvZ3Jlc3MgY2FsbCB0byBWZWxvY2l0eS4gKi9cblx0ICAgICAgICAgICAgY2FsbHM6IFtdXG5cdCAgICAgICAgfSxcblx0ICAgICAgICAvKiBWZWxvY2l0eSdzIGN1c3RvbSBDU1Mgc3RhY2suIE1hZGUgZ2xvYmFsIGZvciB1bml0IHRlc3RpbmcuICovXG5cdCAgICAgICAgQ1NTOiB7IC8qIERlZmluZWQgYmVsb3cuICovIH0sXG5cdCAgICAgICAgLyogQSBzaGltIG9mIHRoZSBqUXVlcnkgdXRpbGl0eSBmdW5jdGlvbnMgdXNlZCBieSBWZWxvY2l0eSAtLSBwcm92aWRlZCBieSBWZWxvY2l0eSdzIG9wdGlvbmFsIGpRdWVyeSBzaGltLiAqL1xuXHQgICAgICAgIFV0aWxpdGllczogJCxcblx0ICAgICAgICAvKiBDb250YWluZXIgZm9yIHRoZSB1c2VyJ3MgY3VzdG9tIGFuaW1hdGlvbiByZWRpcmVjdHMgdGhhdCBhcmUgcmVmZXJlbmNlZCBieSBuYW1lIGluIHBsYWNlIG9mIHRoZSBwcm9wZXJ0aWVzIG1hcCBhcmd1bWVudC4gKi9cblx0ICAgICAgICBSZWRpcmVjdHM6IHsgLyogTWFudWFsbHkgcmVnaXN0ZXJlZCBieSB0aGUgdXNlci4gKi8gfSxcblx0ICAgICAgICBFYXNpbmdzOiB7IC8qIERlZmluZWQgYmVsb3cuICovIH0sXG5cdCAgICAgICAgLyogQXR0ZW1wdCB0byB1c2UgRVM2IFByb21pc2VzIGJ5IGRlZmF1bHQuIFVzZXJzIGNhbiBvdmVycmlkZSB0aGlzIHdpdGggYSB0aGlyZC1wYXJ0eSBwcm9taXNlcyBsaWJyYXJ5LiAqL1xuXHQgICAgICAgIFByb21pc2U6IHdpbmRvdy5Qcm9taXNlLFxuXHQgICAgICAgIC8qIFZlbG9jaXR5IG9wdGlvbiBkZWZhdWx0cywgd2hpY2ggY2FuIGJlIG92ZXJyaWRlbiBieSB0aGUgdXNlci4gKi9cblx0ICAgICAgICBkZWZhdWx0czoge1xuXHQgICAgICAgICAgICBxdWV1ZTogXCJcIixcblx0ICAgICAgICAgICAgZHVyYXRpb246IERVUkFUSU9OX0RFRkFVTFQsXG5cdCAgICAgICAgICAgIGVhc2luZzogRUFTSU5HX0RFRkFVTFQsXG5cdCAgICAgICAgICAgIGJlZ2luOiB1bmRlZmluZWQsXG5cdCAgICAgICAgICAgIGNvbXBsZXRlOiB1bmRlZmluZWQsXG5cdCAgICAgICAgICAgIHByb2dyZXNzOiB1bmRlZmluZWQsXG5cdCAgICAgICAgICAgIGRpc3BsYXk6IHVuZGVmaW5lZCxcblx0ICAgICAgICAgICAgdmlzaWJpbGl0eTogdW5kZWZpbmVkLFxuXHQgICAgICAgICAgICBsb29wOiBmYWxzZSxcblx0ICAgICAgICAgICAgZGVsYXk6IGZhbHNlLFxuXHQgICAgICAgICAgICBtb2JpbGVIQTogdHJ1ZSxcblx0ICAgICAgICAgICAgLyogQWR2YW5jZWQ6IFNldCB0byBmYWxzZSB0byBwcmV2ZW50IHByb3BlcnR5IHZhbHVlcyBmcm9tIGJlaW5nIGNhY2hlZCBiZXR3ZWVuIGNvbnNlY3V0aXZlIFZlbG9jaXR5LWluaXRpYXRlZCBjaGFpbiBjYWxscy4gKi9cblx0ICAgICAgICAgICAgX2NhY2hlVmFsdWVzOiB0cnVlXG5cdCAgICAgICAgfSxcblx0ICAgICAgICAvKiBBIGRlc2lnbiBnb2FsIG9mIFZlbG9jaXR5IGlzIHRvIGNhY2hlIGRhdGEgd2hlcmV2ZXIgcG9zc2libGUgaW4gb3JkZXIgdG8gYXZvaWQgRE9NIHJlcXVlcnlpbmcuIEFjY29yZGluZ2x5LCBlYWNoIGVsZW1lbnQgaGFzIGEgZGF0YSBjYWNoZS4gKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHQgICAgICAgICAgICAkLmRhdGEoZWxlbWVudCwgXCJ2ZWxvY2l0eVwiLCB7XG5cdCAgICAgICAgICAgICAgICAvKiBTdG9yZSB3aGV0aGVyIHRoaXMgaXMgYW4gU1ZHIGVsZW1lbnQsIHNpbmNlIGl0cyBwcm9wZXJ0aWVzIGFyZSByZXRyaWV2ZWQgYW5kIHVwZGF0ZWQgZGlmZmVyZW50bHkgdGhhbiBzdGFuZGFyZCBIVE1MIGVsZW1lbnRzLiAqL1xuXHQgICAgICAgICAgICAgICAgaXNTVkc6IFR5cGUuaXNTVkcoZWxlbWVudCksXG5cdCAgICAgICAgICAgICAgICAvKiBLZWVwIHRyYWNrIG9mIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgY3VycmVudGx5IGJlaW5nIGFuaW1hdGVkIGJ5IFZlbG9jaXR5LlxuXHQgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IHByb3BlcnR5IHZhbHVlcyBhcmUgbm90IHRyYW5zZmVycmVkIGJldHdlZW4gbm9uLWNvbnNlY3V0aXZlIChzdGFsZSkgY2FsbHMuICovXG5cdCAgICAgICAgICAgICAgICBpc0FuaW1hdGluZzogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAvKiBBIHJlZmVyZW5jZSB0byB0aGUgZWxlbWVudCdzIGxpdmUgY29tcHV0ZWRTdHlsZSBvYmplY3QuIExlYXJuIG1vcmUgaGVyZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlICovXG5cdCAgICAgICAgICAgICAgICBjb21wdXRlZFN0eWxlOiBudWxsLFxuXHQgICAgICAgICAgICAgICAgLyogVHdlZW4gZGF0YSBpcyBjYWNoZWQgZm9yIGVhY2ggYW5pbWF0aW9uIG9uIHRoZSBlbGVtZW50IHNvIHRoYXQgZGF0YSBjYW4gYmUgcGFzc2VkIGFjcm9zcyBjYWxscyAtLVxuXHQgICAgICAgICAgICAgICAgICAgaW4gcGFydGljdWxhciwgZW5kIHZhbHVlcyBhcmUgdXNlZCBhcyBzdWJzZXF1ZW50IHN0YXJ0IHZhbHVlcyBpbiBjb25zZWN1dGl2ZSBWZWxvY2l0eSBjYWxscy4gKi9cblx0ICAgICAgICAgICAgICAgIHR3ZWVuc0NvbnRhaW5lcjogbnVsbCxcblx0ICAgICAgICAgICAgICAgIC8qIFRoZSBmdWxsIHJvb3QgcHJvcGVydHkgdmFsdWVzIG9mIGVhY2ggQ1NTIGhvb2sgYmVpbmcgYW5pbWF0ZWQgb24gdGhpcyBlbGVtZW50IGFyZSBjYWNoZWQgc28gdGhhdDpcblx0ICAgICAgICAgICAgICAgICAgIDEpIENvbmN1cnJlbnRseS1hbmltYXRpbmcgaG9va3Mgc2hhcmluZyB0aGUgc2FtZSByb290IGNhbiBoYXZlIHRoZWlyIHJvb3QgdmFsdWVzJyBtZXJnZWQgaW50byBvbmUgd2hpbGUgdHdlZW5pbmcuXG5cdCAgICAgICAgICAgICAgICAgICAyKSBQb3N0LWhvb2staW5qZWN0aW9uIHJvb3QgdmFsdWVzIGNhbiBiZSB0cmFuc2ZlcnJlZCBvdmVyIHRvIGNvbnNlY3V0aXZlbHkgY2hhaW5lZCBWZWxvY2l0eSBjYWxscyBhcyBzdGFydGluZyByb290IHZhbHVlcy4gKi9cblx0ICAgICAgICAgICAgICAgIHJvb3RQcm9wZXJ0eVZhbHVlQ2FjaGU6IHt9LFxuXHQgICAgICAgICAgICAgICAgLyogQSBjYWNoZSBmb3IgdHJhbnNmb3JtIHVwZGF0ZXMsIHdoaWNoIG11c3QgYmUgbWFudWFsbHkgZmx1c2hlZCB2aWEgQ1NTLmZsdXNoVHJhbnNmb3JtQ2FjaGUoKS4gKi9cblx0ICAgICAgICAgICAgICAgIHRyYW5zZm9ybUNhY2hlOiB7fVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIC8qIEEgcGFyYWxsZWwgdG8galF1ZXJ5J3MgJC5jc3MoKSwgdXNlZCBmb3IgZ2V0dGluZy9zZXR0aW5nIFZlbG9jaXR5J3MgaG9va2VkIENTUyBwcm9wZXJ0aWVzLiAqL1xuXHQgICAgICAgIGhvb2s6IG51bGwsIC8qIERlZmluZWQgYmVsb3cuICovXG5cdCAgICAgICAgLyogVmVsb2NpdHktd2lkZSBhbmltYXRpb24gdGltZSByZW1hcHBpbmcgZm9yIHRlc3RpbmcgcHVycG9zZXMuICovXG5cdCAgICAgICAgbW9jazogZmFsc2UsXG5cdCAgICAgICAgdmVyc2lvbjogeyBtYWpvcjogMSwgbWlub3I6IDIsIHBhdGNoOiAyIH0sXG5cdCAgICAgICAgLyogU2V0IHRvIDEgb3IgMiAobW9zdCB2ZXJib3NlKSB0byBvdXRwdXQgZGVidWcgaW5mbyB0byBjb25zb2xlLiAqL1xuXHQgICAgICAgIGRlYnVnOiBmYWxzZVxuXHQgICAgfTtcblxuXHQgICAgLyogUmV0cmlldmUgdGhlIGFwcHJvcHJpYXRlIHNjcm9sbCBhbmNob3IgYW5kIHByb3BlcnR5IG5hbWUgZm9yIHRoZSBicm93c2VyOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93LnNjcm9sbFkgKi9cblx0ICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIFZlbG9jaXR5LlN0YXRlLnNjcm9sbEFuY2hvciA9IHdpbmRvdztcblx0ICAgICAgICBWZWxvY2l0eS5TdGF0ZS5zY3JvbGxQcm9wZXJ0eUxlZnQgPSBcInBhZ2VYT2Zmc2V0XCI7XG5cdCAgICAgICAgVmVsb2NpdHkuU3RhdGUuc2Nyb2xsUHJvcGVydHlUb3AgPSBcInBhZ2VZT2Zmc2V0XCI7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIFZlbG9jaXR5LlN0YXRlLnNjcm9sbEFuY2hvciA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUgfHwgZG9jdW1lbnQuYm9keTtcblx0ICAgICAgICBWZWxvY2l0eS5TdGF0ZS5zY3JvbGxQcm9wZXJ0eUxlZnQgPSBcInNjcm9sbExlZnRcIjtcblx0ICAgICAgICBWZWxvY2l0eS5TdGF0ZS5zY3JvbGxQcm9wZXJ0eVRvcCA9IFwic2Nyb2xsVG9wXCI7XG5cdCAgICB9XG5cblx0ICAgIC8qIFNob3J0aGFuZCBhbGlhcyBmb3IgalF1ZXJ5J3MgJC5kYXRhKCkgdXRpbGl0eS4gKi9cblx0ICAgIGZ1bmN0aW9uIERhdGEgKGVsZW1lbnQpIHtcblx0ICAgICAgICAvKiBIYXJkY29kZSBhIHJlZmVyZW5jZSB0byB0aGUgcGx1Z2luIG5hbWUuICovXG5cdCAgICAgICAgdmFyIHJlc3BvbnNlID0gJC5kYXRhKGVsZW1lbnQsIFwidmVsb2NpdHlcIik7XG5cblx0ICAgICAgICAvKiBqUXVlcnkgPD0xLjQuMiByZXR1cm5zIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQgd2hlbiBubyBtYXRjaCBpcyBmb3VuZC4gV2Ugbm9ybWFsaXplIHRoaXMgYmVoYXZpb3IuICovXG5cdCAgICAgICAgcmV0dXJuIHJlc3BvbnNlID09PSBudWxsID8gdW5kZWZpbmVkIDogcmVzcG9uc2U7XG5cdCAgICB9O1xuXG5cdCAgICAvKioqKioqKioqKioqKipcblx0ICAgICAgICBFYXNpbmdcblx0ICAgICoqKioqKioqKioqKioqL1xuXG5cdCAgICAvKiBTdGVwIGVhc2luZyBnZW5lcmF0b3IuICovXG5cdCAgICBmdW5jdGlvbiBnZW5lcmF0ZVN0ZXAgKHN0ZXBzKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHAgKiBzdGVwcykgKiAoMSAvIHN0ZXBzKTtcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXG5cdCAgICAvKiBCZXppZXIgY3VydmUgZnVuY3Rpb24gZ2VuZXJhdG9yLiBDb3B5cmlnaHQgR2FldGFuIFJlbmF1ZGVhdS4gTUlUIExpY2Vuc2U6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTUlUX0xpY2Vuc2UgKi9cblx0ICAgIGZ1bmN0aW9uIGdlbmVyYXRlQmV6aWVyIChtWDEsIG1ZMSwgbVgyLCBtWTIpIHtcblx0ICAgICAgICB2YXIgTkVXVE9OX0lURVJBVElPTlMgPSA0LFxuXHQgICAgICAgICAgICBORVdUT05fTUlOX1NMT1BFID0gMC4wMDEsXG5cdCAgICAgICAgICAgIFNVQkRJVklTSU9OX1BSRUNJU0lPTiA9IDAuMDAwMDAwMSxcblx0ICAgICAgICAgICAgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMgPSAxMCxcblx0ICAgICAgICAgICAga1NwbGluZVRhYmxlU2l6ZSA9IDExLFxuXHQgICAgICAgICAgICBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCksXG5cdCAgICAgICAgICAgIGZsb2F0MzJBcnJheVN1cHBvcnRlZCA9IFwiRmxvYXQzMkFycmF5XCIgaW4gd2luZG93O1xuXG5cdCAgICAgICAgLyogTXVzdCBjb250YWluIGZvdXIgYXJndW1lbnRzLiAqL1xuXHQgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSA0KSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvKiBBcmd1bWVudHMgbXVzdCBiZSBudW1iZXJzLiAqL1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKGFyZ3VtZW50c1tpXSkgfHwgIWlzRmluaXRlKGFyZ3VtZW50c1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qIFggdmFsdWVzIG11c3QgYmUgaW4gdGhlIFswLCAxXSByYW5nZS4gKi9cblx0ICAgICAgICBtWDEgPSBNYXRoLm1pbihtWDEsIDEpO1xuXHQgICAgICAgIG1YMiA9IE1hdGgubWluKG1YMiwgMSk7XG5cdCAgICAgICAgbVgxID0gTWF0aC5tYXgobVgxLCAwKTtcblx0ICAgICAgICBtWDIgPSBNYXRoLm1heChtWDIsIDApO1xuXG5cdCAgICAgICAgdmFyIG1TYW1wbGVWYWx1ZXMgPSBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPyBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpIDogbmV3IEFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuXG5cdCAgICAgICAgZnVuY3Rpb24gQSAoYUExLCBhQTIpIHsgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMTsgfVxuXHQgICAgICAgIGZ1bmN0aW9uIEIgKGFBMSwgYUEyKSB7IHJldHVybiAzLjAgKiBhQTIgLSA2LjAgKiBhQTE7IH1cblx0ICAgICAgICBmdW5jdGlvbiBDIChhQTEpICAgICAgeyByZXR1cm4gMy4wICogYUExOyB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBjYWxjQmV6aWVyIChhVCwgYUExLCBhQTIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuICgoQShhQTEsIGFBMikqYVQgKyBCKGFBMSwgYUEyKSkqYVQgKyBDKGFBMSkpKmFUO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZ1bmN0aW9uIGdldFNsb3BlIChhVCwgYUExLCBhQTIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIDMuMCAqIEEoYUExLCBhQTIpKmFUKmFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBuZXd0b25SYXBoc29uSXRlcmF0ZSAoYVgsIGFHdWVzc1QpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBORVdUT05fSVRFUkFUSU9OUzsgKytpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNsb3BlID0gZ2V0U2xvcGUoYUd1ZXNzVCwgbVgxLCBtWDIpO1xuXG5cdCAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNsb3BlID09PSAwLjApIHJldHVybiBhR3Vlc3NUO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgY3VycmVudFggPSBjYWxjQmV6aWVyKGFHdWVzc1QsIG1YMSwgbVgyKSAtIGFYO1xuXHQgICAgICAgICAgICAgICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBhR3Vlc3NUO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZ1bmN0aW9uIGNhbGNTYW1wbGVWYWx1ZXMgKCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtTcGxpbmVUYWJsZVNpemU7ICsraSkge1xuXHQgICAgICAgICAgICAgICAgbVNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgZnVuY3Rpb24gYmluYXJ5U3ViZGl2aWRlIChhWCwgYUEsIGFCKSB7XG5cdCAgICAgICAgICAgIHZhciBjdXJyZW50WCwgY3VycmVudFQsIGkgPSAwO1xuXG5cdCAgICAgICAgICAgIGRvIHtcblx0ICAgICAgICAgICAgICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG5cdCAgICAgICAgICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuXHQgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG5cdCAgICAgICAgICAgICAgICAgIGFCID0gY3VycmVudFQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICBhQSA9IGN1cnJlbnRUO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBTVUJESVZJU0lPTl9QUkVDSVNJT04gJiYgKytpIDwgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjdXJyZW50VDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBnZXRURm9yWCAoYVgpIHtcblx0ICAgICAgICAgICAgdmFyIGludGVydmFsU3RhcnQgPSAwLjAsXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50U2FtcGxlID0gMSxcblx0ICAgICAgICAgICAgICAgIGxhc3RTYW1wbGUgPSBrU3BsaW5lVGFibGVTaXplIC0gMTtcblxuXHQgICAgICAgICAgICBmb3IgKDsgY3VycmVudFNhbXBsZSAhPSBsYXN0U2FtcGxlICYmIG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuXHQgICAgICAgICAgICAgICAgaW50ZXJ2YWxTdGFydCArPSBrU2FtcGxlU3RlcFNpemU7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAtLWN1cnJlbnRTYW1wbGU7XG5cblx0ICAgICAgICAgICAgdmFyIGRpc3QgPSAoYVggLSBtU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSAvIChtU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGUrMV0gLSBtU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKSxcblx0ICAgICAgICAgICAgICAgIGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplLFxuXHQgICAgICAgICAgICAgICAgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG5cblx0ICAgICAgICAgICAgaWYgKGluaXRpYWxTbG9wZSA+PSBORVdUT05fTUlOX1NMT1BFKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGd1ZXNzRm9yVCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5pdGlhbFNsb3BlID09IDAuMCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGd1ZXNzRm9yVDtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBiaW5hcnlTdWJkaXZpZGUoYVgsIGludGVydmFsU3RhcnQsIGludGVydmFsU3RhcnQgKyBrU2FtcGxlU3RlcFNpemUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIF9wcmVjb21wdXRlZCA9IGZhbHNlO1xuXG5cdCAgICAgICAgZnVuY3Rpb24gcHJlY29tcHV0ZSgpIHtcblx0ICAgICAgICAgICAgX3ByZWNvbXB1dGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgaWYgKG1YMSAhPSBtWTEgfHwgbVgyICE9IG1ZMikgY2FsY1NhbXBsZVZhbHVlcygpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBmID0gZnVuY3Rpb24gKGFYKSB7XG5cdCAgICAgICAgICAgIGlmICghX3ByZWNvbXB1dGVkKSBwcmVjb21wdXRlKCk7XG5cdCAgICAgICAgICAgIGlmIChtWDEgPT09IG1ZMSAmJiBtWDIgPT09IG1ZMikgcmV0dXJuIGFYO1xuXHQgICAgICAgICAgICBpZiAoYVggPT09IDApIHJldHVybiAwO1xuXHQgICAgICAgICAgICBpZiAoYVggPT09IDEpIHJldHVybiAxO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjYWxjQmV6aWVyKGdldFRGb3JYKGFYKSwgbVkxLCBtWTIpO1xuXHQgICAgICAgIH07XG5cblx0ICAgICAgICBmLmdldENvbnRyb2xQb2ludHMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFt7IHg6IG1YMSwgeTogbVkxIH0sIHsgeDogbVgyLCB5OiBtWTIgfV07IH07XG5cblx0ICAgICAgICB2YXIgc3RyID0gXCJnZW5lcmF0ZUJlemllcihcIiArIFttWDEsIG1ZMSwgbVgyLCBtWTJdICsgXCIpXCI7XG5cdCAgICAgICAgZi50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0cjsgfTtcblxuXHQgICAgICAgIHJldHVybiBmO1xuXHQgICAgfVxuXG5cdCAgICAvKiBSdW5nZS1LdXR0YSBzcHJpbmcgcGh5c2ljcyBmdW5jdGlvbiBnZW5lcmF0b3IuIEFkYXB0ZWQgZnJvbSBGcmFtZXIuanMsIGNvcHlyaWdodCBLb2VuIEJvay4gTUlUIExpY2Vuc2U6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTUlUX0xpY2Vuc2UgKi9cblx0ICAgIC8qIEdpdmVuIGEgdGVuc2lvbiwgZnJpY3Rpb24sIGFuZCBkdXJhdGlvbiwgYSBzaW11bGF0aW9uIGF0IDYwRlBTIHdpbGwgZmlyc3QgcnVuIHdpdGhvdXQgYSBkZWZpbmVkIGR1cmF0aW9uIGluIG9yZGVyIHRvIGNhbGN1bGF0ZSB0aGUgZnVsbCBwYXRoLiBBIHNlY29uZCBwYXNzXG5cdCAgICAgICB0aGVuIGFkanVzdHMgdGhlIHRpbWUgZGVsdGEgLS0gdXNpbmcgdGhlIHJlbGF0aW9uIGJldHdlZW4gYWN0dWFsIHRpbWUgYW5kIGR1cmF0aW9uIC0tIHRvIGNhbGN1bGF0ZSB0aGUgcGF0aCBmb3IgdGhlIGR1cmF0aW9uLWNvbnN0cmFpbmVkIGFuaW1hdGlvbi4gKi9cblx0ICAgIHZhciBnZW5lcmF0ZVNwcmluZ1JLNCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gc3ByaW5nQWNjZWxlcmF0aW9uRm9yU3RhdGUgKHN0YXRlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoLXN0YXRlLnRlbnNpb24gKiBzdGF0ZS54KSAtIChzdGF0ZS5mcmljdGlvbiAqIHN0YXRlLnYpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZ1bmN0aW9uIHNwcmluZ0V2YWx1YXRlU3RhdGVXaXRoRGVyaXZhdGl2ZSAoaW5pdGlhbFN0YXRlLCBkdCwgZGVyaXZhdGl2ZSkge1xuXHQgICAgICAgICAgICB2YXIgc3RhdGUgPSB7XG5cdCAgICAgICAgICAgICAgICB4OiBpbml0aWFsU3RhdGUueCArIGRlcml2YXRpdmUuZHggKiBkdCxcblx0ICAgICAgICAgICAgICAgIHY6IGluaXRpYWxTdGF0ZS52ICsgZGVyaXZhdGl2ZS5kdiAqIGR0LFxuXHQgICAgICAgICAgICAgICAgdGVuc2lvbjogaW5pdGlhbFN0YXRlLnRlbnNpb24sXG5cdCAgICAgICAgICAgICAgICBmcmljdGlvbjogaW5pdGlhbFN0YXRlLmZyaWN0aW9uXG5cdCAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHsgZHg6IHN0YXRlLnYsIGR2OiBzcHJpbmdBY2NlbGVyYXRpb25Gb3JTdGF0ZShzdGF0ZSkgfTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmdW5jdGlvbiBzcHJpbmdJbnRlZ3JhdGVTdGF0ZSAoc3RhdGUsIGR0KSB7XG5cdCAgICAgICAgICAgIHZhciBhID0ge1xuXHQgICAgICAgICAgICAgICAgICAgIGR4OiBzdGF0ZS52LFxuXHQgICAgICAgICAgICAgICAgICAgIGR2OiBzcHJpbmdBY2NlbGVyYXRpb25Gb3JTdGF0ZShzdGF0ZSlcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBiID0gc3ByaW5nRXZhbHVhdGVTdGF0ZVdpdGhEZXJpdmF0aXZlKHN0YXRlLCBkdCAqIDAuNSwgYSksXG5cdCAgICAgICAgICAgICAgICBjID0gc3ByaW5nRXZhbHVhdGVTdGF0ZVdpdGhEZXJpdmF0aXZlKHN0YXRlLCBkdCAqIDAuNSwgYiksXG5cdCAgICAgICAgICAgICAgICBkID0gc3ByaW5nRXZhbHVhdGVTdGF0ZVdpdGhEZXJpdmF0aXZlKHN0YXRlLCBkdCwgYyksXG5cdCAgICAgICAgICAgICAgICBkeGR0ID0gMS4wIC8gNi4wICogKGEuZHggKyAyLjAgKiAoYi5keCArIGMuZHgpICsgZC5keCksXG5cdCAgICAgICAgICAgICAgICBkdmR0ID0gMS4wIC8gNi4wICogKGEuZHYgKyAyLjAgKiAoYi5kdiArIGMuZHYpICsgZC5kdik7XG5cblx0ICAgICAgICAgICAgc3RhdGUueCA9IHN0YXRlLnggKyBkeGR0ICogZHQ7XG5cdCAgICAgICAgICAgIHN0YXRlLnYgPSBzdGF0ZS52ICsgZHZkdCAqIGR0O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3ByaW5nUks0RmFjdG9yeSAodGVuc2lvbiwgZnJpY3Rpb24sIGR1cmF0aW9uKSB7XG5cblx0ICAgICAgICAgICAgdmFyIGluaXRTdGF0ZSA9IHtcblx0ICAgICAgICAgICAgICAgICAgICB4OiAtMSxcblx0ICAgICAgICAgICAgICAgICAgICB2OiAwLFxuXHQgICAgICAgICAgICAgICAgICAgIHRlbnNpb246IG51bGwsXG5cdCAgICAgICAgICAgICAgICAgICAgZnJpY3Rpb246IG51bGxcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBwYXRoID0gWzBdLFxuXHQgICAgICAgICAgICAgICAgdGltZV9sYXBzZWQgPSAwLFxuXHQgICAgICAgICAgICAgICAgdG9sZXJhbmNlID0gMSAvIDEwMDAwLFxuXHQgICAgICAgICAgICAgICAgRFQgPSAxNiAvIDEwMDAsXG5cdCAgICAgICAgICAgICAgICBoYXZlX2R1cmF0aW9uLCBkdCwgbGFzdF9zdGF0ZTtcblxuXHQgICAgICAgICAgICB0ZW5zaW9uID0gcGFyc2VGbG9hdCh0ZW5zaW9uKSB8fCA1MDA7XG5cdCAgICAgICAgICAgIGZyaWN0aW9uID0gcGFyc2VGbG9hdChmcmljdGlvbikgfHwgMjA7XG5cdCAgICAgICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24gfHwgbnVsbDtcblxuXHQgICAgICAgICAgICBpbml0U3RhdGUudGVuc2lvbiA9IHRlbnNpb247XG5cdCAgICAgICAgICAgIGluaXRTdGF0ZS5mcmljdGlvbiA9IGZyaWN0aW9uO1xuXG5cdCAgICAgICAgICAgIGhhdmVfZHVyYXRpb24gPSBkdXJhdGlvbiAhPT0gbnVsbDtcblxuXHQgICAgICAgICAgICAvKiBDYWxjdWxhdGUgdGhlIGFjdHVhbCB0aW1lIGl0IHRha2VzIGZvciB0aGlzIGFuaW1hdGlvbiB0byBjb21wbGV0ZSB3aXRoIHRoZSBwcm92aWRlZCBjb25kaXRpb25zLiAqL1xuXHQgICAgICAgICAgICBpZiAoaGF2ZV9kdXJhdGlvbikge1xuXHQgICAgICAgICAgICAgICAgLyogUnVuIHRoZSBzaW11bGF0aW9uIHdpdGhvdXQgYSBkdXJhdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgIHRpbWVfbGFwc2VkID0gc3ByaW5nUks0RmFjdG9yeSh0ZW5zaW9uLCBmcmljdGlvbik7XG5cdCAgICAgICAgICAgICAgICAvKiBDb21wdXRlIHRoZSBhZGp1c3RlZCB0aW1lIGRlbHRhLiAqL1xuXHQgICAgICAgICAgICAgICAgZHQgPSB0aW1lX2xhcHNlZCAvIGR1cmF0aW9uICogRFQ7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBkdCA9IERUO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICAgICAgICAgIC8qIE5leHQvc3RlcCBmdW5jdGlvbiAuKi9cblx0ICAgICAgICAgICAgICAgIGxhc3Rfc3RhdGUgPSBzcHJpbmdJbnRlZ3JhdGVTdGF0ZShsYXN0X3N0YXRlIHx8IGluaXRTdGF0ZSwgZHQpO1xuXHQgICAgICAgICAgICAgICAgLyogU3RvcmUgdGhlIHBvc2l0aW9uLiAqL1xuXHQgICAgICAgICAgICAgICAgcGF0aC5wdXNoKDEgKyBsYXN0X3N0YXRlLngpO1xuXHQgICAgICAgICAgICAgICAgdGltZV9sYXBzZWQgKz0gMTY7XG5cdCAgICAgICAgICAgICAgICAvKiBJZiB0aGUgY2hhbmdlIHRocmVzaG9sZCBpcyByZWFjaGVkLCBicmVhay4gKi9cblx0ICAgICAgICAgICAgICAgIGlmICghKE1hdGguYWJzKGxhc3Rfc3RhdGUueCkgPiB0b2xlcmFuY2UgJiYgTWF0aC5hYnMobGFzdF9zdGF0ZS52KSA+IHRvbGVyYW5jZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qIElmIGR1cmF0aW9uIGlzIG5vdCBkZWZpbmVkLCByZXR1cm4gdGhlIGFjdHVhbCB0aW1lIHJlcXVpcmVkIGZvciBjb21wbGV0aW5nIHRoaXMgYW5pbWF0aW9uLiBPdGhlcndpc2UsIHJldHVybiBhIGNsb3N1cmUgdGhhdCBob2xkcyB0aGVcblx0ICAgICAgICAgICAgICAgY29tcHV0ZWQgcGF0aCBhbmQgcmV0dXJucyBhIHNuYXBzaG90IG9mIHRoZSBwb3NpdGlvbiBhY2NvcmRpbmcgdG8gYSBnaXZlbiBwZXJjZW50Q29tcGxldGUuICovXG5cdCAgICAgICAgICAgIHJldHVybiAhaGF2ZV9kdXJhdGlvbiA/IHRpbWVfbGFwc2VkIDogZnVuY3Rpb24ocGVyY2VudENvbXBsZXRlKSB7IHJldHVybiBwYXRoWyAocGVyY2VudENvbXBsZXRlICogKHBhdGgubGVuZ3RoIC0gMSkpIHwgMCBdOyB9O1xuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKiBqUXVlcnkgZWFzaW5ncy4gKi9cblx0ICAgIFZlbG9jaXR5LkVhc2luZ3MgPSB7XG5cdCAgICAgICAgbGluZWFyOiBmdW5jdGlvbihwKSB7IHJldHVybiBwOyB9LFxuXHQgICAgICAgIHN3aW5nOiBmdW5jdGlvbihwKSB7IHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDIgfSxcblx0ICAgICAgICAvKiBCb251cyBcInNwcmluZ1wiIGVhc2luZywgd2hpY2ggaXMgYSBsZXNzIGV4YWdnZXJhdGVkIHZlcnNpb24gb2YgZWFzZUluT3V0RWxhc3RpYy4gKi9cblx0ICAgICAgICBzcHJpbmc6IGZ1bmN0aW9uKHApIHsgcmV0dXJuIDEgLSAoTWF0aC5jb3MocCAqIDQuNSAqIE1hdGguUEkpICogTWF0aC5leHAoLXAgKiA2KSk7IH1cblx0ICAgIH07XG5cblx0ICAgIC8qIENTUzMgYW5kIFJvYmVydCBQZW5uZXIgZWFzaW5ncy4gKi9cblx0ICAgICQuZWFjaChcblx0ICAgICAgICBbXG5cdCAgICAgICAgICAgIFsgXCJlYXNlXCIsIFsgMC4yNSwgMC4xLCAwLjI1LCAxLjAgXSBdLFxuXHQgICAgICAgICAgICBbIFwiZWFzZS1pblwiLCBbIDAuNDIsIDAuMCwgMS4wMCwgMS4wIF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2Utb3V0XCIsIFsgMC4wMCwgMC4wLCAwLjU4LCAxLjAgXSBdLFxuXHQgICAgICAgICAgICBbIFwiZWFzZS1pbi1vdXRcIiwgWyAwLjQyLCAwLjAsIDAuNTgsIDEuMCBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5TaW5lXCIsIFsgMC40NywgMCwgMC43NDUsIDAuNzE1IF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2VPdXRTaW5lXCIsIFsgMC4zOSwgMC41NzUsIDAuNTY1LCAxIF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2VJbk91dFNpbmVcIiwgWyAwLjQ0NSwgMC4wNSwgMC41NSwgMC45NSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5RdWFkXCIsIFsgMC41NSwgMC4wODUsIDAuNjgsIDAuNTMgXSBdLFxuXHQgICAgICAgICAgICBbIFwiZWFzZU91dFF1YWRcIiwgWyAwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0IF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2VJbk91dFF1YWRcIiwgWyAwLjQ1NSwgMC4wMywgMC41MTUsIDAuOTU1IF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2VJbkN1YmljXCIsIFsgMC41NSwgMC4wNTUsIDAuNjc1LCAwLjE5IF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2VPdXRDdWJpY1wiLCBbIDAuMjE1LCAwLjYxLCAwLjM1NSwgMSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5PdXRDdWJpY1wiLCBbIDAuNjQ1LCAwLjA0NSwgMC4zNTUsIDEgXSBdLFxuXHQgICAgICAgICAgICBbIFwiZWFzZUluUXVhcnRcIiwgWyAwLjg5NSwgMC4wMywgMC42ODUsIDAuMjIgXSBdLFxuXHQgICAgICAgICAgICBbIFwiZWFzZU91dFF1YXJ0XCIsIFsgMC4xNjUsIDAuODQsIDAuNDQsIDEgXSBdLFxuXHQgICAgICAgICAgICBbIFwiZWFzZUluT3V0UXVhcnRcIiwgWyAwLjc3LCAwLCAwLjE3NSwgMSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5RdWludFwiLCBbIDAuNzU1LCAwLjA1LCAwLjg1NSwgMC4wNiBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlT3V0UXVpbnRcIiwgWyAwLjIzLCAxLCAwLjMyLCAxIF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2VJbk91dFF1aW50XCIsIFsgMC44NiwgMCwgMC4wNywgMSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5FeHBvXCIsIFsgMC45NSwgMC4wNSwgMC43OTUsIDAuMDM1IF0gXSxcblx0ICAgICAgICAgICAgWyBcImVhc2VPdXRFeHBvXCIsIFsgMC4xOSwgMSwgMC4yMiwgMSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5PdXRFeHBvXCIsIFsgMSwgMCwgMCwgMSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5DaXJjXCIsIFsgMC42LCAwLjA0LCAwLjk4LCAwLjMzNSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlT3V0Q2lyY1wiLCBbIDAuMDc1LCAwLjgyLCAwLjE2NSwgMSBdIF0sXG5cdCAgICAgICAgICAgIFsgXCJlYXNlSW5PdXRDaXJjXCIsIFsgMC43ODUsIDAuMTM1LCAwLjE1LCAwLjg2IF0gXVxuXHQgICAgICAgIF0sIGZ1bmN0aW9uKGksIGVhc2luZ0FycmF5KSB7XG5cdCAgICAgICAgICAgIFZlbG9jaXR5LkVhc2luZ3NbZWFzaW5nQXJyYXlbMF1dID0gZ2VuZXJhdGVCZXppZXIuYXBwbHkobnVsbCwgZWFzaW5nQXJyYXlbMV0pO1xuXHQgICAgICAgIH0pO1xuXG5cdCAgICAvKiBEZXRlcm1pbmUgdGhlIGFwcHJvcHJpYXRlIGVhc2luZyB0eXBlIGdpdmVuIGFuIGVhc2luZyBpbnB1dC4gKi9cblx0ICAgIGZ1bmN0aW9uIGdldEVhc2luZyh2YWx1ZSwgZHVyYXRpb24pIHtcblx0ICAgICAgICB2YXIgZWFzaW5nID0gdmFsdWU7XG5cblx0ICAgICAgICAvKiBUaGUgZWFzaW5nIG9wdGlvbiBjYW4gZWl0aGVyIGJlIGEgc3RyaW5nIHRoYXQgcmVmZXJlbmNlcyBhIHByZS1yZWdpc3RlcmVkIGVhc2luZyxcblx0ICAgICAgICAgICBvciBpdCBjYW4gYmUgYSB0d28tL2ZvdXItaXRlbSBhcnJheSBvZiBpbnRlZ2VycyB0byBiZSBjb252ZXJ0ZWQgaW50byBhIGJlemllci9zcHJpbmcgZnVuY3Rpb24uICovXG5cdCAgICAgICAgaWYgKFR5cGUuaXNTdHJpbmcodmFsdWUpKSB7XG5cdCAgICAgICAgICAgIC8qIEVuc3VyZSB0aGF0IHRoZSBlYXNpbmcgaGFzIGJlZW4gYXNzaWduZWQgdG8galF1ZXJ5J3MgVmVsb2NpdHkuRWFzaW5ncyBvYmplY3QuICovXG5cdCAgICAgICAgICAgIGlmICghVmVsb2NpdHkuRWFzaW5nc1t2YWx1ZV0pIHtcblx0ICAgICAgICAgICAgICAgIGVhc2luZyA9IGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmIChUeXBlLmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMSkge1xuXHQgICAgICAgICAgICBlYXNpbmcgPSBnZW5lcmF0ZVN0ZXAuYXBwbHkobnVsbCwgdmFsdWUpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoVHlwZS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDIpIHtcblx0ICAgICAgICAgICAgLyogc3ByaW5nUks0IG11c3QgYmUgcGFzc2VkIHRoZSBhbmltYXRpb24ncyBkdXJhdGlvbi4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogSWYgdGhlIHNwcmluZ1JLNCBhcnJheSBjb250YWlucyBub24tbnVtYmVycywgZ2VuZXJhdGVTcHJpbmdSSzQoKSByZXR1cm5zIGFuIGVhc2luZ1xuXHQgICAgICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZWQgd2l0aCBkZWZhdWx0IHRlbnNpb24gYW5kIGZyaWN0aW9uIHZhbHVlcy4gKi9cblx0ICAgICAgICAgICAgZWFzaW5nID0gZ2VuZXJhdGVTcHJpbmdSSzQuYXBwbHkobnVsbCwgdmFsdWUuY29uY2F0KFsgZHVyYXRpb24gXSkpO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoVHlwZS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDQpIHtcblx0ICAgICAgICAgICAgLyogTm90ZTogSWYgdGhlIGJlemllciBhcnJheSBjb250YWlucyBub24tbnVtYmVycywgZ2VuZXJhdGVCZXppZXIoKSByZXR1cm5zIGZhbHNlLiAqL1xuXHQgICAgICAgICAgICBlYXNpbmcgPSBnZW5lcmF0ZUJlemllci5hcHBseShudWxsLCB2YWx1ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgZWFzaW5nID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyogUmV2ZXJ0IHRvIHRoZSBWZWxvY2l0eS13aWRlIGRlZmF1bHQgZWFzaW5nIHR5cGUsIG9yIGZhbGwgYmFjayB0byBcInN3aW5nXCIgKHdoaWNoIGlzIGFsc28galF1ZXJ5J3MgZGVmYXVsdClcblx0ICAgICAgICAgICBpZiB0aGUgVmVsb2NpdHktd2lkZSBkZWZhdWx0IGhhcyBiZWVuIGluY29ycmVjdGx5IG1vZGlmaWVkLiAqL1xuXHQgICAgICAgIGlmIChlYXNpbmcgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgIGlmIChWZWxvY2l0eS5FYXNpbmdzW1ZlbG9jaXR5LmRlZmF1bHRzLmVhc2luZ10pIHtcblx0ICAgICAgICAgICAgICAgIGVhc2luZyA9IFZlbG9jaXR5LmRlZmF1bHRzLmVhc2luZztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGVhc2luZyA9IEVBU0lOR19ERUZBVUxUO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIGVhc2luZztcblx0ICAgIH1cblxuXHQgICAgLyoqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgQ1NTIFN0YWNrXG5cdCAgICAqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgLyogVGhlIENTUyBvYmplY3QgaXMgYSBoaWdobHkgY29uZGVuc2VkIGFuZCBwZXJmb3JtYW50IENTUyBzdGFjayB0aGF0IGZ1bGx5IHJlcGxhY2VzIGpRdWVyeSdzLlxuXHQgICAgICAgSXQgaGFuZGxlcyB0aGUgdmFsaWRhdGlvbiwgZ2V0dGluZywgYW5kIHNldHRpbmcgb2YgYm90aCBzdGFuZGFyZCBDU1MgcHJvcGVydGllcyBhbmQgQ1NTIHByb3BlcnR5IGhvb2tzLiAqL1xuXHQgICAgLyogTm90ZTogQSBcIkNTU1wiIHNob3J0aGFuZCBpcyBhbGlhc2VkIHNvIHRoYXQgb3VyIGNvZGUgaXMgZWFzaWVyIHRvIHJlYWQuICovXG5cdCAgICB2YXIgQ1NTID0gVmVsb2NpdHkuQ1NTID0ge1xuXG5cdCAgICAgICAgLyoqKioqKioqKioqKipcblx0ICAgICAgICAgICAgUmVnRXhcblx0ICAgICAgICAqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgUmVnRXg6IHtcblx0ICAgICAgICAgICAgaXNIZXg6IC9eIyhbQS1mXFxkXXszfSl7MSwyfSQvaSxcblx0ICAgICAgICAgICAgLyogVW53cmFwIGEgcHJvcGVydHkgdmFsdWUncyBzdXJyb3VuZGluZyB0ZXh0LCBlLmcuIFwicmdiYSg0LCAzLCAyLCAxKVwiID09PiBcIjQsIDMsIDIsIDFcIiBhbmQgXCJyZWN0KDRweCAzcHggMnB4IDFweClcIiA9PT4gXCI0cHggM3B4IDJweCAxcHhcIi4gKi9cblx0ICAgICAgICAgICAgdmFsdWVVbndyYXA6IC9eW0Etel0rXFwoKC4qKVxcKSQvaSxcblx0ICAgICAgICAgICAgd3JhcHBlZFZhbHVlQWxyZWFkeUV4dHJhY3RlZDogL1swLTkuXSsgWzAtOS5dKyBbMC05Ll0rKCBbMC05Ll0rKT8vLFxuXHQgICAgICAgICAgICAvKiBTcGxpdCBhIG11bHRpLXZhbHVlIHByb3BlcnR5IGludG8gYW4gYXJyYXkgb2Ygc3VidmFsdWVzLCBlLmcuIFwicmdiYSg0LCAzLCAyLCAxKSA0cHggM3B4IDJweCAxcHhcIiA9PT4gWyBcInJnYmEoNCwgMywgMiwgMSlcIiwgXCI0cHhcIiwgXCIzcHhcIiwgXCIycHhcIiwgXCIxcHhcIiBdLiAqL1xuXHQgICAgICAgICAgICB2YWx1ZVNwbGl0OiAvKFtBLXpdK1xcKC4rXFwpKXwoKFtBLXowLTkjLS5dKz8pKD89XFxzfCQpKS9pZ1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKioqKioqKioqKioqXG5cdCAgICAgICAgICAgIExpc3RzXG5cdCAgICAgICAgKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgTGlzdHM6IHtcblx0ICAgICAgICAgICAgY29sb3JzOiBbIFwiZmlsbFwiLCBcInN0cm9rZVwiLCBcInN0b3BDb2xvclwiLCBcImNvbG9yXCIsIFwiYmFja2dyb3VuZENvbG9yXCIsIFwiYm9yZGVyQ29sb3JcIiwgXCJib3JkZXJUb3BDb2xvclwiLCBcImJvcmRlclJpZ2h0Q29sb3JcIiwgXCJib3JkZXJCb3R0b21Db2xvclwiLCBcImJvcmRlckxlZnRDb2xvclwiLCBcIm91dGxpbmVDb2xvclwiIF0sXG5cdCAgICAgICAgICAgIHRyYW5zZm9ybXNCYXNlOiBbIFwidHJhbnNsYXRlWFwiLCBcInRyYW5zbGF0ZVlcIiwgXCJzY2FsZVwiLCBcInNjYWxlWFwiLCBcInNjYWxlWVwiLCBcInNrZXdYXCIsIFwic2tld1lcIiwgXCJyb3RhdGVaXCIgXSxcblx0ICAgICAgICAgICAgdHJhbnNmb3JtczNEOiBbIFwidHJhbnNmb3JtUGVyc3BlY3RpdmVcIiwgXCJ0cmFuc2xhdGVaXCIsIFwic2NhbGVaXCIsIFwicm90YXRlWFwiLCBcInJvdGF0ZVlcIiBdXG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKioqKioqKioqKipcblx0ICAgICAgICAgICAgSG9va3Ncblx0ICAgICAgICAqKioqKioqKioqKiovXG5cblx0ICAgICAgICAvKiBIb29rcyBhbGxvdyBhIHN1YnByb3BlcnR5IChlLmcuIFwiYm94U2hhZG93Qmx1clwiKSBvZiBhIGNvbXBvdW5kLXZhbHVlIENTUyBwcm9wZXJ0eVxuXHQgICAgICAgICAgIChlLmcuIFwiYm94U2hhZG93OiBYIFkgQmx1ciBTcHJlYWQgQ29sb3JcIikgdG8gYmUgYW5pbWF0ZWQgYXMgaWYgaXQgd2VyZSBhIGRpc2NyZXRlIHByb3BlcnR5LiAqL1xuXHQgICAgICAgIC8qIE5vdGU6IEJleW9uZCBlbmFibGluZyBmaW5lLWdyYWluZWQgcHJvcGVydHkgYW5pbWF0aW9uLCBob29raW5nIGlzIG5lY2Vzc2FyeSBzaW5jZSBWZWxvY2l0eSBvbmx5XG5cdCAgICAgICAgICAgdHdlZW5zIHByb3BlcnRpZXMgd2l0aCBzaW5nbGUgbnVtZXJpYyB2YWx1ZXM7IHVubGlrZSBDU1MgdHJhbnNpdGlvbnMsIFZlbG9jaXR5IGRvZXMgbm90IGludGVycG9sYXRlIGNvbXBvdW5kLXZhbHVlcy4gKi9cblx0ICAgICAgICBIb29rczoge1xuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgIFJlZ2lzdHJhdGlvblxuXHQgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAvKiBUZW1wbGF0ZXMgYXJlIGEgY29uY2lzZSB3YXkgb2YgaW5kaWNhdGluZyB3aGljaCBzdWJwcm9wZXJ0aWVzIG11c3QgYmUgaW5kaXZpZHVhbGx5IHJlZ2lzdGVyZWQgZm9yIGVhY2ggY29tcG91bmQtdmFsdWUgQ1NTIHByb3BlcnR5LiAqL1xuXHQgICAgICAgICAgICAvKiBFYWNoIHRlbXBsYXRlIGNvbnNpc3RzIG9mIHRoZSBjb21wb3VuZC12YWx1ZSdzIGJhc2UgbmFtZSwgaXRzIGNvbnN0aXR1ZW50IHN1YnByb3BlcnR5IG5hbWVzLCBhbmQgdGhvc2Ugc3VicHJvcGVydGllcycgZGVmYXVsdCB2YWx1ZXMuICovXG5cdCAgICAgICAgICAgIHRlbXBsYXRlczoge1xuXHQgICAgICAgICAgICAgICAgXCJ0ZXh0U2hhZG93XCI6IFsgXCJDb2xvciBYIFkgQmx1clwiLCBcImJsYWNrIDBweCAwcHggMHB4XCIgXSxcblx0ICAgICAgICAgICAgICAgIFwiYm94U2hhZG93XCI6IFsgXCJDb2xvciBYIFkgQmx1ciBTcHJlYWRcIiwgXCJibGFjayAwcHggMHB4IDBweCAwcHhcIiBdLFxuXHQgICAgICAgICAgICAgICAgXCJjbGlwXCI6IFsgXCJUb3AgUmlnaHQgQm90dG9tIExlZnRcIiwgXCIwcHggMHB4IDBweCAwcHhcIiBdLFxuXHQgICAgICAgICAgICAgICAgXCJiYWNrZ3JvdW5kUG9zaXRpb25cIjogWyBcIlggWVwiLCBcIjAlIDAlXCIgXSxcblx0ICAgICAgICAgICAgICAgIFwidHJhbnNmb3JtT3JpZ2luXCI6IFsgXCJYIFkgWlwiLCBcIjUwJSA1MCUgMHB4XCIgXSxcblx0ICAgICAgICAgICAgICAgIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogWyBcIlggWVwiLCBcIjUwJSA1MCVcIiBdXG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyogQSBcInJlZ2lzdGVyZWRcIiBob29rIGlzIG9uZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCBmcm9tIGl0cyB0ZW1wbGF0ZSBmb3JtIGludG8gYSBsaXZlLFxuXHQgICAgICAgICAgICAgICB0d2VlbmFibGUgcHJvcGVydHkuIEl0IGNvbnRhaW5zIGRhdGEgdG8gYXNzb2NpYXRlIGl0IHdpdGggaXRzIHJvb3QgcHJvcGVydHkuICovXG5cdCAgICAgICAgICAgIHJlZ2lzdGVyZWQ6IHtcblx0ICAgICAgICAgICAgICAgIC8qIE5vdGU6IEEgcmVnaXN0ZXJlZCBob29rIGxvb2tzIGxpa2UgdGhpcyA9PT4gdGV4dFNoYWRvd0JsdXI6IFsgXCJ0ZXh0U2hhZG93XCIsIDMgXSxcblx0ICAgICAgICAgICAgICAgICAgIHdoaWNoIGNvbnNpc3RzIG9mIHRoZSBzdWJwcm9wZXJ0eSdzIG5hbWUsIHRoZSBhc3NvY2lhdGVkIHJvb3QgcHJvcGVydHkncyBuYW1lLFxuXHQgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzdWJwcm9wZXJ0eSdzIHBvc2l0aW9uIGluIHRoZSByb290J3MgdmFsdWUuICovXG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIC8qIENvbnZlcnQgdGhlIHRlbXBsYXRlcyBpbnRvIGluZGl2aWR1YWwgaG9va3MgdGhlbiBhcHBlbmQgdGhlbSB0byB0aGUgcmVnaXN0ZXJlZCBvYmplY3QgYWJvdmUuICovXG5cdCAgICAgICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAvKiBDb2xvciBob29rcyByZWdpc3RyYXRpb246IENvbG9ycyBhcmUgZGVmYXVsdGVkIHRvIHdoaXRlIC0tIGFzIG9wcG9zZWQgdG8gYmxhY2sgLS0gc2luY2UgY29sb3JzIHRoYXQgYXJlXG5cdCAgICAgICAgICAgICAgICAgICBjdXJyZW50bHkgc2V0IHRvIFwidHJhbnNwYXJlbnRcIiBkZWZhdWx0IHRvIHRoZWlyIHJlc3BlY3RpdmUgdGVtcGxhdGUgYmVsb3cgd2hlbiBjb2xvci1hbmltYXRlZCxcblx0ICAgICAgICAgICAgICAgICAgIGFuZCB3aGl0ZSBpcyB0eXBpY2FsbHkgYSBjbG9zZXIgbWF0Y2ggdG8gdHJhbnNwYXJlbnQgdGhhbiBibGFjayBpcy4gQW4gZXhjZXB0aW9uIGlzIG1hZGUgZm9yIHRleHQgKFwiY29sb3JcIiksXG5cdCAgICAgICAgICAgICAgICAgICB3aGljaCBpcyBhbG1vc3QgYWx3YXlzIHNldCBjbG9zZXIgdG8gYmxhY2sgdGhhbiB3aGl0ZS4gKi9cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQ1NTLkxpc3RzLmNvbG9ycy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciByZ2JDb21wb25lbnRzID0gKENTUy5MaXN0cy5jb2xvcnNbaV0gPT09IFwiY29sb3JcIikgPyBcIjAgMCAwIDFcIiA6IFwiMjU1IDI1NSAyNTUgMVwiO1xuXHQgICAgICAgICAgICAgICAgICAgIENTUy5Ib29rcy50ZW1wbGF0ZXNbQ1NTLkxpc3RzLmNvbG9yc1tpXV0gPSBbIFwiUmVkIEdyZWVuIEJsdWUgQWxwaGFcIiwgcmdiQ29tcG9uZW50cyBdO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB2YXIgcm9vdFByb3BlcnR5LFxuXHQgICAgICAgICAgICAgICAgICAgIGhvb2tUZW1wbGF0ZSxcblx0ICAgICAgICAgICAgICAgICAgICBob29rTmFtZXM7XG5cblx0ICAgICAgICAgICAgICAgIC8qIEluIElFLCBjb2xvciB2YWx1ZXMgaW5zaWRlIGNvbXBvdW5kLXZhbHVlIHByb3BlcnRpZXMgYXJlIHBvc2l0aW9uZWQgYXQgdGhlIGVuZCB0aGUgdmFsdWUgaW5zdGVhZCBvZiBhdCB0aGUgYmVnaW5uaW5nLlxuXHQgICAgICAgICAgICAgICAgICAgVGh1cywgd2UgcmUtYXJyYW5nZSB0aGUgdGVtcGxhdGVzIGFjY29yZGluZ2x5LiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKElFKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yIChyb290UHJvcGVydHkgaW4gQ1NTLkhvb2tzLnRlbXBsYXRlcykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBob29rVGVtcGxhdGUgPSBDU1MuSG9va3MudGVtcGxhdGVzW3Jvb3RQcm9wZXJ0eV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhvb2tOYW1lcyA9IGhvb2tUZW1wbGF0ZVswXS5zcGxpdChcIiBcIik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZXMgPSBob29rVGVtcGxhdGVbMV0ubWF0Y2goQ1NTLlJlZ0V4LnZhbHVlU3BsaXQpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob29rTmFtZXNbMF0gPT09IFwiQ29sb3JcIikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVwb3NpdGlvbiBib3RoIHRoZSBob29rJ3MgbmFtZSBhbmQgaXRzIGRlZmF1bHQgdmFsdWUgdG8gdGhlIGVuZCBvZiB0aGVpciByZXNwZWN0aXZlIHN0cmluZ3MuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBob29rTmFtZXMucHVzaChob29rTmFtZXMuc2hpZnQoKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWVzLnB1c2goZGVmYXVsdFZhbHVlcy5zaGlmdCgpKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVwbGFjZSB0aGUgZXhpc3RpbmcgdGVtcGxhdGUgZm9yIHRoZSBob29rJ3Mgcm9vdCBwcm9wZXJ0eS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIENTUy5Ib29rcy50ZW1wbGF0ZXNbcm9vdFByb3BlcnR5XSA9IFsgaG9va05hbWVzLmpvaW4oXCIgXCIpLCBkZWZhdWx0VmFsdWVzLmpvaW4oXCIgXCIpIF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8qIEhvb2sgcmVnaXN0cmF0aW9uLiAqL1xuXHQgICAgICAgICAgICAgICAgZm9yIChyb290UHJvcGVydHkgaW4gQ1NTLkhvb2tzLnRlbXBsYXRlcykge1xuXHQgICAgICAgICAgICAgICAgICAgIGhvb2tUZW1wbGF0ZSA9IENTUy5Ib29rcy50ZW1wbGF0ZXNbcm9vdFByb3BlcnR5XTtcblx0ICAgICAgICAgICAgICAgICAgICBob29rTmFtZXMgPSBob29rVGVtcGxhdGVbMF0uc3BsaXQoXCIgXCIpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBob29rTmFtZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZ1bGxIb29rTmFtZSA9IHJvb3RQcm9wZXJ0eSArIGhvb2tOYW1lc1tpXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvb2tQb3NpdGlvbiA9IGk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogRm9yIGVhY2ggaG9vaywgcmVnaXN0ZXIgaXRzIGZ1bGwgbmFtZSAoZS5nLiB0ZXh0U2hhZG93Qmx1cikgd2l0aCBpdHMgcm9vdCBwcm9wZXJ0eSAoZS5nLiB0ZXh0U2hhZG93KVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGhvb2sncyBwb3NpdGlvbiBpbiBpdHMgdGVtcGxhdGUncyBkZWZhdWx0IHZhbHVlIHN0cmluZy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgQ1NTLkhvb2tzLnJlZ2lzdGVyZWRbZnVsbEhvb2tOYW1lXSA9IFsgcm9vdFByb3BlcnR5LCBob29rUG9zaXRpb24gXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgIEluamVjdGlvbiBhbmQgRXh0cmFjdGlvblxuXHQgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAvKiBMb29rIHVwIHRoZSByb290IHByb3BlcnR5IGFzc29jaWF0ZWQgd2l0aCB0aGUgaG9vayAoZS5nLiByZXR1cm4gXCJ0ZXh0U2hhZG93XCIgZm9yIFwidGV4dFNoYWRvd0JsdXJcIikuICovXG5cdCAgICAgICAgICAgIC8qIFNpbmNlIGEgaG9vayBjYW5ub3QgYmUgc2V0IGRpcmVjdGx5ICh0aGUgYnJvd3NlciB3b24ndCByZWNvZ25pemUgaXQpLCBzdHlsZSB1cGRhdGluZyBmb3IgaG9va3MgaXMgcm91dGVkIHRocm91Z2ggdGhlIGhvb2sncyByb290IHByb3BlcnR5LiAqL1xuXHQgICAgICAgICAgICBnZXRSb290OiBmdW5jdGlvbiAocHJvcGVydHkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBob29rRGF0YSA9IENTUy5Ib29rcy5yZWdpc3RlcmVkW3Byb3BlcnR5XTtcblxuXHQgICAgICAgICAgICAgICAgaWYgKGhvb2tEYXRhKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvb2tEYXRhWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gaG9vayBtYXRjaCwgcmV0dXJuIHRoZSBwcm9wZXJ0eSBuYW1lIHVudG91Y2hlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgIC8qIENvbnZlcnQgYW55IHJvb3RQcm9wZXJ0eVZhbHVlLCBudWxsIG9yIG90aGVyd2lzZSwgaW50byBhIHNwYWNlLWRlbGltaXRlZCBsaXN0IG9mIGhvb2sgdmFsdWVzIHNvIHRoYXRcblx0ICAgICAgICAgICAgICAgdGhlIHRhcmdldGVkIGhvb2sgY2FuIGJlIGluamVjdGVkIG9yIGV4dHJhY3RlZCBhdCBpdHMgc3RhbmRhcmQgcG9zaXRpb24uICovXG5cdCAgICAgICAgICAgIGNsZWFuUm9vdFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uKHJvb3RQcm9wZXJ0eSwgcm9vdFByb3BlcnR5VmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIC8qIElmIHRoZSByb290UHJvcGVydHlWYWx1ZSBpcyB3cmFwcGVkIHdpdGggXCJyZ2IoKVwiLCBcImNsaXAoKVwiLCBldGMuLCByZW1vdmUgdGhlIHdyYXBwaW5nIHRvIG5vcm1hbGl6ZSB0aGUgdmFsdWUgYmVmb3JlIG1hbmlwdWxhdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgIGlmIChDU1MuUmVnRXgudmFsdWVVbndyYXAudGVzdChyb290UHJvcGVydHlWYWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZSA9IHJvb3RQcm9wZXJ0eVZhbHVlLm1hdGNoKENTUy5SZWdFeC52YWx1ZVVud3JhcClbMV07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8qIElmIHJvb3RQcm9wZXJ0eVZhbHVlIGlzIGEgQ1NTIG51bGwtdmFsdWUgKGZyb20gd2hpY2ggdGhlcmUncyBpbmhlcmVudGx5IG5vIGhvb2sgdmFsdWUgdG8gZXh0cmFjdCksXG5cdCAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHRvIHRoZSByb290J3MgZGVmYXVsdCB2YWx1ZSBhcyBkZWZpbmVkIGluIENTUy5Ib29rcy50ZW1wbGF0ZXMuICovXG5cdCAgICAgICAgICAgICAgICAvKiBOb3RlOiBDU1MgbnVsbC12YWx1ZXMgaW5jbHVkZSBcIm5vbmVcIiwgXCJhdXRvXCIsIGFuZCBcInRyYW5zcGFyZW50XCIuIFRoZXkgbXVzdCBiZSBjb252ZXJ0ZWQgaW50byB0aGVpclxuXHQgICAgICAgICAgICAgICAgICAgemVyby12YWx1ZXMgKGUuZy4gdGV4dFNoYWRvdzogXCJub25lXCIgPT0+IHRleHRTaGFkb3c6IFwiMHB4IDBweCAwcHggYmxhY2tcIikgZm9yIGhvb2sgbWFuaXB1bGF0aW9uIHRvIHByb2NlZWQuICovXG5cdCAgICAgICAgICAgICAgICBpZiAoQ1NTLlZhbHVlcy5pc0NTU051bGxWYWx1ZShyb290UHJvcGVydHlWYWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZSA9IENTUy5Ib29rcy50ZW1wbGF0ZXNbcm9vdFByb3BlcnR5XVsxXTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHJvb3RQcm9wZXJ0eVZhbHVlO1xuXHQgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAvKiBFeHRyYWN0ZWQgdGhlIGhvb2sncyB2YWx1ZSBmcm9tIGl0cyByb290IHByb3BlcnR5J3MgdmFsdWUuIFRoaXMgaXMgdXNlZCB0byBnZXQgdGhlIHN0YXJ0aW5nIHZhbHVlIG9mIGFuIGFuaW1hdGluZyBob29rLiAqL1xuXHQgICAgICAgICAgICBleHRyYWN0VmFsdWU6IGZ1bmN0aW9uIChmdWxsSG9va05hbWUsIHJvb3RQcm9wZXJ0eVZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgaG9va0RhdGEgPSBDU1MuSG9va3MucmVnaXN0ZXJlZFtmdWxsSG9va05hbWVdO1xuXG5cdCAgICAgICAgICAgICAgICBpZiAoaG9va0RhdGEpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaG9va1Jvb3QgPSBob29rRGF0YVswXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaG9va1Bvc2l0aW9uID0gaG9va0RhdGFbMV07XG5cblx0ICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZSA9IENTUy5Ib29rcy5jbGVhblJvb3RQcm9wZXJ0eVZhbHVlKGhvb2tSb290LCByb290UHJvcGVydHlWYWx1ZSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBTcGxpdCByb290UHJvcGVydHlWYWx1ZSBpbnRvIGl0cyBjb25zdGl0dWVudCBob29rIHZhbHVlcyB0aGVuIGdyYWIgdGhlIGRlc2lyZWQgaG9vayBhdCBpdHMgc3RhbmRhcmQgcG9zaXRpb24uICovXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvb3RQcm9wZXJ0eVZhbHVlLnRvU3RyaW5nKCkubWF0Y2goQ1NTLlJlZ0V4LnZhbHVlU3BsaXQpW2hvb2tQb3NpdGlvbl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoZSBwcm92aWRlZCBmdWxsSG9va05hbWUgaXNuJ3QgYSByZWdpc3RlcmVkIGhvb2ssIHJldHVybiB0aGUgcm9vdFByb3BlcnR5VmFsdWUgdGhhdCB3YXMgcGFzc2VkIGluLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByb290UHJvcGVydHlWYWx1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgLyogSW5qZWN0IHRoZSBob29rJ3MgdmFsdWUgaW50byBpdHMgcm9vdCBwcm9wZXJ0eSdzIHZhbHVlLiBUaGlzIGlzIHVzZWQgdG8gcGllY2UgYmFjayB0b2dldGhlciB0aGUgcm9vdCBwcm9wZXJ0eVxuXHQgICAgICAgICAgICAgICBvbmNlIFZlbG9jaXR5IGhhcyB1cGRhdGVkIG9uZSBvZiBpdHMgaW5kaXZpZHVhbGx5IGhvb2tlZCB2YWx1ZXMgdGhyb3VnaCB0d2VlbmluZy4gKi9cblx0ICAgICAgICAgICAgaW5qZWN0VmFsdWU6IGZ1bmN0aW9uIChmdWxsSG9va05hbWUsIGhvb2tWYWx1ZSwgcm9vdFByb3BlcnR5VmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBob29rRGF0YSA9IENTUy5Ib29rcy5yZWdpc3RlcmVkW2Z1bGxIb29rTmFtZV07XG5cblx0ICAgICAgICAgICAgICAgIGlmIChob29rRGF0YSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBob29rUm9vdCA9IGhvb2tEYXRhWzBdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBob29rUG9zaXRpb24gPSBob29rRGF0YVsxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm9vdFByb3BlcnR5VmFsdWVQYXJ0cyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm9vdFByb3BlcnR5VmFsdWVVcGRhdGVkO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgcm9vdFByb3BlcnR5VmFsdWUgPSBDU1MuSG9va3MuY2xlYW5Sb290UHJvcGVydHlWYWx1ZShob29rUm9vdCwgcm9vdFByb3BlcnR5VmFsdWUpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogU3BsaXQgcm9vdFByb3BlcnR5VmFsdWUgaW50byBpdHMgaW5kaXZpZHVhbCBob29rIHZhbHVlcywgcmVwbGFjZSB0aGUgdGFyZ2V0ZWQgdmFsdWUgd2l0aCBob29rVmFsdWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgdGhlbiByZWNvbnN0cnVjdCB0aGUgcm9vdFByb3BlcnR5VmFsdWUgc3RyaW5nLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHJvb3RQcm9wZXJ0eVZhbHVlUGFydHMgPSByb290UHJvcGVydHlWYWx1ZS50b1N0cmluZygpLm1hdGNoKENTUy5SZWdFeC52YWx1ZVNwbGl0KTtcblx0ICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZVBhcnRzW2hvb2tQb3NpdGlvbl0gPSBob29rVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgcm9vdFByb3BlcnR5VmFsdWVVcGRhdGVkID0gcm9vdFByb3BlcnR5VmFsdWVQYXJ0cy5qb2luKFwiIFwiKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByb290UHJvcGVydHlWYWx1ZVVwZGF0ZWQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoZSBwcm92aWRlZCBmdWxsSG9va05hbWUgaXNuJ3QgYSByZWdpc3RlcmVkIGhvb2ssIHJldHVybiB0aGUgcm9vdFByb3BlcnR5VmFsdWUgdGhhdCB3YXMgcGFzc2VkIGluLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByb290UHJvcGVydHlWYWx1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgIE5vcm1hbGl6YXRpb25zXG5cdCAgICAgICAgKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgIC8qIE5vcm1hbGl6YXRpb25zIHN0YW5kYXJkaXplIENTUyBwcm9wZXJ0eSBtYW5pcHVsYXRpb24gYnkgcG9sbHlmaWxsaW5nIGJyb3dzZXItc3BlY2lmaWMgaW1wbGVtZW50YXRpb25zIChlLmcuIG9wYWNpdHkpXG5cdCAgICAgICAgICAgYW5kIHJlZm9ybWF0dGluZyBzcGVjaWFsIHByb3BlcnRpZXMgKGUuZy4gY2xpcCwgcmdiYSkgdG8gbG9vayBsaWtlIHN0YW5kYXJkIG9uZXMuICovXG5cdCAgICAgICAgTm9ybWFsaXphdGlvbnM6IHtcblx0ICAgICAgICAgICAgLyogTm9ybWFsaXphdGlvbnMgYXJlIHBhc3NlZCBhIG5vcm1hbGl6YXRpb24gdGFyZ2V0IChlaXRoZXIgdGhlIHByb3BlcnR5J3MgbmFtZSwgaXRzIGV4dHJhY3RlZCB2YWx1ZSwgb3IgaXRzIGluamVjdGVkIHZhbHVlKSxcblx0ICAgICAgICAgICAgICAgdGhlIHRhcmdldGVkIGVsZW1lbnQgKHdoaWNoIG1heSBuZWVkIHRvIGJlIHF1ZXJpZWQpLCBhbmQgdGhlIHRhcmdldGVkIHByb3BlcnR5IHZhbHVlLiAqL1xuXHQgICAgICAgICAgICByZWdpc3RlcmVkOiB7XG5cdCAgICAgICAgICAgICAgICBjbGlwOiBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgcHJvcGVydHlWYWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY2xpcFwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBDbGlwIG5lZWRzIHRvIGJlIHVud3JhcHBlZCBhbmQgc3RyaXBwZWQgb2YgaXRzIGNvbW1hcyBkdXJpbmcgZXh0cmFjdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImV4dHJhY3RcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRyYWN0ZWQ7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIFZlbG9jaXR5IGFsc28gZXh0cmFjdGVkIHRoaXMgdmFsdWUsIHNraXAgZXh0cmFjdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDU1MuUmVnRXgud3JhcHBlZFZhbHVlQWxyZWFkeUV4dHJhY3RlZC50ZXN0KHByb3BlcnR5VmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdGVkID0gcHJvcGVydHlWYWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVtb3ZlIHRoZSBcInJlY3QoKVwiIHdyYXBwZXIuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdGVkID0gcHJvcGVydHlWYWx1ZS50b1N0cmluZygpLm1hdGNoKENTUy5SZWdFeC52YWx1ZVVud3JhcCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTdHJpcCBvZmYgY29tbWFzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZCA9IGV4dHJhY3RlZCA/IGV4dHJhY3RlZFsxXS5yZXBsYWNlKC8sKFxccyspPy9nLCBcIiBcIikgOiBwcm9wZXJ0eVZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXh0cmFjdGVkO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBDbGlwIG5lZWRzIHRvIGJlIHJlLXdyYXBwZWQgZHVyaW5nIGluamVjdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluamVjdFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVjdChcIiArIHByb3BlcnR5VmFsdWUgKyBcIilcIjtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgICAgICBibHVyOiBmdW5jdGlvbih0eXBlLCBlbGVtZW50LCBwcm9wZXJ0eVZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVmVsb2NpdHkuU3RhdGUuaXNGaXJlZm94ID8gXCJmaWx0ZXJcIiA6IFwiLXdlYmtpdC1maWx0ZXJcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImV4dHJhY3RcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRyYWN0ZWQgPSBwYXJzZUZsb2F0KHByb3BlcnR5VmFsdWUpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiBleHRyYWN0ZWQgaXMgTmFOLCBtZWFuaW5nIHRoZSB2YWx1ZSBpc24ndCBhbHJlYWR5IGV4dHJhY3RlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGV4dHJhY3RlZCB8fCBleHRyYWN0ZWQgPT09IDApKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJsdXJDb21wb25lbnQgPSBwcm9wZXJ0eVZhbHVlLnRvU3RyaW5nKCkubWF0Y2goL2JsdXJcXCgoWzAtOV0rW0Etel0rKVxcKS9pKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoZSBmaWx0ZXIgc3RyaW5nIGhhZCBhIGJsdXIgY29tcG9uZW50LCByZXR1cm4ganVzdCB0aGUgYmx1ciB2YWx1ZSBhbmQgdW5pdCB0eXBlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibHVyQ29tcG9uZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZCA9IGJsdXJDb21wb25lbnRbMV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIGNvbXBvbmVudCBkb2Vzbid0IGV4aXN0LCBkZWZhdWx0IGJsdXIgdG8gMC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0ZWQgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3RlZDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogQmx1ciBuZWVkcyB0byBiZSByZS13cmFwcGVkIGR1cmluZyBpbmplY3Rpb24uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbmplY3RcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEZvciB0aGUgYmx1ciBlZmZlY3QgdG8gYmUgZnVsbHkgZGUtYXBwbGllZCwgaXQgbmVlZHMgdG8gYmUgc2V0IHRvIFwibm9uZVwiIGluc3RlYWQgb2YgMC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFyc2VGbG9hdChwcm9wZXJ0eVZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5vbmVcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYmx1cihcIiArIHByb3BlcnR5VmFsdWUgKyBcIilcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgICAgICAvKiA8PUlFOCBkbyBub3Qgc3VwcG9ydCB0aGUgc3RhbmRhcmQgb3BhY2l0eSBwcm9wZXJ0eS4gVGhleSB1c2UgZmlsdGVyOmFscGhhKG9wYWNpdHk9SU5UKSBpbnN0ZWFkLiAqL1xuXHQgICAgICAgICAgICAgICAgb3BhY2l0eTogZnVuY3Rpb24gKHR5cGUsIGVsZW1lbnQsIHByb3BlcnR5VmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoSUUgPD0gOCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZmlsdGVyXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXh0cmFjdFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDw9SUU4IHJldHVybiBhIFwiZmlsdGVyXCIgdmFsdWUgb2YgXCJhbHBoYShvcGFjaXR5PVxcZHsxLDN9KVwiLlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4dHJhY3QgdGhlIHZhbHVlIGFuZCBjb252ZXJ0IGl0IHRvIGEgZGVjaW1hbCB2YWx1ZSB0byBtYXRjaCB0aGUgc3RhbmRhcmQgQ1NTIG9wYWNpdHkgcHJvcGVydHkncyBmb3JtYXR0aW5nLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRyYWN0ZWQgPSBwcm9wZXJ0eVZhbHVlLnRvU3RyaW5nKCkubWF0Y2goL2FscGhhXFwob3BhY2l0eT0oLiopXFwpL2kpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dHJhY3RlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDb252ZXJ0IHRvIGRlY2ltYWwgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSBleHRyYWN0ZWRbMV0gLyAxMDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogV2hlbiBleHRyYWN0aW5nIG9wYWNpdHksIGRlZmF1bHQgdG8gMSBzaW5jZSBhIG51bGwgdmFsdWUgbWVhbnMgb3BhY2l0eSBoYXNuJ3QgYmVlbiBzZXQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSAxO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eVZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluamVjdFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE9wYWNpZmllZCBlbGVtZW50cyBhcmUgcmVxdWlyZWQgdG8gaGF2ZSB0aGVpciB6b29tIHByb3BlcnR5IHNldCB0byBhIG5vbi16ZXJvIHZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuem9vbSA9IDE7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTZXR0aW5nIHRoZSBmaWx0ZXIgcHJvcGVydHkgb24gZWxlbWVudHMgd2l0aCBjZXJ0YWluIGZvbnQgcHJvcGVydHkgY29tYmluYXRpb25zIGNhbiByZXN1bHQgaW4gYVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hseSB1bmFwcGVhbGluZyB1bHRyYS1ib2xkaW5nIGVmZmVjdC4gVGhlcmUncyBubyB3YXkgdG8gcmVtZWR5IHRoaXMgdGhyb3VnaG91dCBhIHR3ZWVuLCBidXQgZHJvcHBpbmcgdGhlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgYWx0b2dldGhlciAod2hlbiBvcGFjaXR5IGhpdHMgMSkgYXQgbGVhc3RzIGVuc3VyZXMgdGhhdCB0aGUgZ2xpdGNoIGlzIGdvbmUgcG9zdC10d2VlbmluZy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChwcm9wZXJ0eVZhbHVlKSA+PSAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBcyBwZXIgdGhlIGZpbHRlciBwcm9wZXJ0eSdzIHNwZWMsIGNvbnZlcnQgdGhlIGRlY2ltYWwgdmFsdWUgdG8gYSB3aG9sZSBudW1iZXIgYW5kIHdyYXAgdGhlIHZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYWxwaGEob3BhY2l0eT1cIiArIHBhcnNlSW50KHBhcnNlRmxvYXQocHJvcGVydHlWYWx1ZSkgKiAxMDAsIDEwKSArIFwiKVwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIC8qIFdpdGggYWxsIG90aGVyIGJyb3dzZXJzLCBub3JtYWxpemF0aW9uIGlzIG5vdCByZXF1aXJlZDsgcmV0dXJuIHRoZSBzYW1lIHZhbHVlcyB0aGF0IHdlcmUgcGFzc2VkIGluLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm5hbWVcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJvcGFjaXR5XCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXh0cmFjdFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eVZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImluamVjdFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eVZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgQmF0Y2hlZCBSZWdpc3RyYXRpb25zXG5cdCAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgIC8qIE5vdGU6IEJhdGNoZWQgbm9ybWFsaXphdGlvbnMgZXh0ZW5kIHRoZSBDU1MuTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZCBvYmplY3QuICovXG5cdCAgICAgICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgIFRyYW5zZm9ybXNcblx0ICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAvKiBUcmFuc2Zvcm1zIGFyZSB0aGUgc3VicHJvcGVydGllcyBjb250YWluZWQgYnkgdGhlIENTUyBcInRyYW5zZm9ybVwiIHByb3BlcnR5LiBUcmFuc2Zvcm1zIG11c3QgdW5kZXJnbyBub3JtYWxpemF0aW9uXG5cdCAgICAgICAgICAgICAgICAgICBzbyB0aGF0IHRoZXkgY2FuIGJlIHJlZmVyZW5jZWQgaW4gYSBwcm9wZXJ0aWVzIG1hcCBieSB0aGVpciBpbmRpdmlkdWFsIG5hbWVzLiAqL1xuXHQgICAgICAgICAgICAgICAgLyogTm90ZTogV2hlbiB0cmFuc2Zvcm1zIGFyZSBcInNldFwiLCB0aGV5IGFyZSBhY3R1YWxseSBhc3NpZ25lZCB0byBhIHBlci1lbGVtZW50IHRyYW5zZm9ybUNhY2hlLiBXaGVuIGFsbCB0cmFuc2Zvcm1cblx0ICAgICAgICAgICAgICAgICAgIHNldHRpbmcgaXMgY29tcGxldGUgY29tcGxldGUsIENTUy5mbHVzaFRyYW5zZm9ybUNhY2hlKCkgbXVzdCBiZSBtYW51YWxseSBjYWxsZWQgdG8gZmx1c2ggdGhlIHZhbHVlcyB0byB0aGUgRE9NLlxuXHQgICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtIHNldHRpbmcgaXMgYmF0Y2hlZCBpbiB0aGlzIHdheSB0byBpbXByb3ZlIHBlcmZvcm1hbmNlOiB0aGUgdHJhbnNmb3JtIHN0eWxlIG9ubHkgbmVlZHMgdG8gYmUgdXBkYXRlZFxuXHQgICAgICAgICAgICAgICAgICAgb25jZSB3aGVuIG11bHRpcGxlIHRyYW5zZm9ybSBzdWJwcm9wZXJ0aWVzIGFyZSBiZWluZyBhbmltYXRlZCBzaW11bHRhbmVvdXNseS4gKi9cblx0ICAgICAgICAgICAgICAgIC8qIE5vdGU6IElFOSBhbmQgQW5kcm9pZCBHaW5nZXJicmVhZCBoYXZlIHN1cHBvcnQgZm9yIDJEIC0tIGJ1dCBub3QgM0QgLS0gdHJhbnNmb3Jtcy4gU2luY2UgYW5pbWF0aW5nIHVuc3VwcG9ydGVkXG5cdCAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gcHJvcGVydGllcyByZXN1bHRzIGluIHRoZSBicm93c2VyIGlnbm9yaW5nIHRoZSAqZW50aXJlKiB0cmFuc2Zvcm0gc3RyaW5nLCB3ZSBwcmV2ZW50IHRoZXNlIDNEIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgICAgZnJvbSBiZWluZyBub3JtYWxpemVkIGZvciB0aGVzZSBicm93c2VycyBzbyB0aGF0IHR3ZWVuaW5nIHNraXBzIHRoZXNlIHByb3BlcnRpZXMgYWx0b2dldGhlclxuXHQgICAgICAgICAgICAgICAgICAgKHNpbmNlIGl0IHdpbGwgaWdub3JlIHRoZW0gYXMgYmVpbmcgdW5zdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuKSAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKCEoSUUgPD0gOSkgJiYgIVZlbG9jaXR5LlN0YXRlLmlzR2luZ2VyYnJlYWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBOb3RlOiBTaW5jZSB0aGUgc3RhbmRhbG9uZSBDU1MgXCJwZXJzcGVjdGl2ZVwiIHByb3BlcnR5IGFuZCB0aGUgQ1NTIHRyYW5zZm9ybSBcInBlcnNwZWN0aXZlXCIgc3VicHJvcGVydHlcblx0ICAgICAgICAgICAgICAgICAgICBzaGFyZSB0aGUgc2FtZSBuYW1lLCB0aGUgbGF0dGVyIGlzIGdpdmVuIGEgdW5pcXVlIHRva2VuIHdpdGhpbiBWZWxvY2l0eTogXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIENTUy5MaXN0cy50cmFuc2Zvcm1zQmFzZSA9IENTUy5MaXN0cy50cmFuc2Zvcm1zQmFzZS5jb25jYXQoQ1NTLkxpc3RzLnRyYW5zZm9ybXMzRCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQ1NTLkxpc3RzLnRyYW5zZm9ybXNCYXNlLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogV3JhcCB0aGUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIG5vcm1hbGl6YXRpb24gZnVuY3Rpb24gaW4gYSBuZXcgc2NvcGUgc28gdGhhdCB0cmFuc2Zvcm1OYW1lJ3MgdmFsdWUgaXNcblx0ICAgICAgICAgICAgICAgICAgICBwYWlyZWQgd2l0aCBpdHMgcmVzcGVjdGl2ZSBmdW5jdGlvbi4gKE90aGVyd2lzZSwgYWxsIGZ1bmN0aW9ucyB3b3VsZCB0YWtlIHRoZSBmaW5hbCBmb3IgbG9vcCdzIHRyYW5zZm9ybU5hbWUuKSAqL1xuXHQgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybU5hbWUgPSBDU1MuTGlzdHMudHJhbnNmb3Jtc0Jhc2VbaV07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgQ1NTLk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbdHJhbnNmb3JtTmFtZV0gPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgcHJvcGVydHlWYWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogVGhlIG5vcm1hbGl6ZWQgcHJvcGVydHkgbmFtZSBpcyB0aGUgcGFyZW50IFwidHJhbnNmb3JtXCIgcHJvcGVydHkgLS0gdGhlIHByb3BlcnR5IHRoYXQgaXMgYWN0dWFsbHkgc2V0IGluIENTUy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2Zvcm1cIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBUcmFuc2Zvcm0gdmFsdWVzIGFyZSBjYWNoZWQgb250byBhIHBlci1lbGVtZW50IHRyYW5zZm9ybUNhY2hlIG9iamVjdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXh0cmFjdFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGlzIHRyYW5zZm9ybSBoYXMgeWV0IHRvIGJlIGFzc2lnbmVkIGEgdmFsdWUsIHJldHVybiBpdHMgbnVsbCB2YWx1ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERhdGEoZWxlbWVudCkgPT09IHVuZGVmaW5lZCB8fCBEYXRhKGVsZW1lbnQpLnRyYW5zZm9ybUNhY2hlW3RyYW5zZm9ybU5hbWVdID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNjYWxlIENTUy5MaXN0cy50cmFuc2Zvcm1zQmFzZSBkZWZhdWx0IHRvIDEgd2hlcmVhcyBhbGwgb3RoZXIgdHJhbnNmb3JtIHByb3BlcnRpZXMgZGVmYXVsdCB0byAwLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC9ec2NhbGUvaS50ZXN0KHRyYW5zZm9ybU5hbWUpID8gMSA6IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFdoZW4gdHJhbnNmb3JtIHZhbHVlcyBhcmUgc2V0LCB0aGV5IGFyZSB3cmFwcGVkIGluIHBhcmVudGhlc2VzIGFzIHBlciB0aGUgQ1NTIHNwZWMuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRodXMsIHdoZW4gZXh0cmFjdGluZyB0aGVpciB2YWx1ZXMgKGZvciB0d2VlbiBjYWxjdWxhdGlvbnMpLCB3ZSBzdHJpcCBvZmYgdGhlIHBhcmVudGhlc2VzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGVbdHJhbnNmb3JtTmFtZV0ucmVwbGFjZSgvWygpXS9nLCBcIlwiKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbmplY3RcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludmFsaWQgPSBmYWxzZTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiBhbiBpbmRpdmlkdWFsIHRyYW5zZm9ybSBwcm9wZXJ0eSBjb250YWlucyBhbiB1bnN1cHBvcnRlZCB1bml0IHR5cGUsIHRoZSBicm93c2VyIGlnbm9yZXMgdGhlICplbnRpcmUqIHRyYW5zZm9ybSBwcm9wZXJ0eS5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGh1cywgcHJvdGVjdCB1c2VycyBmcm9tIHRoZW1zZWx2ZXMgYnkgc2tpcHBpbmcgc2V0dGluZyBmb3IgdHJhbnNmb3JtIHZhbHVlcyBzdXBwbGllZCB3aXRoIGludmFsaWQgdW5pdCB0eXBlcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3dpdGNoIG9uIHRoZSBiYXNlIHRyYW5zZm9ybSB0eXBlOyBpZ25vcmUgdGhlIGF4aXMgYnkgcmVtb3ZpbmcgdGhlIGxhc3QgbGV0dGVyIGZyb20gdGhlIHRyYW5zZm9ybSdzIG5hbWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJhbnNmb3JtTmFtZS5zdWJzdHIoMCwgdHJhbnNmb3JtTmFtZS5sZW5ndGggLSAxKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogV2hpdGVsaXN0IHVuaXQgdHlwZXMgZm9yIGVhY2ggdHJhbnNmb3JtLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRyYW5zbGF0ZVwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWQgPSAhLyglfHB4fGVtfHJlbXx2d3x2aHxcXGQpJC9pLnRlc3QocHJvcGVydHlWYWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTaW5jZSBhbiBheGlzLWZyZWUgXCJzY2FsZVwiIHByb3BlcnR5IGlzIHN1cHBvcnRlZCBhcyB3ZWxsLCBhIGxpdHRsZSBoYWNrIGlzIHVzZWQgaGVyZSB0byBkZXRlY3QgaXQgYnkgY2hvcHBpbmcgb2ZmIGl0cyBsYXN0IGxldHRlci4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGVcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaHJvbWUgb24gQW5kcm9pZCBoYXMgYSBidWcgaW4gd2hpY2ggc2NhbGVkIGVsZW1lbnRzIGJsdXIgaWYgdGhlaXIgaW5pdGlhbCBzY2FsZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIGlzIGJlbG93IDEgKHdoaWNoIGNhbiBoYXBwZW4gd2l0aCBmb3JjZWZlZWRpbmcpLiBUaHVzLCB3ZSBkZXRlY3QgYSB5ZXQtdW5zZXQgc2NhbGUgcHJvcGVydHlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgZW5zdXJlIHRoYXQgaXRzIGZpcnN0IHZhbHVlIGlzIGFsd2F5cyAxLiBNb3JlIGluZm86IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA0MTc4OTAvY3NzMy1hbmltYXRpb25zLXdpdGgtdHJhbnNmb3JtLWNhdXNlcy1ibHVycmVkLWVsZW1lbnRzLW9uLXdlYmtpdC8xMDQxNzk2MiMxMDQxNzk2MiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWZWxvY2l0eS5TdGF0ZS5pc0FuZHJvaWQgJiYgRGF0YShlbGVtZW50KS50cmFuc2Zvcm1DYWNoZVt0cmFuc2Zvcm1OYW1lXSA9PT0gdW5kZWZpbmVkICYmIHByb3BlcnR5VmFsdWUgPCAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSAxO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWQgPSAhLyhcXGQpJC9pLnRlc3QocHJvcGVydHlWYWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2tld1wiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWQgPSAhLyhkZWd8XFxkKSQvaS50ZXN0KHByb3BlcnR5VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJvdGF0ZVwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWQgPSAhLyhkZWd8XFxkKSQvaS50ZXN0KHByb3BlcnR5VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnZhbGlkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBcyBwZXIgdGhlIENTUyBzcGVjLCB3cmFwIHRoZSB2YWx1ZSBpbiBwYXJlbnRoZXNlcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGVbdHJhbnNmb3JtTmFtZV0gPSBcIihcIiArIHByb3BlcnR5VmFsdWUgKyBcIilcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFsdGhvdWdoIHRoZSB2YWx1ZSBpcyBzZXQgb24gdGhlIHRyYW5zZm9ybUNhY2hlIG9iamVjdCwgcmV0dXJuIHRoZSBuZXdseS11cGRhdGVkIHZhbHVlIGZvciB0aGUgY2FsbGluZyBjb2RlIHRvIHByb2Nlc3MgYXMgbm9ybWFsLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGF0YShlbGVtZW50KS50cmFuc2Zvcm1DYWNoZVt0cmFuc2Zvcm1OYW1lXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICB9KSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgIENvbG9yc1xuXHQgICAgICAgICAgICAgICAgKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgLyogU2luY2UgVmVsb2NpdHkgb25seSBhbmltYXRlcyBhIHNpbmdsZSBudW1lcmljIHZhbHVlIHBlciBwcm9wZXJ0eSwgY29sb3IgYW5pbWF0aW9uIGlzIGFjaGlldmVkIGJ5IGhvb2tpbmcgdGhlIGluZGl2aWR1YWwgUkdCQSBjb21wb25lbnRzIG9mIENTUyBjb2xvciBwcm9wZXJ0aWVzLlxuXHQgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHksIGNvbG9yIHZhbHVlcyBtdXN0IGJlIG5vcm1hbGl6ZWQgKGUuZy4gXCIjZmYwMDAwXCIsIFwicmVkXCIsIGFuZCBcInJnYigyNTUsIDAsIDApXCIgPT0+IFwiMjU1IDAgMCAxXCIpIHNvIHRoYXQgdGhlaXIgY29tcG9uZW50cyBjYW4gYmUgaW5qZWN0ZWQvZXh0cmFjdGVkIGJ5IENTUy5Ib29rcyBsb2dpYy4gKi9cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQ1NTLkxpc3RzLmNvbG9ycy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8qIFdyYXAgdGhlIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCBub3JtYWxpemF0aW9uIGZ1bmN0aW9uIGluIGEgbmV3IHNjb3BlIHNvIHRoYXQgY29sb3JOYW1lJ3MgdmFsdWUgaXMgcGFpcmVkIHdpdGggaXRzIHJlc3BlY3RpdmUgZnVuY3Rpb24uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgKE90aGVyd2lzZSwgYWxsIGZ1bmN0aW9ucyB3b3VsZCB0YWtlIHRoZSBmaW5hbCBmb3IgbG9vcCdzIGNvbG9yTmFtZS4pICovXG5cdCAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yTmFtZSA9IENTUy5MaXN0cy5jb2xvcnNbaV07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogSW4gSUU8PTgsIHdoaWNoIHN1cHBvcnQgcmdiIGJ1dCBub3QgcmdiYSwgY29sb3IgcHJvcGVydGllcyBhcmUgcmV2ZXJ0ZWQgdG8gcmdiIGJ5IHN0cmlwcGluZyBvZmYgdGhlIGFscGhhIGNvbXBvbmVudC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgQ1NTLk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbY29sb3JOYW1lXSA9IGZ1bmN0aW9uKHR5cGUsIGVsZW1lbnQsIHByb3BlcnR5VmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xvck5hbWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ29udmVydCBhbGwgY29sb3IgdmFsdWVzIGludG8gdGhlIHJnYiBmb3JtYXQuIChPbGQgSUUgY2FuIHJldHVybiBoZXggdmFsdWVzIGFuZCBjb2xvciBuYW1lcyBpbnN0ZWFkIG9mIHJnYi9yZ2JhLikgKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXh0cmFjdFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0cmFjdGVkO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoZSBjb2xvciBpcyBhbHJlYWR5IGluIGl0cyBob29rYWJsZSBmb3JtIChlLmcuIFwiMjU1IDI1NSAyNTUgMVwiKSBkdWUgdG8gaGF2aW5nIGJlZW4gcHJldmlvdXNseSBleHRyYWN0ZWQsIHNraXAgZXh0cmFjdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENTUy5SZWdFeC53cmFwcGVkVmFsdWVBbHJlYWR5RXh0cmFjdGVkLnRlc3QocHJvcGVydHlWYWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZCA9IHByb3BlcnR5VmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udmVydGVkLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yTmFtZXMgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsYWNrOiBcInJnYigwLCAwLCAwKVwiLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibHVlOiBcInJnYigwLCAwLCAyNTUpXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXk6IFwicmdiKDEyOCwgMTI4LCAxMjgpXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyZWVuOiBcInJnYigwLCAxMjgsIDApXCIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZDogXCJyZ2IoMjU1LCAwLCAwKVwiLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZTogXCJyZ2IoMjU1LCAyNTUsIDI1NSlcIlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENvbnZlcnQgY29sb3IgbmFtZXMgdG8gcmdiLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC9eW0Etel0rJC9pLnRlc3QocHJvcGVydHlWYWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3JOYW1lc1twcm9wZXJ0eVZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRlZCA9IGNvbG9yTmFtZXNbcHJvcGVydHlWYWx1ZV1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiBhbiB1bm1hdGNoZWQgY29sb3IgbmFtZSBpcyBwcm92aWRlZCwgZGVmYXVsdCB0byBibGFjay4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydGVkID0gY29sb3JOYW1lcy5ibGFjaztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDb252ZXJ0IGhleCB2YWx1ZXMgdG8gcmdiLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDU1MuUmVnRXguaXNIZXgudGVzdChwcm9wZXJ0eVZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRlZCA9IFwicmdiKFwiICsgQ1NTLlZhbHVlcy5oZXhUb1JnYihwcm9wZXJ0eVZhbHVlKS5qb2luKFwiIFwiKSArIFwiKVwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIHByb3ZpZGVkIGNvbG9yIGRvZXNuJ3QgbWF0Y2ggYW55IG9mIHRoZSBhY2NlcHRlZCBjb2xvciBmb3JtYXRzLCBkZWZhdWx0IHRvIGJsYWNrLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKC9ecmdiYT9cXCgvaS50ZXN0KHByb3BlcnR5VmFsdWUpKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRlZCA9IGNvbG9yTmFtZXMuYmxhY2s7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlbW92ZSB0aGUgc3Vycm91bmRpbmcgXCJyZ2IvcmdiYSgpXCIgc3RyaW5nIHRoZW4gcmVwbGFjZSBjb21tYXMgd2l0aCBzcGFjZXMgYW5kIHN0cmlwXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlZCBzcGFjZXMgKGluIGNhc2UgdGhlIHZhbHVlIGluY2x1ZGVkIHNwYWNlcyB0byBiZWdpbiB3aXRoKS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZCA9IChjb252ZXJ0ZWQgfHwgcHJvcGVydHlWYWx1ZSkudG9TdHJpbmcoKS5tYXRjaChDU1MuUmVnRXgudmFsdWVVbndyYXApWzFdLnJlcGxhY2UoLywoXFxzKyk/L2csIFwiIFwiKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNvIGxvbmcgYXMgdGhpcyBpc24ndCA8PUlFOCwgYWRkIGEgZm91cnRoIChhbHBoYSkgY29tcG9uZW50IGlmIGl0J3MgbWlzc2luZyBhbmQgZGVmYXVsdCBpdCB0byAxICh2aXNpYmxlKS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoSUUgPD0gOCkgJiYgZXh0cmFjdGVkLnNwbGl0KFwiIFwiKS5sZW5ndGggPT09IDMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RlZCArPSBcIiAxXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXh0cmFjdGVkO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbmplY3RcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhpcyBpcyBJRTw9OCBhbmQgYW4gYWxwaGEgY29tcG9uZW50IGV4aXN0cywgc3RyaXAgaXQgb2ZmLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSUUgPD0gOCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5VmFsdWUuc3BsaXQoXCIgXCIpLmxlbmd0aCA9PT0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSBwcm9wZXJ0eVZhbHVlLnNwbGl0KC9cXHMrLykuc2xpY2UoMCwgMykuam9pbihcIiBcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE90aGVyd2lzZSwgYWRkIGEgZm91cnRoIChhbHBoYSkgY29tcG9uZW50IGlmIGl0J3MgbWlzc2luZyBhbmQgZGVmYXVsdCBpdCB0byAxICh2aXNpYmxlKS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eVZhbHVlLnNwbGl0KFwiIFwiKS5sZW5ndGggPT09IDMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgKz0gXCIgMVwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUmUtaW5zZXJ0IHRoZSBicm93c2VyLWFwcHJvcHJpYXRlIHdyYXBwZXIoXCJyZ2IvcmdiYSgpXCIpLCBpbnNlcnQgY29tbWFzLCBhbmQgc3RyaXAgb2ZmIGRlY2ltYWwgdW5pdHNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gYWxsIHZhbHVlcyBidXQgdGhlIGZvdXJ0aCAoUiwgRywgYW5kIEIgb25seSBhY2NlcHQgd2hvbGUgbnVtYmVycykuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoSUUgPD0gOCA/IFwicmdiXCIgOiBcInJnYmFcIikgKyBcIihcIiArIHByb3BlcnR5VmFsdWUucmVwbGFjZSgvXFxzKy9nLCBcIixcIikucmVwbGFjZSgvXFwuKFxcZCkrKD89LCkvZywgXCJcIikgKyBcIilcIjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICB9KSgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICBDU1MgUHJvcGVydHkgTmFtZXNcblx0ICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICBOYW1lczoge1xuXHQgICAgICAgICAgICAvKiBDYW1lbGNhc2UgYSBwcm9wZXJ0eSBuYW1lIGludG8gaXRzIEphdmFTY3JpcHQgbm90YXRpb24gKGUuZy4gXCJiYWNrZ3JvdW5kLWNvbG9yXCIgPT0+IFwiYmFja2dyb3VuZENvbG9yXCIpLlxuXHQgICAgICAgICAgICAgICBDYW1lbGNhc2luZyBpcyB1c2VkIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0eSBuYW1lcyBiZXR3ZWVuIGFuZCBhY3Jvc3MgY2FsbHMuICovXG5cdCAgICAgICAgICAgIGNhbWVsQ2FzZTogZnVuY3Rpb24gKHByb3BlcnR5KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkucmVwbGFjZSgvLShcXHcpL2csIGZ1bmN0aW9uIChtYXRjaCwgc3ViTWF0Y2gpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ViTWF0Y2gudG9VcHBlckNhc2UoKTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qIEZvciBTVkcgZWxlbWVudHMsIHNvbWUgcHJvcGVydGllcyAobmFtZWx5LCBkaW1lbnNpb25hbCBvbmVzKSBhcmUgR0VUL1NFVCB2aWEgdGhlIGVsZW1lbnQncyBIVE1MIGF0dHJpYnV0ZXMgKGluc3RlYWQgb2YgdmlhIENTUyBzdHlsZXMpLiAqL1xuXHQgICAgICAgICAgICBTVkdBdHRyaWJ1dGU6IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIFNWR0F0dHJpYnV0ZXMgPSBcIndpZHRofGhlaWdodHx4fHl8Y3h8Y3l8cnxyeHxyeXx4MXx4Mnx5MXx5MlwiO1xuXG5cdCAgICAgICAgICAgICAgICAvKiBDZXJ0YWluIGJyb3dzZXJzIHJlcXVpcmUgYW4gU1ZHIHRyYW5zZm9ybSB0byBiZSBhcHBsaWVkIGFzIGFuIGF0dHJpYnV0ZS4gKE90aGVyd2lzZSwgYXBwbGljYXRpb24gdmlhIENTUyBpcyBwcmVmZXJhYmxlIGR1ZSB0byAzRCBzdXBwb3J0LikgKi9cblx0ICAgICAgICAgICAgICAgIGlmIChJRSB8fCAoVmVsb2NpdHkuU3RhdGUuaXNBbmRyb2lkICYmICFWZWxvY2l0eS5TdGF0ZS5pc0Nocm9tZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBTVkdBdHRyaWJ1dGVzICs9IFwifHRyYW5zZm9ybVwiO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oXCIgKyBTVkdBdHRyaWJ1dGVzICsgXCIpJFwiLCBcImlcIikudGVzdChwcm9wZXJ0eSk7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyogRGV0ZXJtaW5lIHdoZXRoZXIgYSBwcm9wZXJ0eSBzaG91bGQgYmUgc2V0IHdpdGggYSB2ZW5kb3IgcHJlZml4LiAqL1xuXHQgICAgICAgICAgICAvKiBJZiBhIHByZWZpeGVkIHZlcnNpb24gb2YgdGhlIHByb3BlcnR5IGV4aXN0cywgcmV0dXJuIGl0LiBPdGhlcndpc2UsIHJldHVybiB0aGUgb3JpZ2luYWwgcHJvcGVydHkgbmFtZS5cblx0ICAgICAgICAgICAgICAgSWYgdGhlIHByb3BlcnR5IGlzIG5vdCBhdCBhbGwgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLCByZXR1cm4gYSBmYWxzZSBmbGFnLiAqL1xuXHQgICAgICAgICAgICBwcmVmaXhDaGVjazogZnVuY3Rpb24gKHByb3BlcnR5KSB7XG5cdCAgICAgICAgICAgICAgICAvKiBJZiB0aGlzIHByb3BlcnR5IGhhcyBhbHJlYWR5IGJlZW4gY2hlY2tlZCwgcmV0dXJuIHRoZSBjYWNoZWQgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICBpZiAoVmVsb2NpdHkuU3RhdGUucHJlZml4TWF0Y2hlc1twcm9wZXJ0eV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBWZWxvY2l0eS5TdGF0ZS5wcmVmaXhNYXRjaGVzW3Byb3BlcnR5XSwgdHJ1ZSBdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdmVuZG9ycyA9IFsgXCJcIiwgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiLCBcIk9cIiBdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHZlbmRvcnNMZW5ndGggPSB2ZW5kb3JzLmxlbmd0aDsgaSA8IHZlbmRvcnNMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlQcmVmaXhlZDtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlQcmVmaXhlZCA9IHByb3BlcnR5O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FwaXRhbGl6ZSB0aGUgZmlyc3QgbGV0dGVyIG9mIHRoZSBwcm9wZXJ0eSB0byBjb25mb3JtIHRvIEphdmFTY3JpcHQgdmVuZG9yIHByZWZpeCBub3RhdGlvbiAoZS5nLiB3ZWJraXRGaWx0ZXIpLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlQcmVmaXhlZCA9IHZlbmRvcnNbaV0gKyBwcm9wZXJ0eS5yZXBsYWNlKC9eXFx3LywgZnVuY3Rpb24obWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2hlY2sgaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhpcyBwcm9wZXJ0eSBhcyBwcmVmaXhlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFR5cGUuaXNTdHJpbmcoVmVsb2NpdHkuU3RhdGUucHJlZml4RWxlbWVudC5zdHlsZVtwcm9wZXJ0eVByZWZpeGVkXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIENhY2hlIHRoZSBtYXRjaC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlbG9jaXR5LlN0YXRlLnByZWZpeE1hdGNoZXNbcHJvcGVydHldID0gcHJvcGVydHlQcmVmaXhlZDtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgcHJvcGVydHlQcmVmaXhlZCwgdHJ1ZSBdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoaXMgcHJvcGVydHkgaW4gYW55IGZvcm0sIGluY2x1ZGUgYSBmYWxzZSBmbGFnIHNvIHRoYXQgdGhlIGNhbGxlciBjYW4gZGVjaWRlIGhvdyB0byBwcm9jZWVkLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBbIHByb3BlcnR5LCBmYWxzZSBdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICBDU1MgUHJvcGVydHkgVmFsdWVzXG5cdCAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgVmFsdWVzOiB7XG5cdCAgICAgICAgICAgIC8qIEhleCB0byBSR0IgY29udmVyc2lvbi4gQ29weXJpZ2h0IFRpbSBEb3duOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU2MjM4MzgvcmdiLXRvLWhleC1hbmQtaGV4LXRvLXJnYiAqL1xuXHQgICAgICAgICAgICBoZXhUb1JnYjogZnVuY3Rpb24gKGhleCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHNob3J0Zm9ybVJlZ2V4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaSxcblx0ICAgICAgICAgICAgICAgICAgICBsb25nZm9ybVJlZ2V4ID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaSxcblx0ICAgICAgICAgICAgICAgICAgICByZ2JQYXJ0cztcblxuXHQgICAgICAgICAgICAgICAgaGV4ID0gaGV4LnJlcGxhY2Uoc2hvcnRmb3JtUmVnZXgsIGZ1bmN0aW9uIChtLCByLCBnLCBiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgKyByICsgZyArIGcgKyBiICsgYjtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICByZ2JQYXJ0cyA9IGxvbmdmb3JtUmVnZXguZXhlYyhoZXgpO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmdiUGFydHMgPyBbIHBhcnNlSW50KHJnYlBhcnRzWzFdLCAxNiksIHBhcnNlSW50KHJnYlBhcnRzWzJdLCAxNiksIHBhcnNlSW50KHJnYlBhcnRzWzNdLCAxNikgXSA6IFsgMCwgMCwgMCBdO1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIGlzQ1NTTnVsbFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIC8qIFRoZSBicm93c2VyIGRlZmF1bHRzIENTUyB2YWx1ZXMgdGhhdCBoYXZlIG5vdCBiZWVuIHNldCB0byBlaXRoZXIgMCBvciBvbmUgb2Ygc2V2ZXJhbCBwb3NzaWJsZSBudWxsLXZhbHVlIHN0cmluZ3MuXG5cdCAgICAgICAgICAgICAgICAgICBUaHVzLCB3ZSBjaGVjayBmb3IgYm90aCBmYWxzaW5lc3MgYW5kIHRoZXNlIHNwZWNpYWwgc3RyaW5ncy4gKi9cblx0ICAgICAgICAgICAgICAgIC8qIE51bGwtdmFsdWUgY2hlY2tpbmcgaXMgcGVyZm9ybWVkIHRvIGRlZmF1bHQgdGhlIHNwZWNpYWwgc3RyaW5ncyB0byAwIChmb3IgdGhlIHNha2Ugb2YgdHdlZW5pbmcpIG9yIHRoZWlyIGhvb2tcblx0ICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlcyBhcyBkZWZpbmVkIGFzIENTUy5Ib29rcyAoZm9yIHRoZSBzYWtlIG9mIGhvb2sgaW5qZWN0aW9uL2V4dHJhY3Rpb24pLiAqL1xuXHQgICAgICAgICAgICAgICAgLyogTm90ZTogQ2hyb21lIHJldHVybnMgXCJyZ2JhKDAsIDAsIDAsIDApXCIgZm9yIGFuIHVuZGVmaW5lZCBjb2xvciB3aGVyZWFzIElFIHJldHVybnMgXCJ0cmFuc3BhcmVudFwiLiAqL1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSA9PSAwIHx8IC9eKG5vbmV8YXV0b3x0cmFuc3BhcmVudHwocmdiYVxcKDAsID8wLCA/MCwgPzBcXCkpKSQvaS50ZXN0KHZhbHVlKSk7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyogUmV0cmlldmUgYSBwcm9wZXJ0eSdzIGRlZmF1bHQgdW5pdCB0eXBlLiBVc2VkIGZvciBhc3NpZ25pbmcgYSB1bml0IHR5cGUgd2hlbiBvbmUgaXMgbm90IHN1cHBsaWVkIGJ5IHRoZSB1c2VyLiAqL1xuXHQgICAgICAgICAgICBnZXRVbml0VHlwZTogZnVuY3Rpb24gKHByb3BlcnR5KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoL14ocm90YXRlfHNrZXcpL2kudGVzdChwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJkZWdcIjtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoLyheKHNjYWxlfHNjYWxlWHxzY2FsZVl8c2NhbGVafGFscGhhfGZsZXhHcm93fGZsZXhIZWlnaHR8ekluZGV4fGZvbnRXZWlnaHQpJCl8KChvcGFjaXR5fHJlZHxncmVlbnxibHVlfGFscGhhKSQpL2kudGVzdChwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBUaGUgYWJvdmUgcHJvcGVydGllcyBhcmUgdW5pdGxlc3MuICovXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8qIERlZmF1bHQgdG8gcHggZm9yIGFsbCBvdGhlciBwcm9wZXJ0aWVzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInB4XCI7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyogSFRNTCBlbGVtZW50cyBkZWZhdWx0IHRvIGFuIGFzc29jaWF0ZWQgZGlzcGxheSB0eXBlIHdoZW4gdGhleSdyZSBub3Qgc2V0IHRvIGRpc3BsYXk6bm9uZS4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGZvciBjb3JyZWN0bHkgc2V0dGluZyB0aGUgbm9uLVwibm9uZVwiIGRpc3BsYXkgdmFsdWUgaW4gY2VydGFpbiBWZWxvY2l0eSByZWRpcmVjdHMsIHN1Y2ggYXMgZmFkZUluL091dC4gKi9cblx0ICAgICAgICAgICAgZ2V0RGlzcGxheVR5cGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdGFnTmFtZSA9IGVsZW1lbnQgJiYgZWxlbWVudC50YWdOYW1lLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcblxuXHQgICAgICAgICAgICAgICAgaWYgKC9eKGJ8YmlnfGl8c21hbGx8dHR8YWJicnxhY3JvbnltfGNpdGV8Y29kZXxkZm58ZW18a2JkfHN0cm9uZ3xzYW1wfHZhcnxhfGJkb3xicnxpbWd8bWFwfG9iamVjdHxxfHNjcmlwdHxzcGFufHN1YnxzdXB8YnV0dG9ufGlucHV0fGxhYmVsfHNlbGVjdHx0ZXh0YXJlYSkkL2kudGVzdCh0YWdOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImlubGluZVwiO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXihsaSkkL2kudGVzdCh0YWdOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxpc3QtaXRlbVwiO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXih0cikkL2kudGVzdCh0YWdOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRhYmxlLXJvd1wiO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXih0YWJsZSkkL2kudGVzdCh0YWdOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRhYmxlXCI7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9eKHRib2R5KSQvaS50ZXN0KHRhZ05hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidGFibGUtcm93LWdyb3VwXCI7XG5cdCAgICAgICAgICAgICAgICAvKiBEZWZhdWx0IHRvIFwiYmxvY2tcIiB3aGVuIG5vIG1hdGNoIGlzIGZvdW5kLiAqL1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJibG9ja1wiO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qIFRoZSBjbGFzcyBhZGQvcmVtb3ZlIGZ1bmN0aW9ucyBhcmUgdXNlZCB0byB0ZW1wb3JhcmlseSBhcHBseSBhIFwidmVsb2NpdHktYW5pbWF0aW5nXCIgY2xhc3MgdG8gZWxlbWVudHMgd2hpbGUgdGhleSdyZSBhbmltYXRpbmcuICovXG5cdCAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcblx0ICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gKGVsZW1lbnQuY2xhc3NOYW1lLmxlbmd0aCA/IFwiIFwiIDogXCJcIikgKyBjbGFzc05hbWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBjbGFzc05hbWUuc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpICsgXCIoXFxcXHN8JClcIiwgXCJnaVwiKSwgXCIgXCIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgU3R5bGUgR2V0dGluZyAmIFNldHRpbmdcblx0ICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgLyogVGhlIHNpbmd1bGFyIGdldFByb3BlcnR5VmFsdWUsIHdoaWNoIHJvdXRlcyB0aGUgbG9naWMgZm9yIGFsbCBub3JtYWxpemF0aW9ucywgaG9va3MsIGFuZCBzdGFuZGFyZCBDU1MgcHJvcGVydGllcy4gKi9cblx0ICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiAoZWxlbWVudCwgcHJvcGVydHksIHJvb3RQcm9wZXJ0eVZhbHVlLCBmb3JjZVN0eWxlTG9va3VwKSB7XG5cdCAgICAgICAgICAgIC8qIEdldCBhbiBlbGVtZW50J3MgY29tcHV0ZWQgcHJvcGVydHkgdmFsdWUuICovXG5cdCAgICAgICAgICAgIC8qIE5vdGU6IFJldHJpZXZpbmcgdGhlIHZhbHVlIG9mIGEgQ1NTIHByb3BlcnR5IGNhbm5vdCBzaW1wbHkgYmUgcGVyZm9ybWVkIGJ5IGNoZWNraW5nIGFuIGVsZW1lbnQnc1xuXHQgICAgICAgICAgICAgICBzdHlsZSBhdHRyaWJ1dGUgKHdoaWNoIG9ubHkgcmVmbGVjdHMgdXNlci1kZWZpbmVkIHZhbHVlcykuIEluc3RlYWQsIHRoZSBicm93c2VyIG11c3QgYmUgcXVlcmllZCBmb3IgYSBwcm9wZXJ0eSdzXG5cdCAgICAgICAgICAgICAgICpjb21wdXRlZCogdmFsdWUuIFlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IGdldENvbXB1dGVkU3R5bGUgaGVyZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlICovXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVQcm9wZXJ0eVZhbHVlIChlbGVtZW50LCBwcm9wZXJ0eSkge1xuXHQgICAgICAgICAgICAgICAgLyogV2hlbiBib3gtc2l6aW5nIGlzbid0IHNldCB0byBib3JkZXItYm94LCBoZWlnaHQgYW5kIHdpZHRoIHN0eWxlIHZhbHVlcyBhcmUgaW5jb3JyZWN0bHkgY29tcHV0ZWQgd2hlbiBhblxuXHQgICAgICAgICAgICAgICAgICAgZWxlbWVudCdzIHNjcm9sbGJhcnMgYXJlIHZpc2libGUgKHdoaWNoIGV4cGFuZHMgdGhlIGVsZW1lbnQncyBkaW1lbnNpb25zKS4gVGh1cywgd2UgZGVmZXIgdG8gdGhlIG1vcmUgYWNjdXJhdGVcblx0ICAgICAgICAgICAgICAgICAgIG9mZnNldEhlaWdodC9XaWR0aCBwcm9wZXJ0eSwgd2hpY2ggaW5jbHVkZXMgdGhlIHRvdGFsIGRpbWVuc2lvbnMgZm9yIGludGVyaW9yLCBib3JkZXIsIHBhZGRpbmcsIGFuZCBzY3JvbGxiYXIuXG5cdCAgICAgICAgICAgICAgICAgICBXZSBzdWJ0cmFjdCBib3JkZXIgYW5kIHBhZGRpbmcgdG8gZ2V0IHRoZSBzdW0gb2YgaW50ZXJpb3IgKyBzY3JvbGxiYXIuICovXG5cdCAgICAgICAgICAgICAgICB2YXIgY29tcHV0ZWRWYWx1ZSA9IDA7XG5cblx0ICAgICAgICAgICAgICAgIC8qIElFPD04IGRvZXNuJ3Qgc3VwcG9ydCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSwgdGh1cyB3ZSBkZWZlciB0byBqUXVlcnksIHdoaWNoIGhhcyBhbiBleHRlbnNpdmUgYXJyYXlcblx0ICAgICAgICAgICAgICAgICAgIG9mIGhhY2tzIHRvIGFjY3VyYXRlbHkgcmV0cmlldmUgSUU4IHByb3BlcnR5IHZhbHVlcy4gUmUtaW1wbGVtZW50aW5nIHRoYXQgbG9naWMgaGVyZSBpcyBub3Qgd29ydGggYmxvYXRpbmcgdGhlXG5cdCAgICAgICAgICAgICAgICAgICBjb2RlYmFzZSBmb3IgYSBkeWluZyBicm93c2VyLiBUaGUgcGVyZm9ybWFuY2UgcmVwZXJjdXNzaW9ucyBvZiB1c2luZyBqUXVlcnkgaGVyZSBhcmUgbWluaW1hbCBzaW5jZVxuXHQgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkgaXMgb3B0aW1pemVkIHRvIHJhcmVseSAoYW5kIHNvbWV0aW1lcyBuZXZlcikgcXVlcnkgdGhlIERPTS4gRnVydGhlciwgdGhlICQuY3NzKCkgY29kZXBhdGggaXNuJ3QgdGhhdCBzbG93LiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKElFIDw9IDgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb21wdXRlZFZhbHVlID0gJC5jc3MoZWxlbWVudCwgcHJvcGVydHkpOyAvKiBHRVQgKi9cblx0ICAgICAgICAgICAgICAgIC8qIEFsbCBvdGhlciBicm93c2VycyBzdXBwb3J0IGdldENvbXB1dGVkU3R5bGUuIFRoZSByZXR1cm5lZCBsaXZlIG9iamVjdCByZWZlcmVuY2UgaXMgY2FjaGVkIG9udG8gaXRzXG5cdCAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGVkIGVsZW1lbnQgc28gdGhhdCBpdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHJlZmV0Y2hlZCB1cG9uIGV2ZXJ5IEdFVC4gKi9cblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogQnJvd3NlcnMgZG8gbm90IHJldHVybiBoZWlnaHQgYW5kIHdpZHRoIHZhbHVlcyBmb3IgZWxlbWVudHMgdGhhdCBhcmUgc2V0IHRvIGRpc3BsYXk6XCJub25lXCIuIFRodXMsIHdlIHRlbXBvcmFyaWx5XG5cdCAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlIGRpc3BsYXkgdG8gdGhlIGVsZW1lbnQgdHlwZSdzIGRlZmF1bHQgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZURpc3BsYXkgPSBmYWxzZTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICgvXih3aWR0aHxoZWlnaHQpJC8udGVzdChwcm9wZXJ0eSkgJiYgQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJkaXNwbGF5XCIpID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZURpc3BsYXkgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBDU1Muc2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcImRpc3BsYXlcIiwgQ1NTLlZhbHVlcy5nZXREaXNwbGF5VHlwZShlbGVtZW50KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJ0RGlzcGxheSAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGVEaXNwbGF5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBDU1Muc2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JjZVN0eWxlTG9va3VwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gXCJoZWlnaHRcIiAmJiBDU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcImJveFNpemluZ1wiKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCkgIT09IFwiYm9yZGVyLWJveFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudEJveEhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gKHBhcnNlRmxvYXQoQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJib3JkZXJUb3BXaWR0aFwiKSkgfHwgMCkgLSAocGFyc2VGbG9hdChDU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcImJvcmRlckJvdHRvbVdpZHRoXCIpKSB8fCAwKSAtIChwYXJzZUZsb2F0KENTUy5nZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIFwicGFkZGluZ1RvcFwiKSkgfHwgMCkgLSAocGFyc2VGbG9hdChDU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcInBhZGRpbmdCb3R0b21cIikpIHx8IDApO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0RGlzcGxheSgpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudEJveEhlaWdodDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gXCJ3aWR0aFwiICYmIENTUy5nZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIFwiYm94U2l6aW5nXCIpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSAhPT0gXCJib3JkZXItYm94XCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50Qm94V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gKHBhcnNlRmxvYXQoQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIikpIHx8IDApIC0gKHBhcnNlRmxvYXQoQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJib3JkZXJSaWdodFdpZHRoXCIpKSB8fCAwKSAtIChwYXJzZUZsb2F0KENTUy5nZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIFwicGFkZGluZ0xlZnRcIikpIHx8IDApIC0gKHBhcnNlRmxvYXQoQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJwYWRkaW5nUmlnaHRcIikpIHx8IDApO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0RGlzcGxheSgpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudEJveFdpZHRoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGU7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBGb3IgZWxlbWVudHMgdGhhdCBWZWxvY2l0eSBoYXNuJ3QgYmVlbiBjYWxsZWQgb24gZGlyZWN0bHkgKGUuZy4gd2hlbiBWZWxvY2l0eSBxdWVyaWVzIHRoZSBET00gb24gYmVoYWxmXG5cdCAgICAgICAgICAgICAgICAgICAgICAgb2YgYSBwYXJlbnQgb2YgYW4gZWxlbWVudCBpdHMgYW5pbWF0aW5nKSwgcGVyZm9ybSBhIGRpcmVjdCBnZXRDb21wdXRlZFN0eWxlIGxvb2t1cCBzaW5jZSB0aGUgb2JqZWN0IGlzbid0IGNhY2hlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoRGF0YShlbGVtZW50KSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTsgLyogR0VUICovXG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIGNvbXB1dGVkU3R5bGUgb2JqZWN0IGhhcyB5ZXQgdG8gYmUgY2FjaGVkLCBkbyBzbyBub3cuICovXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghRGF0YShlbGVtZW50KS5jb21wdXRlZFN0eWxlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUgPSBEYXRhKGVsZW1lbnQpLmNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTsgLyogR0VUICovXG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgY29tcHV0ZWRTdHlsZSBpcyBjYWNoZWQsIHVzZSBpdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZFN0eWxlID0gRGF0YShlbGVtZW50KS5jb21wdXRlZFN0eWxlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIElFIGFuZCBGaXJlZm94IGRvIG5vdCByZXR1cm4gYSB2YWx1ZSBmb3IgdGhlIGdlbmVyaWMgYm9yZGVyQ29sb3IgLS0gdGhleSBvbmx5IHJldHVybiBpbmRpdmlkdWFsIHZhbHVlcyBmb3IgZWFjaCBib3JkZXIgc2lkZSdzIGNvbG9yLlxuXHQgICAgICAgICAgICAgICAgICAgICAgIEFsc28sIGluIGFsbCBicm93c2Vycywgd2hlbiBib3JkZXIgY29sb3JzIGFyZW4ndCBhbGwgdGhlIHNhbWUsIGEgY29tcG91bmQgdmFsdWUgaXMgcmV0dXJuZWQgdGhhdCBWZWxvY2l0eSBpc24ndCBzZXR1cCB0byBwYXJzZS5cblx0ICAgICAgICAgICAgICAgICAgICAgICBTbywgYXMgYSBwb2x5ZmlsbCBmb3IgcXVlcnlpbmcgaW5kaXZpZHVhbCBib3JkZXIgc2lkZSBjb2xvcnMsIHdlIGp1c3QgcmV0dXJuIHRoZSB0b3AgYm9yZGVyJ3MgY29sb3IgYW5kIGFuaW1hdGUgYWxsIGJvcmRlcnMgZnJvbSB0aGF0IHZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gXCJib3JkZXJUb3BDb2xvclwiO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIElFOSBoYXMgYSBidWcgaW4gd2hpY2ggdGhlIFwiZmlsdGVyXCIgcHJvcGVydHkgbXVzdCBiZSBhY2Nlc3NlZCBmcm9tIGNvbXB1dGVkU3R5bGUgdXNpbmcgdGhlIGdldFByb3BlcnR5VmFsdWUgbWV0aG9kXG5cdCAgICAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiBhIGRpcmVjdCBwcm9wZXJ0eSBsb29rdXAuIFRoZSBnZXRQcm9wZXJ0eVZhbHVlIG1ldGhvZCBpcyBzbG93ZXIgdGhhbiBhIGRpcmVjdCBsb29rdXAsIHdoaWNoIGlzIHdoeSB3ZSBhdm9pZCBpdCBieSBkZWZhdWx0LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChJRSA9PT0gOSAmJiBwcm9wZXJ0eSA9PT0gXCJmaWx0ZXJcIikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21wdXRlZFZhbHVlID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTsgLyogR0VUICovXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWRWYWx1ZSA9IGNvbXB1dGVkU3R5bGVbcHJvcGVydHldO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIEZhbGwgYmFjayB0byB0aGUgcHJvcGVydHkncyBzdHlsZSB2YWx1ZSAoaWYgZGVmaW5lZCkgd2hlbiBjb21wdXRlZFZhbHVlIHJldHVybnMgbm90aGluZyxcblx0ICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBjYW4gaGFwcGVuIHdoZW4gdGhlIGVsZW1lbnQgaGFzbid0IGJlZW4gcGFpbnRlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY29tcHV0ZWRWYWx1ZSA9PT0gXCJcIiB8fCBjb21wdXRlZFZhbHVlID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkVmFsdWUgPSBlbGVtZW50LnN0eWxlW3Byb3BlcnR5XTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICByZXZlcnREaXNwbGF5KCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8qIEZvciB0b3AsIHJpZ2h0LCBib3R0b20sIGFuZCBsZWZ0IChUUkJMKSB2YWx1ZXMgdGhhdCBhcmUgc2V0IHRvIFwiYXV0b1wiIG9uIGVsZW1lbnRzIG9mIFwiZml4ZWRcIiBvciBcImFic29sdXRlXCIgcG9zaXRpb24sXG5cdCAgICAgICAgICAgICAgICAgICBkZWZlciB0byBqUXVlcnkgZm9yIGNvbnZlcnRpbmcgXCJhdXRvXCIgdG8gYSBudW1lcmljIHZhbHVlLiAoRm9yIGVsZW1lbnRzIHdpdGggYSBcInN0YXRpY1wiIG9yIFwicmVsYXRpdmVcIiBwb3NpdGlvbiwgXCJhdXRvXCIgaGFzIHRoZSBzYW1lXG5cdCAgICAgICAgICAgICAgICAgICBlZmZlY3QgYXMgYmVpbmcgc2V0IHRvIDAsIHNvIG5vIGNvbnZlcnNpb24gaXMgbmVjZXNzYXJ5LikgKi9cblx0ICAgICAgICAgICAgICAgIC8qIEFuIGV4YW1wbGUgb2Ygd2h5IG51bWVyaWMgY29udmVyc2lvbiBpcyBuZWNlc3Nhcnk6IFdoZW4gYW4gZWxlbWVudCB3aXRoIFwicG9zaXRpb246YWJzb2x1dGVcIiBoYXMgYW4gdW50b3VjaGVkIFwibGVmdFwiXG5cdCAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSwgd2hpY2ggcmV2ZXJ0cyB0byBcImF1dG9cIiwgbGVmdCdzIHZhbHVlIGlzIDAgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBlbGVtZW50LCBidXQgaXMgb2Z0ZW4gbm9uLXplcm8gcmVsYXRpdmVcblx0ICAgICAgICAgICAgICAgICAgIHRvIGl0cyAqY29udGFpbmluZyogKG5vdCBwYXJlbnQpIGVsZW1lbnQsIHdoaWNoIGlzIHRoZSBuZWFyZXN0IFwicG9zaXRpb246cmVsYXRpdmVcIiBhbmNlc3RvciBvciB0aGUgdmlld3BvcnQgKGFuZCBhbHdheXMgdGhlIHZpZXdwb3J0IGluIHRoZSBjYXNlIG9mIFwicG9zaXRpb246Zml4ZWRcIikuICovXG5cdCAgICAgICAgICAgICAgICBpZiAoY29tcHV0ZWRWYWx1ZSA9PT0gXCJhdXRvXCIgJiYgL14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvaS50ZXN0KHByb3BlcnR5KSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGNvbXB1dGVQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIFwicG9zaXRpb25cIik7IC8qIEdFVCAqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogRm9yIGFic29sdXRlIHBvc2l0aW9uaW5nLCBqUXVlcnkncyAkLnBvc2l0aW9uKCkgb25seSByZXR1cm5zIHZhbHVlcyBmb3IgdG9wIGFuZCBsZWZ0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0IGFuZCBib3R0b20gd2lsbCBoYXZlIHRoZWlyIFwiYXV0b1wiIHZhbHVlIHJldmVydGVkIHRvIDAuICovXG5cdCAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogQSBqUXVlcnkgb2JqZWN0IG11c3QgYmUgY3JlYXRlZCBoZXJlIHNpbmNlIGpRdWVyeSBkb2Vzbid0IGhhdmUgYSBsb3ctbGV2ZWwgYWxpYXMgZm9yICQucG9zaXRpb24oKS5cblx0ICAgICAgICAgICAgICAgICAgICAgICBOb3QgYSBiaWcgZGVhbCBzaW5jZSB3ZSdyZSBjdXJyZW50bHkgaW4gYSBHRVQgYmF0Y2ggYW55d2F5LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gXCJmaXhlZFwiIHx8IChwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiICYmIC90b3B8bGVmdC9pLnRlc3QocHJvcGVydHkpKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb3RlOiBqUXVlcnkgc3RyaXBzIHRoZSBwaXhlbCB1bml0IGZyb20gaXRzIHJldHVybmVkIHZhbHVlczsgd2UgcmUtYWRkIGl0IGhlcmUgdG8gY29uZm9ybSB3aXRoIGNvbXB1dGVQcm9wZXJ0eVZhbHVlJ3MgYmVoYXZpb3IuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkVmFsdWUgPSAkKGVsZW1lbnQpLnBvc2l0aW9uKClbcHJvcGVydHldICsgXCJweFwiOyAvKiBHRVQgKi9cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybiBjb21wdXRlZFZhbHVlO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdmFyIHByb3BlcnR5VmFsdWU7XG5cblx0ICAgICAgICAgICAgLyogSWYgdGhpcyBpcyBhIGhvb2tlZCBwcm9wZXJ0eSAoZS5nLiBcImNsaXBMZWZ0XCIgaW5zdGVhZCBvZiB0aGUgcm9vdCBwcm9wZXJ0eSBvZiBcImNsaXBcIiksXG5cdCAgICAgICAgICAgICAgIGV4dHJhY3QgdGhlIGhvb2sncyB2YWx1ZSBmcm9tIGEgbm9ybWFsaXplZCByb290UHJvcGVydHlWYWx1ZSB1c2luZyBDU1MuSG9va3MuZXh0cmFjdFZhbHVlKCkuICovXG5cdCAgICAgICAgICAgIGlmIChDU1MuSG9va3MucmVnaXN0ZXJlZFtwcm9wZXJ0eV0pIHtcblx0ICAgICAgICAgICAgICAgIHZhciBob29rID0gcHJvcGVydHksXG5cdCAgICAgICAgICAgICAgICAgICAgaG9va1Jvb3QgPSBDU1MuSG9va3MuZ2V0Um9vdChob29rKTtcblxuXHQgICAgICAgICAgICAgICAgLyogSWYgYSBjYWNoZWQgcm9vdFByb3BlcnR5VmFsdWUgd2Fzbid0IHBhc3NlZCBpbiAod2hpY2ggVmVsb2NpdHkgYWx3YXlzIGF0dGVtcHRzIHRvIGRvIGluIG9yZGVyIHRvIGF2b2lkIHJlcXVlcnlpbmcgdGhlIERPTSksXG5cdCAgICAgICAgICAgICAgICAgICBxdWVyeSB0aGUgRE9NIGZvciB0aGUgcm9vdCBwcm9wZXJ0eSdzIHZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKHJvb3RQcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBTaW5jZSB0aGUgYnJvd3NlciBpcyBub3cgYmVpbmcgZGlyZWN0bHkgcXVlcmllZCwgdXNlIHRoZSBvZmZpY2lhbCBwb3N0LXByZWZpeGluZyBwcm9wZXJ0eSBuYW1lIGZvciB0aGlzIGxvb2t1cC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZSA9IENTUy5nZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIENTUy5OYW1lcy5wcmVmaXhDaGVjayhob29rUm9vdClbMF0pOyAvKiBHRVQgKi9cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLyogSWYgdGhpcyByb290IGhhcyBhIG5vcm1hbGl6YXRpb24gcmVnaXN0ZXJlZCwgcGVmb3JtIHRoZSBhc3NvY2lhdGVkIG5vcm1hbGl6YXRpb24gZXh0cmFjdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgIGlmIChDU1MuTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtob29rUm9vdF0pIHtcblx0ICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZSA9IENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW2hvb2tSb290XShcImV4dHJhY3RcIiwgZWxlbWVudCwgcm9vdFByb3BlcnR5VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvKiBFeHRyYWN0IHRoZSBob29rJ3MgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0eVZhbHVlID0gQ1NTLkhvb2tzLmV4dHJhY3RWYWx1ZShob29rLCByb290UHJvcGVydHlWYWx1ZSk7XG5cblx0ICAgICAgICAgICAgLyogSWYgdGhpcyBpcyBhIG5vcm1hbGl6ZWQgcHJvcGVydHkgKGUuZy4gXCJvcGFjaXR5XCIgYmVjb21lcyBcImZpbHRlclwiIGluIDw9SUU4KSBvciBcInRyYW5zbGF0ZVhcIiBiZWNvbWVzIFwidHJhbnNmb3JtXCIpLFxuXHQgICAgICAgICAgICAgICBub3JtYWxpemUgdGhlIHByb3BlcnR5J3MgbmFtZSBhbmQgdmFsdWUsIGFuZCBoYW5kbGUgdGhlIHNwZWNpYWwgY2FzZSBvZiB0cmFuc2Zvcm1zLiAqL1xuXHQgICAgICAgICAgICAvKiBOb3RlOiBOb3JtYWxpemluZyBhIHByb3BlcnR5IGlzIG11dHVhbGx5IGV4Y2x1c2l2ZSBmcm9tIGhvb2tpbmcgYSBwcm9wZXJ0eSBzaW5jZSBob29rLWV4dHJhY3RlZCB2YWx1ZXMgYXJlIHN0cmljdGx5XG5cdCAgICAgICAgICAgICAgIG51bWVyaWNhbCBhbmQgdGhlcmVmb3JlIGRvIG5vdCByZXF1aXJlIG5vcm1hbGl6YXRpb24gZXh0cmFjdGlvbi4gKi9cblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChDU1MuTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtwcm9wZXJ0eV0pIHtcblx0ICAgICAgICAgICAgICAgIHZhciBub3JtYWxpemVkUHJvcGVydHlOYW1lLFxuXHQgICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wZXJ0eVZhbHVlO1xuXG5cdCAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcGVydHlOYW1lID0gQ1NTLk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbcHJvcGVydHldKFwibmFtZVwiLCBlbGVtZW50KTtcblxuXHQgICAgICAgICAgICAgICAgLyogVHJhbnNmb3JtIHZhbHVlcyBhcmUgY2FsY3VsYXRlZCB2aWEgbm9ybWFsaXphdGlvbiBleHRyYWN0aW9uIChzZWUgYmVsb3cpLCB3aGljaCBjaGVja3MgYWdhaW5zdCB0aGUgZWxlbWVudCdzIHRyYW5zZm9ybUNhY2hlLlxuXHQgICAgICAgICAgICAgICAgICAgQXQgbm8gcG9pbnQgZG8gdHJhbnNmb3JtIEdFVHMgZXZlciBhY3R1YWxseSBxdWVyeSB0aGUgRE9NOyBpbml0aWFsIHN0eWxlc2hlZXQgdmFsdWVzIGFyZSBuZXZlciBwcm9jZXNzZWQuXG5cdCAgICAgICAgICAgICAgICAgICBUaGlzIGlzIGJlY2F1c2UgcGFyc2luZyAzRCB0cmFuc2Zvcm0gbWF0cmljZXMgaXMgbm90IGFsd2F5cyBhY2N1cmF0ZSBhbmQgd291bGQgYmxvYXQgb3VyIGNvZGViYXNlO1xuXHQgICAgICAgICAgICAgICAgICAgdGh1cywgbm9ybWFsaXphdGlvbiBleHRyYWN0aW9uIGRlZmF1bHRzIGluaXRpYWwgdHJhbnNmb3JtIHZhbHVlcyB0byB0aGVpciB6ZXJvLXZhbHVlcyAoZS5nLiAxIGZvciBzY2FsZVggYW5kIDAgZm9yIHRyYW5zbGF0ZVgpLiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wZXJ0eU5hbWUgIT09IFwidHJhbnNmb3JtXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcGVydHlWYWx1ZSA9IGNvbXB1dGVQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIENTUy5OYW1lcy5wcmVmaXhDaGVjayhub3JtYWxpemVkUHJvcGVydHlOYW1lKVswXSk7IC8qIEdFVCAqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIHZhbHVlIGlzIGEgQ1NTIG51bGwtdmFsdWUgYW5kIHRoaXMgcHJvcGVydHkgaGFzIGEgaG9vayB0ZW1wbGF0ZSwgdXNlIHRoYXQgemVyby12YWx1ZSB0ZW1wbGF0ZSBzbyB0aGF0IGhvb2tzIGNhbiBiZSBleHRyYWN0ZWQgZnJvbSBpdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoQ1NTLlZhbHVlcy5pc0NTU051bGxWYWx1ZShub3JtYWxpemVkUHJvcGVydHlWYWx1ZSkgJiYgQ1NTLkhvb2tzLnRlbXBsYXRlc1twcm9wZXJ0eV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3BlcnR5VmFsdWUgPSBDU1MuSG9va3MudGVtcGxhdGVzW3Byb3BlcnR5XVsxXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSBDU1MuTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtwcm9wZXJ0eV0oXCJleHRyYWN0XCIsIGVsZW1lbnQsIG5vcm1hbGl6ZWRQcm9wZXJ0eVZhbHVlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qIElmIGEgKG51bWVyaWMpIHZhbHVlIHdhc24ndCBwcm9kdWNlZCB2aWEgaG9vayBleHRyYWN0aW9uIG9yIG5vcm1hbGl6YXRpb24sIHF1ZXJ5IHRoZSBET00uICovXG5cdCAgICAgICAgICAgIGlmICghL15bXFxkLV0vLnRlc3QocHJvcGVydHlWYWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgIC8qIEZvciBTVkcgZWxlbWVudHMsIGRpbWVuc2lvbmFsIHByb3BlcnRpZXMgKHdoaWNoIFNWR0F0dHJpYnV0ZSgpIGRldGVjdHMpIGFyZSB0d2VlbmVkIHZpYVxuXHQgICAgICAgICAgICAgICAgICAgdGhlaXIgSFRNTCBhdHRyaWJ1dGUgdmFsdWVzIGluc3RlYWQgb2YgdGhlaXIgQ1NTIHN0eWxlIHZhbHVlcy4gKi9cblx0ICAgICAgICAgICAgICAgIGlmIChEYXRhKGVsZW1lbnQpICYmIERhdGEoZWxlbWVudCkuaXNTVkcgJiYgQ1NTLk5hbWVzLlNWR0F0dHJpYnV0ZShwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBTaW5jZSB0aGUgaGVpZ2h0L3dpZHRoIGF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBzZXQgbWFudWFsbHksIHRoZXkgZG9uJ3QgcmVmbGVjdCBjb21wdXRlZCB2YWx1ZXMuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgVGh1cywgd2UgdXNlIHVzZSBnZXRCQm94KCkgdG8gZW5zdXJlIHdlIGFsd2F5cyBnZXQgdmFsdWVzIGZvciBlbGVtZW50cyB3aXRoIHVuZGVmaW5lZCBoZWlnaHQvd2lkdGggYXR0cmlidXRlcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoL14oaGVpZ2h0fHdpZHRoKSQvaS50ZXN0KHByb3BlcnR5KSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBGaXJlZm94IHRocm93cyBhbiBlcnJvciBpZiAuZ2V0QkJveCgpIGlzIGNhbGxlZCBvbiBhbiBTVkcgdGhhdCBpc24ndCBhdHRhY2hlZCB0byB0aGUgRE9NLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlWYWx1ZSA9IGVsZW1lbnQuZ2V0QkJveCgpW3Byb3BlcnR5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgLyogT3RoZXJ3aXNlLCBhY2Nlc3MgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBkaXJlY3RseS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUocHJvcGVydHkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlWYWx1ZSA9IGNvbXB1dGVQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIENTUy5OYW1lcy5wcmVmaXhDaGVjayhwcm9wZXJ0eSlbMF0pOyAvKiBHRVQgKi9cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qIFNpbmNlIHByb3BlcnR5IGxvb2t1cHMgYXJlIGZvciBhbmltYXRpb24gcHVycG9zZXMgKHdoaWNoIGVudGFpbHMgY29tcHV0aW5nIHRoZSBudW1lcmljIGRlbHRhIGJldHdlZW4gc3RhcnQgYW5kIGVuZCB2YWx1ZXMpLFxuXHQgICAgICAgICAgICAgICBjb252ZXJ0IENTUyBudWxsLXZhbHVlcyB0byBhbiBpbnRlZ2VyIG9mIHZhbHVlIDAuICovXG5cdCAgICAgICAgICAgIGlmIChDU1MuVmFsdWVzLmlzQ1NTTnVsbFZhbHVlKHByb3BlcnR5VmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0eVZhbHVlID0gMDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChWZWxvY2l0eS5kZWJ1ZyA+PSAyKSBjb25zb2xlLmxvZyhcIkdldCBcIiArIHByb3BlcnR5ICsgXCI6IFwiICsgcHJvcGVydHlWYWx1ZSk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5VmFsdWU7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qIFRoZSBzaW5ndWxhciBzZXRQcm9wZXJ0eVZhbHVlLCB3aGljaCByb3V0ZXMgdGhlIGxvZ2ljIGZvciBhbGwgbm9ybWFsaXphdGlvbnMsIGhvb2tzLCBhbmQgc3RhbmRhcmQgQ1NTIHByb3BlcnRpZXMuICovXG5cdCAgICAgICAgc2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24oZWxlbWVudCwgcHJvcGVydHksIHByb3BlcnR5VmFsdWUsIHJvb3RQcm9wZXJ0eVZhbHVlLCBzY3JvbGxEYXRhKSB7XG5cdCAgICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eTtcblxuXHQgICAgICAgICAgICAvKiBJbiBvcmRlciB0byBiZSBzdWJqZWN0ZWQgdG8gY2FsbCBvcHRpb25zIGFuZCBlbGVtZW50IHF1ZXVlaW5nLCBzY3JvbGwgYW5pbWF0aW9uIGlzIHJvdXRlZCB0aHJvdWdoIFZlbG9jaXR5IGFzIGlmIGl0IHdlcmUgYSBzdGFuZGFyZCBDU1MgcHJvcGVydHkuICovXG5cdCAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gXCJzY3JvbGxcIikge1xuXHQgICAgICAgICAgICAgICAgLyogSWYgYSBjb250YWluZXIgb3B0aW9uIGlzIHByZXNlbnQsIHNjcm9sbCB0aGUgY29udGFpbmVyIGluc3RlYWQgb2YgdGhlIGJyb3dzZXIgd2luZG93LiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKHNjcm9sbERhdGEuY29udGFpbmVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2Nyb2xsRGF0YS5jb250YWluZXJbXCJzY3JvbGxcIiArIHNjcm9sbERhdGEuZGlyZWN0aW9uXSA9IHByb3BlcnR5VmFsdWU7XG5cdCAgICAgICAgICAgICAgICAvKiBPdGhlcndpc2UsIFZlbG9jaXR5IGRlZmF1bHRzIHRvIHNjcm9sbGluZyB0aGUgYnJvd3NlciB3aW5kb3cuICovXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxEYXRhLmRpcmVjdGlvbiA9PT0gXCJMZWZ0XCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHByb3BlcnR5VmFsdWUsIHNjcm9sbERhdGEuYWx0ZXJuYXRlVmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxEYXRhLmFsdGVybmF0ZVZhbHVlLCBwcm9wZXJ0eVZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvKiBUcmFuc2Zvcm1zICh0cmFuc2xhdGVYLCByb3RhdGVaLCBldGMuKSBhcmUgYXBwbGllZCB0byBhIHBlci1lbGVtZW50IHRyYW5zZm9ybUNhY2hlIG9iamVjdCwgd2hpY2ggaXMgbWFudWFsbHkgZmx1c2hlZCB2aWEgZmx1c2hUcmFuc2Zvcm1DYWNoZSgpLlxuXHQgICAgICAgICAgICAgICAgICAgVGh1cywgZm9yIG5vdywgd2UgbWVyZWx5IGNhY2hlIHRyYW5zZm9ybXMgYmVpbmcgU0VULiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3Byb3BlcnR5XSAmJiBDU1MuTm9ybWFsaXphdGlvbnMucmVnaXN0ZXJlZFtwcm9wZXJ0eV0oXCJuYW1lXCIsIGVsZW1lbnQpID09PSBcInRyYW5zZm9ybVwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogUGVyZm9ybSBhIG5vcm1hbGl6YXRpb24gaW5qZWN0aW9uLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IFRoZSBub3JtYWxpemF0aW9uIGxvZ2ljIGhhbmRsZXMgdGhlIHRyYW5zZm9ybUNhY2hlIHVwZGF0aW5nLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3Byb3BlcnR5XShcImluamVjdFwiLCBlbGVtZW50LCBwcm9wZXJ0eVZhbHVlKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZSA9IFwidHJhbnNmb3JtXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlWYWx1ZSA9IERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGVbcHJvcGVydHldO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBJbmplY3QgaG9va3MuICovXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKENTUy5Ib29rcy5yZWdpc3RlcmVkW3Byb3BlcnR5XSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaG9va05hbWUgPSBwcm9wZXJ0eSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvb2tSb290ID0gQ1NTLkhvb2tzLmdldFJvb3QocHJvcGVydHkpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIGEgY2FjaGVkIHJvb3RQcm9wZXJ0eVZhbHVlIHdhcyBub3QgcHJvdmlkZWQsIHF1ZXJ5IHRoZSBET00gZm9yIHRoZSBob29rUm9vdCdzIGN1cnJlbnQgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RQcm9wZXJ0eVZhbHVlID0gcm9vdFByb3BlcnR5VmFsdWUgfHwgQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgaG9va1Jvb3QpOyAvKiBHRVQgKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVZhbHVlID0gQ1NTLkhvb2tzLmluamVjdFZhbHVlKGhvb2tOYW1lLCBwcm9wZXJ0eVZhbHVlLCByb290UHJvcGVydHlWYWx1ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gaG9va1Jvb3Q7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogTm9ybWFsaXplIG5hbWVzIGFuZCB2YWx1ZXMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3Byb3BlcnR5XSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVZhbHVlID0gQ1NTLk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbcHJvcGVydHldKFwiaW5qZWN0XCIsIGVsZW1lbnQsIHByb3BlcnR5VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW3Byb3BlcnR5XShcIm5hbWVcIiwgZWxlbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogQXNzaWduIHRoZSBhcHByb3ByaWF0ZSB2ZW5kb3IgcHJlZml4IGJlZm9yZSBwZXJmb3JtaW5nIGFuIG9mZmljaWFsIHN0eWxlIHVwZGF0ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBDU1MuTmFtZXMucHJlZml4Q2hlY2socHJvcGVydHkpWzBdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogQSB0cnkvY2F0Y2ggaXMgdXNlZCBmb3IgSUU8PTgsIHdoaWNoIHRocm93cyBhbiBlcnJvciB3aGVuIFwiaW52YWxpZFwiIENTUyB2YWx1ZXMgYXJlIHNldCwgZS5nLiBhIG5lZ2F0aXZlIHdpZHRoLlxuXHQgICAgICAgICAgICAgICAgICAgICAgIFRyeS9jYXRjaCBpcyBhdm9pZGVkIGZvciBvdGhlciBicm93c2VycyBzaW5jZSBpdCBpbmN1cnMgYSBwZXJmb3JtYW5jZSBvdmVyaGVhZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoSUUgPD0gOCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wZXJ0eU5hbWVdID0gcHJvcGVydHlWYWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgaWYgKFZlbG9jaXR5LmRlYnVnKSBjb25zb2xlLmxvZyhcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBbXCIgKyBwcm9wZXJ0eVZhbHVlICsgXCJdIGZvciBbXCIgKyBwcm9wZXJ0eU5hbWUgKyBcIl1cIik7IH1cblx0ICAgICAgICAgICAgICAgICAgICAvKiBTVkcgZWxlbWVudHMgaGF2ZSB0aGVpciBkaW1lbnNpb25hbCBwcm9wZXJ0aWVzICh3aWR0aCwgaGVpZ2h0LCB4LCB5LCBjeCwgZXRjLikgYXBwbGllZCBkaXJlY3RseSBhcyBhdHRyaWJ1dGVzIGluc3RlYWQgb2YgYXMgc3R5bGVzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IElFOCBkb2VzIG5vdCBzdXBwb3J0IFNWRyBlbGVtZW50cywgc28gaXQncyBva2F5IHRoYXQgd2Ugc2tpcCBpdCBmb3IgU1ZHIGFuaW1hdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKERhdGEoZWxlbWVudCkgJiYgRGF0YShlbGVtZW50KS5pc1NWRyAmJiBDU1MuTmFtZXMuU1ZHQXR0cmlidXRlKHByb3BlcnR5KSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb3RlOiBGb3IgU1ZHIGF0dHJpYnV0ZXMsIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBuYW1lcyBhcmUgbmV2ZXIgdXNlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogTm90IGFsbCBDU1MgcHJvcGVydGllcyBjYW4gYmUgYW5pbWF0ZWQgdmlhIGF0dHJpYnV0ZXMsIGJ1dCB0aGUgYnJvd3NlciB3b24ndCB0aHJvdyBhbiBlcnJvciBmb3IgdW5zdXBwb3J0ZWQgcHJvcGVydGllcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHByb3BlcnR5VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5VmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKFZlbG9jaXR5LmRlYnVnID49IDIpIGNvbnNvbGUubG9nKFwiU2V0IFwiICsgcHJvcGVydHkgKyBcIiAoXCIgKyBwcm9wZXJ0eU5hbWUgKyBcIik6IFwiICsgcHJvcGVydHlWYWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKiBSZXR1cm4gdGhlIG5vcm1hbGl6ZWQgcHJvcGVydHkgbmFtZSBhbmQgdmFsdWUgaW4gY2FzZSB0aGUgY2FsbGVyIHdhbnRzIHRvIGtub3cgaG93IHRoZXNlIHZhbHVlcyB3ZXJlIG1vZGlmaWVkIGJlZm9yZSBiZWluZyBhcHBsaWVkIHRvIHRoZSBET00uICovXG5cdCAgICAgICAgICAgIHJldHVybiBbIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSBdO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKiBUbyBpbmNyZWFzZSBwZXJmb3JtYW5jZSBieSBiYXRjaGluZyB0cmFuc2Zvcm0gdXBkYXRlcyBpbnRvIGEgc2luZ2xlIFNFVCwgdHJhbnNmb3JtcyBhcmUgbm90IGRpcmVjdGx5IGFwcGxpZWQgdG8gYW4gZWxlbWVudCB1bnRpbCBmbHVzaFRyYW5zZm9ybUNhY2hlKCkgaXMgY2FsbGVkLiAqL1xuXHQgICAgICAgIC8qIE5vdGU6IFZlbG9jaXR5IGFwcGxpZXMgdHJhbnNmb3JtIHByb3BlcnRpZXMgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IGFyZSBjaHJvbm9naWNhbGx5IGludHJvZHVjZWQgdG8gdGhlIGVsZW1lbnQncyBDU1Mgc3R5bGVzLiAqL1xuXHQgICAgICAgIGZsdXNoVHJhbnNmb3JtQ2FjaGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVN0cmluZyA9IFwiXCI7XG5cblx0ICAgICAgICAgICAgLyogQ2VydGFpbiBicm93c2VycyByZXF1aXJlIHRoYXQgU1ZHIHRyYW5zZm9ybXMgYmUgYXBwbGllZCBhcyBhbiBhdHRyaWJ1dGUuIEhvd2V2ZXIsIHRoZSBTVkcgdHJhbnNmb3JtIGF0dHJpYnV0ZSB0YWtlcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgQ1NTJ3MgdHJhbnNmb3JtIHN0cmluZ1xuXHQgICAgICAgICAgICAgICAodW5pdHMgYXJlIGRyb3BwZWQgYW5kLCBleGNlcHQgZm9yIHNrZXdYL1ksIHN1YnByb3BlcnRpZXMgYXJlIG1lcmdlZCBpbnRvIHRoZWlyIG1hc3RlciBwcm9wZXJ0eSAtLSBlLmcuIHNjYWxlWCBhbmQgc2NhbGVZIGFyZSBtZXJnZWQgaW50byBzY2FsZShYIFkpLiAqL1xuXHQgICAgICAgICAgICBpZiAoKElFIHx8IChWZWxvY2l0eS5TdGF0ZS5pc0FuZHJvaWQgJiYgIVZlbG9jaXR5LlN0YXRlLmlzQ2hyb21lKSkgJiYgRGF0YShlbGVtZW50KS5pc1NWRykge1xuXHQgICAgICAgICAgICAgICAgLyogU2luY2UgdHJhbnNmb3JtIHZhbHVlcyBhcmUgc3RvcmVkIGluIHRoZWlyIHBhcmVudGhlc2VzLXdyYXBwZWQgZm9ybSwgd2UgdXNlIGEgaGVscGVyIGZ1bmN0aW9uIHRvIHN0cmlwIG91dCB0aGVpciBudW1lcmljIHZhbHVlcy5cblx0ICAgICAgICAgICAgICAgICAgIEZ1cnRoZXIsIFNWRyB0cmFuc2Zvcm0gcHJvcGVydGllcyBvbmx5IHRha2UgdW5pdGxlc3MgKHJlcHJlc2VudGluZyBwaXhlbHMpIHZhbHVlcywgc28gaXQncyBva2F5IHRoYXQgcGFyc2VGbG9hdCgpIHN0cmlwcyB0aGUgdW5pdCBzdWZmaXhlZCB0byB0aGUgZmxvYXQgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1GbG9hdCAodHJhbnNmb3JtUHJvcGVydHkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChDU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCB0cmFuc2Zvcm1Qcm9wZXJ0eSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvKiBDcmVhdGUgYW4gb2JqZWN0IHRvIG9yZ2FuaXplIGFsbCB0aGUgdHJhbnNmb3JtcyB0aGF0IHdlJ2xsIGFwcGx5IHRvIHRoZSBTVkcgZWxlbWVudC4gVG8ga2VlcCB0aGUgbG9naWMgc2ltcGxlLFxuXHQgICAgICAgICAgICAgICAgICAgd2UgcHJvY2VzcyAqYWxsKiB0cmFuc2Zvcm0gcHJvcGVydGllcyAtLSBldmVuIHRob3NlIHRoYXQgbWF5IG5vdCBiZSBleHBsaWNpdGx5IGFwcGxpZWQgKHNpbmNlIHRoZXkgZGVmYXVsdCB0byB0aGVpciB6ZXJvLXZhbHVlcyBhbnl3YXkpLiAqL1xuXHQgICAgICAgICAgICAgICAgdmFyIFNWR1RyYW5zZm9ybXMgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlOiBbIGdldFRyYW5zZm9ybUZsb2F0KFwidHJhbnNsYXRlWFwiKSwgZ2V0VHJhbnNmb3JtRmxvYXQoXCJ0cmFuc2xhdGVZXCIpIF0sXG5cdCAgICAgICAgICAgICAgICAgICAgc2tld1g6IFsgZ2V0VHJhbnNmb3JtRmxvYXQoXCJza2V3WFwiKSBdLCBza2V3WTogWyBnZXRUcmFuc2Zvcm1GbG9hdChcInNrZXdZXCIpIF0sXG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIHNjYWxlIHByb3BlcnR5IGlzIHNldCAobm9uLTEpLCB1c2UgdGhhdCB2YWx1ZSBmb3IgdGhlIHNjYWxlWCBhbmQgc2NhbGVZIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgICAgICAgICh0aGlzIGJlaGF2aW9yIG1pbWljcyB0aGUgcmVzdWx0IG9mIGFuaW1hdGluZyBhbGwgdGhlc2UgcHJvcGVydGllcyBhdCBvbmNlIG9uIEhUTUwgZWxlbWVudHMpLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHNjYWxlOiBnZXRUcmFuc2Zvcm1GbG9hdChcInNjYWxlXCIpICE9PSAxID8gWyBnZXRUcmFuc2Zvcm1GbG9hdChcInNjYWxlXCIpLCBnZXRUcmFuc2Zvcm1GbG9hdChcInNjYWxlXCIpIF0gOiBbIGdldFRyYW5zZm9ybUZsb2F0KFwic2NhbGVYXCIpLCBnZXRUcmFuc2Zvcm1GbG9hdChcInNjYWxlWVwiKSBdLFxuXHQgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IFNWRydzIHJvdGF0ZSB0cmFuc2Zvcm0gdGFrZXMgdGhyZWUgdmFsdWVzOiByb3RhdGlvbiBkZWdyZWVzIGZvbGxvd2VkIGJ5IHRoZSBYIGFuZCBZIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaW5nIHRoZSByb3RhdGlvbidzIG9yaWdpbiBwb2ludC4gV2UgaWdub3JlIHRoZSBvcmlnaW4gdmFsdWVzIChkZWZhdWx0IHRoZW0gdG8gMCkuICovXG5cdCAgICAgICAgICAgICAgICAgICAgcm90YXRlOiBbIGdldFRyYW5zZm9ybUZsb2F0KFwicm90YXRlWlwiKSwgMCwgMCBdXG5cdCAgICAgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgICAgICAvKiBJdGVyYXRlIHRocm91Z2ggdGhlIHRyYW5zZm9ybSBwcm9wZXJ0aWVzIGluIHRoZSB1c2VyLWRlZmluZWQgcHJvcGVydHkgbWFwIG9yZGVyLlxuXHQgICAgICAgICAgICAgICAgICAgKFRoaXMgbWltaWNzIHRoZSBiZWhhdmlvciBvZiBub24tU1ZHIHRyYW5zZm9ybSBhbmltYXRpb24uKSAqL1xuXHQgICAgICAgICAgICAgICAgJC5lYWNoKERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGUsIGZ1bmN0aW9uKHRyYW5zZm9ybU5hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBFeGNlcHQgZm9yIHdpdGggc2tld1gvWSwgcmV2ZXJ0IHRoZSBheGlzLXNwZWNpZmljIHRyYW5zZm9ybSBzdWJwcm9wZXJ0aWVzIHRvIHRoZWlyIGF4aXMtZnJlZSBtYXN0ZXJcblx0ICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzIHNvIHRoYXQgdGhleSBtYXRjaCB1cCB3aXRoIFNWRydzIGFjY2VwdGVkIHRyYW5zZm9ybSBwcm9wZXJ0aWVzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICgvXnRyYW5zbGF0ZS9pLnRlc3QodHJhbnNmb3JtTmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtTmFtZSA9IFwidHJhbnNsYXRlXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXnNjYWxlL2kudGVzdCh0cmFuc2Zvcm1OYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1OYW1lID0gXCJzY2FsZVwiO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL15yb3RhdGUvaS50ZXN0KHRyYW5zZm9ybU5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU5hbWUgPSBcInJvdGF0ZVwiO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIENoZWNrIHRoYXQgd2UgaGF2ZW4ndCB5ZXQgZGVsZXRlZCB0aGUgcHJvcGVydHkgZnJvbSB0aGUgU1ZHVHJhbnNmb3JtcyBjb250YWluZXIuICovXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKFNWR1RyYW5zZm9ybXNbdHJhbnNmb3JtTmFtZV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogQXBwZW5kIHRoZSB0cmFuc2Zvcm0gcHJvcGVydHkgaW4gdGhlIFNWRy1zdXBwb3J0ZWQgdHJhbnNmb3JtIGZvcm1hdC4gQXMgcGVyIHRoZSBzcGVjLCBzdXJyb3VuZCB0aGUgc3BhY2UtZGVsaW1pdGVkIHZhbHVlcyBpbiBwYXJlbnRoZXNlcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IHRyYW5zZm9ybU5hbWUgKyBcIihcIiArIFNWR1RyYW5zZm9ybXNbdHJhbnNmb3JtTmFtZV0uam9pbihcIiBcIikgKyBcIilcIiArIFwiIFwiO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFmdGVyIHByb2Nlc3NpbmcgYW4gU1ZHIHRyYW5zZm9ybSBwcm9wZXJ0eSwgZGVsZXRlIGl0IGZyb20gdGhlIFNWR1RyYW5zZm9ybXMgY29udGFpbmVyIHNvIHdlIGRvbid0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlLWluc2VydCB0aGUgc2FtZSBtYXN0ZXIgcHJvcGVydHkgaWYgd2UgZW5jb3VudGVyIGFub3RoZXIgb25lIG9mIGl0cyBheGlzLXNwZWNpZmljIHByb3BlcnRpZXMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBTVkdUcmFuc2Zvcm1zW3RyYW5zZm9ybU5hbWVdO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybVZhbHVlLFxuXHQgICAgICAgICAgICAgICAgICAgIHBlcnNwZWN0aXZlO1xuXG5cdCAgICAgICAgICAgICAgICAvKiBUcmFuc2Zvcm0gcHJvcGVydGllcyBhcmUgc3RvcmVkIGFzIG1lbWJlcnMgb2YgdGhlIHRyYW5zZm9ybUNhY2hlIG9iamVjdC4gQ29uY2F0ZW5hdGUgYWxsIHRoZSBtZW1iZXJzIGludG8gYSBzdHJpbmcuICovXG5cdCAgICAgICAgICAgICAgICAkLmVhY2goRGF0YShlbGVtZW50KS50cmFuc2Zvcm1DYWNoZSwgZnVuY3Rpb24odHJhbnNmb3JtTmFtZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybVZhbHVlID0gRGF0YShlbGVtZW50KS50cmFuc2Zvcm1DYWNoZVt0cmFuc2Zvcm1OYW1lXTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIFRyYW5zZm9ybSdzIHBlcnNwZWN0aXZlIHN1YnByb3BlcnR5IG11c3QgYmUgc2V0IGZpcnN0IGluIG9yZGVyIHRvIHRha2UgZWZmZWN0LiBTdG9yZSBpdCB0ZW1wb3JhcmlseS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3JtTmFtZSA9PT0gXCJ0cmFuc2Zvcm1QZXJzcGVjdGl2ZVwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNwZWN0aXZlID0gdHJhbnNmb3JtVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIElFOSBvbmx5IHN1cHBvcnRzIG9uZSByb3RhdGlvbiB0eXBlLCByb3RhdGVaLCB3aGljaCBpdCByZWZlcnMgdG8gYXMgXCJyb3RhdGVcIi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoSUUgPT09IDkgJiYgdHJhbnNmb3JtTmFtZSA9PT0gXCJyb3RhdGVaXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtTmFtZSA9IFwicm90YXRlXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtU3RyaW5nICs9IHRyYW5zZm9ybU5hbWUgKyB0cmFuc2Zvcm1WYWx1ZSArIFwiIFwiO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgIC8qIElmIHByZXNlbnQsIHNldCB0aGUgcGVyc3BlY3RpdmUgc3VicHJvcGVydHkgZmlyc3QuICovXG5cdCAgICAgICAgICAgICAgICBpZiAocGVyc3BlY3RpdmUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1TdHJpbmcgPSBcInBlcnNwZWN0aXZlXCIgKyBwZXJzcGVjdGl2ZSArIFwiIFwiICsgdHJhbnNmb3JtU3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgQ1NTLnNldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtU3RyaW5nKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKiBSZWdpc3RlciBob29rcyBhbmQgbm9ybWFsaXphdGlvbnMuICovXG5cdCAgICBDU1MuSG9va3MucmVnaXN0ZXIoKTtcblx0ICAgIENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcigpO1xuXG5cdCAgICAvKiBBbGxvdyBob29rIHNldHRpbmcgaW4gdGhlIHNhbWUgZmFzaGlvbiBhcyBqUXVlcnkncyAkLmNzcygpLiAqL1xuXHQgICAgVmVsb2NpdHkuaG9vayA9IGZ1bmN0aW9uIChlbGVtZW50cywgYXJnMiwgYXJnMykge1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IHVuZGVmaW5lZDtcblxuXHQgICAgICAgIGVsZW1lbnRzID0gc2FuaXRpemVFbGVtZW50cyhlbGVtZW50cyk7XG5cblx0ICAgICAgICAkLmVhY2goZWxlbWVudHMsIGZ1bmN0aW9uKGksIGVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgLyogSW5pdGlhbGl6ZSBWZWxvY2l0eSdzIHBlci1lbGVtZW50IGRhdGEgY2FjaGUgaWYgdGhpcyBlbGVtZW50IGhhc24ndCBwcmV2aW91c2x5IGJlZW4gYW5pbWF0ZWQuICovXG5cdCAgICAgICAgICAgIGlmIChEYXRhKGVsZW1lbnQpID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIFZlbG9jaXR5LmluaXQoZWxlbWVudCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKiBHZXQgcHJvcGVydHkgdmFsdWUuIElmIGFuIGVsZW1lbnQgc2V0IHdhcyBwYXNzZWQgaW4sIG9ubHkgcmV0dXJuIHRoZSB2YWx1ZSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQuICovXG5cdCAgICAgICAgICAgIGlmIChhcmczID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBWZWxvY2l0eS5DU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBhcmcyKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLyogU2V0IHByb3BlcnR5IHZhbHVlLiAqL1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLyogc1BWIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG5vcm1hbGl6ZWQgcHJvcGVydHlOYW1lL3Byb3BlcnR5VmFsdWUgcGFpciB1c2VkIHRvIHVwZGF0ZSB0aGUgRE9NLiAqL1xuXHQgICAgICAgICAgICAgICAgdmFyIGFkanVzdGVkU2V0ID0gVmVsb2NpdHkuQ1NTLnNldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgYXJnMiwgYXJnMyk7XG5cblx0ICAgICAgICAgICAgICAgIC8qIFRyYW5zZm9ybSBwcm9wZXJ0aWVzIGRvbid0IGF1dG9tYXRpY2FsbHkgc2V0LiBUaGV5IGhhdmUgdG8gYmUgZmx1c2hlZCB0byB0aGUgRE9NLiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKGFkanVzdGVkU2V0WzBdID09PSBcInRyYW5zZm9ybVwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuQ1NTLmZsdXNoVHJhbnNmb3JtQ2FjaGUoZWxlbWVudCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gYWRqdXN0ZWRTZXQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIHJldHVybiB2YWx1ZTtcblx0ICAgIH07XG5cblx0ICAgIC8qKioqKioqKioqKioqKioqKlxuXHQgICAgICAgIEFuaW1hdGlvblxuXHQgICAgKioqKioqKioqKioqKioqKiovXG5cblx0ICAgIHZhciBhbmltYXRlID0gZnVuY3Rpb24oKSB7XG5cblx0ICAgICAgICAvKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgIENhbGwgQ2hhaW5cblx0ICAgICAgICAqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAvKiBMb2dpYyBmb3IgZGV0ZXJtaW5pbmcgd2hhdCB0byByZXR1cm4gdG8gdGhlIGNhbGwgc3RhY2sgd2hlbiBleGl0aW5nIG91dCBvZiBWZWxvY2l0eS4gKi9cblx0ICAgICAgICBmdW5jdGlvbiBnZXRDaGFpbiAoKSB7XG5cdCAgICAgICAgICAgIC8qIElmIHdlIGFyZSB1c2luZyB0aGUgdXRpbGl0eSBmdW5jdGlvbiwgYXR0ZW1wdCB0byByZXR1cm4gdGhpcyBjYWxsJ3MgcHJvbWlzZS4gSWYgbm8gcHJvbWlzZSBsaWJyYXJ5IHdhcyBkZXRlY3RlZCxcblx0ICAgICAgICAgICAgICAgZGVmYXVsdCB0byBudWxsIGluc3RlYWQgb2YgcmV0dXJuaW5nIHRoZSB0YXJnZXRlZCBlbGVtZW50cyBzbyB0aGF0IHV0aWxpdHkgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgaXMgc3RhbmRhcmRpemVkLiAqL1xuXHQgICAgICAgICAgICBpZiAoaXNVdGlsaXR5KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZURhdGEucHJvbWlzZSB8fCBudWxsO1xuXHQgICAgICAgICAgICAvKiBPdGhlcndpc2UsIGlmIHdlJ3JlIHVzaW5nICQuZm4sIHJldHVybiB0aGUgalF1ZXJ5LS9aZXB0by13cmFwcGVkIGVsZW1lbnQgc2V0LiAqL1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzV3JhcHBlZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgQXJndW1lbnRzIEFzc2lnbm1lbnRcblx0ICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgLyogVG8gYWxsb3cgZm9yIGV4cHJlc3NpdmUgQ29mZmVlU2NyaXB0IGNvZGUsIFZlbG9jaXR5IHN1cHBvcnRzIGFuIGFsdGVybmF0aXZlIHN5bnRheCBpbiB3aGljaCBcImVsZW1lbnRzXCIgKG9yIFwiZVwiKSwgXCJwcm9wZXJ0aWVzXCIgKG9yIFwicFwiKSwgYW5kIFwib3B0aW9uc1wiIChvciBcIm9cIilcblx0ICAgICAgICAgICBvYmplY3RzIGFyZSBkZWZpbmVkIG9uIGEgY29udGFpbmVyIG9iamVjdCB0aGF0J3MgcGFzc2VkIGluIGFzIFZlbG9jaXR5J3Mgc29sZSBhcmd1bWVudC4gKi9cblx0ICAgICAgICAvKiBOb3RlOiBTb21lIGJyb3dzZXJzIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGUgYXJndW1lbnRzIHdpdGggYSBcInByb3BlcnRpZXNcIiBvYmplY3QuIFdlIGRldGVjdCBpdCBieSBjaGVja2luZyBmb3IgaXRzIGRlZmF1bHQgXCJuYW1lc1wiIHByb3BlcnR5LiAqL1xuXHQgICAgICAgIHZhciBzeW50YWN0aWNTdWdhciA9IChhcmd1bWVudHNbMF0gJiYgKGFyZ3VtZW50c1swXS5wIHx8ICgoJC5pc1BsYWluT2JqZWN0KGFyZ3VtZW50c1swXS5wcm9wZXJ0aWVzKSAmJiAhYXJndW1lbnRzWzBdLnByb3BlcnRpZXMubmFtZXMpIHx8IFR5cGUuaXNTdHJpbmcoYXJndW1lbnRzWzBdLnByb3BlcnRpZXMpKSkpLFxuXHQgICAgICAgICAgICAvKiBXaGV0aGVyIFZlbG9jaXR5IHdhcyBjYWxsZWQgdmlhIHRoZSB1dGlsaXR5IGZ1bmN0aW9uIChhcyBvcHBvc2VkIHRvIG9uIGEgalF1ZXJ5L1plcHRvIG9iamVjdCkuICovXG5cdCAgICAgICAgICAgIGlzVXRpbGl0eSxcblx0ICAgICAgICAgICAgLyogV2hlbiBWZWxvY2l0eSBpcyBjYWxsZWQgdmlhIHRoZSB1dGlsaXR5IGZ1bmN0aW9uICgkLlZlbG9jaXR5KCkvVmVsb2NpdHkoKSksIGVsZW1lbnRzIGFyZSBleHBsaWNpdGx5XG5cdCAgICAgICAgICAgICAgIHBhc3NlZCBpbiBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyLiBUaHVzLCBhcmd1bWVudCBwb3NpdGlvbmluZyB2YXJpZXMuIFdlIG5vcm1hbGl6ZSB0aGVtIGhlcmUuICovXG5cdCAgICAgICAgICAgIGVsZW1lbnRzV3JhcHBlZCxcblx0ICAgICAgICAgICAgYXJndW1lbnRJbmRleDtcblxuXHQgICAgICAgIHZhciBlbGVtZW50cyxcblx0ICAgICAgICAgICAgcHJvcGVydGllc01hcCxcblx0ICAgICAgICAgICAgb3B0aW9ucztcblxuXHQgICAgICAgIC8qIERldGVjdCBqUXVlcnkvWmVwdG8gZWxlbWVudHMgYmVpbmcgYW5pbWF0ZWQgdmlhIHRoZSAkLmZuIG1ldGhvZC4gKi9cblx0ICAgICAgICBpZiAoVHlwZS5pc1dyYXBwZWQodGhpcykpIHtcblx0ICAgICAgICAgICAgaXNVdGlsaXR5ID0gZmFsc2U7XG5cblx0ICAgICAgICAgICAgYXJndW1lbnRJbmRleCA9IDA7XG5cdCAgICAgICAgICAgIGVsZW1lbnRzID0gdGhpcztcblx0ICAgICAgICAgICAgZWxlbWVudHNXcmFwcGVkID0gdGhpcztcblx0ICAgICAgICAvKiBPdGhlcndpc2UsIHJhdyBlbGVtZW50cyBhcmUgYmVpbmcgYW5pbWF0ZWQgdmlhIHRoZSB1dGlsaXR5IGZ1bmN0aW9uLiAqL1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlzVXRpbGl0eSA9IHRydWU7XG5cblx0ICAgICAgICAgICAgYXJndW1lbnRJbmRleCA9IDE7XG5cdCAgICAgICAgICAgIGVsZW1lbnRzID0gc3ludGFjdGljU3VnYXIgPyAoYXJndW1lbnRzWzBdLmVsZW1lbnRzIHx8IGFyZ3VtZW50c1swXS5lKSA6IGFyZ3VtZW50c1swXTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBlbGVtZW50cyA9IHNhbml0aXplRWxlbWVudHMoZWxlbWVudHMpO1xuXG5cdCAgICAgICAgaWYgKCFlbGVtZW50cykge1xuXHQgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHN5bnRhY3RpY1N1Z2FyKSB7XG5cdCAgICAgICAgICAgIHByb3BlcnRpZXNNYXAgPSBhcmd1bWVudHNbMF0ucHJvcGVydGllcyB8fCBhcmd1bWVudHNbMF0ucDtcblx0ICAgICAgICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50c1swXS5vcHRpb25zIHx8IGFyZ3VtZW50c1swXS5vO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHByb3BlcnRpZXNNYXAgPSBhcmd1bWVudHNbYXJndW1lbnRJbmRleF07XG5cdCAgICAgICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRJbmRleCArIDFdO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qIFRoZSBsZW5ndGggb2YgdGhlIGVsZW1lbnQgc2V0IChpbiB0aGUgZm9ybSBvZiBhIG5vZGVMaXN0IG9yIGFuIGFycmF5IG9mIGVsZW1lbnRzKSBpcyBkZWZhdWx0ZWQgdG8gMSBpbiBjYXNlIGFcblx0ICAgICAgICAgICBzaW5nbGUgcmF3IERPTSBlbGVtZW50IGlzIHBhc3NlZCBpbiAod2hpY2ggZG9lc24ndCBjb250YWluIGEgbGVuZ3RoIHByb3BlcnR5KS4gKi9cblx0ICAgICAgICB2YXIgZWxlbWVudHNMZW5ndGggPSBlbGVtZW50cy5sZW5ndGgsXG5cdCAgICAgICAgICAgIGVsZW1lbnRzSW5kZXggPSAwO1xuXG5cdCAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICBBcmd1bWVudCBPdmVybG9hZGluZ1xuXHQgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgIC8qIFN1cHBvcnQgaXMgaW5jbHVkZWQgZm9yIGpRdWVyeSdzIGFyZ3VtZW50IG92ZXJsb2FkaW5nOiAkLmFuaW1hdGUocHJvcGVydHlNYXAgWywgZHVyYXRpb25dIFssIGVhc2luZ10gWywgY29tcGxldGVdKS5cblx0ICAgICAgICAgICBPdmVybG9hZGluZyBpcyBkZXRlY3RlZCBieSBjaGVja2luZyBmb3IgdGhlIGFic2VuY2Ugb2YgYW4gb2JqZWN0IGJlaW5nIHBhc3NlZCBpbnRvIG9wdGlvbnMuICovXG5cdCAgICAgICAgLyogTm90ZTogVGhlIHN0b3AgYW5kIGZpbmlzaCBhY3Rpb25zIGRvIG5vdCBhY2NlcHQgYW5pbWF0aW9uIG9wdGlvbnMsIGFuZCBhcmUgdGhlcmVmb3JlIGV4Y2x1ZGVkIGZyb20gdGhpcyBjaGVjay4gKi9cblx0ICAgICAgICBpZiAoIS9eKHN0b3B8ZmluaXNofGZpbmlzaEFsbCkkL2kudGVzdChwcm9wZXJ0aWVzTWFwKSAmJiAhJC5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG5cdCAgICAgICAgICAgIC8qIFRoZSB1dGlsaXR5IGZ1bmN0aW9uIHNoaWZ0cyBhbGwgYXJndW1lbnRzIG9uZSBwb3NpdGlvbiB0byB0aGUgcmlnaHQsIHNvIHdlIGFkanVzdCBmb3IgdGhhdCBvZmZzZXQuICovXG5cdCAgICAgICAgICAgIHZhciBzdGFydGluZ0FyZ3VtZW50UG9zaXRpb24gPSBhcmd1bWVudEluZGV4ICsgMTtcblxuXHQgICAgICAgICAgICBvcHRpb25zID0ge307XG5cblx0ICAgICAgICAgICAgLyogSXRlcmF0ZSB0aHJvdWdoIGFsbCBvcHRpb25zIGFyZ3VtZW50cyAqL1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRpbmdBcmd1bWVudFBvc2l0aW9uOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvKiBUcmVhdCBhIG51bWJlciBhcyBhIGR1cmF0aW9uLiBQYXJzZSBpdCBvdXQuICovXG5cdCAgICAgICAgICAgICAgICAvKiBOb3RlOiBUaGUgZm9sbG93aW5nIFJlZ0V4IHdpbGwgcmV0dXJuIHRydWUgaWYgcGFzc2VkIGFuIGFycmF5IHdpdGggYSBudW1iZXIgYXMgaXRzIGZpcnN0IGl0ZW0uXG5cdCAgICAgICAgICAgICAgICAgICBUaHVzLCBhcnJheXMgYXJlIHNraXBwZWQgZnJvbSB0aGlzIGNoZWNrLiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKCFUeXBlLmlzQXJyYXkoYXJndW1lbnRzW2ldKSAmJiAoL14oZmFzdHxub3JtYWx8c2xvdykkL2kudGVzdChhcmd1bWVudHNbaV0pIHx8IC9eXFxkLy50ZXN0KGFyZ3VtZW50c1tpXSkpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kdXJhdGlvbiA9IGFyZ3VtZW50c1tpXTtcblx0ICAgICAgICAgICAgICAgIC8qIFRyZWF0IHN0cmluZ3MgYW5kIGFycmF5cyBhcyBlYXNpbmdzLiAqL1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChUeXBlLmlzU3RyaW5nKGFyZ3VtZW50c1tpXSkgfHwgVHlwZS5pc0FycmF5KGFyZ3VtZW50c1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmVhc2luZyA9IGFyZ3VtZW50c1tpXTtcblx0ICAgICAgICAgICAgICAgIC8qIFRyZWF0IGEgZnVuY3Rpb24gYXMgYSBjb21wbGV0ZSBjYWxsYmFjay4gKi9cblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVHlwZS5pc0Z1bmN0aW9uKGFyZ3VtZW50c1tpXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbXBsZXRlID0gYXJndW1lbnRzW2ldO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyoqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICBQcm9taXNlc1xuXHQgICAgICAgICoqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgIHZhciBwcm9taXNlRGF0YSA9IHtcblx0ICAgICAgICAgICAgICAgIHByb21pc2U6IG51bGwsXG5cdCAgICAgICAgICAgICAgICByZXNvbHZlcjogbnVsbCxcblx0ICAgICAgICAgICAgICAgIHJlamVjdGVyOiBudWxsXG5cdCAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAvKiBJZiB0aGlzIGNhbGwgd2FzIG1hZGUgdmlhIHRoZSB1dGlsaXR5IGZ1bmN0aW9uICh3aGljaCBpcyB0aGUgZGVmYXVsdCBtZXRob2Qgb2YgaW52b2NhdGlvbiB3aGVuIGpRdWVyeS9aZXB0byBhcmUgbm90IGJlaW5nIHVzZWQpLCBhbmQgaWZcblx0ICAgICAgICAgICBwcm9taXNlIHN1cHBvcnQgd2FzIGRldGVjdGVkLCBjcmVhdGUgYSBwcm9taXNlIG9iamVjdCBmb3IgdGhpcyBjYWxsIGFuZCBzdG9yZSByZWZlcmVuY2VzIHRvIGl0cyByZXNvbHZlciBhbmQgcmVqZWN0ZXIgbWV0aG9kcy4gVGhlIHJlc29sdmVcblx0ICAgICAgICAgICBtZXRob2QgaXMgdXNlZCB3aGVuIGEgY2FsbCBjb21wbGV0ZXMgbmF0dXJhbGx5IG9yIGlzIHByZW1hdHVyZWx5IHN0b3BwZWQgYnkgdGhlIHVzZXIuIEluIGJvdGggY2FzZXMsIGNvbXBsZXRlQ2FsbCgpIGhhbmRsZXMgdGhlIGFzc29jaWF0ZWRcblx0ICAgICAgICAgICBjYWxsIGNsZWFudXAgYW5kIHByb21pc2UgcmVzb2x2aW5nIGxvZ2ljLiBUaGUgcmVqZWN0IG1ldGhvZCBpcyB1c2VkIHdoZW4gYW4gaW52YWxpZCBzZXQgb2YgYXJndW1lbnRzIGlzIHBhc3NlZCBpbnRvIGEgVmVsb2NpdHkgY2FsbC4gKi9cblx0ICAgICAgICAvKiBOb3RlOiBWZWxvY2l0eSBlbXBsb3lzIGEgY2FsbC1iYXNlZCBxdWV1ZWluZyBhcmNoaXRlY3R1cmUsIHdoaWNoIG1lYW5zIHRoYXQgc3RvcHBpbmcgYW4gYW5pbWF0aW5nIGVsZW1lbnQgYWN0dWFsbHkgc3RvcHMgdGhlIGZ1bGwgY2FsbCB0aGF0XG5cdCAgICAgICAgICAgdHJpZ2dlcmVkIGl0IC0tIG5vdCB0aGF0IG9uZSBlbGVtZW50IGV4Y2x1c2l2ZWx5LiBTaW1pbGFybHksIHRoZXJlIGlzIG9uZSBwcm9taXNlIHBlciBjYWxsLCBhbmQgYWxsIGVsZW1lbnRzIHRhcmdldGVkIGJ5IGEgVmVsb2NpdHkgY2FsbCBhcmVcblx0ICAgICAgICAgICBncm91cGVkIHRvZ2V0aGVyIGZvciB0aGUgcHVycG9zZXMgb2YgcmVzb2x2aW5nIGFuZCByZWplY3RpbmcgYSBwcm9taXNlLiAqL1xuXHQgICAgICAgIGlmIChpc1V0aWxpdHkgJiYgVmVsb2NpdHkuUHJvbWlzZSkge1xuXHQgICAgICAgICAgICBwcm9taXNlRGF0YS5wcm9taXNlID0gbmV3IFZlbG9jaXR5LlByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgcHJvbWlzZURhdGEucmVzb2x2ZXIgPSByZXNvbHZlO1xuXHQgICAgICAgICAgICAgICAgcHJvbWlzZURhdGEucmVqZWN0ZXIgPSByZWplY3Q7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICBBY3Rpb24gRGV0ZWN0aW9uXG5cdCAgICAgICAgKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgLyogVmVsb2NpdHkncyBiZWhhdmlvciBpcyBjYXRlZ29yaXplZCBpbnRvIFwiYWN0aW9uc1wiOiBFbGVtZW50cyBjYW4gZWl0aGVyIGJlIHNwZWNpYWxseSBzY3JvbGxlZCBpbnRvIHZpZXcsXG5cdCAgICAgICAgICAgb3IgdGhleSBjYW4gYmUgc3RhcnRlZCwgc3RvcHBlZCwgb3IgcmV2ZXJzZWQuIElmIGEgbGl0ZXJhbCBvciByZWZlcmVuY2VkIHByb3BlcnRpZXMgbWFwIGlzIHBhc3NlZCBpbiBhcyBWZWxvY2l0eSdzXG5cdCAgICAgICAgICAgZmlyc3QgYXJndW1lbnQsIHRoZSBhc3NvY2lhdGVkIGFjdGlvbiBpcyBcInN0YXJ0XCIuIEFsdGVybmF0aXZlbHksIFwic2Nyb2xsXCIsIFwicmV2ZXJzZVwiLCBvciBcInN0b3BcIiBjYW4gYmUgcGFzc2VkIGluIGluc3RlYWQgb2YgYSBwcm9wZXJ0aWVzIG1hcC4gKi9cblx0ICAgICAgICB2YXIgYWN0aW9uO1xuXG5cdCAgICAgICAgc3dpdGNoIChwcm9wZXJ0aWVzTWFwKSB7XG5cdCAgICAgICAgICAgIGNhc2UgXCJzY3JvbGxcIjpcblx0ICAgICAgICAgICAgICAgIGFjdGlvbiA9IFwic2Nyb2xsXCI7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICBjYXNlIFwicmV2ZXJzZVwiOlxuXHQgICAgICAgICAgICAgICAgYWN0aW9uID0gXCJyZXZlcnNlXCI7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICBjYXNlIFwiZmluaXNoXCI6XG5cdCAgICAgICAgICAgIGNhc2UgXCJmaW5pc2hBbGxcIjpcblx0ICAgICAgICAgICAgY2FzZSBcInN0b3BcIjpcblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgQWN0aW9uOiBTdG9wXG5cdCAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAvKiBDbGVhciB0aGUgY3VycmVudGx5LWFjdGl2ZSBkZWxheSBvbiBlYWNoIHRhcmdldGVkIGVsZW1lbnQuICovXG5cdCAgICAgICAgICAgICAgICAkLmVhY2goZWxlbWVudHMsIGZ1bmN0aW9uKGksIGVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoRGF0YShlbGVtZW50KSAmJiBEYXRhKGVsZW1lbnQpLmRlbGF5VGltZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RvcCB0aGUgdGltZXIgZnJvbSB0cmlnZ2VyaW5nIGl0cyBjYWNoZWQgbmV4dCgpIGZ1bmN0aW9uLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoRGF0YShlbGVtZW50KS5kZWxheVRpbWVyLnNldFRpbWVvdXQpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIE1hbnVhbGx5IGNhbGwgdGhlIG5leHQoKSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBzdWJzZXF1ZW50IHF1ZXVlIGl0ZW1zIGNhbiBwcm9ncmVzcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERhdGEoZWxlbWVudCkuZGVsYXlUaW1lci5uZXh0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBEYXRhKGVsZW1lbnQpLmRlbGF5VGltZXIubmV4dCgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIERhdGEoZWxlbWVudCkuZGVsYXlUaW1lcjtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBJZiB3ZSB3YW50IHRvIGZpbmlzaCBldmVyeXRoaW5nIGluIHRoZSBxdWV1ZSwgd2UgaGF2ZSB0byBpdGVyYXRlIHRocm91Z2ggaXRcblx0ICAgICAgICAgICAgICAgICAgICAgICBhbmQgY2FsbCBlYWNoIGZ1bmN0aW9uLiBUaGlzIHdpbGwgbWFrZSB0aGVtIGFjdGl2ZSBjYWxscyBiZWxvdywgd2hpY2ggd2lsbFxuXHQgICAgICAgICAgICAgICAgICAgICAgIGNhdXNlIHRoZW0gdG8gYmUgYXBwbGllZCB2aWEgdGhlIGR1cmF0aW9uIHNldHRpbmcuICovXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNNYXAgPT09IFwiZmluaXNoQWxsXCIgJiYgKG9wdGlvbnMgPT09IHRydWUgfHwgVHlwZS5pc1N0cmluZyhvcHRpb25zKSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogSXRlcmF0ZSB0aHJvdWdoIHRoZSBpdGVtcyBpbiB0aGUgZWxlbWVudCdzIHF1ZXVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goJC5xdWV1ZShlbGVtZW50LCBUeXBlLmlzU3RyaW5nKG9wdGlvbnMpID8gb3B0aW9ucyA6IFwiXCIpLCBmdW5jdGlvbihfLCBpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBUaGUgcXVldWUgYXJyYXkgY2FuIGNvbnRhaW4gYW4gXCJpbnByb2dyZXNzXCIgc3RyaW5nLCB3aGljaCB3ZSBza2lwLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFR5cGUuaXNGdW5jdGlvbihpdGVtKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2xlYXJpbmcgdGhlICQucXVldWUoKSBhcnJheSBpcyBhY2hpZXZlZCBieSByZXNldHRpbmcgaXQgdG8gW10uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICQucXVldWUoZWxlbWVudCwgVHlwZS5pc1N0cmluZyhvcHRpb25zKSA/IG9wdGlvbnMgOiBcIlwiLCBbXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgIHZhciBjYWxsc1RvU3RvcCA9IFtdO1xuXG5cdCAgICAgICAgICAgICAgICAvKiBXaGVuIHRoZSBzdG9wIGFjdGlvbiBpcyB0cmlnZ2VyZWQsIHRoZSBlbGVtZW50cycgY3VycmVudGx5IGFjdGl2ZSBjYWxsIGlzIGltbWVkaWF0ZWx5IHN0b3BwZWQuIFRoZSBhY3RpdmUgY2FsbCBtaWdodCBoYXZlXG5cdCAgICAgICAgICAgICAgICAgICBiZWVuIGFwcGxpZWQgdG8gbXVsdGlwbGUgZWxlbWVudHMsIGluIHdoaWNoIGNhc2UgYWxsIG9mIHRoZSBjYWxsJ3MgZWxlbWVudHMgd2lsbCBiZSBzdG9wcGVkLiBXaGVuIGFuIGVsZW1lbnRcblx0ICAgICAgICAgICAgICAgICAgIGlzIHN0b3BwZWQsIHRoZSBuZXh0IGl0ZW0gaW4gaXRzIGFuaW1hdGlvbiBxdWV1ZSBpcyBpbW1lZGlhdGVseSB0cmlnZ2VyZWQuICovXG5cdCAgICAgICAgICAgICAgICAvKiBBbiBhZGRpdGlvbmFsIGFyZ3VtZW50IG1heSBiZSBwYXNzZWQgaW4gdG8gY2xlYXIgYW4gZWxlbWVudCdzIHJlbWFpbmluZyBxdWV1ZWQgY2FsbHMuIEVpdGhlciB0cnVlICh3aGljaCBkZWZhdWx0cyB0byB0aGUgXCJmeFwiIHF1ZXVlKVxuXHQgICAgICAgICAgICAgICAgICAgb3IgYSBjdXN0b20gcXVldWUgc3RyaW5nIGNhbiBiZSBwYXNzZWQgaW4uICovXG5cdCAgICAgICAgICAgICAgICAvKiBOb3RlOiBUaGUgc3RvcCBjb21tYW5kIHJ1bnMgcHJpb3IgdG8gVmVsb2NpdHkncyBRdWV1ZWluZyBwaGFzZSBzaW5jZSBpdHMgYmVoYXZpb3IgaXMgaW50ZW5kZWQgdG8gdGFrZSBlZmZlY3QgKmltbWVkaWF0ZWx5Kixcblx0ICAgICAgICAgICAgICAgICAgIHJlZ2FyZGxlc3Mgb2YgdGhlIGVsZW1lbnQncyBjdXJyZW50IHF1ZXVlIHN0YXRlLiAqL1xuXG5cdCAgICAgICAgICAgICAgICAvKiBJdGVyYXRlIHRocm91Z2ggZXZlcnkgYWN0aXZlIGNhbGwuICovXG5cdCAgICAgICAgICAgICAgICAkLmVhY2goVmVsb2NpdHkuU3RhdGUuY2FsbHMsIGZ1bmN0aW9uKGksIGFjdGl2ZUNhbGwpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBJbmFjdGl2ZSBjYWxscyBhcmUgc2V0IHRvIGZhbHNlIGJ5IHRoZSBsb2dpYyBpbnNpZGUgY29tcGxldGVDYWxsKCkuIFNraXAgdGhlbS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQ2FsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBJdGVyYXRlIHRocm91Z2ggdGhlIGFjdGl2ZSBjYWxsJ3MgdGFyZ2V0ZWQgZWxlbWVudHMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChhY3RpdmVDYWxsWzFdLCBmdW5jdGlvbihrLCBhY3RpdmVFbGVtZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiB0cnVlIHdhcyBwYXNzZWQgaW4gYXMgYSBzZWNvbmRhcnkgYXJndW1lbnQsIGNsZWFyIGFic29sdXRlbHkgYWxsIGNhbGxzIG9uIHRoaXMgZWxlbWVudC4gT3RoZXJ3aXNlLCBvbmx5XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhciBjYWxscyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlbGV2YW50IHF1ZXVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2FsbCBzdG9wcGluZyBsb2dpYyB3b3JrcyBhcyBmb2xsb3dzOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBvcHRpb25zID09PSB0cnVlIC0tPiBzdG9wIGN1cnJlbnQgZGVmYXVsdCBxdWV1ZSBjYWxscyAoYW5kIHF1ZXVlOmZhbHNlIGNhbGxzKSwgaW5jbHVkaW5nIHJlbWFpbmluZyBxdWV1ZWQgb25lcy5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gb3B0aW9ucyA9PT0gdW5kZWZpbmVkIC0tPiBzdG9wIGN1cnJlbnQgcXVldWU6XCJcIiBjYWxsIGFuZCBhbGwgcXVldWU6ZmFsc2UgY2FsbHMuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIG9wdGlvbnMgPT09IGZhbHNlIC0tPiBzdG9wIG9ubHkgcXVldWU6ZmFsc2UgY2FsbHMuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIG9wdGlvbnMgPT09IFwiY3VzdG9tXCIgLS0+IHN0b3AgY3VycmVudCBxdWV1ZTpcImN1c3RvbVwiIGNhbGwsIGluY2x1ZGluZyByZW1haW5pbmcgcXVldWVkIG9uZXMgKHRoZXJlIGlzIG5vIGZ1bmN0aW9uYWxpdHkgdG8gb25seSBjbGVhciB0aGUgY3VycmVudGx5LXJ1bm5pbmcgcXVldWU6XCJjdXN0b21cIiBjYWxsKS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWV1ZU5hbWUgPSAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSA/IFwiXCIgOiBvcHRpb25zO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVldWVOYW1lICE9PSB0cnVlICYmIChhY3RpdmVDYWxsWzJdLnF1ZXVlICE9PSBxdWV1ZU5hbWUpICYmICEob3B0aW9ucyA9PT0gdW5kZWZpbmVkICYmIGFjdGl2ZUNhbGxbMl0ucXVldWUgPT09IGZhbHNlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJdGVyYXRlIHRocm91Z2ggdGhlIGNhbGxzIHRhcmdldGVkIGJ5IHRoZSBzdG9wIGNvbW1hbmQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZWxlbWVudHMsIGZ1bmN0aW9uKGwsIGVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGVjayB0aGF0IHRoaXMgY2FsbCB3YXMgYXBwbGllZCB0byB0aGUgdGFyZ2V0IGVsZW1lbnQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09IGFjdGl2ZUVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogT3B0aW9uYWxseSBjbGVhciB0aGUgcmVtYWluaW5nIHF1ZXVlZCBjYWxscy4gSWYgd2UncmUgZG9pbmcgXCJmaW5pc2hBbGxcIiB0aGlzIHdvbid0IGZpbmQgYW55dGhpbmcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1ZSB0byB0aGUgcXVldWUtY2xlYXJpbmcgYWJvdmUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB0cnVlIHx8IFR5cGUuaXNTdHJpbmcob3B0aW9ucykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEl0ZXJhdGUgdGhyb3VnaCB0aGUgaXRlbXMgaW4gdGhlIGVsZW1lbnQncyBxdWV1ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCgkLnF1ZXVlKGVsZW1lbnQsIFR5cGUuaXNTdHJpbmcob3B0aW9ucykgPyBvcHRpb25zIDogXCJcIiksIGZ1bmN0aW9uKF8sIGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBUaGUgcXVldWUgYXJyYXkgY2FuIGNvbnRhaW4gYW4gXCJpbnByb2dyZXNzXCIgc3RyaW5nLCB3aGljaCB3ZSBza2lwLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUeXBlLmlzRnVuY3Rpb24oaXRlbSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUGFzcyB0aGUgaXRlbSdzIGNhbGxiYWNrIGEgZmxhZyBpbmRpY2F0aW5nIHRoYXQgd2Ugd2FudCB0byBhYm9ydCBmcm9tIHRoZSBxdWV1ZSBjYWxsLlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoU3BlY2lmaWNhbGx5LCB0aGUgcXVldWUgd2lsbCByZXNvbHZlIHRoZSBjYWxsJ3MgYXNzb2NpYXRlZCBwcm9taXNlIHRoZW4gYWJvcnQuKSAgKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbShudWxsLCB0cnVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ2xlYXJpbmcgdGhlICQucXVldWUoKSBhcnJheSBpcyBhY2hpZXZlZCBieSByZXNldHRpbmcgaXQgdG8gW10uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLnF1ZXVlKGVsZW1lbnQsIFR5cGUuaXNTdHJpbmcob3B0aW9ucykgPyBvcHRpb25zIDogXCJcIiwgW10pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNNYXAgPT09IFwic3RvcFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBTaW5jZSBcInJldmVyc2VcIiB1c2VzIGNhY2hlZCBzdGFydCB2YWx1ZXMgKHRoZSBwcmV2aW91cyBjYWxsJ3MgZW5kVmFsdWVzKSwgdGhlc2UgdmFsdWVzIG11c3QgYmVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgdG8gcmVmbGVjdCB0aGUgZmluYWwgdmFsdWUgdGhhdCB0aGUgZWxlbWVudHMgd2VyZSBhY3R1YWxseSB0d2VlbmVkIHRvLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogSWYgb25seSBxdWV1ZTpmYWxzZSBhbmltYXRpb25zIGFyZSBjdXJyZW50bHkgcnVubmluZyBvbiBhbiBlbGVtZW50LCBpdCB3b24ndCBoYXZlIGEgdHdlZW5zQ29udGFpbmVyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuIEFsc28sIHF1ZXVlOmZhbHNlIGFuaW1hdGlvbnMgY2FuJ3QgYmUgcmV2ZXJzZWQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0YShlbGVtZW50KSAmJiBEYXRhKGVsZW1lbnQpLnR3ZWVuc0NvbnRhaW5lciAmJiBxdWV1ZU5hbWUgIT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKERhdGEoZWxlbWVudCkudHdlZW5zQ29udGFpbmVyLCBmdW5jdGlvbihtLCBhY3RpdmVUd2Vlbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVUd2Vlbi5lbmRWYWx1ZSA9IGFjdGl2ZVR3ZWVuLmN1cnJlbnRWYWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbHNUb1N0b3AucHVzaChpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0aWVzTWFwID09PSBcImZpbmlzaFwiIHx8IHByb3BlcnRpZXNNYXAgPT09IFwiZmluaXNoQWxsXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFRvIGdldCBhY3RpdmUgdHdlZW5zIHRvIGZpbmlzaCBpbW1lZGlhdGVseSwgd2UgZm9yY2VmdWxseSBzaG9ydGVuIHRoZWlyIGR1cmF0aW9ucyB0byAxbXMgc28gdGhhdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhleSBmaW5pc2ggdXBvbiB0aGUgbmV4dCByQWYgdGljayB0aGVuIHByb2NlZWQgd2l0aCBub3JtYWwgY2FsbCBjb21wbGV0aW9uIGxvZ2ljLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlQ2FsbFsyXS5kdXJhdGlvbiA9IDE7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgIC8qIFByZW1hdHVyZWx5IGNhbGwgY29tcGxldGVDYWxsKCkgb24gZWFjaCBtYXRjaGVkIGFjdGl2ZSBjYWxsLiBQYXNzIGFuIGFkZGl0aW9uYWwgZmxhZyBmb3IgXCJzdG9wXCIgdG8gaW5kaWNhdGVcblx0ICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGNvbXBsZXRlIGNhbGxiYWNrIGFuZCBkaXNwbGF5Om5vbmUgc2V0dGluZyBzaG91bGQgYmUgc2tpcHBlZCBzaW5jZSB3ZSdyZSBjb21wbGV0aW5nIHByZW1hdHVyZWx5LiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNNYXAgPT09IFwic3RvcFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGNhbGxzVG9TdG9wLCBmdW5jdGlvbihpLCBqKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2FsbChqLCB0cnVlKTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwcm9taXNlRGF0YS5wcm9taXNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIEltbWVkaWF0ZWx5IHJlc29sdmUgdGhlIHByb21pc2UgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3RvcCBjYWxsIHNpbmNlIHN0b3AgcnVucyBzeW5jaHJvbm91c2x5LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlRGF0YS5yZXNvbHZlcihlbGVtZW50cyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvKiBTaW5jZSB3ZSdyZSBzdG9wcGluZywgYW5kIG5vdCBwcm9jZWVkaW5nIHdpdGggcXVldWVpbmcsIGV4aXQgb3V0IG9mIFZlbG9jaXR5LiAqL1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGdldENoYWluKCk7XG5cblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIC8qIFRyZWF0IGEgbm9uLWVtcHR5IHBsYWluIG9iamVjdCBhcyBhIGxpdGVyYWwgcHJvcGVydGllcyBtYXAuICovXG5cdCAgICAgICAgICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHByb3BlcnRpZXNNYXApICYmICFUeXBlLmlzRW1wdHlPYmplY3QocHJvcGVydGllc01hcCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBcInN0YXJ0XCI7XG5cblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgUmVkaXJlY3RzXG5cdCAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAvKiBDaGVjayBpZiBhIHN0cmluZyBtYXRjaGVzIGEgcmVnaXN0ZXJlZCByZWRpcmVjdCAoc2VlIFJlZGlyZWN0cyBhYm92ZSkuICovXG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFR5cGUuaXNTdHJpbmcocHJvcGVydGllc01hcCkgJiYgVmVsb2NpdHkuUmVkaXJlY3RzW3Byb3BlcnRpZXNNYXBdKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG9wdHMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uT3JpZ2luYWwgPSBvcHRzLmR1cmF0aW9uLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWxheU9yaWdpbmFsID0gb3B0cy5kZWxheSB8fCAwO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIGJhY2t3YXJkcyBvcHRpb24gd2FzIHBhc3NlZCBpbiwgcmV2ZXJzZSB0aGUgZWxlbWVudCBzZXQgc28gdGhhdCBlbGVtZW50cyBhbmltYXRlIGZyb20gdGhlIGxhc3QgdG8gdGhlIGZpcnN0LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmJhY2t3YXJkcyA9PT0gdHJ1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50cyA9ICQuZXh0ZW5kKHRydWUsIFtdLCBlbGVtZW50cykucmV2ZXJzZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIEluZGl2aWR1YWxseSB0cmlnZ2VyIHRoZSByZWRpcmVjdCBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgdG8gcHJldmVudCB1c2VycyBmcm9tIGhhdmluZyB0byBoYW5kbGUgaXRlcmF0aW9uIGxvZ2ljIGluIHRoZWlyIHJlZGlyZWN0LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICQuZWFjaChlbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudEluZGV4LCBlbGVtZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoZSBzdGFnZ2VyIG9wdGlvbiB3YXMgcGFzc2VkIGluLCBzdWNjZXNzaXZlbHkgZGVsYXkgZWFjaCBlbGVtZW50IGJ5IHRoZSBzdGFnZ2VyIHZhbHVlIChpbiBtcykuIFJldGFpbiB0aGUgb3JpZ2luYWwgZGVsYXkgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG9wdHMuc3RhZ2dlcikpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZGVsYXkgPSBkZWxheU9yaWdpbmFsICsgKHBhcnNlRmxvYXQob3B0cy5zdGFnZ2VyKSAqIGVsZW1lbnRJbmRleCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVHlwZS5pc0Z1bmN0aW9uKG9wdHMuc3RhZ2dlcikpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZGVsYXkgPSBkZWxheU9yaWdpbmFsICsgb3B0cy5zdGFnZ2VyLmNhbGwoZWxlbWVudCwgZWxlbWVudEluZGV4LCBlbGVtZW50c0xlbmd0aCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGUgZHJhZyBvcHRpb24gd2FzIHBhc3NlZCBpbiwgc3VjY2Vzc2l2ZWx5IGluY3JlYXNlL2RlY3JlYXNlIChkZXBlbmRpbmcgb24gdGhlIHByZXNlbnNlIG9mIG9wdHMuYmFja3dhcmRzKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZHVyYXRpb24gb2YgZWFjaCBlbGVtZW50J3MgYW5pbWF0aW9uLCB1c2luZyBmbG9vcnMgdG8gcHJldmVudCBwcm9kdWNpbmcgdmVyeSBzaG9ydCBkdXJhdGlvbnMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmRyYWcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIERlZmF1bHQgdGhlIGR1cmF0aW9uIG9mIFVJIHBhY2sgZWZmZWN0cyAoY2FsbG91dHMgYW5kIHRyYW5zaXRpb25zKSB0byAxMDAwbXMgaW5zdGVhZCBvZiB0aGUgdXN1YWwgZGVmYXVsdCBkdXJhdGlvbiBvZiA0MDBtcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuZHVyYXRpb24gPSBwYXJzZUZsb2F0KGR1cmF0aW9uT3JpZ2luYWwpIHx8ICgvXihjYWxsb3V0fHRyYW5zaXRpb24pLy50ZXN0KHByb3BlcnRpZXNNYXApID8gMTAwMCA6IERVUkFUSU9OX0RFRkFVTFQpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBGb3IgZWFjaCBlbGVtZW50LCB0YWtlIHRoZSBncmVhdGVyIGR1cmF0aW9uIG9mOiBBKSBhbmltYXRpb24gY29tcGxldGlvbiBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBvcmlnaW5hbCBkdXJhdGlvbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEIpIDc1JSBvZiB0aGUgb3JpZ2luYWwgZHVyYXRpb24sIG9yIEMpIGEgMjAwbXMgZmFsbGJhY2sgKGluIGNhc2UgZHVyYXRpb24gaXMgYWxyZWFkeSBzZXQgdG8gYSBsb3cgdmFsdWUpLlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGVuZCByZXN1bHQgaXMgYSBiYXNlbGluZSBvZiA3NSUgb2YgdGhlIHJlZGlyZWN0J3MgZHVyYXRpb24gdGhhdCBpbmNyZWFzZXMvZGVjcmVhc2VzIGFzIHRoZSBlbmQgb2YgdGhlIGVsZW1lbnQgc2V0IGlzIGFwcHJvYWNoZWQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gTWF0aC5tYXgob3B0cy5kdXJhdGlvbiAqIChvcHRzLmJhY2t3YXJkcyA/IDEgLSBlbGVtZW50SW5kZXgvZWxlbWVudHNMZW5ndGggOiAoZWxlbWVudEluZGV4ICsgMSkgLyBlbGVtZW50c0xlbmd0aCksIG9wdHMuZHVyYXRpb24gKiAwLjc1LCAyMDApO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogUGFzcyBpbiB0aGUgY2FsbCdzIG9wdHMgb2JqZWN0IHNvIHRoYXQgdGhlIHJlZGlyZWN0IGNhbiBvcHRpb25hbGx5IGV4dGVuZCBpdC4gSXQgZGVmYXVsdHMgdG8gYW4gZW1wdHkgb2JqZWN0IGluc3RlYWQgb2YgbnVsbCB0b1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICByZWR1Y2UgdGhlIG9wdHMgY2hlY2tpbmcgbG9naWMgcmVxdWlyZWQgaW5zaWRlIHRoZSByZWRpcmVjdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuUmVkaXJlY3RzW3Byb3BlcnRpZXNNYXBdLmNhbGwoZWxlbWVudCwgZWxlbWVudCwgb3B0cyB8fCB7fSwgZWxlbWVudEluZGV4LCBlbGVtZW50c0xlbmd0aCwgZWxlbWVudHMsIHByb21pc2VEYXRhLnByb21pc2UgPyBwcm9taXNlRGF0YSA6IHVuZGVmaW5lZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBTaW5jZSB0aGUgYW5pbWF0aW9uIGxvZ2ljIHJlc2lkZXMgd2l0aGluIHRoZSByZWRpcmVjdCdzIG93biBjb2RlLCBhYm9ydCB0aGUgcmVtYWluZGVyIG9mIHRoaXMgY2FsbC5cblx0ICAgICAgICAgICAgICAgICAgICAgICAoVGhlIHBlcmZvcm1hbmNlIG92ZXJoZWFkIHVwIHRvIHRoaXMgcG9pbnQgaXMgdmlydHVhbGx5IG5vbi1leGlzdGFudC4pICovXG5cdCAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogVGhlIGpRdWVyeSBjYWxsIGNoYWluIGlzIGtlcHQgaW50YWN0IGJ5IHJldHVybmluZyB0aGUgY29tcGxldGUgZWxlbWVudCBzZXQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENoYWluKCk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBhYm9ydEVycm9yID0gXCJWZWxvY2l0eTogRmlyc3QgYXJndW1lbnQgKFwiICsgcHJvcGVydGllc01hcCArIFwiKSB3YXMgbm90IGEgcHJvcGVydHkgbWFwLCBhIGtub3duIGFjdGlvbiwgb3IgYSByZWdpc3RlcmVkIHJlZGlyZWN0LiBBYm9ydGluZy5cIjtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwcm9taXNlRGF0YS5wcm9taXNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VEYXRhLnJlamVjdGVyKG5ldyBFcnJvcihhYm9ydEVycm9yKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYWJvcnRFcnJvcik7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENoYWluKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgIENhbGwtV2lkZSBWYXJpYWJsZXNcblx0ICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgIC8qIEEgY29udGFpbmVyIGZvciBDU1MgdW5pdCBjb252ZXJzaW9uIHJhdGlvcyAoZS5nLiAlLCByZW0sIGFuZCBlbSA9PT4gcHgpIHRoYXQgaXMgdXNlZCB0byBjYWNoZSByYXRpb3MgYWNyb3NzIGFsbCBlbGVtZW50c1xuXHQgICAgICAgICAgIGJlaW5nIGFuaW1hdGVkIGluIGEgc2luZ2xlIFZlbG9jaXR5IGNhbGwuIENhbGN1bGF0aW5nIHVuaXQgcmF0aW9zIG5lY2Vzc2l0YXRlcyBET00gcXVlcnlpbmcgYW5kIHVwZGF0aW5nLCBhbmQgaXMgdGhlcmVmb3JlXG5cdCAgICAgICAgICAgYXZvaWRlZCAodmlhIGNhY2hpbmcpIHdoZXJldmVyIHBvc3NpYmxlLiBUaGlzIGNvbnRhaW5lciBpcyBjYWxsLXdpZGUgaW5zdGVhZCBvZiBwYWdlLXdpZGUgdG8gYXZvaWQgdGhlIHJpc2sgb2YgdXNpbmcgc3RhbGVcblx0ICAgICAgICAgICBjb252ZXJzaW9uIG1ldHJpY3MgYWNyb3NzIFZlbG9jaXR5IGFuaW1hdGlvbnMgdGhhdCBhcmUgbm90IGltbWVkaWF0ZWx5IGNvbnNlY3V0aXZlbHkgY2hhaW5lZC4gKi9cblx0ICAgICAgICB2YXIgY2FsbFVuaXRDb252ZXJzaW9uRGF0YSA9IHtcblx0ICAgICAgICAgICAgICAgIGxhc3RQYXJlbnQ6IG51bGwsXG5cdCAgICAgICAgICAgICAgICBsYXN0UG9zaXRpb246IG51bGwsXG5cdCAgICAgICAgICAgICAgICBsYXN0Rm9udFNpemU6IG51bGwsXG5cdCAgICAgICAgICAgICAgICBsYXN0UGVyY2VudFRvUHhXaWR0aDogbnVsbCxcblx0ICAgICAgICAgICAgICAgIGxhc3RQZXJjZW50VG9QeEhlaWdodDogbnVsbCxcblx0ICAgICAgICAgICAgICAgIGxhc3RFbVRvUHg6IG51bGwsXG5cdCAgICAgICAgICAgICAgICByZW1Ub1B4OiBudWxsLFxuXHQgICAgICAgICAgICAgICAgdndUb1B4OiBudWxsLFxuXHQgICAgICAgICAgICAgICAgdmhUb1B4OiBudWxsXG5cdCAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAvKiBBIGNvbnRhaW5lciBmb3IgYWxsIHRoZSBlbnN1aW5nIHR3ZWVuIGRhdGEgYW5kIG1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNhbGwuIFRoaXMgY29udGFpbmVyIGdldHMgcHVzaGVkIHRvIHRoZSBwYWdlLXdpZGVcblx0ICAgICAgICAgICBWZWxvY2l0eS5TdGF0ZS5jYWxscyBhcnJheSB0aGF0IGlzIHByb2Nlc3NlZCBkdXJpbmcgYW5pbWF0aW9uIHRpY2tpbmcuICovXG5cdCAgICAgICAgdmFyIGNhbGwgPSBbXTtcblxuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICBFbGVtZW50IFByb2Nlc3Npbmdcblx0ICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAvKiBFbGVtZW50IHByb2Nlc3NpbmcgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgLS0gZGF0YSBwcm9jZXNzaW5nIHRoYXQgY2Fubm90IGdvIHN0YWxlIGFuZCBkYXRhIHByb2Nlc3NpbmcgdGhhdCAqY2FuKiBnbyBzdGFsZSAoaS5lLiB0aGlyZC1wYXJ0eSBzdHlsZSBtb2RpZmljYXRpb25zKTpcblx0ICAgICAgICAgICAxKSBQcmUtUXVldWVpbmc6IEVsZW1lbnQtd2lkZSB2YXJpYWJsZXMsIGluY2x1ZGluZyB0aGUgZWxlbWVudCdzIGRhdGEgc3RvcmFnZSwgYXJlIGluc3RhbnRpYXRlZC4gQ2FsbCBvcHRpb25zIGFyZSBwcmVwYXJlZC4gSWYgdHJpZ2dlcmVkLCB0aGUgU3RvcCBhY3Rpb24gaXMgZXhlY3V0ZWQuXG5cdCAgICAgICAgICAgMikgUXVldWVpbmc6IFRoZSBsb2dpYyB0aGF0IHJ1bnMgb25jZSB0aGlzIGNhbGwgaGFzIHJlYWNoZWQgaXRzIHBvaW50IG9mIGV4ZWN1dGlvbiBpbiB0aGUgZWxlbWVudCdzICQucXVldWUoKSBzdGFjay4gTW9zdCBsb2dpYyBpcyBwbGFjZWQgaGVyZSB0byBhdm9pZCByaXNraW5nIGl0IGJlY29taW5nIHN0YWxlLlxuXHQgICAgICAgICAgIDMpIFB1c2hpbmc6IENvbnNvbGlkYXRpb24gb2YgdGhlIHR3ZWVuIGRhdGEgZm9sbG93ZWQgYnkgaXRzIHB1c2ggb250byB0aGUgZ2xvYmFsIGluLXByb2dyZXNzIGNhbGxzIGNvbnRhaW5lci5cblx0ICAgICAgICAqL1xuXG5cdCAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0VsZW1lbnQgKCkge1xuXG5cdCAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgIFBhcnQgSTogUHJlLVF1ZXVlaW5nXG5cdCAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICBFbGVtZW50LVdpZGUgVmFyaWFibGVzXG5cdCAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMsXG5cdCAgICAgICAgICAgICAgICAvKiBUaGUgcnVudGltZSBvcHRzIG9iamVjdCBpcyB0aGUgZXh0ZW5zaW9uIG9mIHRoZSBjdXJyZW50IGNhbGwncyBvcHRpb25zIGFuZCBWZWxvY2l0eSdzIHBhZ2Utd2lkZSBvcHRpb24gZGVmYXVsdHMuICovXG5cdCAgICAgICAgICAgICAgICBvcHRzID0gJC5leHRlbmQoe30sIFZlbG9jaXR5LmRlZmF1bHRzLCBvcHRpb25zKSxcblx0ICAgICAgICAgICAgICAgIC8qIEEgY29udGFpbmVyIGZvciB0aGUgcHJvY2Vzc2VkIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGVhY2ggcHJvcGVydHkgaW4gdGhlIHByb3BlcnR5TWFwLlxuXHQgICAgICAgICAgICAgICAgICAgKEVhY2ggcHJvcGVydHkgaW4gdGhlIG1hcCBwcm9kdWNlcyBpdHMgb3duIFwidHdlZW5cIi4pICovXG5cdCAgICAgICAgICAgICAgICB0d2VlbnNDb250YWluZXIgPSB7fSxcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnRVbml0Q29udmVyc2lvbkRhdGE7XG5cblx0ICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICBFbGVtZW50IEluaXRcblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgIGlmIChEYXRhKGVsZW1lbnQpID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIFZlbG9jaXR5LmluaXQoZWxlbWVudCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgIE9wdGlvbjogRGVsYXlcblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgIC8qIFNpbmNlIHF1ZXVlOmZhbHNlIGRvZXNuJ3QgcmVzcGVjdCB0aGUgaXRlbSdzIGV4aXN0aW5nIHF1ZXVlLCB3ZSBhdm9pZCBpbmplY3RpbmcgaXRzIGRlbGF5IGhlcmUgKGl0J3Mgc2V0IGxhdGVyIG9uKS4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogVmVsb2NpdHkgcm9sbHMgaXRzIG93biBkZWxheSBmdW5jdGlvbiBzaW5jZSBqUXVlcnkgZG9lc24ndCBoYXZlIGEgdXRpbGl0eSBhbGlhcyBmb3IgJC5mbi5kZWxheSgpXG5cdCAgICAgICAgICAgICAgIChhbmQgdGh1cyByZXF1aXJlcyBqUXVlcnkgZWxlbWVudCBjcmVhdGlvbiwgd2hpY2ggd2UgYXZvaWQgc2luY2UgaXRzIG92ZXJoZWFkIGluY2x1ZGVzIERPTSBxdWVyeWluZykuICovXG5cdCAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG9wdHMuZGVsYXkpICYmIG9wdHMucXVldWUgIT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICAkLnF1ZXVlKGVsZW1lbnQsIG9wdHMucXVldWUsIGZ1bmN0aW9uKG5leHQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBUaGlzIGlzIGEgZmxhZyB1c2VkIHRvIGluZGljYXRlIHRvIHRoZSB1cGNvbWluZyBjb21wbGV0ZUNhbGwoKSBmdW5jdGlvbiB0aGF0IHRoaXMgcXVldWUgZW50cnkgd2FzIGluaXRpYXRlZCBieSBWZWxvY2l0eS4gU2VlIGNvbXBsZXRlQ2FsbCgpIGZvciBmdXJ0aGVyIGRldGFpbHMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkudmVsb2NpdHlRdWV1ZUVudHJ5RmxhZyA9IHRydWU7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBUaGUgZW5zdWluZyBxdWV1ZSBpdGVtICh3aGljaCBpcyBhc3NpZ25lZCB0byB0aGUgXCJuZXh0XCIgYXJndW1lbnQgdGhhdCAkLnF1ZXVlKCkgYXV0b21hdGljYWxseSBwYXNzZXMgaW4pIHdpbGwgYmUgdHJpZ2dlcmVkIGFmdGVyIGEgc2V0VGltZW91dCBkZWxheS5cblx0ICAgICAgICAgICAgICAgICAgICAgICBUaGUgc2V0VGltZW91dCBpcyBzdG9yZWQgc28gdGhhdCBpdCBjYW4gYmUgc3ViamVjdGVkIHRvIGNsZWFyVGltZW91dCgpIGlmIHRoaXMgYW5pbWF0aW9uIGlzIHByZW1hdHVyZWx5IHN0b3BwZWQgdmlhIFZlbG9jaXR5J3MgXCJzdG9wXCIgY29tbWFuZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBEYXRhKGVsZW1lbnQpLmRlbGF5VGltZXIgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQ6IHNldFRpbWVvdXQobmV4dCwgcGFyc2VGbG9hdChvcHRzLmRlbGF5KSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IG5leHRcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgIE9wdGlvbjogRHVyYXRpb25cblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgIC8qIFN1cHBvcnQgZm9yIGpRdWVyeSdzIG5hbWVkIGR1cmF0aW9ucy4gKi9cblx0ICAgICAgICAgICAgc3dpdGNoIChvcHRzLmR1cmF0aW9uLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSBcImZhc3RcIjpcblx0ICAgICAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gMjAwO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICBjYXNlIFwibm9ybWFsXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0cy5kdXJhdGlvbiA9IERVUkFUSU9OX0RFRkFVTFQ7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgIGNhc2UgXCJzbG93XCI6XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0cy5kdXJhdGlvbiA9IDYwMDtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICAvKiBSZW1vdmUgdGhlIHBvdGVudGlhbCBcIm1zXCIgc3VmZml4IGFuZCBkZWZhdWx0IHRvIDEgaWYgdGhlIHVzZXIgaXMgYXR0ZW1wdGluZyB0byBzZXQgYSBkdXJhdGlvbiBvZiAwIChpbiBvcmRlciB0byBwcm9kdWNlIGFuIGltbWVkaWF0ZSBzdHlsZSBjaGFuZ2UpLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIG9wdHMuZHVyYXRpb24gPSBwYXJzZUZsb2F0KG9wdHMuZHVyYXRpb24pIHx8IDE7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgIEdsb2JhbCBPcHRpb246IE1vY2tcblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgIGlmIChWZWxvY2l0eS5tb2NrICE9PSBmYWxzZSkge1xuXHQgICAgICAgICAgICAgICAgLyogSW4gbW9jayBtb2RlLCBhbGwgYW5pbWF0aW9ucyBhcmUgZm9yY2VkIHRvIDFtcyBzbyB0aGF0IHRoZXkgb2NjdXIgaW1tZWRpYXRlbHkgdXBvbiB0aGUgbmV4dCByQUYgdGljay5cblx0ICAgICAgICAgICAgICAgICAgIEFsdGVybmF0aXZlbHksIGEgbXVsdGlwbGllciBjYW4gYmUgcGFzc2VkIGluIHRvIHRpbWUgcmVtYXAgYWxsIGRlbGF5cyBhbmQgZHVyYXRpb25zLiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKFZlbG9jaXR5Lm1vY2sgPT09IHRydWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gb3B0cy5kZWxheSA9IDE7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIG9wdHMuZHVyYXRpb24gKj0gcGFyc2VGbG9hdChWZWxvY2l0eS5tb2NrKSB8fCAxO1xuXHQgICAgICAgICAgICAgICAgICAgIG9wdHMuZGVsYXkgKj0gcGFyc2VGbG9hdChWZWxvY2l0eS5tb2NrKSB8fCAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgT3B0aW9uOiBFYXNpbmdcblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICBvcHRzLmVhc2luZyA9IGdldEVhc2luZyhvcHRzLmVhc2luZywgb3B0cy5kdXJhdGlvbik7XG5cblx0ICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgT3B0aW9uOiBDYWxsYmFja3Ncblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAvKiBDYWxsYmFja3MgbXVzdCBmdW5jdGlvbnMuIE90aGVyd2lzZSwgZGVmYXVsdCB0byBudWxsLiAqL1xuXHQgICAgICAgICAgICBpZiAob3B0cy5iZWdpbiAmJiAhVHlwZS5pc0Z1bmN0aW9uKG9wdHMuYmVnaW4pKSB7XG5cdCAgICAgICAgICAgICAgICBvcHRzLmJlZ2luID0gbnVsbDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChvcHRzLnByb2dyZXNzICYmICFUeXBlLmlzRnVuY3Rpb24ob3B0cy5wcm9ncmVzcykpIHtcblx0ICAgICAgICAgICAgICAgIG9wdHMucHJvZ3Jlc3MgPSBudWxsO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKG9wdHMuY29tcGxldGUgJiYgIVR5cGUuaXNGdW5jdGlvbihvcHRzLmNvbXBsZXRlKSkge1xuXHQgICAgICAgICAgICAgICAgb3B0cy5jb21wbGV0ZSA9IG51bGw7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgIE9wdGlvbjogRGlzcGxheSAmIFZpc2liaWxpdHlcblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgIC8qIFJlZmVyIHRvIFZlbG9jaXR5J3MgZG9jdW1lbnRhdGlvbiAoVmVsb2NpdHlKUy5vcmcvI2Rpc3BsYXlBbmRWaXNpYmlsaXR5KSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgZGlzcGxheSBhbmQgdmlzaWJpbGl0eSBvcHRpb25zJyBiZWhhdmlvci4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogV2Ugc3RyaWN0bHkgY2hlY2sgZm9yIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGZhbHNpbmVzcyBiZWNhdXNlIGRpc3BsYXkgYWNjZXB0cyBhbiBlbXB0eSBzdHJpbmcgdmFsdWUuICovXG5cdCAgICAgICAgICAgIGlmIChvcHRzLmRpc3BsYXkgIT09IHVuZGVmaW5lZCAmJiBvcHRzLmRpc3BsYXkgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIG9wdHMuZGlzcGxheSA9IG9wdHMuZGlzcGxheS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG5cblx0ICAgICAgICAgICAgICAgIC8qIFVzZXJzIGNhbiBwYXNzIGluIGEgc3BlY2lhbCBcImF1dG9cIiB2YWx1ZSB0byBpbnN0cnVjdCBWZWxvY2l0eSB0byBzZXQgdGhlIGVsZW1lbnQgdG8gaXRzIGRlZmF1bHQgZGlzcGxheSB2YWx1ZS4gKi9cblx0ICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpc3BsYXkgPT09IFwiYXV0b1wiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0cy5kaXNwbGF5ID0gVmVsb2NpdHkuQ1NTLlZhbHVlcy5nZXREaXNwbGF5VHlwZShlbGVtZW50KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChvcHRzLnZpc2liaWxpdHkgIT09IHVuZGVmaW5lZCAmJiBvcHRzLnZpc2liaWxpdHkgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIG9wdHMudmlzaWJpbGl0eSA9IG9wdHMudmlzaWJpbGl0eS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICBPcHRpb246IG1vYmlsZUhBXG5cdCAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgLyogV2hlbiBzZXQgdG8gdHJ1ZSwgYW5kIGlmIHRoaXMgaXMgYSBtb2JpbGUgZGV2aWNlLCBtb2JpbGVIQSBhdXRvbWF0aWNhbGx5IGVuYWJsZXMgaGFyZHdhcmUgYWNjZWxlcmF0aW9uICh2aWEgYSBudWxsIHRyYW5zZm9ybSBoYWNrKVxuXHQgICAgICAgICAgICAgICBvbiBhbmltYXRpbmcgZWxlbWVudHMuIEhBIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCBhdCB0aGUgY29tcGxldGlvbiBvZiBpdHMgYW5pbWF0aW9uLiAqL1xuXHQgICAgICAgICAgICAvKiBOb3RlOiBBbmRyb2lkIEdpbmdlcmJyZWFkIGRvZXNuJ3Qgc3VwcG9ydCBIQS4gSWYgYSBudWxsIHRyYW5zZm9ybSBoYWNrIChtb2JpbGVIQSkgaXMgaW4gZmFjdCBzZXQsIGl0IHdpbGwgcHJldmVudCBvdGhlciB0cmFuZm9ybSBzdWJwcm9wZXJ0aWVzIGZyb20gdGFraW5nIGVmZmVjdC4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhlIHVzZSBvZiBtb2JpbGVIQSBpbiBWZWxvY2l0eSdzIGRvY3VtZW50YXRpb246IFZlbG9jaXR5SlMub3JnLyNtb2JpbGVIQS4gKi9cblx0ICAgICAgICAgICAgb3B0cy5tb2JpbGVIQSA9IChvcHRzLm1vYmlsZUhBICYmIFZlbG9jaXR5LlN0YXRlLmlzTW9iaWxlICYmICFWZWxvY2l0eS5TdGF0ZS5pc0dpbmdlcmJyZWFkKTtcblxuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgUGFydCBJSTogUXVldWVpbmdcblx0ICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgLyogV2hlbiBhIHNldCBvZiBlbGVtZW50cyBpcyB0YXJnZXRlZCBieSBhIFZlbG9jaXR5IGNhbGwsIHRoZSBzZXQgaXMgYnJva2VuIHVwIGFuZCBlYWNoIGVsZW1lbnQgaGFzIHRoZSBjdXJyZW50IFZlbG9jaXR5IGNhbGwgaW5kaXZpZHVhbGx5IHF1ZXVlZCBvbnRvIGl0LlxuXHQgICAgICAgICAgICAgICBJbiB0aGlzIHdheSwgZWFjaCBlbGVtZW50J3MgZXhpc3RpbmcgcXVldWUgaXMgcmVzcGVjdGVkOyBzb21lIGVsZW1lbnRzIG1heSBhbHJlYWR5IGJlIGFuaW1hdGluZyBhbmQgYWNjb3JkaW5nbHkgc2hvdWxkIG5vdCBoYXZlIHRoaXMgY3VycmVudCBWZWxvY2l0eSBjYWxsIHRyaWdnZXJlZCBpbW1lZGlhdGVseS4gKi9cblx0ICAgICAgICAgICAgLyogSW4gZWFjaCBxdWV1ZSwgdHdlZW4gZGF0YSBpcyBwcm9jZXNzZWQgZm9yIGVhY2ggYW5pbWF0aW5nIHByb3BlcnR5IHRoZW4gcHVzaGVkIG9udG8gdGhlIGNhbGwtd2lkZSBjYWxscyBhcnJheS4gV2hlbiB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBzZXQgaGFzIGhhZCBpdHMgdHdlZW5zIHByb2Nlc3NlZCxcblx0ICAgICAgICAgICAgICAgdGhlIGNhbGwgYXJyYXkgaXMgcHVzaGVkIHRvIFZlbG9jaXR5LlN0YXRlLmNhbGxzIGZvciBsaXZlIHByb2Nlc3NpbmcgYnkgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB0aWNrLiAqL1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBidWlsZFF1ZXVlIChuZXh0KSB7XG5cblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICBPcHRpb246IEJlZ2luXG5cdCAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAvKiBUaGUgYmVnaW4gY2FsbGJhY2sgaXMgZmlyZWQgb25jZSBwZXIgY2FsbCAtLSBub3Qgb25jZSBwZXIgZWxlbWVuZXQgLS0gYW5kIGlzIHBhc3NlZCB0aGUgZnVsbCByYXcgRE9NIGVsZW1lbnQgc2V0IGFzIGJvdGggaXRzIGNvbnRleHQgYW5kIGl0cyBmaXJzdCBhcmd1bWVudC4gKi9cblx0ICAgICAgICAgICAgICAgIGlmIChvcHRzLmJlZ2luICYmIGVsZW1lbnRzSW5kZXggPT09IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAvKiBXZSB0aHJvdyBjYWxsYmFja3MgaW4gYSBzZXRUaW1lb3V0IHNvIHRoYXQgdGhyb3duIGVycm9ycyBkb24ndCBoYWx0IHRoZSBleGVjdXRpb24gb2YgVmVsb2NpdHkgaXRzZWxmLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuYmVnaW4uY2FsbChlbGVtZW50cywgZWxlbWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGVycm9yOyB9LCAxKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgVHdlZW4gRGF0YSBDb25zdHJ1Y3Rpb24gKGZvciBTY3JvbGwpXG5cdCAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgLyogTm90ZTogSW4gb3JkZXIgdG8gYmUgc3ViamVjdGVkIHRvIGNoYWluaW5nIGFuZCBhbmltYXRpb24gb3B0aW9ucywgc2Nyb2xsJ3MgdHdlZW5pbmcgaXMgcm91dGVkIHRocm91Z2ggVmVsb2NpdHkgYXMgaWYgaXQgd2VyZSBhIHN0YW5kYXJkIENTUyBwcm9wZXJ0eSBhbmltYXRpb24uICovXG5cdCAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcInNjcm9sbFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogVGhlIHNjcm9sbCBhY3Rpb24gdW5pcXVlbHkgdGFrZXMgYW4gb3B0aW9uYWwgXCJvZmZzZXRcIiBvcHRpb24gLS0gc3BlY2lmaWVkIGluIHBpeGVscyAtLSB0aGF0IG9mZnNldHMgdGhlIHRhcmdldGVkIHNjcm9sbCBwb3NpdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsRGlyZWN0aW9uID0gKC9eeCQvaS50ZXN0KG9wdHMuYXhpcykgPyBcIkxlZnRcIiA6IFwiVG9wXCIpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxPZmZzZXQgPSBwYXJzZUZsb2F0KG9wdHMub2Zmc2V0KSB8fCAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb3NpdGlvbkN1cnJlbnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvc2l0aW9uQ3VycmVudEFsdGVybmF0ZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9zaXRpb25FbmQ7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBTY3JvbGwgYWxzbyB1bmlxdWVseSB0YWtlcyBhbiBvcHRpb25hbCBcImNvbnRhaW5lclwiIG9wdGlvbiwgd2hpY2ggaW5kaWNhdGVzIHRoZSBwYXJlbnQgZWxlbWVudCB0aGF0IHNob3VsZCBiZSBzY3JvbGxlZCAtLVxuXHQgICAgICAgICAgICAgICAgICAgICAgIGFzIG9wcG9zZWQgdG8gdGhlIGJyb3dzZXIgd2luZG93IGl0c2VsZi4gVGhpcyBpcyB1c2VmdWwgZm9yIHNjcm9sbGluZyB0b3dhcmQgYW4gZWxlbWVudCB0aGF0J3MgaW5zaWRlIGFuIG92ZXJmbG93aW5nIHBhcmVudCBlbGVtZW50LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmNvbnRhaW5lcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBFbnN1cmUgdGhhdCBlaXRoZXIgYSBqUXVlcnkgb2JqZWN0IG9yIGEgcmF3IERPTSBlbGVtZW50IHdhcyBwYXNzZWQgaW4uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUeXBlLmlzV3JhcHBlZChvcHRzLmNvbnRhaW5lcikgfHwgVHlwZS5pc05vZGUob3B0cy5jb250YWluZXIpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFeHRyYWN0IHRoZSByYXcgRE9NIGVsZW1lbnQgZnJvbSB0aGUgalF1ZXJ5IHdyYXBwZXIuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmNvbnRhaW5lciA9IG9wdHMuY29udGFpbmVyWzBdIHx8IG9wdHMuY29udGFpbmVyO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogVW5saWtlIG90aGVyIHByb3BlcnRpZXMgaW4gVmVsb2NpdHksIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHBvc2l0aW9uIGlzIG5ldmVyIGNhY2hlZCBzaW5jZSBpdCBzbyBmcmVxdWVudGx5IGNoYW5nZXNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkdWUgdG8gdGhlIHVzZXIncyBuYXR1cmFsIGludGVyYWN0aW9uIHdpdGggdGhlIHBhZ2UpLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9zaXRpb25DdXJyZW50ID0gb3B0cy5jb250YWluZXJbXCJzY3JvbGxcIiArIHNjcm9sbERpcmVjdGlvbl07IC8qIEdFVCAqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiAkLnBvc2l0aW9uKCkgdmFsdWVzIGFyZSByZWxhdGl2ZSB0byB0aGUgY29udGFpbmVyJ3MgY3VycmVudGx5IHZpZXdhYmxlIGFyZWEgKHdpdGhvdXQgdGFraW5nIGludG8gYWNjb3VudCB0aGUgY29udGFpbmVyJ3MgdHJ1ZSBkaW1lbnNpb25zXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBzYXksIGZvciBleGFtcGxlLCBpZiB0aGUgY29udGFpbmVyIHdhcyBub3Qgb3ZlcmZsb3dpbmcpLiBUaHVzLCB0aGUgc2Nyb2xsIGVuZCB2YWx1ZSBpcyB0aGUgc3VtIG9mIHRoZSBjaGlsZCBlbGVtZW50J3MgcG9zaXRpb24gKmFuZCpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzY3JvbGwgY29udGFpbmVyJ3MgY3VycmVudCBzY3JvbGwgcG9zaXRpb24uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb3NpdGlvbkVuZCA9IChzY3JvbGxQb3NpdGlvbkN1cnJlbnQgKyAkKGVsZW1lbnQpLnBvc2l0aW9uKClbc2Nyb2xsRGlyZWN0aW9uLnRvTG93ZXJDYXNlKCldKSArIHNjcm9sbE9mZnNldDsgLyogR0VUICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIGEgdmFsdWUgb3RoZXIgdGhhbiBhIGpRdWVyeSBvYmplY3Qgb3IgYSByYXcgRE9NIGVsZW1lbnQgd2FzIHBhc3NlZCBpbiwgZGVmYXVsdCB0byBudWxsIHNvIHRoYXQgdGhpcyBvcHRpb24gaXMgaWdub3JlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuY29udGFpbmVyID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoZSB3aW5kb3cgaXRzZWxmIGlzIGJlaW5nIHNjcm9sbGVkIC0tIG5vdCBhIGNvbnRhaW5pbmcgZWxlbWVudCAtLSBwZXJmb3JtIGEgbGl2ZSBzY3JvbGwgcG9zaXRpb24gbG9va3VwIHVzaW5nXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhcHByb3ByaWF0ZSBjYWNoZWQgcHJvcGVydHkgbmFtZXMgKHdoaWNoIGRpZmZlciBiYXNlZCBvbiBicm93c2VyIHR5cGUpLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxQb3NpdGlvbkN1cnJlbnQgPSBWZWxvY2l0eS5TdGF0ZS5zY3JvbGxBbmNob3JbVmVsb2NpdHkuU3RhdGVbXCJzY3JvbGxQcm9wZXJ0eVwiICsgc2Nyb2xsRGlyZWN0aW9uXV07IC8qIEdFVCAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBXaGVuIHNjcm9sbGluZyB0aGUgYnJvd3NlciB3aW5kb3csIGNhY2hlIHRoZSBhbHRlcm5hdGUgYXhpcydzIGN1cnJlbnQgdmFsdWUgc2luY2Ugd2luZG93LnNjcm9sbFRvKCkgZG9lc24ndCBsZXQgdXMgY2hhbmdlIG9ubHkgb25lIHZhbHVlIGF0IGEgdGltZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsUG9zaXRpb25DdXJyZW50QWx0ZXJuYXRlID0gVmVsb2NpdHkuU3RhdGUuc2Nyb2xsQW5jaG9yW1ZlbG9jaXR5LlN0YXRlW1wic2Nyb2xsUHJvcGVydHlcIiArIChzY3JvbGxEaXJlY3Rpb24gPT09IFwiTGVmdFwiID8gXCJUb3BcIiA6IFwiTGVmdFwiKV1dOyAvKiBHRVQgKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBVbmxpa2UgJC5wb3NpdGlvbigpLCAkLm9mZnNldCgpIHZhbHVlcyBhcmUgcmVsYXRpdmUgdG8gdGhlIGJyb3dzZXIgd2luZG93J3MgdHJ1ZSBkaW1lbnNpb25zIC0tIG5vdCBtZXJlbHkgaXRzIGN1cnJlbnRseSB2aWV3YWJsZSBhcmVhIC0tXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGVyZWZvcmUgZW5kIHZhbHVlcyBkbyBub3QgbmVlZCB0byBiZSBjb21wb3VuZGVkIG9udG8gY3VycmVudCB2YWx1ZXMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFBvc2l0aW9uRW5kID0gJChlbGVtZW50KS5vZmZzZXQoKVtzY3JvbGxEaXJlY3Rpb24udG9Mb3dlckNhc2UoKV0gKyBzY3JvbGxPZmZzZXQ7IC8qIEdFVCAqL1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIFNpbmNlIHRoZXJlJ3Mgb25seSBvbmUgZm9ybWF0IHRoYXQgc2Nyb2xsJ3MgYXNzb2NpYXRlZCB0d2VlbnNDb250YWluZXIgY2FuIHRha2UsIHdlIGNyZWF0ZSBpdCBtYW51YWxseS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICB0d2VlbnNDb250YWluZXIgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbDoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdFByb3BlcnR5VmFsdWU6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogc2Nyb2xsUG9zaXRpb25DdXJyZW50LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlOiBzY3JvbGxQb3NpdGlvbkN1cnJlbnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZTogc2Nyb2xsUG9zaXRpb25FbmQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0VHlwZTogXCJcIixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogb3B0cy5lYXNpbmcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxEYXRhOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBvcHRzLmNvbnRhaW5lcixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHNjcm9sbERpcmVjdGlvbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGVWYWx1ZTogc2Nyb2xsUG9zaXRpb25DdXJyZW50QWx0ZXJuYXRlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnRcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKFZlbG9jaXR5LmRlYnVnKSBjb25zb2xlLmxvZyhcInR3ZWVuc0NvbnRhaW5lciAoc2Nyb2xsKTogXCIsIHR3ZWVuc0NvbnRhaW5lci5zY3JvbGwsIGVsZW1lbnQpO1xuXG5cdCAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICBUd2VlbiBEYXRhIENvbnN0cnVjdGlvbiAoZm9yIFJldmVyc2UpXG5cdCAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgIC8qIFJldmVyc2UgYWN0cyBsaWtlIGEgXCJzdGFydFwiIGFjdGlvbiBpbiB0aGF0IGEgcHJvcGVydHkgbWFwIGlzIGFuaW1hdGVkIHRvd2FyZC4gVGhlIG9ubHkgZGlmZmVyZW5jZSBpc1xuXHQgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgcHJvcGVydHkgbWFwIHVzZWQgZm9yIHJldmVyc2UgaXMgdGhlIGludmVyc2Ugb2YgdGhlIG1hcCB1c2VkIGluIHRoZSBwcmV2aW91cyBjYWxsLiBUaHVzLCB3ZSBtYW5pcHVsYXRlXG5cdCAgICAgICAgICAgICAgICAgICB0aGUgcHJldmlvdXMgY2FsbCB0byBjb25zdHJ1Y3Qgb3VyIG5ldyBtYXA6IHVzZSB0aGUgcHJldmlvdXMgbWFwJ3MgZW5kIHZhbHVlcyBhcyBvdXIgbmV3IG1hcCdzIHN0YXJ0IHZhbHVlcy4gQ29weSBvdmVyIGFsbCBvdGhlciBkYXRhLiAqL1xuXHQgICAgICAgICAgICAgICAgLyogTm90ZTogUmV2ZXJzZSBjYW4gYmUgZGlyZWN0bHkgY2FsbGVkIHZpYSB0aGUgXCJyZXZlcnNlXCIgcGFyYW1ldGVyLCBvciBpdCBjYW4gYmUgaW5kaXJlY3RseSB0cmlnZ2VyZWQgdmlhIHRoZSBsb29wIG9wdGlvbi4gKExvb3BzIGFyZSBjb21wb3NlZCBvZiBtdWx0aXBsZSByZXZlcnNlcy4pICovXG5cdCAgICAgICAgICAgICAgICAvKiBOb3RlOiBSZXZlcnNlIGNhbGxzIGRvIG5vdCBuZWVkIHRvIGJlIGNvbnNlY3V0aXZlbHkgY2hhaW5lZCBvbnRvIGEgY3VycmVudGx5LWFuaW1hdGluZyBlbGVtZW50IGluIG9yZGVyIHRvIG9wZXJhdGUgb24gY2FjaGVkIHZhbHVlcztcblx0ICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIG5vIGhhcm0gdG8gcmV2ZXJzZSBiZWluZyBjYWxsZWQgb24gYSBwb3RlbnRpYWxseSBzdGFsZSBkYXRhIGNhY2hlIHNpbmNlIHJldmVyc2UncyBiZWhhdmlvciBpcyBzaW1wbHkgZGVmaW5lZFxuXHQgICAgICAgICAgICAgICAgICAgYXMgcmV2ZXJ0aW5nIHRvIHRoZSBlbGVtZW50J3MgdmFsdWVzIGFzIHRoZXkgd2VyZSBwcmlvciB0byB0aGUgcHJldmlvdXMgKlZlbG9jaXR5KiBjYWxsLiAqL1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmV2ZXJzZVwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogQWJvcnQgaWYgdGhlcmUgaXMgbm8gcHJpb3IgYW5pbWF0aW9uIGRhdGEgdG8gcmV2ZXJzZSB0by4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIURhdGEoZWxlbWVudCkudHdlZW5zQ29udGFpbmVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIERlcXVldWUgdGhlIGVsZW1lbnQgc28gdGhhdCB0aGlzIHF1ZXVlIGVudHJ5IHJlbGVhc2VzIGl0c2VsZiBpbW1lZGlhdGVseSwgYWxsb3dpbmcgc3Vic2VxdWVudCBxdWV1ZSBlbnRyaWVzIHRvIHJ1bi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgJC5kZXF1ZXVlKGVsZW1lbnQsIG9wdHMucXVldWUpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIE9wdGlvbnMgUGFyc2luZ1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIGVsZW1lbnQgd2FzIGhpZGRlbiB2aWEgdGhlIGRpc3BsYXkgb3B0aW9uIGluIHRoZSBwcmV2aW91cyBjYWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZlcnQgZGlzcGxheSB0byBcImF1dG9cIiBwcmlvciB0byByZXZlcnNhbCBzbyB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgYWdhaW4uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEYXRhKGVsZW1lbnQpLm9wdHMuZGlzcGxheSA9PT0gXCJub25lXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGEoZWxlbWVudCkub3B0cy5kaXNwbGF5ID0gXCJhdXRvXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0YShlbGVtZW50KS5vcHRzLnZpc2liaWxpdHkgPT09IFwiaGlkZGVuXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGEoZWxlbWVudCkub3B0cy52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGUgbG9vcCBvcHRpb24gd2FzIHNldCBpbiB0aGUgcHJldmlvdXMgY2FsbCwgZGlzYWJsZSBpdCBzbyB0aGF0IFwicmV2ZXJzZVwiIGNhbGxzIGFyZW4ndCByZWN1cnNpdmVseSBnZW5lcmF0ZWQuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIEZ1cnRoZXIsIHJlbW92ZSB0aGUgcHJldmlvdXMgY2FsbCdzIGNhbGxiYWNrIG9wdGlvbnM7IHR5cGljYWxseSwgdXNlcnMgZG8gbm90IHdhbnQgdGhlc2UgdG8gYmUgcmVmaXJlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgRGF0YShlbGVtZW50KS5vcHRzLmxvb3AgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgRGF0YShlbGVtZW50KS5vcHRzLmJlZ2luID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgRGF0YShlbGVtZW50KS5vcHRzLmNvbXBsZXRlID0gbnVsbDtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBTaW5jZSB3ZSdyZSBleHRlbmRpbmcgYW4gb3B0cyBvYmplY3QgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGV4dGVuZGVkIHdpdGggdGhlIGRlZmF1bHRzIG9wdGlvbnMgb2JqZWN0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZSByZW1vdmUgbm9uLWV4cGxpY2l0bHktZGVmaW5lZCBwcm9wZXJ0aWVzIHRoYXQgYXJlIGF1dG8tYXNzaWduZWQgdmFsdWVzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuZWFzaW5nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0cy5lYXNpbmc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuZHVyYXRpb24pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRzLmR1cmF0aW9uO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogVGhlIG9wdHMgb2JqZWN0IHVzZWQgZm9yIHJldmVyc2FsIGlzIGFuIGV4dGVuc2lvbiBvZiB0aGUgb3B0aW9ucyBvYmplY3Qgb3B0aW9uYWxseSBwYXNzZWQgaW50byB0aGlzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2UgY2FsbCBwbHVzIHRoZSBvcHRpb25zIHVzZWQgaW4gdGhlIHByZXZpb3VzIFZlbG9jaXR5IGNhbGwuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMgPSAkLmV4dGVuZCh7fSwgRGF0YShlbGVtZW50KS5vcHRzLCBvcHRzKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBUd2VlbnMgQ29udGFpbmVyIFJlY29uc3RydWN0aW9uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogQ3JlYXRlIGEgZGVlcHkgY29weSAoaW5kaWNhdGVkIHZpYSB0aGUgdHJ1ZSBmbGFnKSBvZiB0aGUgcHJldmlvdXMgY2FsbCdzIHR3ZWVuc0NvbnRhaW5lci4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RUd2VlbnNDb250YWluZXIgPSAkLmV4dGVuZCh0cnVlLCB7fSwgRGF0YShlbGVtZW50KS50d2VlbnNDb250YWluZXIpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIE1hbmlwdWxhdGUgdGhlIHByZXZpb3VzIHR3ZWVuc0NvbnRhaW5lciBieSByZXBsYWNpbmcgaXRzIGVuZCB2YWx1ZXMgYW5kIGN1cnJlbnRWYWx1ZXMgd2l0aCBpdHMgc3RhcnQgdmFsdWVzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsYXN0VHdlZW4gaW4gbGFzdFR3ZWVuc0NvbnRhaW5lcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW4gYWRkaXRpb24gdG8gdHdlZW4gZGF0YSwgdHdlZW5zQ29udGFpbmVycyBjb250YWluIGFuIGVsZW1lbnQgcHJvcGVydHkgdGhhdCB3ZSBpZ25vcmUgaGVyZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0VHdlZW4gIT09IFwiZWxlbWVudFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RTdGFydFZhbHVlID0gbGFzdFR3ZWVuc0NvbnRhaW5lcltsYXN0VHdlZW5dLnN0YXJ0VmFsdWU7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0VHdlZW5zQ29udGFpbmVyW2xhc3RUd2Vlbl0uc3RhcnRWYWx1ZSA9IGxhc3RUd2VlbnNDb250YWluZXJbbGFzdFR3ZWVuXS5jdXJyZW50VmFsdWUgPSBsYXN0VHdlZW5zQ29udGFpbmVyW2xhc3RUd2Vlbl0uZW5kVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFR3ZWVuc0NvbnRhaW5lcltsYXN0VHdlZW5dLmVuZFZhbHVlID0gbGFzdFN0YXJ0VmFsdWU7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFYXNpbmcgaXMgdGhlIG9ubHkgb3B0aW9uIHRoYXQgZW1iZWRzIGludG8gdGhlIGluZGl2aWR1YWwgdHdlZW4gZGF0YSAoc2luY2UgaXQgY2FuIGJlIGRlZmluZWQgb24gYSBwZXItcHJvcGVydHkgYmFzaXMpLlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFjY29yZGluZ2x5LCBldmVyeSBwcm9wZXJ0eSdzIGVhc2luZyB2YWx1ZSBtdXN0IGJlIHVwZGF0ZWQgd2hlbiBhbiBvcHRpb25zIG9iamVjdCBpcyBwYXNzZWQgaW4gd2l0aCBhIHJldmVyc2UgY2FsbC5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgc2lkZSBlZmZlY3Qgb2YgdGhpcyBleHRlbnNpYmlsaXR5IGlzIHRoYXQgYWxsIHBlci1wcm9wZXJ0eSBlYXNpbmcgdmFsdWVzIGFyZSBmb3JjZWZ1bGx5IHJlc2V0IHRvIHRoZSBuZXcgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFUeXBlLmlzRW1wdHlPYmplY3Qob3B0aW9ucykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFR3ZWVuc0NvbnRhaW5lcltsYXN0VHdlZW5dLmVhc2luZyA9IG9wdHMuZWFzaW5nO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWZWxvY2l0eS5kZWJ1ZykgY29uc29sZS5sb2coXCJyZXZlcnNlIHR3ZWVuc0NvbnRhaW5lciAoXCIgKyBsYXN0VHdlZW4gKyBcIik6IFwiICsgSlNPTi5zdHJpbmdpZnkobGFzdFR3ZWVuc0NvbnRhaW5lcltsYXN0VHdlZW5dKSwgZWxlbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0d2VlbnNDb250YWluZXIgPSBsYXN0VHdlZW5zQ29udGFpbmVyO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICBUd2VlbiBEYXRhIENvbnN0cnVjdGlvbiAoZm9yIFN0YXJ0KVxuXHQgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInN0YXJ0XCIpIHtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlIFRyYW5zZmVycmluZ1xuXHQgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGlzIHF1ZXVlIGVudHJ5IGZvbGxvd3MgYSBwcmV2aW91cyBWZWxvY2l0eS1pbml0aWF0ZWQgcXVldWUgZW50cnkgKmFuZCogaWYgdGhpcyBlbnRyeSB3YXMgY3JlYXRlZFxuXHQgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIHRoZSBlbGVtZW50IHdhcyBpbiB0aGUgcHJvY2VzcyBvZiBiZWluZyBhbmltYXRlZCBieSBWZWxvY2l0eSwgdGhlbiB0aGlzIGN1cnJlbnQgY2FsbCBpcyBzYWZlIHRvIHVzZVxuXHQgICAgICAgICAgICAgICAgICAgICAgIHRoZSBlbmQgdmFsdWVzIGZyb20gdGhlIHByaW9yIGNhbGwgYXMgaXRzIHN0YXJ0IHZhbHVlcy4gVmVsb2NpdHkgYXR0ZW1wdHMgdG8gcGVyZm9ybSB0aGlzIHZhbHVlIHRyYW5zZmVyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VzcyB3aGVuZXZlciBwb3NzaWJsZSBpbiBvcmRlciB0byBhdm9pZCByZXF1ZXJ5aW5nIHRoZSBET00uICovXG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgdmFsdWVzIGFyZW4ndCB0cmFuc2ZlcnJlZCBmcm9tIGEgcHJpb3IgY2FsbCBhbmQgc3RhcnQgdmFsdWVzIHdlcmUgbm90IGZvcmNlZmVkIGJ5IHRoZSB1c2VyIChtb3JlIG9uIHRoaXMgYmVsb3cpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgIHRoZW4gdGhlIERPTSBpcyBxdWVyaWVkIGZvciB0aGUgZWxlbWVudCdzIGN1cnJlbnQgdmFsdWVzIGFzIGEgbGFzdCByZXNvcnQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogQ29udmVyc2VseSwgYW5pbWF0aW9uIHJldmVyc2FsIChhbmQgbG9vcGluZykgKmFsd2F5cyogcGVyZm9ybSBpbnRlci1jYWxsIHZhbHVlIHRyYW5zZmVyczsgdGhleSBuZXZlciByZXF1ZXJ5IHRoZSBET00uICovXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RUd2VlbnNDb250YWluZXI7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBUaGUgcGVyLWVsZW1lbnQgaXNBbmltYXRpbmcgZmxhZyBpcyB1c2VkIHRvIGluZGljYXRlIHdoZXRoZXIgaXQncyBzYWZlIChpLmUuIHRoZSBkYXRhIGlzbid0IHN0YWxlKVxuXHQgICAgICAgICAgICAgICAgICAgICAgIHRvIHRyYW5zZmVyIG92ZXIgZW5kIHZhbHVlcyB0byB1c2UgYXMgc3RhcnQgdmFsdWVzLiBJZiBpdCdzIHNldCB0byB0cnVlIGFuZCB0aGVyZSBpcyBhIHByZXZpb3VzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkgY2FsbCB0byBwdWxsIHZhbHVlcyBmcm9tLCBkbyBzby4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoRGF0YShlbGVtZW50KS50d2VlbnNDb250YWluZXIgJiYgRGF0YShlbGVtZW50KS5pc0FuaW1hdGluZyA9PT0gdHJ1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0VHdlZW5zQ29udGFpbmVyID0gRGF0YShlbGVtZW50KS50d2VlbnNDb250YWluZXI7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgICAgIFR3ZWVuIERhdGEgQ2FsY3VsYXRpb25cblx0ICAgICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBUaGlzIGZ1bmN0aW9uIHBhcnNlcyBwcm9wZXJ0eSBkYXRhIGFuZCBkZWZhdWx0cyBlbmRWYWx1ZSwgZWFzaW5nLCBhbmQgc3RhcnRWYWx1ZSBhcyBhcHByb3ByaWF0ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAvKiBQcm9wZXJ0eSBtYXAgdmFsdWVzIGNhbiBlaXRoZXIgdGFrZSB0aGUgZm9ybSBvZiAxKSBhIHNpbmdsZSB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIGVuZCB2YWx1ZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICBvciAyKSBhbiBhcnJheSBpbiB0aGUgZm9ybSBvZiBbIGVuZFZhbHVlLCBbLCBlYXNpbmddIFssIHN0YXJ0VmFsdWVdIF0uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgVGhlIG9wdGlvbmFsIHRoaXJkIHBhcmFtZXRlciBpcyBhIGZvcmNlZmVkIHN0YXJ0VmFsdWUgdG8gYmUgdXNlZCBpbnN0ZWFkIG9mIHF1ZXJ5aW5nIHRoZSBET00gZm9yXG5cdCAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVsZW1lbnQncyBjdXJyZW50IHZhbHVlLiBSZWFkIFZlbG9jaXR5J3MgZG9jbWVudGF0aW9uIHRvIGxlYXJuIG1vcmUgYWJvdXQgZm9yY2VmZWVkaW5nOiBWZWxvY2l0eUpTLm9yZy8jZm9yY2VmZWVkaW5nICovXG5cdCAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VQcm9wZXJ0eVZhbHVlICh2YWx1ZURhdGEsIHNraXBSZXNvbHZpbmdFYXNpbmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZFZhbHVlID0gdW5kZWZpbmVkLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nID0gdW5kZWZpbmVkLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBIYW5kbGUgdGhlIGFycmF5IGZvcm1hdCwgd2hpY2ggY2FuIGJlIHN0cnVjdHVyZWQgYXMgb25lIG9mIHRocmVlIHBvdGVudGlhbCBvdmVybG9hZHM6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIEEpIFsgZW5kVmFsdWUsIGVhc2luZywgc3RhcnRWYWx1ZSBdLCBCKSBbIGVuZFZhbHVlLCBlYXNpbmcgXSwgb3IgQykgWyBlbmRWYWx1ZSwgc3RhcnRWYWx1ZSBdICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUeXBlLmlzQXJyYXkodmFsdWVEYXRhKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZW5kVmFsdWUgaXMgYWx3YXlzIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheS4gRG9uJ3QgYm90aGVyIHZhbGlkYXRpbmcgZW5kVmFsdWUncyB2YWx1ZSBub3dcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmNlIHRoZSBlbnN1aW5nIHByb3BlcnR5IGN5Y2xpbmcgbG9naWMgZG9lcyB0aGF0LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWUgPSB2YWx1ZURhdGFbMF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFR3by1pdGVtIGFycmF5IGZvcm1hdDogSWYgdGhlIHNlY29uZCBpdGVtIGlzIGEgbnVtYmVyLCBmdW5jdGlvbiwgb3IgaGV4IHN0cmluZywgdHJlYXQgaXQgYXMgYVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgdmFsdWUgc2luY2UgZWFzaW5ncyBjYW4gb25seSBiZSBub24taGV4IHN0cmluZ3Mgb3IgYXJyYXlzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCghVHlwZS5pc0FycmF5KHZhbHVlRGF0YVsxXSkgJiYgL15bXFxkLV0vLnRlc3QodmFsdWVEYXRhWzFdKSkgfHwgVHlwZS5pc0Z1bmN0aW9uKHZhbHVlRGF0YVsxXSkgfHwgQ1NTLlJlZ0V4LmlzSGV4LnRlc3QodmFsdWVEYXRhWzFdKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSB2YWx1ZURhdGFbMV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBUd28gb3IgdGhyZWUtaXRlbSBhcnJheTogSWYgdGhlIHNlY29uZCBpdGVtIGlzIGEgbm9uLWhleCBzdHJpbmcgb3IgYW4gYXJyYXksIHRyZWF0IGl0IGFzIGFuIGVhc2luZy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKFR5cGUuaXNTdHJpbmcodmFsdWVEYXRhWzFdKSAmJiAhQ1NTLlJlZ0V4LmlzSGV4LnRlc3QodmFsdWVEYXRhWzFdKSkgfHwgVHlwZS5pc0FycmF5KHZhbHVlRGF0YVsxXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmcgPSBza2lwUmVzb2x2aW5nRWFzaW5nID8gdmFsdWVEYXRhWzFdIDogZ2V0RWFzaW5nKHZhbHVlRGF0YVsxXSwgb3B0cy5kdXJhdGlvbik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBEb24ndCBib3RoZXIgdmFsaWRhdGluZyBzdGFydFZhbHVlJ3MgdmFsdWUgbm93IHNpbmNlIHRoZSBlbnN1aW5nIHByb3BlcnR5IGN5Y2xpbmcgbG9naWMgaW5oZXJlbnRseSBkb2VzIHRoYXQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlRGF0YVsyXSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSB2YWx1ZURhdGFbMl07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBIYW5kbGUgdGhlIHNpbmdsZS12YWx1ZSBmb3JtYXQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IHZhbHVlRGF0YTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIERlZmF1bHQgdG8gdGhlIGNhbGwncyBlYXNpbmcgaWYgYSBwZXItcHJvcGVydHkgZWFzaW5nIHR5cGUgd2FzIG5vdCBkZWZpbmVkLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBSZXNvbHZpbmdFYXNpbmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZyA9IGVhc2luZyB8fCBvcHRzLmVhc2luZztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIGZ1bmN0aW9ucyB3ZXJlIHBhc3NlZCBpbiBhcyB2YWx1ZXMsIHBhc3MgdGhlIGZ1bmN0aW9uIHRoZSBjdXJyZW50IGVsZW1lbnQgYXMgaXRzIGNvbnRleHQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdXMgdGhlIGVsZW1lbnQncyBpbmRleCBhbmQgdGhlIGVsZW1lbnQgc2V0J3Mgc2l6ZSBhcyBhcmd1bWVudHMuIFRoZW4sIGFzc2lnbiB0aGUgcmV0dXJuZWQgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChUeXBlLmlzRnVuY3Rpb24oZW5kVmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLmNhbGwoZWxlbWVudCwgZWxlbWVudHNJbmRleCwgZWxlbWVudHNMZW5ndGgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFR5cGUuaXNGdW5jdGlvbihzdGFydFZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWUuY2FsbChlbGVtZW50LCBlbGVtZW50c0luZGV4LCBlbGVtZW50c0xlbmd0aCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBBbGxvdyBzdGFydFZhbHVlIHRvIGJlIGxlZnQgYXMgdW5kZWZpbmVkIHRvIGluZGljYXRlIHRvIHRoZSBlbnN1aW5nIGNvZGUgdGhhdCBpdHMgdmFsdWUgd2FzIG5vdCBmb3JjZWZlZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsgZW5kVmFsdWUgfHwgMCwgZWFzaW5nLCBzdGFydFZhbHVlIF07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogQ3ljbGUgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGluIHRoZSBtYXAsIGxvb2tpbmcgZm9yIHNob3J0aGFuZCBjb2xvciBwcm9wZXJ0aWVzIChlLmcuIFwiY29sb3JcIiBhcyBvcHBvc2VkIHRvIFwiY29sb3JSZWRcIikuIEluamVjdCB0aGUgY29ycmVzcG9uZGluZ1xuXHQgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yUmVkLCBjb2xvckdyZWVuLCBhbmQgY29sb3JCbHVlIFJHQiBjb21wb25lbnQgdHdlZW5zIGludG8gdGhlIHByb3BlcnRpZXNNYXAgKHdoaWNoIFZlbG9jaXR5IHVuZGVyc3RhbmRzKSBhbmQgcmVtb3ZlIHRoZSBzaG9ydGhhbmQgcHJvcGVydHkuICovXG5cdCAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHByb3BlcnRpZXNNYXAsIGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBGaW5kIHNob3J0aGFuZCBjb2xvciBwcm9wZXJ0aWVzIHRoYXQgaGF2ZSBiZWVuIHBhc3NlZCBhIGhleCBzdHJpbmcuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChSZWdFeHAoXCJeXCIgKyBDU1MuTGlzdHMuY29sb3JzLmpvaW4oXCIkfF5cIikgKyBcIiRcIikudGVzdChwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFBhcnNlIHRoZSB2YWx1ZSBkYXRhIGZvciBlYWNoIHNob3J0aGFuZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZURhdGEgPSBwYXJzZVByb3BlcnR5VmFsdWUodmFsdWUsIHRydWUpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFZhbHVlID0gdmFsdWVEYXRhWzBdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZyA9IHZhbHVlRGF0YVsxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFZhbHVlID0gdmFsdWVEYXRhWzJdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ1NTLlJlZ0V4LmlzSGV4LnRlc3QoZW5kVmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ29udmVydCB0aGUgaGV4IHN0cmluZ3MgaW50byB0aGVpciBSR0IgY29tcG9uZW50IGFycmF5cy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3JDb21wb25lbnRzID0gWyBcIlJlZFwiLCBcIkdyZWVuXCIsIFwiQmx1ZVwiIF0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFZhbHVlUkdCID0gQ1NTLlZhbHVlcy5oZXhUb1JnYihlbmRWYWx1ZSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWVSR0IgPSBzdGFydFZhbHVlID8gQ1NTLlZhbHVlcy5oZXhUb1JnYihzdGFydFZhbHVlKSA6IHVuZGVmaW5lZDtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEluamVjdCB0aGUgUkdCIGNvbXBvbmVudCB0d2VlbnMgaW50byBwcm9wZXJ0aWVzTWFwLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JDb21wb25lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhQXJyYXkgPSBbIGVuZFZhbHVlUkdCW2ldIF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVhc2luZykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUFycmF5LnB1c2goZWFzaW5nKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydFZhbHVlUkdCICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFBcnJheS5wdXNoKHN0YXJ0VmFsdWVSR0JbaV0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllc01hcFtwcm9wZXJ0eSArIGNvbG9yQ29tcG9uZW50c1tpXV0gPSBkYXRhQXJyYXk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVtb3ZlIHRoZSBpbnRlcm1lZGlhcnkgc2hvcnRoYW5kIHByb3BlcnR5IGVudHJ5IG5vdyB0aGF0IHdlJ3ZlIHByb2Nlc3NlZCBpdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJvcGVydGllc01hcFtwcm9wZXJ0eV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIENyZWF0ZSBhIHR3ZWVuIG91dCBvZiBlYWNoIHByb3BlcnR5LCBhbmQgYXBwZW5kIGl0cyBhc3NvY2lhdGVkIGRhdGEgdG8gdHdlZW5zQ29udGFpbmVyLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXNNYXApIHtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnQgVmFsdWUgU291cmNpbmdcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogUGFyc2Ugb3V0IGVuZFZhbHVlLCBlYXNpbmcsIGFuZCBzdGFydFZhbHVlIGZyb20gdGhlIHByb3BlcnR5J3MgZGF0YS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlRGF0YSA9IHBhcnNlUHJvcGVydHlWYWx1ZShwcm9wZXJ0aWVzTWFwW3Byb3BlcnR5XSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IHZhbHVlRGF0YVswXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZyA9IHZhbHVlRGF0YVsxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSB2YWx1ZURhdGFbMl07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogTm93IHRoYXQgdGhlIG9yaWdpbmFsIHByb3BlcnR5IG5hbWUncyBmb3JtYXQgaGFzIGJlZW4gdXNlZCBmb3IgdGhlIHBhcnNlUHJvcGVydHlWYWx1ZSgpIGxvb2t1cCBhYm92ZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgZm9yY2UgdGhlIHByb3BlcnR5IHRvIGl0cyBjYW1lbENhc2Ugc3R5bGluZyB0byBub3JtYWxpemUgaXQgZm9yIG1hbmlwdWxhdGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBDU1MuTmFtZXMuY2FtZWxDYXNlKHByb3BlcnR5KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBJbiBjYXNlIHRoaXMgcHJvcGVydHkgaXMgYSBob29rLCB0aGVyZSBhcmUgY2lyY3Vtc3RhbmNlcyB3aGVyZSB3ZSB3aWxsIGludGVuZCB0byB3b3JrIG9uIHRoZSBob29rJ3Mgcm9vdCBwcm9wZXJ0eSBhbmQgbm90IHRoZSBob29rZWQgc3VicHJvcGVydHkuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb290UHJvcGVydHkgPSBDU1MuSG9va3MuZ2V0Um9vdChwcm9wZXJ0eSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZSA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIE90aGVyIHRoYW4gZm9yIHRoZSBkdW1teSB0d2VlbiBwcm9wZXJ0eSwgcHJvcGVydGllcyB0aGF0IGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyIChhbmQgZG8gbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBub3JtYWxpemF0aW9uKSB3aWxsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyZW50bHkgcHJvZHVjZSBubyBzdHlsZSBjaGFuZ2VzIHdoZW4gc2V0LCBzbyB0aGV5IGFyZSBza2lwcGVkIGluIG9yZGVyIHRvIGRlY3JlYXNlIGFuaW1hdGlvbiB0aWNrIG92ZXJoZWFkLlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9wZXJ0eSBzdXBwb3J0IGlzIGRldGVybWluZWQgdmlhIHByZWZpeENoZWNrKCksIHdoaWNoIHJldHVybnMgYSBmYWxzZSBmbGFnIHdoZW4gbm8gc3VwcG9ydGVkIGlzIGRldGVjdGVkLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBOb3RlOiBTaW5jZSBTVkcgZWxlbWVudHMgaGF2ZSBzb21lIG9mIHRoZWlyIHByb3BlcnRpZXMgZGlyZWN0bHkgYXBwbGllZCBhcyBIVE1MIGF0dHJpYnV0ZXMsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIG5vIHdheSB0byBjaGVjayBmb3IgdGhlaXIgZXhwbGljaXQgYnJvd3NlciBzdXBwb3J0LCBhbmQgc28gd2Ugc2tpcCBza2lwIHRoaXMgY2hlY2sgZm9yIHRoZW0uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghRGF0YShlbGVtZW50KS5pc1NWRyAmJiByb290UHJvcGVydHkgIT09IFwidHdlZW5cIiAmJiBDU1MuTmFtZXMucHJlZml4Q2hlY2socm9vdFByb3BlcnR5KVsxXSA9PT0gZmFsc2UgJiYgQ1NTLk5vcm1hbGl6YXRpb25zLnJlZ2lzdGVyZWRbcm9vdFByb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVmVsb2NpdHkuZGVidWcpIGNvbnNvbGUubG9nKFwiU2tpcHBpbmcgW1wiICsgcm9vdFByb3BlcnR5ICsgXCJdIGR1ZSB0byBhIGxhY2sgb2YgYnJvd3NlciBzdXBwb3J0LlwiKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGUgZGlzcGxheSBvcHRpb24gaXMgYmVpbmcgc2V0IHRvIGEgbm9uLVwibm9uZVwiIChlLmcuIFwiYmxvY2tcIikgYW5kIG9wYWNpdHkgKGZpbHRlciBvbiBJRTw9OCkgaXMgYmVpbmdcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZWQgdG8gYW4gZW5kVmFsdWUgb2Ygbm9uLXplcm8sIHRoZSB1c2VyJ3MgaW50ZW50aW9uIGlzIHRvIGZhZGUgaW4gZnJvbSBpbnZpc2libGUsIHRodXMgd2UgZm9yY2VmZWVkIG9wYWNpdHlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBzdGFydFZhbHVlIG9mIDAgaWYgaXRzIHN0YXJ0VmFsdWUgaGFzbid0IGFscmVhZHkgYmVlbiBzb3VyY2VkIGJ5IHZhbHVlIHRyYW5zZmVycmluZyBvciBwcmlvciBmb3JjZWZlZWRpbmcuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKG9wdHMuZGlzcGxheSAhPT0gdW5kZWZpbmVkICYmIG9wdHMuZGlzcGxheSAhPT0gbnVsbCAmJiBvcHRzLmRpc3BsYXkgIT09IFwibm9uZVwiKSB8fCAob3B0cy52aXNpYmlsaXR5ICE9PSB1bmRlZmluZWQgJiYgb3B0cy52aXNpYmlsaXR5ICE9PSBcImhpZGRlblwiKSkgJiYgL29wYWNpdHl8ZmlsdGVyLy50ZXN0KHByb3BlcnR5KSAmJiAhc3RhcnRWYWx1ZSAmJiBlbmRWYWx1ZSAhPT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiB2YWx1ZXMgaGF2ZSBiZWVuIHRyYW5zZmVycmVkIGZyb20gdGhlIHByZXZpb3VzIFZlbG9jaXR5IGNhbGwsIGV4dHJhY3QgdGhlIGVuZFZhbHVlIGFuZCByb290UHJvcGVydHlWYWx1ZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgYWxsIG9mIHRoZSBjdXJyZW50IGNhbGwncyBwcm9wZXJ0aWVzIHRoYXQgd2VyZSAqYWxzbyogYW5pbWF0ZWQgaW4gdGhlIHByZXZpb3VzIGNhbGwuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IFZhbHVlIHRyYW5zZmVycmluZyBjYW4gb3B0aW9uYWxseSBiZSBkaXNhYmxlZCBieSB0aGUgdXNlciB2aWEgdGhlIF9jYWNoZVZhbHVlcyBvcHRpb24uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLl9jYWNoZVZhbHVlcyAmJiBsYXN0VHdlZW5zQ29udGFpbmVyICYmIGxhc3RUd2VlbnNDb250YWluZXJbcHJvcGVydHldKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IGxhc3RUd2VlbnNDb250YWluZXJbcHJvcGVydHldLmVuZFZhbHVlICsgbGFzdFR3ZWVuc0NvbnRhaW5lcltwcm9wZXJ0eV0udW5pdFR5cGU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFRoZSBwcmV2aW91cyBjYWxsJ3Mgcm9vdFByb3BlcnR5VmFsdWUgaXMgZXh0cmFjdGVkIGZyb20gdGhlIGVsZW1lbnQncyBkYXRhIGNhY2hlIHNpbmNlIHRoYXQncyB0aGVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlIG9mIHJvb3RQcm9wZXJ0eVZhbHVlIHRoYXQgZ2V0cyBmcmVzaGx5IHVwZGF0ZWQgYnkgdGhlIHR3ZWVuaW5nIHByb2Nlc3MsIHdoZXJlYXMgdGhlIHJvb3RQcm9wZXJ0eVZhbHVlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hlZCB0byB0aGUgaW5jb21pbmcgbGFzdFR3ZWVuc0NvbnRhaW5lciBpcyBlcXVhbCB0byB0aGUgcm9vdCBwcm9wZXJ0eSdzIHZhbHVlIHByaW9yIHRvIGFueSB0d2VlbmluZy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RQcm9wZXJ0eVZhbHVlID0gRGF0YShlbGVtZW50KS5yb290UHJvcGVydHlWYWx1ZUNhY2hlW3Jvb3RQcm9wZXJ0eV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHZhbHVlcyB3ZXJlIG5vdCB0cmFuc2ZlcnJlZCBmcm9tIGEgcHJldmlvdXMgVmVsb2NpdHkgY2FsbCwgcXVlcnkgdGhlIERPTSBhcyBuZWVkZWQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBIYW5kbGUgaG9va2VkIHByb3BlcnRpZXMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ1NTLkhvb2tzLnJlZ2lzdGVyZWRbcHJvcGVydHldKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RQcm9wZXJ0eVZhbHVlID0gQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgcm9vdFByb3BlcnR5KTsgLyogR0VUICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IFRoZSBmb2xsb3dpbmcgZ2V0UHJvcGVydHlWYWx1ZSgpIGNhbGwgZG9lcyBub3QgYWN0dWFsbHkgdHJpZ2dlciBhIERPTSBxdWVyeTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHdpbGwgZXh0cmFjdCB0aGUgaG9vayBmcm9tIHJvb3RQcm9wZXJ0eVZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFZhbHVlID0gQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgcHJvcGVydHksIHJvb3RQcm9wZXJ0eVZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiBzdGFydFZhbHVlIGlzIGFscmVhZHkgZGVmaW5lZCB2aWEgZm9yY2VmZWVkaW5nLCBkbyBub3QgcXVlcnkgdGhlIERPTSBmb3IgdGhlIHJvb3QgcHJvcGVydHkncyB2YWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdXN0IGdyYWIgcm9vdFByb3BlcnR5J3MgemVyby12YWx1ZSB0ZW1wbGF0ZSBmcm9tIENTUy5Ib29rcy4gVGhpcyBvdmVyd3JpdGVzIHRoZSBlbGVtZW50J3MgYWN0dWFsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdCBwcm9wZXJ0eSB2YWx1ZSAoaWYgb25lIGlzIHNldCksIGJ1dCB0aGlzIGlzIGFjY2VwdGFibGUgc2luY2UgdGhlIHByaW1hcnkgcmVhc29uIHVzZXJzIGZvcmNlZmVlZCBpc1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGF2b2lkIERPTSBxdWVyaWVzLCBhbmQgdGh1cyB3ZSBsaWtld2lzZSBhdm9pZCBxdWVyeWluZyB0aGUgRE9NIGZvciB0aGUgcm9vdCBwcm9wZXJ0eSdzIHZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEdyYWIgdGhpcyBob29rJ3MgemVyby12YWx1ZSB0ZW1wbGF0ZSwgZS5nLiBcIjBweCAwcHggMHB4IGJsYWNrXCIuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RQcm9wZXJ0eVZhbHVlID0gQ1NTLkhvb2tzLnRlbXBsYXRlc1tyb290UHJvcGVydHldWzFdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEhhbmRsZSBub24taG9va2VkIHByb3BlcnRpZXMgdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiBkZWZpbmVkIHZpYSBmb3JjZWZlZWRpbmcuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSBDU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSk7IC8qIEdFVCAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlIERhdGEgRXh0cmFjdGlvblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdGVkVmFsdWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZVVuaXRUeXBlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZVVuaXRUeXBlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IgPSBmYWxzZTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBTZXBhcmF0ZXMgYSBwcm9wZXJ0eSB2YWx1ZSBpbnRvIGl0cyBudW1lcmljIHZhbHVlIGFuZCBpdHMgdW5pdCB0eXBlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXBhcmF0ZVZhbHVlIChwcm9wZXJ0eSwgdmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bml0VHlwZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmljVmFsdWU7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyaWNWYWx1ZSA9ICh2YWx1ZSB8fCBcIjBcIilcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoKVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTWF0Y2ggdGhlIHVuaXQgdHlwZSBhdCB0aGUgZW5kIG9mIHRoZSB2YWx1ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvWyVBLXpdKyQvLCBmdW5jdGlvbihtYXRjaCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBHcmFiIHRoZSB1bml0IHR5cGUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRUeXBlID0gbWF0Y2g7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RyaXAgdGhlIHVuaXQgdHlwZSBvZmYgb2YgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiBubyB1bml0IHR5cGUgd2FzIHN1cHBsaWVkLCBhc3NpZ24gb25lIHRoYXQgaXMgYXBwcm9wcmlhdGUgZm9yIHRoaXMgcHJvcGVydHkgKGUuZy4gXCJkZWdcIiBmb3Igcm90YXRlWiBvciBcInB4XCIgZm9yIHdpZHRoKS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdW5pdFR5cGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0VHlwZSA9IENTUy5WYWx1ZXMuZ2V0VW5pdFR5cGUocHJvcGVydHkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBudW1lcmljVmFsdWUsIHVuaXRUeXBlIF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBTZXBhcmF0ZSBzdGFydFZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZWRWYWx1ZSA9IHNlcGFyYXRlVmFsdWUocHJvcGVydHksIHN0YXJ0VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFZhbHVlID0gc2VwYXJhdGVkVmFsdWVbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWVVbml0VHlwZSA9IHNlcGFyYXRlZFZhbHVlWzFdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNlcGFyYXRlIGVuZFZhbHVlLCBhbmQgZXh0cmFjdCBhIHZhbHVlIG9wZXJhdG9yIChlLmcuIFwiKz1cIiwgXCItPVwiKSBpZiBvbmUgZXhpc3RzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZWRWYWx1ZSA9IHNlcGFyYXRlVmFsdWUocHJvcGVydHksIGVuZFZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWUgPSBzZXBhcmF0ZWRWYWx1ZVswXS5yZXBsYWNlKC9eKFsrLVxcLypdKT0vLCBmdW5jdGlvbihtYXRjaCwgc3ViTWF0Y2gpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID0gc3ViTWF0Y2g7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0cmlwIHRoZSBvcGVyYXRvciBvZmYgb2YgdGhlIHZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZVVuaXRUeXBlID0gc2VwYXJhdGVkVmFsdWVbMV07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogUGFyc2UgZmxvYXQgdmFsdWVzIGZyb20gZW5kVmFsdWUgYW5kIHN0YXJ0VmFsdWUuIERlZmF1bHQgdG8gMCBpZiBOYU4gaXMgcmV0dXJuZWQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZFZhbHVlID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgfHwgMDtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb3BlcnR5LVNwZWNpZmljIFZhbHVlIENvbnZlcnNpb25cblx0ICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIEN1c3RvbSBzdXBwb3J0IGZvciBwcm9wZXJ0aWVzIHRoYXQgZG9uJ3QgYWN0dWFsbHkgYWNjZXB0IHRoZSAlIHVuaXQgdHlwZSwgYnV0IHdoZXJlIHBvbGx5ZmlsbGluZyBpcyB0cml2aWFsIGFuZCByZWxhdGl2ZWx5IGZvb2xwcm9vZi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZFZhbHVlVW5pdFR5cGUgPT09IFwiJVwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBICUtdmFsdWUgZm9udFNpemUvbGluZUhlaWdodCBpcyByZWxhdGl2ZSB0byB0aGUgcGFyZW50J3MgZm9udFNpemUgKGFzIG9wcG9zZWQgdG8gdGhlIHBhcmVudCdzIGRpbWVuc2lvbnMpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggaXMgaWRlbnRpY2FsIHRvIHRoZSBlbSB1bml0J3MgYmVoYXZpb3IsIHNvIHdlIHBpZ2d5YmFjayBvZmYgb2YgdGhhdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvXihmb250U2l6ZXxsaW5lSGVpZ2h0KSQvLnRlc3QocHJvcGVydHkpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQ29udmVydCAlIGludG8gYW4gZW0gZGVjaW1hbCB2YWx1ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlIC8gMTAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFZhbHVlVW5pdFR5cGUgPSBcImVtXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBGb3Igc2NhbGVYIGFuZCBzY2FsZVksIGNvbnZlcnQgdGhlIHZhbHVlIGludG8gaXRzIGRlY2ltYWwgZm9ybWF0IGFuZCBzdHJpcCBvZmYgdGhlIHVuaXQgdHlwZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL15zY2FsZS8udGVzdChwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlIC8gMTAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFZhbHVlVW5pdFR5cGUgPSBcIlwiO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRm9yIFJHQiBjb21wb25lbnRzLCB0YWtlIHRoZSBkZWZpbmVkIHBlcmNlbnRhZ2Ugb2YgMjU1IGFuZCBzdHJpcCBvZmYgdGhlIHVuaXQgdHlwZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoLyhSZWR8R3JlZW58Qmx1ZSkkL2kudGVzdChwcm9wZXJ0eSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IChlbmRWYWx1ZSAvIDEwMCkgKiAyNTU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWVVbml0VHlwZSA9IFwiXCI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIFVuaXQgUmF0aW8gQ2FsY3VsYXRpb25cblx0ICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIFdoZW4gcXVlcmllZCwgdGhlIGJyb3dzZXIgcmV0dXJucyAobW9zdCkgQ1NTIHByb3BlcnR5IHZhbHVlcyBpbiBwaXhlbHMuIFRoZXJlZm9yZSwgaWYgYW4gZW5kVmFsdWUgd2l0aCBhIHVuaXQgdHlwZSBvZlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAlLCBlbSwgb3IgcmVtIGlzIGFuaW1hdGVkIHRvd2FyZCwgc3RhcnRWYWx1ZSBtdXN0IGJlIGNvbnZlcnRlZCBmcm9tIHBpeGVscyBpbnRvIHRoZSBzYW1lIHVuaXQgdHlwZSBhcyBlbmRWYWx1ZSBpbiBvcmRlclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdmFsdWUgbWFuaXB1bGF0aW9uIGxvZ2ljIChpbmNyZW1lbnQvZGVjcmVtZW50KSB0byBwcm9jZWVkLiBGdXJ0aGVyLCBpZiB0aGUgc3RhcnRWYWx1ZSB3YXMgZm9yY2VmZWQgb3IgdHJhbnNmZXJyZWRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBhIHByZXZpb3VzIGNhbGwsIHN0YXJ0VmFsdWUgbWF5IGFsc28gbm90IGJlIGluIHBpeGVscy4gVW5pdCBjb252ZXJzaW9uIGxvZ2ljIHRoZXJlZm9yZSBjb25zaXN0cyBvZiB0d28gc3RlcHM6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIDEpIENhbGN1bGF0aW5nIHRoZSByYXRpbyBvZiAlL2VtL3JlbS92aC92dyByZWxhdGl2ZSB0byBwaXhlbHNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgMikgQ29udmVydGluZyBzdGFydFZhbHVlIGludG8gdGhlIHNhbWUgdW5pdCBvZiBtZWFzdXJlbWVudCBhcyBlbmRWYWx1ZSBiYXNlZCBvbiB0aGVzZSByYXRpb3MuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIFVuaXQgY29udmVyc2lvbiByYXRpb3MgYXJlIGNhbGN1bGF0ZWQgYnkgaW5zZXJ0aW5nIGEgc2libGluZyBub2RlIG5leHQgdG8gdGhlIHRhcmdldCBub2RlLCBjb3B5aW5nIG92ZXIgaXRzIHBvc2l0aW9uIHByb3BlcnR5LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nIHZhbHVlcyB3aXRoIHRoZSB0YXJnZXQgdW5pdCB0eXBlIHRoZW4gY29tcGFyaW5nIHRoZSByZXR1cm5lZCBwaXhlbCB2YWx1ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogRXZlbiBpZiBvbmx5IG9uZSBvZiB0aGVzZSB1bml0IHR5cGVzIGlzIGJlaW5nIGFuaW1hdGVkLCBhbGwgdW5pdCByYXRpb3MgYXJlIGNhbGN1bGF0ZWQgYXQgb25jZSBzaW5jZSB0aGUgb3ZlcmhlYWRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgYmF0Y2hpbmcgdGhlIFNFVHMgYW5kIEdFVHMgdG9nZXRoZXIgdXBmcm9udCBvdXR3ZWlnaHRzIHRoZSBwb3RlbnRpYWwgb3ZlcmhlYWRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgbGF5b3V0IHRocmFzaGluZyBjYXVzZWQgYnkgcmUtcXVlcnlpbmcgZm9yIHVuY2FsY3VsYXRlZCByYXRpb3MgZm9yIHN1YnNlcXVlbnRseS1wcm9jZXNzZWQgcHJvcGVydGllcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogVG9kbzogU2hpZnQgdGhpcyBsb2dpYyBpbnRvIHRoZSBjYWxscycgZmlyc3QgdGljayBpbnN0YW5jZSBzbyB0aGF0IGl0J3Mgc3luY2VkIHdpdGggUkFGLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVVbml0UmF0aW9zICgpIHtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhbWUgUmF0aW8gQ2hlY2tzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFRoZSBwcm9wZXJ0aWVzIGJlbG93IGFyZSB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBlbGVtZW50IGRpZmZlcnMgc3VmZmljaWVudGx5IGZyb20gdGhpcyBjYWxsJ3Ncblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzbHkgaXRlcmF0ZWQgZWxlbWVudCB0byBhbHNvIGRpZmZlciBpbiBpdHMgdW5pdCBjb252ZXJzaW9uIHJhdGlvcy4gSWYgdGhlIHByb3BlcnRpZXMgbWF0Y2ggdXAgd2l0aCB0aG9zZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHByaW9yIGVsZW1lbnQsIHRoZSBwcmlvciBlbGVtZW50J3MgY29udmVyc2lvbiByYXRpb3MgYXJlIHVzZWQuIExpa2UgbW9zdCBvcHRpbWl6YXRpb25zIGluIFZlbG9jaXR5LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBpcyBkb25lIHRvIG1pbmltaXplIERPTSBxdWVyeWluZy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzYW1lUmF0aW9JbmRpY2F0b3JzID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBteVBhcmVudDogZWxlbWVudC5wYXJlbnROb2RlIHx8IGRvY3VtZW50LmJvZHksIC8qIEdFVCAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogQ1NTLmdldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJwb3NpdGlvblwiKSwgLyogR0VUICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBDU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcImZvbnRTaXplXCIpIC8qIEdFVCAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRGV0ZXJtaW5lIGlmIHRoZSBzYW1lICUgcmF0aW8gY2FuIGJlIHVzZWQuICUgaXMgYmFzZWQgb24gdGhlIGVsZW1lbnQncyBwb3NpdGlvbiB2YWx1ZSBhbmQgaXRzIHBhcmVudCdzIHdpZHRoIGFuZCBoZWlnaHQgZGltZW5zaW9ucy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lUGVyY2VudFJhdGlvID0gKChzYW1lUmF0aW9JbmRpY2F0b3JzLnBvc2l0aW9uID09PSBjYWxsVW5pdENvbnZlcnNpb25EYXRhLmxhc3RQb3NpdGlvbikgJiYgKHNhbWVSYXRpb0luZGljYXRvcnMubXlQYXJlbnQgPT09IGNhbGxVbml0Q29udmVyc2lvbkRhdGEubGFzdFBhcmVudCkpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIERldGVybWluZSBpZiB0aGUgc2FtZSBlbSByYXRpbyBjYW4gYmUgdXNlZC4gZW0gaXMgcmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQncyBmb250U2l6ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lRW1SYXRpbyA9IChzYW1lUmF0aW9JbmRpY2F0b3JzLmZvbnRTaXplID09PSBjYWxsVW5pdENvbnZlcnNpb25EYXRhLmxhc3RGb250U2l6ZSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFN0b3JlIHRoZXNlIHJhdGlvIGluZGljYXRvcnMgY2FsbC13aWRlIGZvciB0aGUgbmV4dCBlbGVtZW50IHRvIGNvbXBhcmUgYWdhaW5zdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxVbml0Q29udmVyc2lvbkRhdGEubGFzdFBhcmVudCA9IHNhbWVSYXRpb0luZGljYXRvcnMubXlQYXJlbnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsVW5pdENvbnZlcnNpb25EYXRhLmxhc3RQb3NpdGlvbiA9IHNhbWVSYXRpb0luZGljYXRvcnMucG9zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsVW5pdENvbnZlcnNpb25EYXRhLmxhc3RGb250U2l6ZSA9IHNhbWVSYXRpb0luZGljYXRvcnMuZm9udFNpemU7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVsZW1lbnQtU3BlY2lmaWMgVW5pdHNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogSUU4IHJvdW5kcyB0byB0aGUgbmVhcmVzdCBwaXhlbCB3aGVuIHJldHVybmluZyBDU1MgdmFsdWVzLCB0aHVzIHdlIHBlcmZvcm0gY29udmVyc2lvbnMgdXNpbmcgYSBtZWFzdXJlbWVudFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgMTAwIChpbnN0ZWFkIG9mIDEpIHRvIGdpdmUgb3VyIHJhdGlvcyBhIHByZWNpc2lvbiBvZiBhdCBsZWFzdCAyIGRlY2ltYWwgdmFsdWVzLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lYXN1cmVtZW50ID0gMTAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRSYXRpb3MgPSB7fTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzYW1lRW1SYXRpbyB8fCAhc2FtZVBlcmNlbnRSYXRpbykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1teSA9IERhdGEoZWxlbWVudCkuaXNTVkcgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInJlY3RcIikgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuaW5pdChkdW1teSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtZVJhdGlvSW5kaWNhdG9ycy5teVBhcmVudC5hcHBlbmRDaGlsZChkdW1teSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBUbyBhY2N1cmF0ZWx5IGFuZCBjb25zaXN0ZW50bHkgY2FsY3VsYXRlIGNvbnZlcnNpb24gcmF0aW9zLCB0aGUgZWxlbWVudCdzIGNhc2NhZGVkIG92ZXJmbG93IGFuZCBib3gtc2l6aW5nIGFyZSBzdHJpcHBlZC5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaW1pbGFybHksIHNpbmNlIHdpZHRoL2hlaWdodCBjYW4gYmUgYXJ0aWZpY2lhbGx5IGNvbnN0cmFpbmVkIGJ5IHRoZWlyIG1pbi0vbWF4LSBlcXVpdmFsZW50cywgdGhlc2UgYXJlIGNvbnRyb2xsZWQgZm9yIGFzIHdlbGwuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogT3ZlcmZsb3cgbXVzdCBiZSBhbHNvIGJlIGNvbnRyb2xsZWQgZm9yIHBlci1heGlzIHNpbmNlIHRoZSBvdmVyZmxvdyBwcm9wZXJ0eSBvdmVyd3JpdGVzIGl0cyBwZXItYXhpcyB2YWx1ZXMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKFsgXCJvdmVyZmxvd1wiLCBcIm92ZXJmbG93WFwiLCBcIm92ZXJmbG93WVwiIF0sIGZ1bmN0aW9uKGksIHByb3BlcnR5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlbG9jaXR5LkNTUy5zZXRQcm9wZXJ0eVZhbHVlKGR1bW15LCBwcm9wZXJ0eSwgXCJoaWRkZW5cIik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuQ1NTLnNldFByb3BlcnR5VmFsdWUoZHVtbXksIFwicG9zaXRpb25cIiwgc2FtZVJhdGlvSW5kaWNhdG9ycy5wb3NpdGlvbik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuQ1NTLnNldFByb3BlcnR5VmFsdWUoZHVtbXksIFwiZm9udFNpemVcIiwgc2FtZVJhdGlvSW5kaWNhdG9ycy5mb250U2l6ZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuQ1NTLnNldFByb3BlcnR5VmFsdWUoZHVtbXksIFwiYm94U2l6aW5nXCIsIFwiY29udGVudC1ib3hcIik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB3aWR0aCBhbmQgaGVpZ2h0IGFjdCBhcyBvdXIgcHJveHkgcHJvcGVydGllcyBmb3IgbWVhc3VyaW5nIHRoZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCAlIHJhdGlvcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goWyBcIm1pbldpZHRoXCIsIFwibWF4V2lkdGhcIiwgXCJ3aWR0aFwiLCBcIm1pbkhlaWdodFwiLCBcIm1heEhlaWdodFwiLCBcImhlaWdodFwiIF0sIGZ1bmN0aW9uKGksIHByb3BlcnR5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlbG9jaXR5LkNTUy5zZXRQcm9wZXJ0eVZhbHVlKGR1bW15LCBwcm9wZXJ0eSwgbWVhc3VyZW1lbnQgKyBcIiVcIik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcGFkZGluZ0xlZnQgYXJiaXRyYXJpbHkgYWN0cyBhcyBvdXIgcHJveHkgcHJvcGVydHkgZm9yIHRoZSBlbSByYXRpby4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZWxvY2l0eS5DU1Muc2V0UHJvcGVydHlWYWx1ZShkdW1teSwgXCJwYWRkaW5nTGVmdFwiLCBtZWFzdXJlbWVudCArIFwiZW1cIik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBEaXZpZGUgdGhlIHJldHVybmVkIHZhbHVlIGJ5IHRoZSBtZWFzdXJlbWVudCB0byBnZXQgdGhlIHJhdGlvIGJldHdlZW4gMSUgYW5kIDFweC4gRGVmYXVsdCB0byAxIHNpbmNlIHdvcmtpbmcgd2l0aCAwIGNhbiBwcm9kdWNlIEluZmluaXRlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRSYXRpb3MucGVyY2VudFRvUHhXaWR0aCA9IGNhbGxVbml0Q29udmVyc2lvbkRhdGEubGFzdFBlcmNlbnRUb1B4V2lkdGggPSAocGFyc2VGbG9hdChDU1MuZ2V0UHJvcGVydHlWYWx1ZShkdW1teSwgXCJ3aWR0aFwiLCBudWxsLCB0cnVlKSkgfHwgMSkgLyBtZWFzdXJlbWVudDsgLyogR0VUICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdFJhdGlvcy5wZXJjZW50VG9QeEhlaWdodCA9IGNhbGxVbml0Q29udmVyc2lvbkRhdGEubGFzdFBlcmNlbnRUb1B4SGVpZ2h0ID0gKHBhcnNlRmxvYXQoQ1NTLmdldFByb3BlcnR5VmFsdWUoZHVtbXksIFwiaGVpZ2h0XCIsIG51bGwsIHRydWUpKSB8fCAxKSAvIG1lYXN1cmVtZW50OyAvKiBHRVQgKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0UmF0aW9zLmVtVG9QeCA9IGNhbGxVbml0Q29udmVyc2lvbkRhdGEubGFzdEVtVG9QeCA9IChwYXJzZUZsb2F0KENTUy5nZXRQcm9wZXJ0eVZhbHVlKGR1bW15LCBcInBhZGRpbmdMZWZ0XCIpKSB8fCAxKSAvIG1lYXN1cmVtZW50OyAvKiBHRVQgKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVSYXRpb0luZGljYXRvcnMubXlQYXJlbnQucmVtb3ZlQ2hpbGQoZHVtbXkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0UmF0aW9zLmVtVG9QeCA9IGNhbGxVbml0Q29udmVyc2lvbkRhdGEubGFzdEVtVG9QeDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0UmF0aW9zLnBlcmNlbnRUb1B4V2lkdGggPSBjYWxsVW5pdENvbnZlcnNpb25EYXRhLmxhc3RQZXJjZW50VG9QeFdpZHRoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRSYXRpb3MucGVyY2VudFRvUHhIZWlnaHQgPSBjYWxsVW5pdENvbnZlcnNpb25EYXRhLmxhc3RQZXJjZW50VG9QeEhlaWdodDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWxlbWVudC1BZ25vc3RpYyBVbml0c1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBXaGVyZWFzICUgYW5kIGVtIHJhdGlvcyBhcmUgZGV0ZXJtaW5lZCBvbiBhIHBlci1lbGVtZW50IGJhc2lzLCB0aGUgcmVtIHVuaXQgb25seSBuZWVkcyB0byBiZSBjaGVja2VkXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNlIHBlciBjYWxsIHNpbmNlIGl0J3MgZXhjbHVzaXZlbHkgZGVwZW5kYW50IHVwb24gZG9jdW1lbnQuYm9keSdzIGZvbnRTaXplLiBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGNhbGN1bGF0ZVVuaXRSYXRpb3MoKSBpcyBiZWluZyBydW4gZHVyaW5nIHRoaXMgY2FsbCwgcmVtVG9QeCB3aWxsIHN0aWxsIGJlIHNldCB0byBpdHMgZGVmYXVsdCB2YWx1ZSBvZiBudWxsLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc28gd2UgY2FsY3VsYXRlIGl0IG5vdy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsVW5pdENvbnZlcnNpb25EYXRhLnJlbVRvUHggPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBEZWZhdWx0IHRvIGJyb3dzZXJzJyBkZWZhdWx0IGZvbnRTaXplIG9mIDE2cHggaW4gdGhlIGNhc2Ugb2YgMC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsVW5pdENvbnZlcnNpb25EYXRhLnJlbVRvUHggPSBwYXJzZUZsb2F0KENTUy5nZXRQcm9wZXJ0eVZhbHVlKGRvY3VtZW50LmJvZHksIFwiZm9udFNpemVcIikpIHx8IDE2OyAvKiBHRVQgKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU2ltaWxhcmx5LCB2aWV3cG9ydCB1bml0cyBhcmUgJS1yZWxhdGl2ZSB0byB0aGUgd2luZG93J3MgaW5uZXIgZGltZW5zaW9ucy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsVW5pdENvbnZlcnNpb25EYXRhLnZ3VG9QeCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxVbml0Q29udmVyc2lvbkRhdGEudndUb1B4ID0gcGFyc2VGbG9hdCh3aW5kb3cuaW5uZXJXaWR0aCkgLyAxMDA7IC8qIEdFVCAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxVbml0Q29udmVyc2lvbkRhdGEudmhUb1B4ID0gcGFyc2VGbG9hdCh3aW5kb3cuaW5uZXJIZWlnaHQpIC8gMTAwOyAvKiBHRVQgKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdFJhdGlvcy5yZW1Ub1B4ID0gY2FsbFVuaXRDb252ZXJzaW9uRGF0YS5yZW1Ub1B4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdFJhdGlvcy52d1RvUHggPSBjYWxsVW5pdENvbnZlcnNpb25EYXRhLnZ3VG9QeDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRSYXRpb3MudmhUb1B4ID0gY2FsbFVuaXRDb252ZXJzaW9uRGF0YS52aFRvUHg7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWZWxvY2l0eS5kZWJ1ZyA+PSAxKSBjb25zb2xlLmxvZyhcIlVuaXQgcmF0aW9zOiBcIiArIEpTT04uc3RyaW5naWZ5KHVuaXRSYXRpb3MpLCBlbGVtZW50KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuaXRSYXRpb3M7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgVW5pdCBDb252ZXJzaW9uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIFRoZSAqIGFuZCAvIG9wZXJhdG9ycywgd2hpY2ggYXJlIG5vdCBwYXNzZWQgaW4gd2l0aCBhbiBhc3NvY2lhdGVkIHVuaXQsIGluaGVyZW50bHkgdXNlIHN0YXJ0VmFsdWUncyB1bml0LiBTa2lwIHZhbHVlIGFuZCB1bml0IGNvbnZlcnNpb24uICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvW1xcLypdLy50ZXN0KG9wZXJhdG9yKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWVVbml0VHlwZSA9IHN0YXJ0VmFsdWVVbml0VHlwZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogSWYgc3RhcnRWYWx1ZSBhbmQgZW5kVmFsdWUgZGlmZmVyIGluIHVuaXQgdHlwZSwgY29udmVydCBzdGFydFZhbHVlIGludG8gdGhlIHNhbWUgdW5pdCB0eXBlIGFzIGVuZFZhbHVlIHNvIHRoYXQgaWYgZW5kVmFsdWVVbml0VHlwZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhIHJlbGF0aXZlIHVuaXQgKCUsIGVtLCByZW0pLCB0aGUgdmFsdWVzIHNldCBkdXJpbmcgdHdlZW5pbmcgd2lsbCBjb250aW51ZSB0byBiZSBhY2N1cmF0ZWx5IHJlbGF0aXZlIGV2ZW4gaWYgdGhlIG1ldHJpY3MgdGhleSBkZXBlbmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gYXJlIGR5bmFtaWNhbGx5IGNoYW5naW5nIGR1cmluZyB0aGUgY291cnNlIG9mIHRoZSBhbmltYXRpb24uIENvbnZlcnNlbHksIGlmIHdlIGFsd2F5cyBub3JtYWxpemVkIGludG8gcHggYW5kIHVzZWQgcHggZm9yIHNldHRpbmcgdmFsdWVzLCB0aGUgcHggcmF0aW9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgd291bGQgYmVjb21lIHN0YWxlIGlmIHRoZSBvcmlnaW5hbCB1bml0IGJlaW5nIGFuaW1hdGVkIHRvd2FyZCB3YXMgcmVsYXRpdmUgYW5kIHRoZSB1bmRlcmx5aW5nIG1ldHJpY3MgY2hhbmdlIGR1cmluZyB0aGUgYW5pbWF0aW9uLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBTaW5jZSAwIGlzIDAgaW4gYW55IHVuaXQgdHlwZSwgbm8gY29udmVyc2lvbiBpcyBuZWNlc3Nhcnkgd2hlbiBzdGFydFZhbHVlIGlzIDAgLS0gd2UganVzdCBzdGFydCBhdCAwIHdpdGggZW5kVmFsdWVVbml0VHlwZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoc3RhcnRWYWx1ZVVuaXRUeXBlICE9PSBlbmRWYWx1ZVVuaXRUeXBlKSAmJiBzdGFydFZhbHVlICE9PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBVbml0IGNvbnZlcnNpb24gaXMgYWxzbyBza2lwcGVkIHdoZW4gZW5kVmFsdWUgaXMgMCwgYnV0ICpzdGFydFZhbHVlVW5pdFR5cGUqIG11c3QgYmUgdXNlZCBmb3IgdHdlZW4gdmFsdWVzIHRvIHJlbWFpbiBhY2N1cmF0ZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IFNraXBwaW5nIHVuaXQgY29udmVyc2lvbiBoZXJlIG1lYW5zIHRoYXQgaWYgZW5kVmFsdWVVbml0VHlwZSB3YXMgb3JpZ2luYWxseSBhIHJlbGF0aXZlIHVuaXQsIHRoZSBhbmltYXRpb24gd29uJ3QgcmVsYXRpdmVseVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggdGhlIHVuZGVybHlpbmcgbWV0cmljcyBpZiB0aGV5IGNoYW5nZSwgYnV0IHRoaXMgaXMgYWNjZXB0YWJsZSBzaW5jZSB3ZSdyZSBhbmltYXRpbmcgdG93YXJkIGludmlzaWJpbGl0eSBpbnN0ZWFkIG9mIHRvd2FyZCB2aXNpYmlsaXR5LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggcmVtYWlucyBwYXN0IHRoZSBwb2ludCBvZiB0aGUgYW5pbWF0aW9uJ3MgY29tcGxldGlvbi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmRWYWx1ZSA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFZhbHVlVW5pdFR5cGUgPSBzdGFydFZhbHVlVW5pdFR5cGU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEJ5IHRoaXMgcG9pbnQsIHdlIGNhbm5vdCBhdm9pZCB1bml0IGNvbnZlcnNpb24gKGl0J3MgdW5kZXNpcmFibGUgc2luY2UgaXQgY2F1c2VzIGxheW91dCB0aHJhc2hpbmcpLlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHdlIGhhdmVuJ3QgYWxyZWFkeSwgd2UgdHJpZ2dlciBjYWxjdWxhdGVVbml0UmF0aW9zKCksIHdoaWNoIHJ1bnMgb25jZSBwZXIgZWxlbWVudCBwZXIgY2FsbC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50VW5pdENvbnZlcnNpb25EYXRhID0gZWxlbWVudFVuaXRDb252ZXJzaW9uRGF0YSB8fCBjYWxjdWxhdGVVbml0UmF0aW9zKCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBUaGUgZm9sbG93aW5nIFJlZ0V4IG1hdGNoZXMgQ1NTIHByb3BlcnRpZXMgdGhhdCBoYXZlIHRoZWlyICUgdmFsdWVzIG1lYXN1cmVkIHJlbGF0aXZlIHRvIHRoZSB4LWF4aXMuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogVzNDIHNwZWMgbWFuZGF0ZXMgdGhhdCBhbGwgb2YgbWFyZ2luIGFuZCBwYWRkaW5nJ3MgcHJvcGVydGllcyAoZXZlbiB0b3AgYW5kIGJvdHRvbSkgYXJlICUtcmVsYXRpdmUgdG8gdGhlICp3aWR0aCogb2YgdGhlIHBhcmVudCBlbGVtZW50LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBheGlzID0gKC9tYXJnaW58cGFkZGluZ3xsZWZ0fHJpZ2h0fHdpZHRofHRleHR8d29yZHxsZXR0ZXIvaS50ZXN0KHByb3BlcnR5KSB8fCAvWCQvLnRlc3QocHJvcGVydHkpIHx8IHByb3BlcnR5ID09PSBcInhcIikgPyBcInhcIiA6IFwieVwiO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW4gb3JkZXIgdG8gYXZvaWQgZ2VuZXJhdGluZyBuXjIgYmVzcG9rZSBjb252ZXJzaW9uIGZ1bmN0aW9ucywgdW5pdCBjb252ZXJzaW9uIGlzIGEgdHdvLXN0ZXAgcHJvY2Vzczpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxKSBDb252ZXJ0IHN0YXJ0VmFsdWUgaW50byBwaXhlbHMuIDIpIENvbnZlcnQgdGhpcyBuZXcgcGl4ZWwgdmFsdWUgaW50byBlbmRWYWx1ZSdzIHVuaXQgdHlwZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXJ0VmFsdWVVbml0VHlwZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJVwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogdHJhbnNsYXRlWCBhbmQgdHJhbnNsYXRlWSBhcmUgdGhlIG9ubHkgcHJvcGVydGllcyB0aGF0IGFyZSAlLXJlbGF0aXZlIHRvIGFuIGVsZW1lbnQncyBvd24gZGltZW5zaW9ucyAtLSBub3QgaXRzIHBhcmVudCdzIGRpbWVuc2lvbnMuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZWxvY2l0eSBkb2VzIG5vdCBpbmNsdWRlIGEgc3BlY2lhbCBjb252ZXJzaW9uIHByb2Nlc3MgdG8gYWNjb3VudCBmb3IgdGhpcyBiZWhhdmlvci4gVGhlcmVmb3JlLCBhbmltYXRpbmcgdHJhbnNsYXRlWC9ZIGZyb20gYSAlIHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5vbi0lIHZhbHVlIHdpbGwgcHJvZHVjZSBhbiBpbmNvcnJlY3Qgc3RhcnQgdmFsdWUuIEZvcnR1bmF0ZWx5LCB0aGlzIHNvcnQgb2YgY3Jvc3MtdW5pdCBjb252ZXJzaW9uIGlzIHJhcmVseSBkb25lIGJ5IHVzZXJzIGluIHByYWN0aWNlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZSAqPSAoYXhpcyA9PT0gXCJ4XCIgPyBlbGVtZW50VW5pdENvbnZlcnNpb25EYXRhLnBlcmNlbnRUb1B4V2lkdGggOiBlbGVtZW50VW5pdENvbnZlcnNpb25EYXRhLnBlcmNlbnRUb1B4SGVpZ2h0KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJweFwiOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogcHggYWN0cyBhcyBvdXIgbWlkcG9pbnQgaW4gdGhlIHVuaXQgY29udmVyc2lvbiBwcm9jZXNzOyBkbyBub3RoaW5nLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgKj0gZWxlbWVudFVuaXRDb252ZXJzaW9uRGF0YVtzdGFydFZhbHVlVW5pdFR5cGUgKyBcIlRvUHhcIl07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSW52ZXJ0IHRoZSBweCByYXRpb3MgdG8gY29udmVydCBpbnRvIHRvIHRoZSB0YXJnZXQgdW5pdC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGVuZFZhbHVlVW5pdFR5cGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiVcIjpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWUgKj0gMSAvIChheGlzID09PSBcInhcIiA/IGVsZW1lbnRVbml0Q29udmVyc2lvbkRhdGEucGVyY2VudFRvUHhXaWR0aCA6IGVsZW1lbnRVbml0Q29udmVyc2lvbkRhdGEucGVyY2VudFRvUHhIZWlnaHQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInB4XCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdGFydFZhbHVlIGlzIGFscmVhZHkgaW4gcHgsIGRvIG5vdGhpbmc7IHdlJ3JlIGRvbmUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRWYWx1ZSAqPSAxIC8gZWxlbWVudFVuaXRDb252ZXJzaW9uRGF0YVtlbmRWYWx1ZVVuaXRUeXBlICsgXCJUb1B4XCJdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsYXRpdmUgVmFsdWVzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBPcGVyYXRvciBsb2dpYyBtdXN0IGJlIHBlcmZvcm1lZCBsYXN0IHNpbmNlIGl0IHJlcXVpcmVzIHVuaXQtbm9ybWFsaXplZCBzdGFydCBhbmQgZW5kIHZhbHVlcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogTm90ZTogUmVsYXRpdmUgKnBlcmNlbnQgdmFsdWVzKiBkbyBub3QgYmVoYXZlIGhvdyBtb3N0IHBlb3BsZSB0aGluazsgd2hpbGUgb25lIHdvdWxkIGV4cGVjdCBcIis9NTAlXCJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gaW5jcmVhc2UgdGhlIHByb3BlcnR5IDEuNXggaXRzIGN1cnJlbnQgdmFsdWUsIGl0IGluIGZhY3QgaW5jcmVhc2VzIHRoZSBwZXJjZW50IHVuaXRzIGluIGFic29sdXRlIHRlcm1zOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICA1MCBwb2ludHMgaXMgYWRkZWQgb24gdG9wIG9mIHRoZSBjdXJyZW50ICUgdmFsdWUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWUgPSBzdGFydFZhbHVlICsgZW5kVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCItXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWUgPSBzdGFydFZhbHVlIC0gZW5kVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIqXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWUgPSBzdGFydFZhbHVlICogZW5kVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIvXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWUgPSBzdGFydFZhbHVlIC8gZW5kVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW5zQ29udGFpbmVyIFB1c2hcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogQ29uc3RydWN0IHRoZSBwZXItcHJvcGVydHkgdHdlZW4gb2JqZWN0LCBhbmQgcHVzaCBpdCB0byB0aGUgZWxlbWVudCdzIHR3ZWVuc0NvbnRhaW5lci4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW5zQ29udGFpbmVyW3Byb3BlcnR5XSA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RQcm9wZXJ0eVZhbHVlOiByb290UHJvcGVydHlWYWx1ZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHN0YXJ0VmFsdWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWU6IHN0YXJ0VmFsdWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRWYWx1ZTogZW5kVmFsdWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bml0VHlwZTogZW5kVmFsdWVVbml0VHlwZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogZWFzaW5nXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFZlbG9jaXR5LmRlYnVnKSBjb25zb2xlLmxvZyhcInR3ZWVuc0NvbnRhaW5lciAoXCIgKyBwcm9wZXJ0eSArIFwiKTogXCIgKyBKU09OLnN0cmluZ2lmeSh0d2VlbnNDb250YWluZXJbcHJvcGVydHldKSwgZWxlbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogQWxvbmcgd2l0aCBpdHMgcHJvcGVydHkgZGF0YSwgc3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgaXRzZWxmIG9udG8gdHdlZW5zQ29udGFpbmVyLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHR3ZWVuc0NvbnRhaW5lci5lbGVtZW50ID0gZWxlbWVudDtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgQ2FsbCBQdXNoXG5cdCAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgLyogTm90ZTogdHdlZW5zQ29udGFpbmVyIGNhbiBiZSBlbXB0eSBpZiBhbGwgb2YgdGhlIHByb3BlcnRpZXMgaW4gdGhpcyBjYWxsJ3MgcHJvcGVydHkgbWFwIHdlcmUgc2tpcHBlZCBkdWUgdG8gbm90XG5cdCAgICAgICAgICAgICAgICAgICBiZWluZyBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuIFRoZSBlbGVtZW50IHByb3BlcnR5IGlzIHVzZWQgZm9yIGNoZWNraW5nIHRoYXQgdGhlIHR3ZWVuc0NvbnRhaW5lciBoYXMgYmVlbiBhcHBlbmRlZCB0by4gKi9cblx0ICAgICAgICAgICAgICAgIGlmICh0d2VlbnNDb250YWluZXIuZWxlbWVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8qIEFwcGx5IHRoZSBcInZlbG9jaXR5LWFuaW1hdGluZ1wiIGluZGljYXRvciBjbGFzcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBDU1MuVmFsdWVzLmFkZENsYXNzKGVsZW1lbnQsIFwidmVsb2NpdHktYW5pbWF0aW5nXCIpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogVGhlIGNhbGwgYXJyYXkgaG91c2VzIHRoZSB0d2VlbnNDb250YWluZXJzIGZvciBlYWNoIGVsZW1lbnQgYmVpbmcgYW5pbWF0ZWQgaW4gdGhlIGN1cnJlbnQgY2FsbC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBjYWxsLnB1c2godHdlZW5zQ29udGFpbmVyKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIFN0b3JlIHRoZSB0d2VlbnNDb250YWluZXIgYW5kIG9wdGlvbnMgaWYgd2UncmUgd29ya2luZyBvbiB0aGUgZGVmYXVsdCBlZmZlY3RzIHF1ZXVlLCBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgYnkgdGhlIHJldmVyc2UgY29tbWFuZC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5xdWV1ZSA9PT0gXCJcIikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBEYXRhKGVsZW1lbnQpLnR3ZWVuc0NvbnRhaW5lciA9IHR3ZWVuc0NvbnRhaW5lcjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgRGF0YShlbGVtZW50KS5vcHRzID0gb3B0cztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBTd2l0Y2ggb24gdGhlIGVsZW1lbnQncyBhbmltYXRpbmcgZmxhZy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBEYXRhKGVsZW1lbnQpLmlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIE9uY2UgdGhlIGZpbmFsIGVsZW1lbnQgaW4gdGhpcyBjYWxsJ3MgZWxlbWVudCBzZXQgaGFzIGJlZW4gcHJvY2Vzc2VkLCBwdXNoIHRoZSBjYWxsIGFycmF5IG9udG9cblx0ICAgICAgICAgICAgICAgICAgICAgICBWZWxvY2l0eS5TdGF0ZS5jYWxscyBmb3IgdGhlIGFuaW1hdGlvbiB0aWNrIHRvIGltbWVkaWF0ZWx5IGJlZ2luIHByb2Nlc3NpbmcuICovXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzSW5kZXggPT09IGVsZW1lbnRzTGVuZ3RoIC0gMSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBBZGQgdGhlIGN1cnJlbnQgY2FsbCBwbHVzIGl0cyBhc3NvY2lhdGVkIG1ldGFkYXRhICh0aGUgZWxlbWVudCBzZXQgYW5kIHRoZSBjYWxsJ3Mgb3B0aW9ucykgb250byB0aGUgZ2xvYmFsIGNhbGwgY29udGFpbmVyLlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBBbnl0aGluZyBvbiB0aGlzIGNhbGwgY29udGFpbmVyIGlzIHN1YmplY3RlZCB0byB0aWNrKCkgcHJvY2Vzc2luZy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuU3RhdGUuY2FsbHMucHVzaChbIGNhbGwsIGVsZW1lbnRzLCBvcHRzLCBudWxsLCBwcm9taXNlRGF0YS5yZXNvbHZlciBdKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGUgYW5pbWF0aW9uIHRpY2sgaXNuJ3QgcnVubmluZywgc3RhcnQgaXQuIChWZWxvY2l0eSBzaHV0cyBpdCBvZmYgd2hlbiB0aGVyZSBhcmUgbm8gYWN0aXZlIGNhbGxzIHRvIHByb2Nlc3MuKSAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVmVsb2NpdHkuU3RhdGUuaXNUaWNraW5nID09PSBmYWxzZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuU3RhdGUuaXNUaWNraW5nID0gdHJ1ZTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3RhcnQgdGhlIHRpY2sgbG9vcC4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpY2soKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzSW5kZXgrKztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKiBXaGVuIHRoZSBxdWV1ZSBvcHRpb24gaXMgc2V0IHRvIGZhbHNlLCB0aGUgY2FsbCBza2lwcyB0aGUgZWxlbWVudCdzIHF1ZXVlIGFuZCBmaXJlcyBpbW1lZGlhdGVseS4gKi9cblx0ICAgICAgICAgICAgaWYgKG9wdHMucXVldWUgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICAvKiBTaW5jZSB0aGlzIGJ1aWxkUXVldWUgY2FsbCBkb2Vzbid0IHJlc3BlY3QgdGhlIGVsZW1lbnQncyBleGlzdGluZyBxdWV1ZSAod2hpY2ggaXMgd2hlcmUgYSBkZWxheSBvcHRpb24gd291bGQgaGF2ZSBiZWVuIGFwcGVuZGVkKSxcblx0ICAgICAgICAgICAgICAgICAgIHdlIG1hbnVhbGx5IGluamVjdCB0aGUgZGVsYXkgcHJvcGVydHkgaGVyZSB3aXRoIGFuIGV4cGxpY2l0IHNldFRpbWVvdXQuICovXG5cdCAgICAgICAgICAgICAgICBpZiAob3B0cy5kZWxheSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoYnVpbGRRdWV1ZSwgb3B0cy5kZWxheSk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGJ1aWxkUXVldWUoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLyogT3RoZXJ3aXNlLCB0aGUgY2FsbCB1bmRlcmdvZXMgZWxlbWVudCBxdWV1ZWluZyBhcyBub3JtYWwuICovXG5cdCAgICAgICAgICAgIC8qIE5vdGU6IFRvIGludGVyb3BlcmF0ZSB3aXRoIGpRdWVyeSwgVmVsb2NpdHkgdXNlcyBqUXVlcnkncyBvd24gJC5xdWV1ZSgpIHN0YWNrIGZvciBxdWV1aW5nIGxvZ2ljLiAqL1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgJC5xdWV1ZShlbGVtZW50LCBvcHRzLnF1ZXVlLCBmdW5jdGlvbihuZXh0LCBjbGVhclF1ZXVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgdGhlIGNsZWFyUXVldWUgZmxhZyB3YXMgcGFzc2VkIGluIGJ5IHRoZSBzdG9wIGNvbW1hbmQsIHJlc29sdmUgdGhpcyBjYWxsJ3MgcHJvbWlzZS4gKFByb21pc2VzIGNhbiBvbmx5IGJlIHJlc29sdmVkIG9uY2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgc28gaXQncyBmaW5lIGlmIHRoaXMgaXMgcmVwZWF0ZWRseSB0cmlnZ2VyZWQgZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgYXNzb2NpYXRlZCBjYWxsLikgKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2xlYXJRdWV1ZSA9PT0gdHJ1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvbWlzZURhdGEucHJvbWlzZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZURhdGEucmVzb2x2ZXIoZWxlbWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgLyogRG8gbm90IGNvbnRpbnVlIHdpdGggYW5pbWF0aW9uIHF1ZXVlaW5nLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBUaGlzIGZsYWcgaW5kaWNhdGVzIHRvIHRoZSB1cGNvbWluZyBjb21wbGV0ZUNhbGwoKSBmdW5jdGlvbiB0aGF0IHRoaXMgcXVldWUgZW50cnkgd2FzIGluaXRpYXRlZCBieSBWZWxvY2l0eS5cblx0ICAgICAgICAgICAgICAgICAgICAgICBTZWUgY29tcGxldGVDYWxsKCkgZm9yIGZ1cnRoZXIgZGV0YWlscy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBWZWxvY2l0eS52ZWxvY2l0eVF1ZXVlRW50cnlGbGFnID0gdHJ1ZTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGJ1aWxkUXVldWUobmV4dCk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgIEF1dG8tRGVxdWV1aW5nXG5cdCAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAvKiBBcyBwZXIgalF1ZXJ5J3MgJC5xdWV1ZSgpIGJlaGF2aW9yLCB0byBmaXJlIHRoZSBmaXJzdCBub24tY3VzdG9tLXF1ZXVlIGVudHJ5IG9uIGFuIGVsZW1lbnQsIHRoZSBlbGVtZW50XG5cdCAgICAgICAgICAgICAgIG11c3QgYmUgZGVxdWV1ZWQgaWYgaXRzIHF1ZXVlIHN0YWNrIGNvbnNpc3RzICpzb2xlbHkqIG9mIHRoZSBjdXJyZW50IGNhbGwuIChUaGlzIGNhbiBiZSBkZXRlcm1pbmVkIGJ5IGNoZWNraW5nXG5cdCAgICAgICAgICAgICAgIGZvciB0aGUgXCJpbnByb2dyZXNzXCIgaXRlbSB0aGF0IGpRdWVyeSBwcmVwZW5kcyB0byBhY3RpdmUgcXVldWUgc3RhY2sgYXJyYXlzLikgUmVnYXJkbGVzcywgd2hlbmV2ZXIgdGhlIGVsZW1lbnQnc1xuXHQgICAgICAgICAgICAgICBxdWV1ZSBpcyBmdXJ0aGVyIGFwcGVuZGVkIHdpdGggYWRkaXRpb25hbCBpdGVtcyAtLSBpbmNsdWRpbmcgJC5kZWxheSgpJ3Mgb3IgZXZlbiAkLmFuaW1hdGUoKSBjYWxscywgdGhlIHF1ZXVlJ3Ncblx0ICAgICAgICAgICAgICAgZmlyc3QgZW50cnkgaXMgYXV0b21hdGljYWxseSBmaXJlZC4gVGhpcyBiZWhhdmlvciBjb250cmFzdHMgdGhhdCBvZiBjdXN0b20gcXVldWVzLCB3aGljaCBuZXZlciBhdXRvLWZpcmUuICovXG5cdCAgICAgICAgICAgIC8qIE5vdGU6IFdoZW4gYW4gZWxlbWVudCBzZXQgaXMgYmVpbmcgc3ViamVjdGVkIHRvIGEgbm9uLXBhcmFsbGVsIFZlbG9jaXR5IGNhbGwsIHRoZSBhbmltYXRpb24gd2lsbCBub3QgYmVnaW4gdW50aWxcblx0ICAgICAgICAgICAgICAgZWFjaCBvbmUgb2YgdGhlIGVsZW1lbnRzIGluIHRoZSBzZXQgaGFzIHJlYWNoZWQgdGhlIGVuZCBvZiBpdHMgaW5kaXZpZHVhbGx5IHByZS1leGlzdGluZyBxdWV1ZSBjaGFpbi4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogVW5mb3J0dW5hdGVseSwgbW9zdCBwZW9wbGUgZG9uJ3QgZnVsbHkgZ3Jhc3AgalF1ZXJ5J3MgcG93ZXJmdWwsIHlldCBxdWlya3ksICQucXVldWUoKSBmdW5jdGlvbi5cblx0ICAgICAgICAgICAgICAgTGVhbiBtb3JlIGhlcmU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1ODE1OC9jYW4tc29tZWJvZHktZXhwbGFpbi1qcXVlcnktcXVldWUtdG8tbWUgKi9cblx0ICAgICAgICAgICAgaWYgKChvcHRzLnF1ZXVlID09PSBcIlwiIHx8IG9wdHMucXVldWUgPT09IFwiZnhcIikgJiYgJC5xdWV1ZShlbGVtZW50KVswXSAhPT0gXCJpbnByb2dyZXNzXCIpIHtcblx0ICAgICAgICAgICAgICAgICQuZGVxdWV1ZShlbGVtZW50KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgIEVsZW1lbnQgU2V0IEl0ZXJhdGlvblxuXHQgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgLyogSWYgdGhlIFwibm9kZVR5cGVcIiBwcm9wZXJ0eSBleGlzdHMgb24gdGhlIGVsZW1lbnRzIHZhcmlhYmxlLCB3ZSdyZSBhbmltYXRpbmcgYSBzaW5nbGUgZWxlbWVudC5cblx0ICAgICAgICAgICBQbGFjZSBpdCBpbiBhbiBhcnJheSBzbyB0aGF0ICQuZWFjaCgpIGNhbiBpdGVyYXRlIG92ZXIgaXQuICovXG5cdCAgICAgICAgJC5lYWNoKGVsZW1lbnRzLCBmdW5jdGlvbihpLCBlbGVtZW50KSB7XG5cdCAgICAgICAgICAgIC8qIEVuc3VyZSBlYWNoIGVsZW1lbnQgaW4gYSBzZXQgaGFzIGEgbm9kZVR5cGUgKGlzIGEgcmVhbCBlbGVtZW50KSB0byBhdm9pZCB0aHJvd2luZyBlcnJvcnMuICovXG5cdCAgICAgICAgICAgIGlmIChUeXBlLmlzTm9kZShlbGVtZW50KSkge1xuXHQgICAgICAgICAgICAgICAgcHJvY2Vzc0VsZW1lbnQuY2FsbChlbGVtZW50KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgLyoqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgIE9wdGlvbjogTG9vcFxuXHQgICAgICAgICoqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgIC8qIFRoZSBsb29wIG9wdGlvbiBhY2NlcHRzIGFuIGludGVnZXIgaW5kaWNhdGluZyBob3cgbWFueSB0aW1lcyB0aGUgZWxlbWVudCBzaG91bGQgbG9vcCBiZXR3ZWVuIHRoZSB2YWx1ZXMgaW4gdGhlXG5cdCAgICAgICAgICAgY3VycmVudCBjYWxsJ3MgcHJvcGVydGllcyBtYXAgYW5kIHRoZSBlbGVtZW50J3MgcHJvcGVydHkgdmFsdWVzIHByaW9yIHRvIHRoaXMgY2FsbC4gKi9cblx0ICAgICAgICAvKiBOb3RlOiBUaGUgbG9vcCBvcHRpb24ncyBsb2dpYyBpcyBwZXJmb3JtZWQgaGVyZSAtLSBhZnRlciBlbGVtZW50IHByb2Nlc3NpbmcgLS0gYmVjYXVzZSB0aGUgY3VycmVudCBjYWxsIG5lZWRzXG5cdCAgICAgICAgICAgdG8gdW5kZXJnbyBpdHMgcXVldWUgaW5zZXJ0aW9uIHByaW9yIHRvIHRoZSBsb29wIG9wdGlvbiBnZW5lcmF0aW5nIGl0cyBzZXJpZXMgb2YgY29uc3RpdHVlbnQgXCJyZXZlcnNlXCIgY2FsbHMsXG5cdCAgICAgICAgICAgd2hpY2ggY2hhaW4gYWZ0ZXIgdGhlIGN1cnJlbnQgY2FsbC4gVHdvIHJldmVyc2UgY2FsbHMgKHR3byBcImFsdGVybmF0aW9uc1wiKSBjb25zdGl0dXRlIG9uZSBsb29wLiAqL1xuXHQgICAgICAgIHZhciBvcHRzID0gJC5leHRlbmQoe30sIFZlbG9jaXR5LmRlZmF1bHRzLCBvcHRpb25zKSxcblx0ICAgICAgICAgICAgcmV2ZXJzZUNhbGxzQ291bnQ7XG5cblx0ICAgICAgICBvcHRzLmxvb3AgPSBwYXJzZUludChvcHRzLmxvb3ApO1xuXHQgICAgICAgIHJldmVyc2VDYWxsc0NvdW50ID0gKG9wdHMubG9vcCAqIDIpIC0gMTtcblxuXHQgICAgICAgIGlmIChvcHRzLmxvb3ApIHtcblx0ICAgICAgICAgICAgLyogRG91YmxlIHRoZSBsb29wIGNvdW50IHRvIGNvbnZlcnQgaXQgaW50byBpdHMgYXBwcm9wcmlhdGUgbnVtYmVyIG9mIFwicmV2ZXJzZVwiIGNhbGxzLlxuXHQgICAgICAgICAgICAgICBTdWJ0cmFjdCAxIGZyb20gdGhlIHJlc3VsdGluZyB2YWx1ZSBzaW5jZSB0aGUgY3VycmVudCBjYWxsIGlzIGluY2x1ZGVkIGluIHRoZSB0b3RhbCBhbHRlcm5hdGlvbiBjb3VudC4gKi9cblx0ICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCByZXZlcnNlQ2FsbHNDb3VudDsgeCsrKSB7XG5cdCAgICAgICAgICAgICAgICAvKiBTaW5jZSB0aGUgbG9naWMgZm9yIHRoZSByZXZlcnNlIGFjdGlvbiBvY2N1cnMgaW5zaWRlIFF1ZXVlaW5nIGFuZCB0aGVyZWZvcmUgdGhpcyBjYWxsJ3Mgb3B0aW9ucyBvYmplY3Rcblx0ICAgICAgICAgICAgICAgICAgIGlzbid0IHBhcnNlZCB1bnRpbCB0aGVuIGFzIHdlbGwsIHRoZSBjdXJyZW50IGNhbGwncyBkZWxheSBvcHRpb24gbXVzdCBiZSBleHBsaWNpdGx5IHBhc3NlZCBpbnRvIHRoZSByZXZlcnNlXG5cdCAgICAgICAgICAgICAgICAgICBjYWxsIHNvIHRoYXQgdGhlIGRlbGF5IGxvZ2ljIHRoYXQgb2NjdXJzIGluc2lkZSAqUHJlLVF1ZXVlaW5nKiBjYW4gcHJvY2VzcyBpdC4gKi9cblx0ICAgICAgICAgICAgICAgIHZhciByZXZlcnNlT3B0aW9ucyA9IHtcblx0ICAgICAgICAgICAgICAgICAgICBkZWxheTogb3B0cy5kZWxheSxcblx0ICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogb3B0cy5wcm9ncmVzc1xuXHQgICAgICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICAgICAgLyogSWYgYSBjb21wbGV0ZSBjYWxsYmFjayB3YXMgcGFzc2VkIGludG8gdGhpcyBjYWxsLCB0cmFuc2ZlciBpdCB0byB0aGUgbG9vcCByZWRpcmVjdCdzIGZpbmFsIFwicmV2ZXJzZVwiIGNhbGxcblx0ICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgaXQncyB0cmlnZ2VyZWQgd2hlbiB0aGUgZW50aXJlIHJlZGlyZWN0IGlzIGNvbXBsZXRlIChhbmQgbm90IHdoZW4gdGhlIHZlcnkgZmlyc3QgYW5pbWF0aW9uIGlzIGNvbXBsZXRlKS4gKi9cblx0ICAgICAgICAgICAgICAgIGlmICh4ID09PSByZXZlcnNlQ2FsbHNDb3VudCAtIDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXZlcnNlT3B0aW9ucy5kaXNwbGF5ID0gb3B0cy5kaXNwbGF5O1xuXHQgICAgICAgICAgICAgICAgICAgIHJldmVyc2VPcHRpb25zLnZpc2liaWxpdHkgPSBvcHRzLnZpc2liaWxpdHk7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV2ZXJzZU9wdGlvbnMuY29tcGxldGUgPSBvcHRzLmNvbXBsZXRlO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBhbmltYXRlKGVsZW1lbnRzLCBcInJldmVyc2VcIiwgcmV2ZXJzZU9wdGlvbnMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyoqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICBDaGFpbmluZ1xuXHQgICAgICAgICoqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgIC8qIFJldHVybiB0aGUgZWxlbWVudHMgYmFjayB0byB0aGUgY2FsbCBjaGFpbiwgd2l0aCB3cmFwcGVkIGVsZW1lbnRzIHRha2luZyBwcmVjZWRlbmNlIGluIGNhc2UgVmVsb2NpdHkgd2FzIGNhbGxlZCB2aWEgdGhlICQuZm4uIGV4dGVuc2lvbi4gKi9cblx0ICAgICAgICByZXR1cm4gZ2V0Q2hhaW4oKTtcblx0ICAgIH07XG5cblx0ICAgIC8qIFR1cm4gVmVsb2NpdHkgaW50byB0aGUgYW5pbWF0aW9uIGZ1bmN0aW9uLCBleHRlbmRlZCB3aXRoIHRoZSBwcmUtZXhpc3RpbmcgVmVsb2NpdHkgb2JqZWN0LiAqL1xuXHQgICAgVmVsb2NpdHkgPSAkLmV4dGVuZChhbmltYXRlLCBWZWxvY2l0eSk7XG5cdCAgICAvKiBGb3IgbGVnYWN5IHN1cHBvcnQsIGFsc28gZXhwb3NlIHRoZSBsaXRlcmFsIGFuaW1hdGUgbWV0aG9kLiAqL1xuXHQgICAgVmVsb2NpdHkuYW5pbWF0ZSA9IGFuaW1hdGU7XG5cblx0ICAgIC8qKioqKioqKioqKioqKlxuXHQgICAgICAgIFRpbWluZ1xuXHQgICAgKioqKioqKioqKioqKiovXG5cblx0ICAgIC8qIFRpY2tlciBmdW5jdGlvbi4gKi9cblx0ICAgIHZhciB0aWNrZXIgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHJBRlNoaW07XG5cblx0ICAgIC8qIEluYWN0aXZlIGJyb3dzZXIgdGFicyBwYXVzZSByQUYsIHdoaWNoIHJlc3VsdHMgaW4gYWxsIGFjdGl2ZSBhbmltYXRpb25zIGltbWVkaWF0ZWx5IHNwcmludGluZyB0byB0aGVpciBjb21wbGV0aW9uIHN0YXRlcyB3aGVuIHRoZSB0YWIgcmVmb2N1c2VzLlxuXHQgICAgICAgVG8gZ2V0IGFyb3VuZCB0aGlzLCB3ZSBkeW5hbWljYWxseSBzd2l0Y2ggckFGIHRvIHNldFRpbWVvdXQgKHdoaWNoIHRoZSBicm93c2VyICpkb2Vzbid0KiBwYXVzZSkgd2hlbiB0aGUgdGFiIGxvc2VzIGZvY3VzLiBXZSBza2lwIHRoaXMgZm9yIG1vYmlsZVxuXHQgICAgICAgZGV2aWNlcyB0byBhdm9pZCB3YXN0aW5nIGJhdHRlcnkgcG93ZXIgb24gaW5hY3RpdmUgdGFicy4gKi9cblx0ICAgIC8qIE5vdGU6IFRhYiBmb2N1cyBkZXRlY3Rpb24gZG9lc24ndCB3b3JrIG9uIG9sZGVyIHZlcnNpb25zIG9mIElFLCBidXQgdGhhdCdzIG9rYXkgc2luY2UgdGhleSBkb24ndCBzdXBwb3J0IHJBRiB0byBiZWdpbiB3aXRoLiAqL1xuXHQgICAgaWYgKCFWZWxvY2l0eS5TdGF0ZS5pc01vYmlsZSAmJiBkb2N1bWVudC5oaWRkZW4gIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICAvKiBSZWFzc2lnbiB0aGUgckFGIGZ1bmN0aW9uICh3aGljaCB0aGUgZ2xvYmFsIHRpY2soKSBmdW5jdGlvbiB1c2VzKSBiYXNlZCBvbiB0aGUgdGFiJ3MgZm9jdXMgc3RhdGUuICovXG5cdCAgICAgICAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcblx0ICAgICAgICAgICAgICAgIHRpY2tlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogVGhlIHRpY2sgZnVuY3Rpb24gbmVlZHMgYSB0cnV0aHkgZmlyc3QgYXJndW1lbnQgaW4gb3JkZXIgdG8gcGFzcyBpdHMgaW50ZXJuYWwgdGltZXN0YW1wIGNoZWNrLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayh0cnVlKSB9LCAxNik7XG5cdCAgICAgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgICAgICAvKiBUaGUgckFGIGxvb3AgaGFzIGJlZW4gcGF1c2VkIGJ5IHRoZSBicm93c2VyLCBzbyB3ZSBtYW51YWxseSByZXN0YXJ0IHRoZSB0aWNrLiAqL1xuXHQgICAgICAgICAgICAgICAgdGljaygpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGlja2VyID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByQUZTaGltO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIC8qKioqKioqKioqKipcblx0ICAgICAgICBUaWNrXG5cdCAgICAqKioqKioqKioqKiovXG5cblx0ICAgIC8qIE5vdGU6IEFsbCBjYWxscyB0byBWZWxvY2l0eSBhcmUgcHVzaGVkIHRvIHRoZSBWZWxvY2l0eS5TdGF0ZS5jYWxscyBhcnJheSwgd2hpY2ggaXMgZnVsbHkgaXRlcmF0ZWQgdGhyb3VnaCB1cG9uIGVhY2ggdGljay4gKi9cblx0ICAgIGZ1bmN0aW9uIHRpY2sgKHRpbWVzdGFtcCkge1xuXHQgICAgICAgIC8qIEFuIGVtcHR5IHRpbWVzdGFtcCBhcmd1bWVudCBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHRoZSBmaXJzdCB0aWNrIG9jY3VyZW5jZSBzaW5jZSB0aWNraW5nIHdhcyB0dXJuZWQgb24uXG5cdCAgICAgICAgICAgV2UgbGV2ZXJhZ2UgdGhpcyBtZXRhZGF0YSB0byBmdWxseSBpZ25vcmUgdGhlIGZpcnN0IHRpY2sgcGFzcyBzaW5jZSBSQUYncyBpbml0aWFsIHBhc3MgaXMgZmlyZWQgd2hlbmV2ZXJcblx0ICAgICAgICAgICB0aGUgYnJvd3NlcidzIG5leHQgdGljayBzeW5jIHRpbWUgb2NjdXJzLCB3aGljaCByZXN1bHRzIGluIHRoZSBmaXJzdCBlbGVtZW50cyBzdWJqZWN0ZWQgdG8gVmVsb2NpdHlcblx0ICAgICAgICAgICBjYWxscyBiZWluZyBhbmltYXRlZCBvdXQgb2Ygc3luYyB3aXRoIGFueSBlbGVtZW50cyBhbmltYXRlZCBpbW1lZGlhdGVseSB0aGVyZWFmdGVyLiBJbiBzaG9ydCwgd2UgaWdub3JlXG5cdCAgICAgICAgICAgdGhlIGZpcnN0IFJBRiB0aWNrIHBhc3Mgc28gdGhhdCBlbGVtZW50cyBiZWluZyBpbW1lZGlhdGVseSBjb25zZWN1dGl2ZWx5IGFuaW1hdGVkIC0tIGluc3RlYWQgb2Ygc2ltdWx0YW5lb3VzbHkgYW5pbWF0ZWRcblx0ICAgICAgICAgICBieSB0aGUgc2FtZSBWZWxvY2l0eSBjYWxsIC0tIGFyZSBwcm9wZXJseSBiYXRjaGVkIGludG8gdGhlIHNhbWUgaW5pdGlhbCBSQUYgdGljayBhbmQgY29uc2VxdWVudGx5IHJlbWFpbiBpbiBzeW5jIHRoZXJlYWZ0ZXIuICovXG5cdCAgICAgICAgaWYgKHRpbWVzdGFtcCkge1xuXHQgICAgICAgICAgICAvKiBXZSBpZ25vcmUgUkFGJ3MgaGlnaCByZXNvbHV0aW9uIHRpbWVzdGFtcCBzaW5jZSBpdCBjYW4gYmUgc2lnbmlmaWNhbnRseSBvZmZzZXQgd2hlbiB0aGUgYnJvd3NlciBpc1xuXHQgICAgICAgICAgICAgICB1bmRlciBoaWdoIHN0cmVzczsgd2Ugb3B0IGZvciBjaG9wcGluZXNzIG92ZXIgYWxsb3dpbmcgdGhlIGJyb3dzZXIgdG8gZHJvcCBodWdlIGNodW5rcyBvZiBmcmFtZXMuICovXG5cdCAgICAgICAgICAgIHZhciB0aW1lQ3VycmVudCA9IChuZXcgRGF0ZSkuZ2V0VGltZSgpO1xuXG5cdCAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICBDYWxsIEl0ZXJhdGlvblxuXHQgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICB2YXIgY2FsbHNMZW5ndGggPSBWZWxvY2l0eS5TdGF0ZS5jYWxscy5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLyogVG8gc3BlZWQgdXAgaXRlcmF0aW5nIG92ZXIgdGhpcyBhcnJheSwgaXQgaXMgY29tcGFjdGVkIChmYWxzZXkgaXRlbXMgLS0gY2FsbHMgdGhhdCBoYXZlIGNvbXBsZXRlZCAtLSBhcmUgcmVtb3ZlZClcblx0ICAgICAgICAgICAgICAgd2hlbiBpdHMgbGVuZ3RoIGhhcyBiYWxsb29uZWQgdG8gYSBwb2ludCB0aGF0IGNhbiBpbXBhY3QgdGljayBwZXJmb3JtYW5jZS4gVGhpcyBvbmx5IGJlY29tZXMgbmVjZXNzYXJ5IHdoZW4gYW5pbWF0aW9uXG5cdCAgICAgICAgICAgICAgIGhhcyBiZWVuIGNvbnRpbnVvdXMgd2l0aCBtYW55IGVsZW1lbnRzIG92ZXIgYSBsb25nIHBlcmlvZCBvZiB0aW1lOyB3aGVuZXZlciBhbGwgYWN0aXZlIGNhbGxzIGFyZSBjb21wbGV0ZWQsIGNvbXBsZXRlQ2FsbCgpIGNsZWFycyBWZWxvY2l0eS5TdGF0ZS5jYWxscy4gKi9cblx0ICAgICAgICAgICAgaWYgKGNhbGxzTGVuZ3RoID4gMTAwMDApIHtcblx0ICAgICAgICAgICAgICAgIFZlbG9jaXR5LlN0YXRlLmNhbGxzID0gY29tcGFjdFNwYXJzZUFycmF5KFZlbG9jaXR5LlN0YXRlLmNhbGxzKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGFjdGl2ZSBjYWxsLiAqL1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxzTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8qIFdoZW4gYSBWZWxvY2l0eSBjYWxsIGlzIGNvbXBsZXRlZCwgaXRzIFZlbG9jaXR5LlN0YXRlLmNhbGxzIGVudHJ5IGlzIHNldCB0byBmYWxzZS4gQ29udGludWUgb24gdG8gdGhlIG5leHQgY2FsbC4gKi9cblx0ICAgICAgICAgICAgICAgIGlmICghVmVsb2NpdHkuU3RhdGUuY2FsbHNbaV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgQ2FsbC1XaWRlIFZhcmlhYmxlc1xuXHQgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgY2FsbENvbnRhaW5lciA9IFZlbG9jaXR5LlN0YXRlLmNhbGxzW2ldLFxuXHQgICAgICAgICAgICAgICAgICAgIGNhbGwgPSBjYWxsQ29udGFpbmVyWzBdLFxuXHQgICAgICAgICAgICAgICAgICAgIG9wdHMgPSBjYWxsQ29udGFpbmVyWzJdLFxuXHQgICAgICAgICAgICAgICAgICAgIHRpbWVTdGFydCA9IGNhbGxDb250YWluZXJbM10sXG5cdCAgICAgICAgICAgICAgICAgICAgZmlyc3RUaWNrID0gISF0aW1lU3RhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgdHdlZW5EdW1teVZhbHVlID0gbnVsbDtcblxuXHQgICAgICAgICAgICAgICAgLyogSWYgdGltZVN0YXJ0IGlzIHVuZGVmaW5lZCwgdGhlbiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoYXQgdGhpcyBjYWxsIGhhcyBiZWVuIHByb2Nlc3NlZCBieSB0aWNrKCkuXG5cdCAgICAgICAgICAgICAgICAgICBXZSBhc3NpZ24gdGltZVN0YXJ0IG5vdyBzbyB0aGF0IGl0cyB2YWx1ZSBpcyBhcyBjbG9zZSB0byB0aGUgcmVhbCBhbmltYXRpb24gc3RhcnQgdGltZSBhcyBwb3NzaWJsZS5cblx0ICAgICAgICAgICAgICAgICAgIChDb252ZXJzZWx5LCBoYWQgdGltZVN0YXJ0IGJlZW4gZGVmaW5lZCB3aGVuIHRoaXMgY2FsbCB3YXMgYWRkZWQgdG8gVmVsb2NpdHkuU3RhdGUuY2FsbHMsIHRoZSBkZWxheVxuXHQgICAgICAgICAgICAgICAgICAgYmV0d2VlbiB0aGF0IHRpbWUgYW5kIG5vdyB3b3VsZCBjYXVzZSB0aGUgZmlyc3QgZmV3IGZyYW1lcyBvZiB0aGUgdHdlZW4gdG8gYmUgc2tpcHBlZCBzaW5jZVxuXHQgICAgICAgICAgICAgICAgICAgcGVyY2VudENvbXBsZXRlIGlzIGNhbGN1bGF0ZWQgcmVsYXRpdmUgdG8gdGltZVN0YXJ0LikgKi9cblx0ICAgICAgICAgICAgICAgIC8qIEZ1cnRoZXIsIHN1YnRyYWN0IDE2bXMgKHRoZSBhcHByb3hpbWF0ZSByZXNvbHV0aW9uIG9mIFJBRikgZnJvbSB0aGUgY3VycmVudCB0aW1lIHZhbHVlIHNvIHRoYXQgdGhlXG5cdCAgICAgICAgICAgICAgICAgICBmaXJzdCB0aWNrIGl0ZXJhdGlvbiBpc24ndCB3YXN0ZWQgYnkgYW5pbWF0aW5nIGF0IDAlIHR3ZWVuIGNvbXBsZXRpb24sIHdoaWNoIHdvdWxkIHByb2R1Y2UgdGhlXG5cdCAgICAgICAgICAgICAgICAgICBzYW1lIHN0eWxlIHZhbHVlIGFzIHRoZSBlbGVtZW50J3MgY3VycmVudCB2YWx1ZS4gKi9cblx0ICAgICAgICAgICAgICAgIGlmICghdGltZVN0YXJ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGltZVN0YXJ0ID0gVmVsb2NpdHkuU3RhdGUuY2FsbHNbaV1bM10gPSB0aW1lQ3VycmVudCAtIDE2O1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvKiBUaGUgdHdlZW4ncyBjb21wbGV0aW9uIHBlcmNlbnRhZ2UgaXMgcmVsYXRpdmUgdG8gdGhlIHR3ZWVuJ3Mgc3RhcnQgdGltZSwgbm90IHRoZSB0d2VlbidzIHN0YXJ0IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgICAod2hpY2ggd291bGQgcmVzdWx0IGluIHVucHJlZGljdGFibGUgdHdlZW4gZHVyYXRpb25zIHNpbmNlIEphdmFTY3JpcHQncyB0aW1lcnMgYXJlIG5vdCBwYXJ0aWN1bGFybHkgYWNjdXJhdGUpLlxuXHQgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHksIHdlIGVuc3VyZSB0aGF0IHBlcmNlbnRDb21wbGV0ZSBkb2VzIG5vdCBleGNlZWQgMS4gKi9cblx0ICAgICAgICAgICAgICAgIHZhciBwZXJjZW50Q29tcGxldGUgPSBNYXRoLm1pbigodGltZUN1cnJlbnQgLSB0aW1lU3RhcnQpIC8gb3B0cy5kdXJhdGlvbiwgMSk7XG5cblx0ICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICBFbGVtZW50IEl0ZXJhdGlvblxuXHQgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgLyogRm9yIGV2ZXJ5IGNhbGwsIGl0ZXJhdGUgdGhyb3VnaCBlYWNoIG9mIHRoZSBlbGVtZW50cyBpbiBpdHMgc2V0LiAqL1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGNhbGxMZW5ndGggPSBjYWxsLmxlbmd0aDsgaiA8IGNhbGxMZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0d2VlbnNDb250YWluZXIgPSBjYWxsW2pdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gdHdlZW5zQ29udGFpbmVyLmVsZW1lbnQ7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBDaGVjayB0byBzZWUgaWYgdGhpcyBlbGVtZW50IGhhcyBiZWVuIGRlbGV0ZWQgbWlkd2F5IHRocm91Z2ggdGhlIGFuaW1hdGlvbiBieSBjaGVja2luZyBmb3IgdGhlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVkIGV4aXN0ZW5jZSBvZiBpdHMgZGF0YSBjYWNoZS4gSWYgaXQncyBnb25lLCBza2lwIGFuaW1hdGluZyB0aGlzIGVsZW1lbnQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFEYXRhKGVsZW1lbnQpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1Qcm9wZXJ0eUV4aXN0cyA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAgICAgICBEaXNwbGF5ICYgVmlzaWJpbGl0eSBUb2dnbGluZ1xuXHQgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBJZiB0aGUgZGlzcGxheSBvcHRpb24gaXMgc2V0IHRvIG5vbi1cIm5vbmVcIiwgc2V0IGl0IHVwZnJvbnQgc28gdGhhdCB0aGUgZWxlbWVudCBjYW4gYmVjb21lIHZpc2libGUgYmVmb3JlIHR3ZWVuaW5nIGJlZ2lucy5cblx0ICAgICAgICAgICAgICAgICAgICAgICAoT3RoZXJ3aXNlLCBkaXNwbGF5J3MgXCJub25lXCIgdmFsdWUgaXMgc2V0IGluIGNvbXBsZXRlQ2FsbCgpIG9uY2UgdGhlIGFuaW1hdGlvbiBoYXMgY29tcGxldGVkLikgKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5kaXNwbGF5ICE9PSB1bmRlZmluZWQgJiYgb3B0cy5kaXNwbGF5ICE9PSBudWxsICYmIG9wdHMuZGlzcGxheSAhPT0gXCJub25lXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlzcGxheSA9PT0gXCJmbGV4XCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbGV4VmFsdWVzID0gWyBcIi13ZWJraXQtYm94XCIsIFwiLW1vei1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcIi13ZWJraXQtZmxleFwiIF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChmbGV4VmFsdWVzLCBmdW5jdGlvbihpLCBmbGV4VmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDU1Muc2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcImRpc3BsYXlcIiwgZmxleFZhbHVlKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgQ1NTLnNldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJkaXNwbGF5XCIsIG9wdHMuZGlzcGxheSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogU2FtZSBnb2VzIHdpdGggdGhlIHZpc2liaWxpdHkgb3B0aW9uLCBidXQgaXRzIFwibm9uZVwiIGVxdWl2YWxlbnQgaXMgXCJoaWRkZW5cIi4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy52aXNpYmlsaXR5ICE9PSB1bmRlZmluZWQgJiYgb3B0cy52aXNpYmlsaXR5ICE9PSBcImhpZGRlblwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIENTUy5zZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIFwidmlzaWJpbGl0eVwiLCBvcHRzLnZpc2liaWxpdHkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgICAgICAgICBQcm9wZXJ0eSBJdGVyYXRpb25cblx0ICAgICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBGb3IgZXZlcnkgZWxlbWVudCwgaXRlcmF0ZSB0aHJvdWdoIGVhY2ggcHJvcGVydHkuICovXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdHdlZW5zQ29udGFpbmVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IEluIGFkZGl0aW9uIHRvIHByb3BlcnR5IHR3ZWVuIGRhdGEsIHR3ZWVuc0NvbnRhaW5lciBjb250YWlucyBhIHJlZmVyZW5jZSB0byBpdHMgYXNzb2NpYXRlZCBlbGVtZW50LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkgIT09IFwiZWxlbWVudFwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHdlZW4gPSB0d2VlbnNDb250YWluZXJbcHJvcGVydHldLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBFYXNpbmcgY2FuIGVpdGhlciBiZSBhIHByZS1nZW5lcmVhdGVkIGZ1bmN0aW9uIG9yIGEgc3RyaW5nIHRoYXQgcmVmZXJlbmNlcyBhIHByZS1yZWdpc3RlcmVkIGVhc2luZ1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIHRoZSBWZWxvY2l0eS5FYXNpbmdzIG9iamVjdC4gSW4gZWl0aGVyIGNhc2UsIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgZWFzaW5nICpmdW5jdGlvbiouICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nID0gVHlwZS5pc1N0cmluZyh0d2Vlbi5lYXNpbmcpID8gVmVsb2NpdHkuRWFzaW5nc1t0d2Vlbi5lYXNpbmddIDogdHdlZW4uZWFzaW5nO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyZW50IFZhbHVlIENhbGN1bGF0aW9uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHRoaXMgaXMgdGhlIGxhc3QgdGljayBwYXNzIChpZiB3ZSd2ZSByZWFjaGVkIDEwMCUgY29tcGxldGlvbiBmb3IgdGhpcyB0d2VlbiksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnN1cmUgdGhhdCBjdXJyZW50VmFsdWUgaXMgZXhwbGljaXRseSBzZXQgdG8gaXRzIHRhcmdldCBlbmRWYWx1ZSBzbyB0aGF0IGl0J3Mgbm90IHN1YmplY3RlZCB0byBhbnkgcm91bmRpbmcuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyY2VudENvbXBsZXRlID09PSAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdHdlZW4uZW5kVmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBPdGhlcndpc2UsIGNhbGN1bGF0ZSBjdXJyZW50VmFsdWUgYmFzZWQgb24gdGhlIGN1cnJlbnQgZGVsdGEgZnJvbSBzdGFydFZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHdlZW5EZWx0YSA9IHR3ZWVuLmVuZFZhbHVlIC0gdHdlZW4uc3RhcnRWYWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSB0d2Vlbi5zdGFydFZhbHVlICsgKHR3ZWVuRGVsdGEgKiBlYXNpbmcocGVyY2VudENvbXBsZXRlLCBvcHRzLCB0d2VlbkRlbHRhKSk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBJZiBubyB2YWx1ZSBjaGFuZ2UgaXMgb2NjdXJyaW5nLCBkb24ndCBwcm9jZWVkIHdpdGggRE9NIHVwZGF0aW5nLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RUaWNrICYmIChjdXJyZW50VmFsdWUgPT09IHR3ZWVuLmN1cnJlbnRWYWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0d2Vlbi5jdXJyZW50VmFsdWUgPSBjdXJyZW50VmFsdWU7XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIElmIHdlJ3JlIHR3ZWVuaW5nIGEgZmFrZSAndHdlZW4nIHByb3BlcnR5IGluIG9yZGVyIHRvIGxvZyB0cmFuc2l0aW9uIHZhbHVlcywgdXBkYXRlIHRoZSBvbmUtcGVyLWNhbGwgdmFyaWFibGUgc28gdGhhdFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXQgY2FuIGJlIHBhc3NlZCBpbnRvIHRoZSBwcm9ncmVzcyBjYWxsYmFjay4gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gXCJ0d2VlblwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW5EdW1teVZhbHVlID0gY3VycmVudFZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSG9va3M6IFBhcnQgSVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEZvciBob29rZWQgcHJvcGVydGllcywgdGhlIG5ld2x5LXVwZGF0ZWQgcm9vdFByb3BlcnR5VmFsdWVDYWNoZSBpcyBjYWNoZWQgb250byB0aGUgZWxlbWVudCBzbyB0aGF0IGl0IGNhbiBiZSB1c2VkXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHN1YnNlcXVlbnQgaG9va3MgaW4gdGhpcyBjYWxsIHRoYXQgYXJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2FtZSByb290IHByb3BlcnR5LiBJZiB3ZSBkaWRuJ3QgY2FjaGUgdGhlIHVwZGF0ZWRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290UHJvcGVydHlWYWx1ZSwgZWFjaCBzdWJzZXF1ZW50IHVwZGF0ZSB0byB0aGUgcm9vdCBwcm9wZXJ0eSBpbiB0aGlzIHRpY2sgcGFzcyB3b3VsZCByZXNldCB0aGUgcHJldmlvdXMgaG9vaydzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlcyB0byByb290UHJvcGVydHlWYWx1ZSBwcmlvciB0byBpbmplY3Rpb24uIEEgbmljZSBwZXJmb3JtYW5jZSBieXByb2R1Y3Qgb2Ygcm9vdFByb3BlcnR5VmFsdWUgY2FjaGluZyBpcyB0aGF0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2VxdWVudGx5IGNoYWluZWQgYW5pbWF0aW9ucyB1c2luZyB0aGUgc2FtZSBob29rUm9vdCBidXQgYSBkaWZmZXJlbnQgaG9vayBjYW4gdXNlIHRoaXMgY2FjaGVkIHJvb3RQcm9wZXJ0eVZhbHVlLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDU1MuSG9va3MucmVnaXN0ZXJlZFtwcm9wZXJ0eV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvb2tSb290ID0gQ1NTLkhvb2tzLmdldFJvb3QocHJvcGVydHkpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdFByb3BlcnR5VmFsdWVDYWNoZSA9IERhdGEoZWxlbWVudCkucm9vdFByb3BlcnR5VmFsdWVDYWNoZVtob29rUm9vdF07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvb3RQcm9wZXJ0eVZhbHVlQ2FjaGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR3ZWVuLnJvb3RQcm9wZXJ0eVZhbHVlID0gcm9vdFByb3BlcnR5VmFsdWVDYWNoZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBET00gVXBkYXRlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzZXRQcm9wZXJ0eVZhbHVlKCkgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcHJvcGVydHkgbmFtZSBhbmQgcHJvcGVydHkgdmFsdWUgcG9zdCBhbnkgbm9ybWFsaXphdGlvbiB0aGF0IG1heSBoYXZlIGJlZW4gcGVyZm9ybWVkLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIE5vdGU6IFRvIHNvbHZlIGFuIElFPD04IHBvc2l0aW9uaW5nIGJ1ZywgdGhlIHVuaXQgdHlwZSBpcyBkcm9wcGVkIHdoZW4gc2V0dGluZyBhIHByb3BlcnR5IHZhbHVlIG9mIDAuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkanVzdGVkU2V0RGF0YSA9IENTUy5zZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQsIC8qIFNFVCAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW4uY3VycmVudFZhbHVlICsgKHBhcnNlRmxvYXQoY3VycmVudFZhbHVlKSA9PT0gMCA/IFwiXCIgOiB0d2Vlbi51bml0VHlwZSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR3ZWVuLnJvb3RQcm9wZXJ0eVZhbHVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0d2Vlbi5zY3JvbGxEYXRhKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSG9va3M6IFBhcnQgSUlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogTm93IHRoYXQgd2UgaGF2ZSB0aGUgaG9vaydzIHVwZGF0ZWQgcm9vdFByb3BlcnR5VmFsdWUgKHRoZSBwb3N0LXByb2Nlc3NlZCB2YWx1ZSBwcm92aWRlZCBieSBhZGp1c3RlZFNldERhdGEpLCBjYWNoZSBpdCBvbnRvIHRoZSBlbGVtZW50LiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDU1MuSG9va3MucmVnaXN0ZXJlZFtwcm9wZXJ0eV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU2luY2UgYWRqdXN0ZWRTZXREYXRhIGNvbnRhaW5zIG5vcm1hbGl6ZWQgZGF0YSByZWFkeSBmb3IgRE9NIHVwZGF0aW5nLCB0aGUgcm9vdFByb3BlcnR5VmFsdWUgbmVlZHMgdG8gYmUgcmUtZXh0cmFjdGVkIGZyb20gaXRzIG5vcm1hbGl6ZWQgZm9ybS4gPz8gKi9cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW2hvb2tSb290XSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0YShlbGVtZW50KS5yb290UHJvcGVydHlWYWx1ZUNhY2hlW2hvb2tSb290XSA9IENTUy5Ob3JtYWxpemF0aW9ucy5yZWdpc3RlcmVkW2hvb2tSb290XShcImV4dHJhY3RcIiwgbnVsbCwgYWRqdXN0ZWRTZXREYXRhWzFdKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGEoZWxlbWVudCkucm9vdFByb3BlcnR5VmFsdWVDYWNoZVtob29rUm9vdF0gPSBhZGp1c3RlZFNldERhdGFbMV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNmb3Jtc1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIEZsYWcgd2hldGhlciBhIHRyYW5zZm9ybSBwcm9wZXJ0eSBpcyBiZWluZyBhbmltYXRlZCBzbyB0aGF0IGZsdXNoVHJhbnNmb3JtQ2FjaGUoKSBjYW4gYmUgdHJpZ2dlcmVkIG9uY2UgdGhpcyB0aWNrIHBhc3MgaXMgY29tcGxldGUuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkanVzdGVkU2V0RGF0YVswXSA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1Qcm9wZXJ0eUV4aXN0cyA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVIQVxuXHQgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgICAgICAgICAvKiBJZiBtb2JpbGVIQSBpcyBlbmFibGVkLCBzZXQgdGhlIHRyYW5zbGF0ZTNkIHRyYW5zZm9ybSB0byBudWxsIHRvIGZvcmNlIGhhcmR3YXJlIGFjY2VsZXJhdGlvbi5cblx0ICAgICAgICAgICAgICAgICAgICAgICBJdCdzIHNhZmUgdG8gb3ZlcnJpZGUgdGhpcyBwcm9wZXJ0eSBzaW5jZSBWZWxvY2l0eSBkb2Vzbid0IGFjdHVhbGx5IHN1cHBvcnQgaXRzIGFuaW1hdGlvbiAoaG9va3MgYXJlIHVzZWQgaW4gaXRzIHBsYWNlKS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tb2JpbGVIQSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvKiBEb24ndCBzZXQgdGhlIG51bGwgdHJhbnNmb3JtIGhhY2sgaWYgd2UndmUgYWxyZWFkeSBkb25lIHNvLiAqL1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0YShlbGVtZW50KS50cmFuc2Zvcm1DYWNoZS50cmFuc2xhdGUzZCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBBbGwgZW50cmllcyBvbiB0aGUgdHJhbnNmb3JtQ2FjaGUgb2JqZWN0IGFyZSBsYXRlciBjb25jYXRlbmF0ZWQgaW50byBhIHNpbmdsZSB0cmFuc2Zvcm0gc3RyaW5nIHZpYSBmbHVzaFRyYW5zZm9ybUNhY2hlKCkuICovXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBEYXRhKGVsZW1lbnQpLnRyYW5zZm9ybUNhY2hlLnRyYW5zbGF0ZTNkID0gXCIoMHB4LCAwcHgsIDBweClcIjtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtUHJvcGVydHlFeGlzdHMgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybVByb3BlcnR5RXhpc3RzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIENTUy5mbHVzaFRyYW5zZm9ybUNhY2hlKGVsZW1lbnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLyogVGhlIG5vbi1cIm5vbmVcIiBkaXNwbGF5IHZhbHVlIGlzIG9ubHkgYXBwbGllZCB0byBhbiBlbGVtZW50IG9uY2UgLS0gd2hlbiBpdHMgYXNzb2NpYXRlZCBjYWxsIGlzIGZpcnN0IHRpY2tlZCB0aHJvdWdoLlxuXHQgICAgICAgICAgICAgICAgICAgQWNjb3JkaW5nbHksIGl0J3Mgc2V0IHRvIGZhbHNlIHNvIHRoYXQgaXQgaXNuJ3QgcmUtcHJvY2Vzc2VkIGJ5IHRoaXMgY2FsbCBpbiB0aGUgbmV4dCB0aWNrLiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKG9wdHMuZGlzcGxheSAhPT0gdW5kZWZpbmVkICYmIG9wdHMuZGlzcGxheSAhPT0gXCJub25lXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBWZWxvY2l0eS5TdGF0ZS5jYWxsc1tpXVsyXS5kaXNwbGF5ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAob3B0cy52aXNpYmlsaXR5ICE9PSB1bmRlZmluZWQgJiYgb3B0cy52aXNpYmlsaXR5ICE9PSBcImhpZGRlblwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgVmVsb2NpdHkuU3RhdGUuY2FsbHNbaV1bMl0udmlzaWJpbGl0eSA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvKiBQYXNzIHRoZSBlbGVtZW50cyBhbmQgdGhlIHRpbWluZyBkYXRhIChwZXJjZW50Q29tcGxldGUsIG1zUmVtYWluaW5nLCB0aW1lU3RhcnQsIHR3ZWVuRHVtbXlWYWx1ZSkgaW50byB0aGUgcHJvZ3Jlc3MgY2FsbGJhY2suICovXG5cdCAgICAgICAgICAgICAgICBpZiAob3B0cy5wcm9ncmVzcykge1xuXHQgICAgICAgICAgICAgICAgICAgIG9wdHMucHJvZ3Jlc3MuY2FsbChjYWxsQ29udGFpbmVyWzFdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsQ29udGFpbmVyWzFdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50Q29tcGxldGUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDAsICh0aW1lU3RhcnQgKyBvcHRzLmR1cmF0aW9uKSAtIHRpbWVDdXJyZW50KSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVN0YXJ0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0d2VlbkR1bW15VmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvKiBJZiB0aGlzIGNhbGwgaGFzIGZpbmlzaGVkIHR3ZWVuaW5nLCBwYXNzIGl0cyBpbmRleCB0byBjb21wbGV0ZUNhbGwoKSB0byBoYW5kbGUgY2FsbCBjbGVhbnVwLiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKHBlcmNlbnRDb21wbGV0ZSA9PT0gMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2FsbChpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qIE5vdGU6IGNvbXBsZXRlQ2FsbCgpIHNldHMgdGhlIGlzVGlja2luZyBmbGFnIHRvIGZhbHNlIHdoZW4gdGhlIGxhc3QgY2FsbCBvbiBWZWxvY2l0eS5TdGF0ZS5jYWxscyBoYXMgY29tcGxldGVkLiAqL1xuXHQgICAgICAgIGlmIChWZWxvY2l0eS5TdGF0ZS5pc1RpY2tpbmcpIHtcblx0ICAgICAgICAgICAgdGlja2VyKHRpY2spO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgLyoqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICBDYWxsIENvbXBsZXRpb25cblx0ICAgICoqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgIC8qIE5vdGU6IFVubGlrZSB0aWNrKCksIHdoaWNoIHByb2Nlc3NlcyBhbGwgYWN0aXZlIGNhbGxzIGF0IG9uY2UsIGNhbGwgY29tcGxldGlvbiBpcyBoYW5kbGVkIG9uIGEgcGVyLWNhbGwgYmFzaXMuICovXG5cdCAgICBmdW5jdGlvbiBjb21wbGV0ZUNhbGwgKGNhbGxJbmRleCwgaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgLyogRW5zdXJlIHRoZSBjYWxsIGV4aXN0cy4gKi9cblx0ICAgICAgICBpZiAoIVZlbG9jaXR5LlN0YXRlLmNhbGxzW2NhbGxJbmRleF0pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8qIFB1bGwgdGhlIG1ldGFkYXRhIGZyb20gdGhlIGNhbGwuICovXG5cdCAgICAgICAgdmFyIGNhbGwgPSBWZWxvY2l0eS5TdGF0ZS5jYWxsc1tjYWxsSW5kZXhdWzBdLFxuXHQgICAgICAgICAgICBlbGVtZW50cyA9IFZlbG9jaXR5LlN0YXRlLmNhbGxzW2NhbGxJbmRleF1bMV0sXG5cdCAgICAgICAgICAgIG9wdHMgPSBWZWxvY2l0eS5TdGF0ZS5jYWxsc1tjYWxsSW5kZXhdWzJdLFxuXHQgICAgICAgICAgICByZXNvbHZlciA9IFZlbG9jaXR5LlN0YXRlLmNhbGxzW2NhbGxJbmRleF1bNF07XG5cblx0ICAgICAgICB2YXIgcmVtYWluaW5nQ2FsbHNFeGlzdCA9IGZhbHNlO1xuXG5cdCAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICAgICAgICAgICBFbGVtZW50IEZpbmFsaXphdGlvblxuXHQgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgY2FsbExlbmd0aCA9IGNhbGwubGVuZ3RoOyBpIDwgY2FsbExlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBlbGVtZW50ID0gY2FsbFtpXS5lbGVtZW50O1xuXG5cdCAgICAgICAgICAgIC8qIElmIHRoZSB1c2VyIHNldCBkaXNwbGF5IHRvIFwibm9uZVwiIChpbnRlbmRpbmcgdG8gaGlkZSB0aGUgZWxlbWVudCksIHNldCBpdCBub3cgdGhhdCB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuICovXG5cdCAgICAgICAgICAgIC8qIE5vdGU6IGRpc3BsYXk6bm9uZSBpc24ndCBzZXQgd2hlbiBjYWxscyBhcmUgbWFudWFsbHkgc3RvcHBlZCAodmlhIFZlbG9jaXR5KFwic3RvcFwiKS4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogRGlzcGxheSBnZXRzIGlnbm9yZWQgd2l0aCBcInJldmVyc2VcIiBjYWxscyBhbmQgaW5maW5pdGUgbG9vcHMsIHNpbmNlIHRoaXMgYmVoYXZpb3Igd291bGQgYmUgdW5kZXNpcmFibGUuICovXG5cdCAgICAgICAgICAgIGlmICghaXNTdG9wcGVkICYmICFvcHRzLmxvb3ApIHtcblx0ICAgICAgICAgICAgICAgIGlmIChvcHRzLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgQ1NTLnNldFByb3BlcnR5VmFsdWUoZWxlbWVudCwgXCJkaXNwbGF5XCIsIG9wdHMuZGlzcGxheSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmIChvcHRzLnZpc2liaWxpdHkgPT09IFwiaGlkZGVuXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBDU1Muc2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBcInZpc2liaWxpdHlcIiwgb3B0cy52aXNpYmlsaXR5KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qIElmIHRoZSBlbGVtZW50J3MgcXVldWUgaXMgZW1wdHkgKGlmIG9ubHkgdGhlIFwiaW5wcm9ncmVzc1wiIGl0ZW0gaXMgbGVmdCBhdCBwb3NpdGlvbiAwKSBvciBpZiBpdHMgcXVldWUgaXMgYWJvdXQgdG8gcnVuXG5cdCAgICAgICAgICAgICAgIGEgbm9uLVZlbG9jaXR5LWluaXRpYXRlZCBlbnRyeSwgdHVybiBvZmYgdGhlIGlzQW5pbWF0aW5nIGZsYWcuIEEgbm9uLVZlbG9jaXR5LWluaXRpYXRpZWQgcXVldWUgZW50cnkncyBsb2dpYyBtaWdodCBhbHRlclxuXHQgICAgICAgICAgICAgICBhbiBlbGVtZW50J3MgQ1NTIHZhbHVlcyBhbmQgdGhlcmVieSBjYXVzZSBWZWxvY2l0eSdzIGNhY2hlZCB2YWx1ZSBkYXRhIHRvIGdvIHN0YWxlLiBUbyBkZXRlY3QgaWYgYSBxdWV1ZSBlbnRyeSB3YXMgaW5pdGlhdGVkIGJ5IFZlbG9jaXR5LFxuXHQgICAgICAgICAgICAgICB3ZSBjaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBvdXIgc3BlY2lhbCBWZWxvY2l0eS5xdWV1ZUVudHJ5RmxhZyBkZWNsYXJhdGlvbiwgd2hpY2ggbWluaWZpZXJzIHdvbid0IHJlbmFtZSBzaW5jZSB0aGUgZmxhZ1xuXHQgICAgICAgICAgICAgICBpcyBhc3NpZ25lZCB0byBqUXVlcnkncyBnbG9iYWwgJCBvYmplY3QgYW5kIHRodXMgZXhpc3RzIG91dCBvZiBWZWxvY2l0eSdzIG93biBzY29wZS4gKi9cblx0ICAgICAgICAgICAgaWYgKG9wdHMubG9vcCAhPT0gdHJ1ZSAmJiAoJC5xdWV1ZShlbGVtZW50KVsxXSA9PT0gdW5kZWZpbmVkIHx8ICEvXFwudmVsb2NpdHlRdWV1ZUVudHJ5RmxhZy9pLnRlc3QoJC5xdWV1ZShlbGVtZW50KVsxXSkpKSB7XG5cdCAgICAgICAgICAgICAgICAvKiBUaGUgZWxlbWVudCBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQuIEVuc3VyZSB0aGF0IGl0cyBkYXRhIGNhY2hlIHN0aWxsIGV4aXN0cyBiZWZvcmUgYWN0aW5nIG9uIGl0LiAqL1xuXHQgICAgICAgICAgICAgICAgaWYgKERhdGEoZWxlbWVudCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBEYXRhKGVsZW1lbnQpLmlzQW5pbWF0aW5nID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogQ2xlYXIgdGhlIGVsZW1lbnQncyByb290UHJvcGVydHlWYWx1ZUNhY2hlLCB3aGljaCB3aWxsIGJlY29tZSBzdGFsZS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBEYXRhKGVsZW1lbnQpLnJvb3RQcm9wZXJ0eVZhbHVlQ2FjaGUgPSB7fTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1IQVByb3BlcnR5RXhpc3RzID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgLyogSWYgYW55IDNEIHRyYW5zZm9ybSBzdWJwcm9wZXJ0eSBpcyBhdCBpdHMgZGVmYXVsdCB2YWx1ZSAocmVnYXJkbGVzcyBvZiB1bml0IHR5cGUpLCByZW1vdmUgaXQuICovXG5cdCAgICAgICAgICAgICAgICAgICAgJC5lYWNoKENTUy5MaXN0cy50cmFuc2Zvcm1zM0QsIGZ1bmN0aW9uKGksIHRyYW5zZm9ybU5hbWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IC9ec2NhbGUvLnRlc3QodHJhbnNmb3JtTmFtZSkgPyAxIDogMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGVbdHJhbnNmb3JtTmFtZV07XG5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGVbdHJhbnNmb3JtTmFtZV0gIT09IHVuZGVmaW5lZCAmJiBuZXcgUmVnRXhwKFwiXlxcXFwoXCIgKyBkZWZhdWx0VmFsdWUgKyBcIlteLl1cIikudGVzdChjdXJyZW50VmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1IQVByb3BlcnR5RXhpc3RzID0gdHJ1ZTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGVbdHJhbnNmb3JtTmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8qIE1vYmlsZSBkZXZpY2VzIGhhdmUgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIHJlbW92ZWQgYXQgdGhlIGVuZCBvZiB0aGUgYW5pbWF0aW9uIGluIG9yZGVyIHRvIGF2b2lkIGhvZ2dpbmcgdGhlIEdQVSdzIG1lbW9yeS4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tb2JpbGVIQSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1IQVByb3BlcnR5RXhpc3RzID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIERhdGEoZWxlbWVudCkudHJhbnNmb3JtQ2FjaGUudHJhbnNsYXRlM2Q7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogRmx1c2ggdGhlIHN1YnByb3BlcnR5IHJlbW92YWxzIHRvIHRoZSBET00uICovXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybUhBUHJvcGVydHlFeGlzdHMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgQ1NTLmZsdXNoVHJhbnNmb3JtQ2FjaGUoZWxlbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogUmVtb3ZlIHRoZSBcInZlbG9jaXR5LWFuaW1hdGluZ1wiIGluZGljYXRvciBjbGFzcy4gKi9cblx0ICAgICAgICAgICAgICAgICAgICBDU1MuVmFsdWVzLnJlbW92ZUNsYXNzKGVsZW1lbnQsIFwidmVsb2NpdHktYW5pbWF0aW5nXCIpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICBPcHRpb246IENvbXBsZXRlXG5cdCAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKi9cblxuXHQgICAgICAgICAgICAvKiBDb21wbGV0ZSBpcyBmaXJlZCBvbmNlIHBlciBjYWxsIChub3Qgb25jZSBwZXIgZWxlbWVudCkgYW5kIGlzIHBhc3NlZCB0aGUgZnVsbCByYXcgRE9NIGVsZW1lbnQgc2V0IGFzIGJvdGggaXRzIGNvbnRleHQgYW5kIGl0cyBmaXJzdCBhcmd1bWVudC4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogQ2FsbGJhY2tzIGFyZW4ndCBmaXJlZCB3aGVuIGNhbGxzIGFyZSBtYW51YWxseSBzdG9wcGVkICh2aWEgVmVsb2NpdHkoXCJzdG9wXCIpLiAqL1xuXHQgICAgICAgICAgICBpZiAoIWlzU3RvcHBlZCAmJiBvcHRzLmNvbXBsZXRlICYmICFvcHRzLmxvb3AgJiYgKGkgPT09IGNhbGxMZW5ndGggLSAxKSkge1xuXHQgICAgICAgICAgICAgICAgLyogV2UgdGhyb3cgY2FsbGJhY2tzIGluIGEgc2V0VGltZW91dCBzbyB0aGF0IHRocm93biBlcnJvcnMgZG9uJ3QgaGFsdCB0aGUgZXhlY3V0aW9uIG9mIFZlbG9jaXR5IGl0c2VsZi4gKi9cblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgb3B0cy5jb21wbGV0ZS5jYWxsKGVsZW1lbnRzLCBlbGVtZW50cyk7XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuXHQgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGVycm9yOyB9LCAxKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICAgICAgICAgIFByb21pc2UgUmVzb2x2aW5nXG5cdCAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgLyogTm90ZTogSW5maW5pdGUgbG9vcHMgZG9uJ3QgcmV0dXJuIHByb21pc2VzLiAqL1xuXHQgICAgICAgICAgICBpZiAocmVzb2x2ZXIgJiYgb3B0cy5sb29wICE9PSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICByZXNvbHZlcihlbGVtZW50cyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgICAgICBPcHRpb246IExvb3AgKEluZmluaXRlKVxuXHQgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAgICAgICAgIGlmIChEYXRhKGVsZW1lbnQpICYmIG9wdHMubG9vcCA9PT0gdHJ1ZSAmJiAhaXNTdG9wcGVkKSB7XG5cdCAgICAgICAgICAgICAgICAvKiBJZiBhIHJvdGF0ZVgvWS9aIHByb3BlcnR5IGlzIGJlaW5nIGFuaW1hdGVkIHRvIDM2MCBkZWcgd2l0aCBsb29wOnRydWUsIHN3YXAgdHdlZW4gc3RhcnQvZW5kIHZhbHVlcyB0byBlbmFibGVcblx0ICAgICAgICAgICAgICAgICAgIGNvbnRpbnVvdXMgaXRlcmF0aXZlIHJvdGF0aW9uIGxvb3BpbmcuIChPdGhlcmlzZSwgdGhlIGVsZW1lbnQgd291bGQganVzdCByb3RhdGUgYmFjayBhbmQgZm9ydGguKSAqL1xuXHQgICAgICAgICAgICAgICAgJC5lYWNoKERhdGEoZWxlbWVudCkudHdlZW5zQ29udGFpbmVyLCBmdW5jdGlvbihwcm9wZXJ0eU5hbWUsIHR3ZWVuQ29udGFpbmVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKC9ecm90YXRlLy50ZXN0KHByb3BlcnR5TmFtZSkgJiYgcGFyc2VGbG9hdCh0d2VlbkNvbnRhaW5lci5lbmRWYWx1ZSkgPT09IDM2MCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0d2VlbkNvbnRhaW5lci5lbmRWYWx1ZSA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR3ZWVuQ29udGFpbmVyLnN0YXJ0VmFsdWUgPSAzNjA7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKC9eYmFja2dyb3VuZFBvc2l0aW9uLy50ZXN0KHByb3BlcnR5TmFtZSkgJiYgcGFyc2VGbG9hdCh0d2VlbkNvbnRhaW5lci5lbmRWYWx1ZSkgPT09IDEwMCAmJiB0d2VlbkNvbnRhaW5lci51bml0VHlwZSA9PT0gXCIlXCIpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW5Db250YWluZXIuZW5kVmFsdWUgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0d2VlbkNvbnRhaW5lci5zdGFydFZhbHVlID0gMTAwO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgICAgICBWZWxvY2l0eShlbGVtZW50LCBcInJldmVyc2VcIiwgeyBsb29wOiB0cnVlLCBkZWxheTogb3B0cy5kZWxheSB9KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8qKioqKioqKioqKioqKipcblx0ICAgICAgICAgICAgICAgRGVxdWV1ZWluZ1xuXHQgICAgICAgICAgICAqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAgICAgLyogRmlyZSB0aGUgbmV4dCBjYWxsIGluIHRoZSBxdWV1ZSBzbyBsb25nIGFzIHRoaXMgY2FsbCdzIHF1ZXVlIHdhc24ndCBzZXQgdG8gZmFsc2UgKHRvIHRyaWdnZXIgYSBwYXJhbGxlbCBhbmltYXRpb24pLFxuXHQgICAgICAgICAgICAgICB3aGljaCB3b3VsZCBoYXZlIGFscmVhZHkgY2F1c2VkIHRoZSBuZXh0IGNhbGwgdG8gZmlyZS4gTm90ZTogRXZlbiBpZiB0aGUgZW5kIG9mIHRoZSBhbmltYXRpb24gcXVldWUgaGFzIGJlZW4gcmVhY2hlZCxcblx0ICAgICAgICAgICAgICAgJC5kZXF1ZXVlKCkgbXVzdCBzdGlsbCBiZSBjYWxsZWQgaW4gb3JkZXIgdG8gY29tcGxldGVseSBjbGVhciBqUXVlcnkncyBhbmltYXRpb24gcXVldWUuICovXG5cdCAgICAgICAgICAgIGlmIChvcHRzLnF1ZXVlICE9PSBmYWxzZSkge1xuXHQgICAgICAgICAgICAgICAgJC5kZXF1ZXVlKGVsZW1lbnQsIG9wdHMucXVldWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKlxuXHQgICAgICAgICAgIENhbGxzIEFycmF5IENsZWFudXBcblx0ICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgICAgICAvKiBTaW5jZSB0aGlzIGNhbGwgaXMgY29tcGxldGUsIHNldCBpdCB0byBmYWxzZSBzbyB0aGF0IHRoZSByQUYgdGljayBza2lwcyBpdC4gVGhpcyBhcnJheSBpcyBsYXRlciBjb21wYWN0ZWQgdmlhIGNvbXBhY3RTcGFyc2VBcnJheSgpLlxuXHQgICAgICAgICAgKEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB0aGUgY2FsbCBpcyBzZXQgdG8gZmFsc2UgaW5zdGVhZCBvZiBiZWluZyBkZWxldGVkIGZyb20gdGhlIGFycmF5OiBodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9zcGVlZC92OC8pICovXG5cdCAgICAgICAgVmVsb2NpdHkuU3RhdGUuY2FsbHNbY2FsbEluZGV4XSA9IGZhbHNlO1xuXG5cdCAgICAgICAgLyogSXRlcmF0ZSB0aHJvdWdoIHRoZSBjYWxscyBhcnJheSB0byBkZXRlcm1pbmUgaWYgdGhpcyB3YXMgdGhlIGZpbmFsIGluLXByb2dyZXNzIGFuaW1hdGlvbi5cblx0ICAgICAgICAgICBJZiBzbywgc2V0IGEgZmxhZyB0byBlbmQgdGlja2luZyBhbmQgY2xlYXIgdGhlIGNhbGxzIGFycmF5LiAqL1xuXHQgICAgICAgIGZvciAodmFyIGogPSAwLCBjYWxsc0xlbmd0aCA9IFZlbG9jaXR5LlN0YXRlLmNhbGxzLmxlbmd0aDsgaiA8IGNhbGxzTGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgaWYgKFZlbG9jaXR5LlN0YXRlLmNhbGxzW2pdICE9PSBmYWxzZSkge1xuXHQgICAgICAgICAgICAgICAgcmVtYWluaW5nQ2FsbHNFeGlzdCA9IHRydWU7XG5cblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHJlbWFpbmluZ0NhbGxzRXhpc3QgPT09IGZhbHNlKSB7XG5cdCAgICAgICAgICAgIC8qIHRpY2soKSB3aWxsIGRldGVjdCB0aGlzIGZsYWcgdXBvbiBpdHMgbmV4dCBpdGVyYXRpb24gYW5kIHN1YnNlcXVlbnRseSB0dXJuIGl0c2VsZiBvZmYuICovXG5cdCAgICAgICAgICAgIFZlbG9jaXR5LlN0YXRlLmlzVGlja2luZyA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgIC8qIENsZWFyIHRoZSBjYWxscyBhcnJheSBzbyB0aGF0IGl0cyBsZW5ndGggaXMgcmVzZXQuICovXG5cdCAgICAgICAgICAgIGRlbGV0ZSBWZWxvY2l0eS5TdGF0ZS5jYWxscztcblx0ICAgICAgICAgICAgVmVsb2NpdHkuU3RhdGUuY2FsbHMgPSBbXTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIC8qKioqKioqKioqKioqKioqKipcblx0ICAgICAgICBGcmFtZXdvcmtzXG5cdCAgICAqKioqKioqKioqKioqKioqKiovXG5cblx0ICAgIC8qIEJvdGggalF1ZXJ5IGFuZCBaZXB0byBhbGxvdyB0aGVpciAkLmZuIG9iamVjdCB0byBiZSBleHRlbmRlZCB0byBhbGxvdyB3cmFwcGVkIGVsZW1lbnRzIHRvIGJlIHN1YmplY3RlZCB0byBwbHVnaW4gY2FsbHMuXG5cdCAgICAgICBJZiBlaXRoZXIgZnJhbWV3b3JrIGlzIGxvYWRlZCwgcmVnaXN0ZXIgYSBcInZlbG9jaXR5XCIgZXh0ZW5zaW9uIHBvaW50aW5nIHRvIFZlbG9jaXR5J3MgY29yZSBhbmltYXRlKCkgbWV0aG9kLiAgVmVsb2NpdHlcblx0ICAgICAgIGFsc28gcmVnaXN0ZXJzIGl0c2VsZiBvbnRvIGEgZ2xvYmFsIGNvbnRhaW5lciAod2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG8gfHwgd2luZG93KSBzbyB0aGF0IGNlcnRhaW4gZmVhdHVyZXMgYXJlXG5cdCAgICAgICBhY2Nlc3NpYmxlIGJleW9uZCBqdXN0IGEgcGVyLWVsZW1lbnQgc2NvcGUuIFRoaXMgbWFzdGVyIG9iamVjdCBjb250YWlucyBhbiAuYW5pbWF0ZSgpIG1ldGhvZCwgd2hpY2ggaXMgbGF0ZXIgYXNzaWduZWQgdG8gJC5mblxuXHQgICAgICAgKGlmIGpRdWVyeSBvciBaZXB0byBhcmUgcHJlc2VudCkuIEFjY29yZGluZ2x5LCBWZWxvY2l0eSBjYW4gYm90aCBhY3Qgb24gd3JhcHBlZCBET00gZWxlbWVudHMgYW5kIHN0YW5kIGFsb25lIGZvciB0YXJnZXRpbmcgcmF3IERPTSBlbGVtZW50cy4gKi9cblx0ICAgIGdsb2JhbC5WZWxvY2l0eSA9IFZlbG9jaXR5O1xuXG5cdCAgICBpZiAoZ2xvYmFsICE9PSB3aW5kb3cpIHtcblx0ICAgICAgICAvKiBBc3NpZ24gdGhlIGVsZW1lbnQgZnVuY3Rpb24gdG8gVmVsb2NpdHkncyBjb3JlIGFuaW1hdGUoKSBtZXRob2QuICovXG5cdCAgICAgICAgZ2xvYmFsLmZuLnZlbG9jaXR5ID0gYW5pbWF0ZTtcblx0ICAgICAgICAvKiBBc3NpZ24gdGhlIG9iamVjdCBmdW5jdGlvbidzIGRlZmF1bHRzIHRvIFZlbG9jaXR5J3MgZ2xvYmFsIGRlZmF1bHRzIG9iamVjdC4gKi9cblx0ICAgICAgICBnbG9iYWwuZm4udmVsb2NpdHkuZGVmYXVsdHMgPSBWZWxvY2l0eS5kZWZhdWx0cztcblx0ICAgIH1cblxuXHQgICAgLyoqKioqKioqKioqKioqKioqKioqKioqXG5cdCAgICAgICBQYWNrYWdlZCBSZWRpcmVjdHNcblx0ICAgICoqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdCAgICAvKiBzbGlkZVVwLCBzbGlkZURvd24gKi9cblx0ICAgICQuZWFjaChbIFwiRG93blwiLCBcIlVwXCIgXSwgZnVuY3Rpb24oaSwgZGlyZWN0aW9uKSB7XG5cdCAgICAgICAgVmVsb2NpdHkuUmVkaXJlY3RzW1wic2xpZGVcIiArIGRpcmVjdGlvbl0gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucywgZWxlbWVudHNJbmRleCwgZWxlbWVudHNTaXplLCBlbGVtZW50cywgcHJvbWlzZURhdGEpIHtcblx0ICAgICAgICAgICAgdmFyIG9wdHMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyksXG5cdCAgICAgICAgICAgICAgICBiZWdpbiA9IG9wdHMuYmVnaW4sXG5cdCAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IG9wdHMuY29tcGxldGUsXG5cdCAgICAgICAgICAgICAgICBjb21wdXRlZFZhbHVlcyA9IHsgaGVpZ2h0OiBcIlwiLCBtYXJnaW5Ub3A6IFwiXCIsIG1hcmdpbkJvdHRvbTogXCJcIiwgcGFkZGluZ1RvcDogXCJcIiwgcGFkZGluZ0JvdHRvbTogXCJcIiB9LFxuXHQgICAgICAgICAgICAgICAgaW5saW5lVmFsdWVzID0ge307XG5cblx0ICAgICAgICAgICAgaWYgKG9wdHMuZGlzcGxheSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAvKiBTaG93IHRoZSBlbGVtZW50IGJlZm9yZSBzbGlkZURvd24gYmVnaW5zIGFuZCBoaWRlIHRoZSBlbGVtZW50IGFmdGVyIHNsaWRlVXAgY29tcGxldGVzLiAqL1xuXHQgICAgICAgICAgICAgICAgLyogTm90ZTogSW5saW5lIGVsZW1lbnRzIGNhbm5vdCBoYXZlIGRpbWVuc2lvbnMgYW5pbWF0ZWQsIHNvIHRoZXkncmUgcmV2ZXJ0ZWQgdG8gaW5saW5lLWJsb2NrLiAqL1xuXHQgICAgICAgICAgICAgICAgb3B0cy5kaXNwbGF5ID0gKGRpcmVjdGlvbiA9PT0gXCJEb3duXCIgPyAoVmVsb2NpdHkuQ1NTLlZhbHVlcy5nZXREaXNwbGF5VHlwZShlbGVtZW50KSA9PT0gXCJpbmxpbmVcIiA/IFwiaW5saW5lLWJsb2NrXCIgOiBcImJsb2NrXCIpIDogXCJub25lXCIpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgb3B0cy5iZWdpbiA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICAgICAgLyogSWYgdGhlIHVzZXIgcGFzc2VkIGluIGEgYmVnaW4gY2FsbGJhY2ssIGZpcmUgaXQgbm93LiAqL1xuXHQgICAgICAgICAgICAgICAgYmVnaW4gJiYgYmVnaW4uY2FsbChlbGVtZW50cywgZWxlbWVudHMpO1xuXG5cdCAgICAgICAgICAgICAgICAvKiBDYWNoZSB0aGUgZWxlbWVudHMnIG9yaWdpbmFsIHZlcnRpY2FsIGRpbWVuc2lvbmFsIHByb3BlcnR5IHZhbHVlcyBzbyB0aGF0IHdlIGNhbiBhbmltYXRlIGJhY2sgdG8gdGhlbS4gKi9cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGNvbXB1dGVkVmFsdWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5saW5lVmFsdWVzW3Byb3BlcnR5XSA9IGVsZW1lbnQuc3R5bGVbcHJvcGVydHldO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLyogRm9yIHNsaWRlRG93biwgdXNlIGZvcmNlZmVlZGluZyB0byBhbmltYXRlIGFsbCB2ZXJ0aWNhbCBwcm9wZXJ0aWVzIGZyb20gMC4gRm9yIHNsaWRlVXAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgdXNlIGZvcmNlZmVlZGluZyB0byBzdGFydCBmcm9tIGNvbXB1dGVkIHZhbHVlcyBhbmQgYW5pbWF0ZSBkb3duIHRvIDAuICovXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5VmFsdWUgPSBWZWxvY2l0eS5DU1MuZ2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSk7XG5cdCAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWRWYWx1ZXNbcHJvcGVydHldID0gKGRpcmVjdGlvbiA9PT0gXCJEb3duXCIpID8gWyBwcm9wZXJ0eVZhbHVlLCAwIF0gOiBbIDAsIHByb3BlcnR5VmFsdWUgXTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLyogRm9yY2UgdmVydGljYWwgb3ZlcmZsb3cgY29udGVudCB0byBjbGlwIHNvIHRoYXQgc2xpZGluZyB3b3JrcyBhcyBleHBlY3RlZC4gKi9cblx0ICAgICAgICAgICAgICAgIGlubGluZVZhbHVlcy5vdmVyZmxvdyA9IGVsZW1lbnQuc3R5bGUub3ZlcmZsb3c7XG5cdCAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIG9wdHMuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgICAgIC8qIFJlc2V0IGVsZW1lbnQgdG8gaXRzIHByZS1zbGlkZSBpbmxpbmUgdmFsdWVzIG9uY2UgaXRzIHNsaWRlIGFuaW1hdGlvbiBpcyBjb21wbGV0ZS4gKi9cblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGlubGluZVZhbHVlcykge1xuXHQgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gaW5saW5lVmFsdWVzW3Byb3BlcnR5XTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLyogSWYgdGhlIHVzZXIgcGFzc2VkIGluIGEgY29tcGxldGUgY2FsbGJhY2ssIGZpcmUgaXQgbm93LiAqL1xuXHQgICAgICAgICAgICAgICAgY29tcGxldGUgJiYgY29tcGxldGUuY2FsbChlbGVtZW50cywgZWxlbWVudHMpO1xuXHQgICAgICAgICAgICAgICAgcHJvbWlzZURhdGEgJiYgcHJvbWlzZURhdGEucmVzb2x2ZXIoZWxlbWVudHMpO1xuXHQgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgIFZlbG9jaXR5KGVsZW1lbnQsIGNvbXB1dGVkVmFsdWVzLCBvcHRzKTtcblx0ICAgICAgICB9O1xuXHQgICAgfSk7XG5cblx0ICAgIC8qIGZhZGVJbiwgZmFkZU91dCAqL1xuXHQgICAgJC5lYWNoKFsgXCJJblwiLCBcIk91dFwiIF0sIGZ1bmN0aW9uKGksIGRpcmVjdGlvbikge1xuXHQgICAgICAgIFZlbG9jaXR5LlJlZGlyZWN0c1tcImZhZGVcIiArIGRpcmVjdGlvbl0gPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucywgZWxlbWVudHNJbmRleCwgZWxlbWVudHNTaXplLCBlbGVtZW50cywgcHJvbWlzZURhdGEpIHtcblx0ICAgICAgICAgICAgdmFyIG9wdHMgPSAkLmV4dGVuZCh7fSwgb3B0aW9ucyksXG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzTWFwID0geyBvcGFjaXR5OiAoZGlyZWN0aW9uID09PSBcIkluXCIpID8gMSA6IDAgfSxcblx0ICAgICAgICAgICAgICAgIG9yaWdpbmFsQ29tcGxldGUgPSBvcHRzLmNvbXBsZXRlO1xuXG5cdCAgICAgICAgICAgIC8qIFNpbmNlIHJlZGlyZWN0cyBhcmUgdHJpZ2dlcmVkIGluZGl2aWR1YWxseSBmb3IgZWFjaCBlbGVtZW50IGluIHRoZSBhbmltYXRlZCBzZXQsIGF2b2lkIHJlcGVhdGVkbHkgdHJpZ2dlcmluZ1xuXHQgICAgICAgICAgICAgICBjYWxsYmFja3MgYnkgZmlyaW5nIHRoZW0gb25seSB3aGVuIHRoZSBmaW5hbCBlbGVtZW50IGhhcyBiZWVuIHJlYWNoZWQuICovXG5cdCAgICAgICAgICAgIGlmIChlbGVtZW50c0luZGV4ICE9PSBlbGVtZW50c1NpemUgLSAxKSB7XG5cdCAgICAgICAgICAgICAgICBvcHRzLmNvbXBsZXRlID0gb3B0cy5iZWdpbiA9IG51bGw7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBvcHRzLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ29tcGxldGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxDb21wbGV0ZS5jYWxsKGVsZW1lbnRzLCBlbGVtZW50cyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgcHJvbWlzZURhdGEgJiYgcHJvbWlzZURhdGEucmVzb2x2ZXIoZWxlbWVudHMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLyogSWYgYSBkaXNwbGF5IHdhcyBwYXNzZWQgaW4sIHVzZSBpdC4gT3RoZXJ3aXNlLCBkZWZhdWx0IHRvIFwibm9uZVwiIGZvciBmYWRlT3V0IG9yIHRoZSBlbGVtZW50LXNwZWNpZmljIGRlZmF1bHQgZm9yIGZhZGVJbi4gKi9cblx0ICAgICAgICAgICAgLyogTm90ZTogV2UgYWxsb3cgdXNlcnMgdG8gcGFzcyBpbiBcIm51bGxcIiB0byBza2lwIGRpc3BsYXkgc2V0dGluZyBhbHRvZ2V0aGVyLiAqL1xuXHQgICAgICAgICAgICBpZiAob3B0cy5kaXNwbGF5ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIG9wdHMuZGlzcGxheSA9IChkaXJlY3Rpb24gPT09IFwiSW5cIiA/IFwiYXV0b1wiIDogXCJub25lXCIpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgVmVsb2NpdHkodGhpcywgcHJvcGVydGllc01hcCwgb3B0cyk7XG5cdCAgICAgICAgfTtcblx0ICAgIH0pO1xuXG5cdCAgICByZXR1cm4gVmVsb2NpdHk7XG5cdH0oKHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvIHx8IHdpbmRvdyksIHdpbmRvdywgZG9jdW1lbnQpO1xuXHR9KSk7XG5cblx0LyoqKioqKioqKioqKioqKioqKlxuXHQgICBLbm93biBJc3N1ZXNcblx0KioqKioqKioqKioqKioqKioqL1xuXG5cdC8qIFRoZSBDU1Mgc3BlYyBtYW5kYXRlcyB0aGF0IHRoZSB0cmFuc2xhdGVYL1kvWiB0cmFuc2Zvcm1zIGFyZSAlLXJlbGF0aXZlIHRvIHRoZSBlbGVtZW50IGl0c2VsZiAtLSBub3QgaXRzIHBhcmVudC5cblx0VmVsb2NpdHksIGhvd2V2ZXIsIGRvZXNuJ3QgbWFrZSB0aGlzIGRpc3RpbmN0aW9uLiBUaHVzLCBjb252ZXJ0aW5nIHRvIG9yIGZyb20gdGhlICUgdW5pdCB3aXRoIHRoZXNlIHN1YnByb3BlcnRpZXNcblx0d2lsbCBwcm9kdWNlIGFuIGluYWNjdXJhdGUgY29udmVyc2lvbiB2YWx1ZS4gVGhlIHNhbWUgaXNzdWUgZXhpc3RzIHdpdGggdGhlIGN4L2N5IGF0dHJpYnV0ZXMgb2YgU1ZHIGNpcmNsZXMgYW5kIGVsbGlwc2VzLiAqL1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIEZseW91dEZhY3RvcnkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICB2YXIgcGFkZGluZyA9IDEwO1xuXHQgIHZhciBob3ZlcmFibGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWZseW91dF0nKSk7XG5cblx0ICBob3ZlcmFibGVzLmZvckVhY2goZnVuY3Rpb24oaG92ZXJhYmxlKSB7XG5cdCAgICB2YXIgZmx5b3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBob3ZlcmFibGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZseW91dCcpKTtcblxuXHQgICAgaG92ZXJhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKCkge1xuXHQgICAgICBmbHlvdXQuY2xhc3NMaXN0LnJlbW92ZSgnZmx5b3V0LWhpZGRlbicpO1xuXHQgICAgICB2YXIgbm9kZSA9IGhvdmVyYWJsZTtcblx0ICAgICAgdmFyIGxlZnQgPSAwO1xuXHQgICAgICB2YXIgdG9wID0gMDtcblxuXHQgICAgICBkbyB7XG5cdCAgICAgICAgbGVmdCArPSBub2RlLm9mZnNldExlZnQ7XG5cdCAgICAgICAgdG9wICs9IG5vZGUub2Zmc2V0VG9wO1xuXHQgICAgICB9IHdoaWxlICgobm9kZSA9IG5vZGUub2Zmc2V0UGFyZW50KSAhPT0gbnVsbCk7XG5cblx0ICAgICAgbGVmdCA9IGxlZnQgKyBob3ZlcmFibGUub2Zmc2V0V2lkdGggLyAyO1xuXHQgICAgICB0b3AgPSB0b3AgKyBob3ZlcmFibGUub2Zmc2V0SGVpZ2h0ICsgcGFkZGluZztcblxuXHQgICAgICBmbHlvdXQuc3R5bGUubGVmdCA9IGxlZnQgKyAncHgnO1xuXHQgICAgICBmbHlvdXQuc3R5bGUudG9wID0gdG9wICsgJ3B4Jztcblx0ICAgIH0pO1xuXG5cdCAgICBob3ZlcmFibGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcblx0ICAgICAgZmx5b3V0LmNsYXNzTGlzdC5hZGQoJ2ZseW91dC1oaWRkZW4nKTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXG5cdH1cblxuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIE1lbnVGYWN0b3J5ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihlbGVtZW50KSB7XG5cdCAgdmFyIG1lbnVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudScpKTtcblx0ICB2YXIgdG9nZ2xlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbWVudS10b2dnbGVdJykpO1xuXG5cdCAgdG9nZ2xlcy5mb3JFYWNoKGZ1bmN0aW9uKHRvZ2dsZSkge1xuXHQgICAgdG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdCAgICAgIHZhciBtZW51ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHRvZ2dsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVudS10b2dnbGUnKSk7XG5cdCAgICAgIG1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJyk7XG5cdCAgICB9KTtcblx0ICB9KTtcblxuXHQgIG1lbnVzLmZvckVhY2goZnVuY3Rpb24obWVudSkge1xuXHQgICAgdmFyIGRpc21pc3NhbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtZW51LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1lbnUtZGlzbWlzc10nKSk7XG5cblx0ICAgIGRpc21pc3NhbHMuZm9yRWFjaChmdW5jdGlvbihkaXNtaXNzYWwpIHtcblx0ICAgICAgZGlzbWlzc2FsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblx0ICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tZW51LXRvZ2dsZT1cIicgKyBtZW51LmlkICsgJ1wiXScpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuXHQgICAgICB9KTtcblx0ICAgIH0pO1xuXHQgIH0pO1xuXHR9XG5cblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBNb2RhbEZhY3RvcnkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICB0aGlzLnJvb3QgPSBlbGVtZW50O1xuXHQgIHRoaXMuZGlzbWlzc2FscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1vZGFsLWRpc21pc3NdJykpO1xuXHQgIHRoaXMub3BlbmVycyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1vZGFsXScpKTtcblx0ICB0aGlzLmF0dGFjaEV2ZW50cygpO1xuXHR9XG5cblx0TW9kYWxGYWN0b3J5LnByb3RvdHlwZSA9IHtcblx0ICBhdHRhY2hFdmVudHM6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5kaXNtaXNzYWxzLmZvckVhY2goZnVuY3Rpb24gKGRpc21pc3NhbCkge1xuXHQgICAgICBkaXNtaXNzYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRpc21pc3MuYmluZCh0aGlzKSk7XG5cdCAgICB9LCB0aGlzKTtcblxuXHQgICAgdGhpcy5vcGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKG9wZW5lcikge1xuXHQgICAgICBvcGVuZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW4uYmluZCh0aGlzKSk7XG5cdCAgICB9LCB0aGlzKTtcblxuXHQgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuXHQgICAgICB2YXIga2V5ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZTtcblxuXHQgICAgICAvLyBFU0Ncblx0ICAgICAgaWYgKGtleSA9PT0gMjcpIHtcblx0ICAgICAgICB2YXIgbW9kYWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsOm5vdCgubW9kYWwtaGlkZGVuKScpKTtcblx0ICAgICAgICBtb2RhbHMuZm9yRWFjaChmdW5jdGlvbihtb2RhbCkge1xuXHQgICAgICAgICAgbW9kYWwuY2xhc3NMaXN0LmFkZCgnbW9kYWwtaGlkZGVuJyk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH0sXG5cdCAgb3BlbjogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIHZhciBtb2RhbCA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9kYWwnKTtcblx0ICAgIG1vZGFsID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoJyMnICsgbW9kYWwpO1xuXHQgICAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnbW9kYWwtaGlkZGVuJyk7XG5cdCAgfSxcblx0ICBkaXNtaXNzOiBmdW5jdGlvbihldmVudCkge1xuXHQgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0ICAgIHZhciBjbG9zZWFibGUgPSB0YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiZcblx0ICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbW9kYWwtb3ZlcmxheScpO1xuXG5cdCAgICBkbyB7XG5cdCAgICAgIGlmICh0YXJnZXQuaGFzQXR0cmlidXRlKCdkYXRhLW1vZGFsLWRpc21pc3MnKSAmJlxuXHQgICAgICAgICAgIXRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsJykpIHtcblx0ICAgICAgICBjbG9zZWFibGUgPSB0cnVlO1xuXHQgICAgICB9IGVsc2UgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsJykgJiYgY2xvc2VhYmxlKSB7XG5cdCAgICAgICAgcmV0dXJuIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdtb2RhbC1oaWRkZW4nKTtcblx0ICAgICAgfSBlbHNlIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbCcpKXtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblx0ICAgIH0gd2hpbGUoKHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlKSAhPT0gdGhpcy5yb290KTtcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBUb2dnbGVGYWN0b3J5ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihlbGVtZW50KSB7XG5cdCAgdmFyIHRvZ2dsZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b2dnbGVdJykpO1xuXHQgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cblx0ICB0b2dnbGVzLmZvckVhY2goZnVuY3Rpb24odG9nZ2xlKSB7XG5cdCAgICB0b2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpKTtcblx0ICB9LCB0aGlzKTtcblx0fVxuXG5cdFRvZ2dsZUZhY3RvcnkucHJvdG90eXBlID0ge1xuXHQgIHRvZ2dsZTogZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cblx0ICAgIGRvIHtcblx0ICAgICAgaWYgKHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlJykpIHtcblx0ICAgICAgICByZXR1cm4gdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpXG5cdCAgICAgIH1cblx0ICAgIH0gd2hpbGUoKHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlKSAhPT0gdGhpcy5lbGVtZW50KVxuXHQgIH1cblx0fVxuXG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgU2hlcGhlcmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG5cdC8vIEN1c3RvbUV2ZW50IHBvbHlmaWxsIGZvciBJRTEwLzExIChmcm9tIGZyb250ZW5kLXV0aWxzKVxuXHR2YXIgQ3VzdG9tRXZlbnQgPSBmdW5jdGlvbihldmVudE5hbWUsIHBhcmFtcykge1xuXHQgIHZhciBldmVudFBhcmFtcyA9IHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZCB9O1xuXG5cdCAgZm9yICh2YXIga2V5IGluIHBhcmFtcykge1xuXHQgICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdCAgICAgIGV2ZW50UGFyYW1zW2tleV0gPSBwYXJhbXNba2V5XTtcblx0ICAgIH1cblx0ICB9XG5cblx0ICB2YXIgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcblxuXHQgIGN1c3RvbUV2ZW50LmluaXRDdXN0b21FdmVudChcblx0ICAgIGV2ZW50TmFtZSxcblx0ICAgIGV2ZW50UGFyYW1zLmJ1YmJsZXMsXG5cdCAgICBldmVudFBhcmFtcy5jYW5jZWxhYmxlLFxuXHQgICAgZXZlbnRQYXJhbXMuZGV0YWlsXG5cdCAgKTtcblxuXHQgIHJldHVybiBjdXN0b21FdmVudDtcblx0fTtcblxuXHR2YXIgVG91ckZhY3RvcnkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICB0aGlzLnJvb3QgPSBlbGVtZW50O1xuXHQgIHRoaXMudG91ckVsZW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdG91cl0nKSk7XG5cblx0ICBpZiAodGhpcy50b3VyRWxlbWVudHMubGVuZ3RoID4gMCkge1xuXHQgICAgdGhpcy50b3VycyA9IHt9O1xuXHQgICAgdGhpcy5jdXJyZW50VG91ck5hbWUgPSBudWxsO1xuXG5cdCAgICB0aGlzLm9wZW5lcnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b3VyLW9wZW5lcl0nKSk7XG5cblx0ICAgIHZhciB0b3VyT3ZlcmxheUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgIHRvdXJPdmVybGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKCd0b3VyLW92ZXJsYXknLCAnb3ZlcmxheS1oaWRkZW4nKTtcblx0ICAgIHRoaXMudG91ck92ZXJsYXkgPSBlbGVtZW50LmJvZHkuYXBwZW5kQ2hpbGQodG91ck92ZXJsYXlFbGVtZW50KTtcblxuXHQgICAgdGhpcy5pbml0aWFsaXplKCk7XG5cblx0ICAgIC8vIE9wZW4gYWxsIHRvdXJzIHdpdGhvdXQgb3BlbmVycyBpbW1lZGlhdGVseVxuXHQgICAgaWYgKHRoaXMub3BlbmVycy5sZW5ndGggPCB0aGlzLnRvdXJFbGVtZW50cy5sZW5ndGgpIHtcblx0ICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXHQgICAgICB2YXIgb3BlbmVyTmFtZXMgPSB0aGF0Lm9wZW5lcnMubWFwKGZ1bmN0aW9uKG9wZW5lcikgeyByZXR1cm4gb3BlbmVyLmdldEF0dHJpYnV0ZSgnZGF0YS10b3VyLW9wZW5lcicpOyB9KTtcblxuXHQgICAgICB0aGF0LnRvdXJFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHRvdXJFbGVtZW50KSB7XG5cdCAgICAgICAgdmFyIHRvdXJOYW1lID0gdG91ckVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRvdXItbmFtZScpO1xuXHQgICAgICAgIGlmICghb3BlbmVyTmFtZXMuaW5jbHVkZXModG91ck5hbWUpKSB7XG5cdCAgICAgICAgICB0aGF0Lm9wZW5Ub3VyKHRvdXJOYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXG5cdFRvdXJGYWN0b3J5LnByb3RvdHlwZSA9IHtcblx0ICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0ICAgIHZhciB0aGF0ID0gdGhpcztcblxuXHQgICAgdGhhdC50b3VyRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbih0b3VyRWxlbWVudCkge1xuXHQgICAgICB0aGF0LmluaXRpYWxpemVUb3VyKHRvdXJFbGVtZW50KTtcblx0ICAgIH0pO1xuXG5cdCAgICB0aGF0LmF0dGFjaEV2ZW50cygpO1xuXHQgIH0sXG5cdCAgaW5pdGlhbGl6ZVRvdXI6IGZ1bmN0aW9uKHRvdXJFbGVtZW50KSB7XG5cdCAgICB2YXIgdGhhdCA9IHRoaXM7XG5cdCAgICB2YXIgdG91ck5hbWUgPSB0b3VyRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG91ci1uYW1lJyk7XG5cblx0ICAgIHZhciB0b3VyID0gbmV3IFNoZXBoZXJkLlRvdXIoe1xuXHQgICAgICBkZWZhdWx0czoge1xuXHQgICAgICAgIHNob3dDYW5jZWxMaW5rOiB0cnVlLFxuXHQgICAgICAgIGJ1dHRvbnM6IFtcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgdGV4dDogdG91ckVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRvdXItc2tpcCcpLFxuXHQgICAgICAgICAgICBjbGFzc2VzOiAnYnRuLWRlZmF1bHQnLFxuXHQgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICAgIHRoYXQuY2xvc2VUb3VyKHRvdXJOYW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSxcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgdGV4dDogdG91ckVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRvdXItbmV4dCcpLFxuXHQgICAgICAgICAgICBjbGFzc2VzOiAnYnRuLXByaW1hcnknLFxuXHQgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICAgIHRoYXQuY2xpY2tOZXh0KHRvdXJOYW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIF1cblx0ICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIHRoYXQudG91cnNbdG91ck5hbWVdID0ge1xuXHQgICAgICB0b3VyOiB0b3VyLFxuXHQgICAgICBuYW1lOiB0b3VyTmFtZVxuXHQgICAgfTtcblx0ICAgIHRoYXQuYWRkU3RlcHModG91ciwgdG91ckVsZW1lbnQpO1xuXHQgIH0sXG5cdCAgYWRkU3RlcHM6IGZ1bmN0aW9uKHRvdXIsIHRvdXJFbGVtZW50KSB7XG5cdCAgICB2YXIgdGhhdCA9IHRoaXM7XG5cblx0ICAgIHZhciBzdGVwcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseSh0b3VyRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS10b3VyLXN0ZXBdJykpO1xuXHQgICAgdmFyIHNvcnRlZFN0ZXBzID0gc3RlcHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdCAgICAgIHZhciBzdGVwQSA9IHBhcnNlSW50KGEuZ2V0QXR0cmlidXRlKCdkYXRhLXN0ZXAtbnVtYmVyJykpO1xuXHQgICAgICB2YXIgc3RlcEIgPSBwYXJzZUludChiLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGVwLW51bWJlcicpKTtcblxuXHQgICAgICBpZiAoc3RlcEEgPiBzdGVwQikge1xuXHQgICAgICAgIHJldHVybiAxO1xuXHQgICAgICB9IGVsc2UgaWYgKHN0ZXBBIDwgc3RlcEIpIHtcblx0ICAgICAgICByZXR1cm4gLTE7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIDA7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBzb3J0ZWRTdGVwcy5mb3JFYWNoKGZ1bmN0aW9uKHN0ZXAsIGluZGV4KSB7XG5cdCAgICAgIHZhciBzdGVwQ29uZmlnID0ge1xuXHQgICAgICAgIHRpdGxlOiBzdGVwLmdldEF0dHJpYnV0ZSgnZGF0YS10aXRsZScpIHx8ICcnLFxuXHQgICAgICAgIHRleHQ6IHN0ZXAuaW5uZXJIVE1MLFxuXHQgICAgICB9O1xuXG5cdCAgICAgIHZhciBjbGFzc2VzID0gc3RlcC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2xhc3NlcycpIHx8ICcnO1xuXG5cdCAgICAgIHZhciBhdHRhY2hUb0VsZW1lbnQgPSBzdGVwLmdldEF0dHJpYnV0ZSgnZGF0YS1hdHRhY2gtdG8tZWxlbWVudCcpO1xuXHQgICAgICB2YXIgYXR0YWNoVG9Qb3NpdGlvbiA9IHN0ZXAuZ2V0QXR0cmlidXRlKCdkYXRhLWF0dGFjaC10by1wb3NpdGlvbicpO1xuXHQgICAgICB2YXIgcG9zaXRpb25PZmZzZXQgPSB7XG5cdCAgICAgICAgbGVmdDogJzAgMjVweCcsXG5cdCAgICAgICAgcmlnaHQ6ICcwIC0yNXB4Jyxcblx0ICAgICAgICB0b3A6ICcyNXB4IDAnLFxuXHQgICAgICAgIGJvdHRvbTogJy0yNXB4IDAnXG5cdCAgICAgIH1bYXR0YWNoVG9Qb3NpdGlvbl07XG5cblx0ICAgICAgaWYgKGNsYXNzZXMpIHtcblx0ICAgICAgICBzdGVwQ29uZmlnLmNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoYXR0YWNoVG9FbGVtZW50ICYmIGF0dGFjaFRvUG9zaXRpb24gJiYgcG9zaXRpb25PZmZzZXQpIHtcblx0ICAgICAgICBzdGVwQ29uZmlnLmF0dGFjaFRvID0ge1xuXHQgICAgICAgICAgZWxlbWVudDogYXR0YWNoVG9FbGVtZW50LFxuXHQgICAgICAgICAgb246IGF0dGFjaFRvUG9zaXRpb25cblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgc3RlcENvbmZpZy50ZXRoZXJPcHRpb25zID0ge1xuXHQgICAgICAgICAgb2Zmc2V0OiBwb3NpdGlvbk9mZnNldFxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChzb3J0ZWRTdGVwcy5sZW5ndGggLSAxID09PSBpbmRleCkge1xuXHQgICAgICAgIHN0ZXBDb25maWcuYnV0dG9ucyA9IFtcblx0ICAgICAgICAgIHtcblx0ICAgICAgICAgICAgdGV4dDogdG91ckVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRvdXItZG9uZScpLFxuXHQgICAgICAgICAgICBjbGFzc2VzOiAnYnRuLXByaW1hcnknLFxuXHQgICAgICAgICAgICBhY3Rpb246IHRvdXIuY29tcGxldGVcblx0ICAgICAgICAgIH1cblx0ICAgICAgICBdO1xuXHQgICAgICB9XG5cblx0ICAgICAgdG91ci5hZGRTdGVwKHN0ZXBDb25maWcpO1xuXG5cdCAgICAgIHRvdXIub24oJ2FjdGl2ZScsIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHRoYXQudG91ck92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnb3ZlcmxheS1oaWRkZW4nKTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgdG91ci5vbignaW5hY3RpdmUnLCBmdW5jdGlvbigpIHtcblx0ICAgICAgICB0aGF0LnRvdXJPdmVybGF5LmNsYXNzTGlzdC5hZGQoJ292ZXJsYXktaGlkZGVuJyk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0ICBhdHRhY2hFdmVudHM6IGZ1bmN0aW9uKCkge1xuXHQgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG5cdCAgICB0aGF0Lm9wZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAob3BlbmVyKSB7XG5cdCAgICAgIG9wZW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoYXQub3BlblRvdXIuYmluZCh0aGF0LCBvcGVuZXIuZ2V0QXR0cmlidXRlKCdkYXRhLXRvdXItb3BlbmVyJykpKTtcblx0ICAgIH0sIHRoYXQpO1xuXG5cdCAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICAgIHZhciBrZXkgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlO1xuXG5cdCAgICAgIGlmICh0aGF0LmN1cnJlbnRUb3VyTmFtZSA9PT0gbnVsbCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgICAgfVxuXG5cdCAgICAgIC8vIEVTQ1xuXHQgICAgICBpZiAoa2V5ID09PSAyNykge1xuXHQgICAgICAgIHRoYXQuY2xvc2VUb3VyKHRoYXQuY3VycmVudFRvdXJOYW1lKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIHRoYXQudG91ck92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0ICAgICAgdGhhdC5jbG9zZVRvdXIodGhhdC5jdXJyZW50VG91ck5hbWUpO1xuXHQgICAgfSk7XG5cdCAgfSxcblx0ICBvcGVuVG91cjogZnVuY3Rpb24odG91ck5hbWUpIHtcblx0ICAgIHZhciB0b3VyT2JqZWN0ID0gdGhpcy50b3Vyc1t0b3VyTmFtZV07XG5cblx0ICAgIHRoaXMuY3VycmVudFRvdXJOYW1lID0gdG91ck9iamVjdC5uYW1lO1xuXG5cdCAgICB0b3VyT2JqZWN0LnRvdXIuc3RhcnQoKTtcblx0ICAgIHRoaXMudG91ck92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgndG91ci1vdmVybGF5LWhpZGRlbicpO1xuXHQgIH0sXG5cdCAgY2xpY2tOZXh0OiBmdW5jdGlvbih0b3VyTmFtZSkge1xuXHQgICAgdmFyIHRvdXJPYmplY3QgPSB0aGlzLnRvdXJzW3RvdXJOYW1lXTtcblx0ICAgIHZhciBwYXlsb2FkID0ge1xuXHQgICAgICBjdXJyZW50U3RlcDogdG91ck9iamVjdC50b3VyLmdldEN1cnJlbnRTdGVwKCkuaWQucmVwbGFjZSgnc3RlcC0nLCAnJyksXG5cdCAgICAgIHRvdXJOYW1lOiB0b3VyT2JqZWN0Lm5hbWVcblx0ICAgIH07XG5cblx0ICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCduZXh0JywgeyAnZGV0YWlsJzogcGF5bG9hZCB9KSk7XG5cdCAgICB0b3VyT2JqZWN0LnRvdXIubmV4dCgpO1xuXHQgIH0sXG5cdCAgY2xvc2VUb3VyOiBmdW5jdGlvbih0b3VyTmFtZSkge1xuXHQgICAgdmFyIHRvdXJPYmplY3QgPSB0aGlzLnRvdXJzW3RvdXJOYW1lXTtcblx0ICAgIHZhciBwYXlsb2FkID0ge1xuXHQgICAgICBjdXJyZW50U3RlcDogdG91ck9iamVjdC50b3VyLmdldEN1cnJlbnRTdGVwKCkuaWQucmVwbGFjZSgnc3RlcC0nLCAnJyksXG5cdCAgICAgIHRvdXJOYW1lOiB0b3VyT2JqZWN0Lm5hbWVcblx0ICAgIH07XG5cblx0ICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdjYW5jZWwnLCB7ICdkZXRhaWwnOiBwYXlsb2FkIH0pKTtcblx0ICAgIHRvdXJPYmplY3QudG91ci5jYW5jZWwoKTtcblx0ICB9XG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qISB0ZXRoZXItc2hlcGhlcmQgMS4yLjAgKi9cblxuXHQoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuXHQgIGlmICh0cnVlKSB7XG5cdCAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbX193ZWJwYWNrX3JlcXVpcmVfXygxMCldLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgPyAoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHQgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ3RldGhlcicpKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcm9vdC5TaGVwaGVyZCA9IGZhY3Rvcnkocm9vdC5UZXRoZXIpO1xuXHQgIH1cblx0fSh0aGlzLCBmdW5jdGlvbihUZXRoZXIpIHtcblxuXHQvKiBnbG9iYWwgVGV0aGVyICovXG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cblx0dmFyIF9nZXQgPSBmdW5jdGlvbiBnZXQoX3g1LCBfeDYsIF94NykgeyB2YXIgX2FnYWluID0gdHJ1ZTsgX2Z1bmN0aW9uOiB3aGlsZSAoX2FnYWluKSB7IHZhciBvYmplY3QgPSBfeDUsIHByb3BlcnR5ID0gX3g2LCByZWNlaXZlciA9IF94NzsgZGVzYyA9IHBhcmVudCA9IGdldHRlciA9IHVuZGVmaW5lZDsgX2FnYWluID0gZmFsc2U7IGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpOyBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7IHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKHBhcmVudCA9PT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGVsc2UgeyBfeDUgPSBwYXJlbnQ7IF94NiA9IHByb3BlcnR5OyBfeDcgPSByZWNlaXZlcjsgX2FnYWluID0gdHJ1ZTsgY29udGludWUgX2Z1bmN0aW9uOyB9IH0gZWxzZSBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7IHJldHVybiBkZXNjLnZhbHVlOyB9IGVsc2UgeyB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7IGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7IH0gfSB9O1xuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICdmdW5jdGlvbicgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICcgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cblx0dmFyIF9UZXRoZXIkVXRpbHMgPSBUZXRoZXIuVXRpbHM7XG5cdHZhciBFdmVudGVkID0gX1RldGhlciRVdGlscy5FdmVudGVkO1xuXHR2YXIgYWRkQ2xhc3MgPSBfVGV0aGVyJFV0aWxzLmFkZENsYXNzO1xuXHR2YXIgZXh0ZW5kID0gX1RldGhlciRVdGlscy5leHRlbmQ7XG5cdHZhciBoYXNDbGFzcyA9IF9UZXRoZXIkVXRpbHMuaGFzQ2xhc3M7XG5cdHZhciByZW1vdmVDbGFzcyA9IF9UZXRoZXIkVXRpbHMucmVtb3ZlQ2xhc3M7XG5cdHZhciB1bmlxdWVJZCA9IF9UZXRoZXIkVXRpbHMudW5pcXVlSWQ7XG5cblx0dmFyIFNoZXBoZXJkID0gbmV3IEV2ZW50ZWQoKTtcblxuXHR2YXIgQVRUQUNITUVOVCA9IHtcblx0ICAndG9wJzogJ2JvdHRvbSBjZW50ZXInLFxuXHQgICdsZWZ0JzogJ21pZGRsZSByaWdodCcsXG5cdCAgJ3JpZ2h0JzogJ21pZGRsZSBsZWZ0Jyxcblx0ICAnYm90dG9tJzogJ3RvcCBjZW50ZXInLFxuXHQgICdjZW50ZXInOiAnbWlkZGxlIGNlbnRlcidcblx0fTtcblxuXHRmdW5jdGlvbiBjcmVhdGVGcm9tSFRNTChodG1sKSB7XG5cdCAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgZWwuaW5uZXJIVE1MID0gaHRtbDtcblx0ICByZXR1cm4gZWwuY2hpbGRyZW5bMF07XG5cdH1cblxuXHRmdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3IoZWwsIHNlbCkge1xuXHQgIHZhciBtYXRjaGVzID0gdW5kZWZpbmVkO1xuXHQgIGlmICh0eXBlb2YgZWwubWF0Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIG1hdGNoZXMgPSBlbC5tYXRjaGVzO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGVsLm1hdGNoZXNTZWxlY3RvciAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIG1hdGNoZXMgPSBlbC5tYXRjaGVzU2VsZWN0b3I7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgZWwubXNNYXRjaGVzU2VsZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBtYXRjaGVzID0gZWwubXNNYXRjaGVzU2VsZWN0b3I7XG5cdCAgfSBlbHNlIGlmICh0eXBlb2YgZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgbWF0Y2hlcyA9IGVsLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcblx0ICB9IGVsc2UgaWYgKHR5cGVvZiBlbC5tb3pNYXRjaGVzU2VsZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBtYXRjaGVzID0gZWwubW96TWF0Y2hlc1NlbGVjdG9yO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGVsLm9NYXRjaGVzU2VsZWN0b3IgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBtYXRjaGVzID0gZWwub01hdGNoZXNTZWxlY3Rvcjtcblx0ICB9XG5cdCAgcmV0dXJuIG1hdGNoZXMuY2FsbChlbCwgc2VsKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlU2hvcnRoYW5kKG9iaiwgcHJvcHMpIHtcblx0ICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICByZXR1cm4gb2JqO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcblx0ICAgIHJldHVybiBvYmo7XG5cdCAgfVxuXG5cdCAgdmFyIHZhbHMgPSBvYmouc3BsaXQoJyAnKTtcblx0ICB2YXIgdmFsc0xlbiA9IHZhbHMubGVuZ3RoO1xuXHQgIHZhciBwcm9wc0xlbiA9IHByb3BzLmxlbmd0aDtcblx0ICBpZiAodmFsc0xlbiA+IHByb3BzTGVuKSB7XG5cdCAgICB2YWxzWzBdID0gdmFscy5zbGljZSgwLCB2YWxzTGVuIC0gcHJvcHNMZW4gKyAxKS5qb2luKCcgJyk7XG5cdCAgICB2YWxzLnNwbGljZSgxLCAodmFsc0xlbiwgcHJvcHNMZW4pKTtcblx0ICB9XG5cblx0ICB2YXIgb3V0ID0ge307XG5cdCAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wc0xlbjsgKytpKSB7XG5cdCAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuXHQgICAgb3V0W3Byb3BdID0gdmFsc1tpXTtcblx0ICB9XG5cblx0ICByZXR1cm4gb3V0O1xuXHR9XG5cblx0dmFyIFN0ZXAgPSAoZnVuY3Rpb24gKF9FdmVudGVkKSB7XG5cdCAgX2luaGVyaXRzKFN0ZXAsIF9FdmVudGVkKTtcblxuXHQgIGZ1bmN0aW9uIFN0ZXAodG91ciwgb3B0aW9ucykge1xuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0ZXApO1xuXG5cdCAgICBfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZihTdGVwLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmNhbGwodGhpcywgdG91ciwgb3B0aW9ucyk7XG5cdCAgICB0aGlzLnRvdXIgPSB0b3VyO1xuXHQgICAgdGhpcy5iaW5kTWV0aG9kcygpO1xuXHQgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuXHQgICAgcmV0dXJuIHRoaXM7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKFN0ZXAsIFt7XG5cdCAgICBrZXk6ICdiaW5kTWV0aG9kcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYmluZE1ldGhvZHMoKSB7XG5cdCAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cblx0ICAgICAgdmFyIG1ldGhvZHMgPSBbJ19zaG93JywgJ3Nob3cnLCAnaGlkZScsICdpc09wZW4nLCAnY2FuY2VsJywgJ2NvbXBsZXRlJywgJ3Njcm9sbFRvJywgJ2Rlc3Ryb3knXTtcblx0ICAgICAgbWV0aG9kcy5tYXAoZnVuY3Rpb24gKG1ldGhvZCkge1xuXHQgICAgICAgIF90aGlzW21ldGhvZF0gPSBfdGhpc1ttZXRob2RdLmJpbmQoX3RoaXMpO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZXRPcHRpb25zJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRPcHRpb25zKCkge1xuXHQgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG5cdCAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdCAgICAgIHRoaXMuZGVzdHJveSgpO1xuXG5cdCAgICAgIHRoaXMuaWQgPSB0aGlzLm9wdGlvbnMuaWQgfHwgdGhpcy5pZCB8fCAnc3RlcC0nICsgdW5pcXVlSWQoKTtcblxuXHQgICAgICB2YXIgd2hlbiA9IHRoaXMub3B0aW9ucy53aGVuO1xuXHQgICAgICBpZiAod2hlbikge1xuXHQgICAgICAgIGZvciAodmFyIF9ldmVudCBpbiB3aGVuKSB7XG5cdCAgICAgICAgICBpZiAoKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHdoZW4sIF9ldmVudCkpIHtcblx0ICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSB3aGVuW19ldmVudF07XG5cdCAgICAgICAgICAgIHRoaXMub24oX2V2ZW50LCBoYW5kbGVyLCB0aGlzKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoIXRoaXMub3B0aW9ucy5idXR0b25zKSB7XG5cdCAgICAgICAgdGhpcy5vcHRpb25zLmJ1dHRvbnMgPSBbe1xuXHQgICAgICAgICAgdGV4dDogJ05leHQnLFxuXHQgICAgICAgICAgYWN0aW9uOiB0aGlzLnRvdXIubmV4dFxuXHQgICAgICAgIH1dO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0VG91cicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG91cigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMudG91cjtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdiaW5kQWR2YW5jZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEFkdmFuY2UoKSB7XG5cdCAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdCAgICAgIC8vIEFuIGVtcHR5IHNlbGVjdG9yIG1hdGNoZXMgdGhlIHN0ZXAgZWxlbWVudFxuXG5cdCAgICAgIHZhciBfcGFyc2VTaG9ydGhhbmQgPSBwYXJzZVNob3J0aGFuZCh0aGlzLm9wdGlvbnMuYWR2YW5jZU9uLCBbJ3NlbGVjdG9yJywgJ2V2ZW50J10pO1xuXG5cdCAgICAgIHZhciBldmVudCA9IF9wYXJzZVNob3J0aGFuZC5ldmVudDtcblx0ICAgICAgdmFyIHNlbGVjdG9yID0gX3BhcnNlU2hvcnRoYW5kLnNlbGVjdG9yO1xuXG5cdCAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihlKSB7XG5cdCAgICAgICAgaWYgKCFfdGhpczIuaXNPcGVuKCkpIHtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICAgaWYgKG1hdGNoZXNTZWxlY3RvcihlLnRhcmdldCwgc2VsZWN0b3IpKSB7XG5cdCAgICAgICAgICAgIF90aGlzMi50b3VyLm5leHQoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKF90aGlzMi5lbCAmJiBlLnRhcmdldCA9PT0gX3RoaXMyLmVsKSB7XG5cdCAgICAgICAgICAgIF90aGlzMi50b3VyLm5leHQoKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cblx0ICAgICAgLy8gVE9ETzogdGhpcyBzaG91bGQgYWxzbyBiaW5kL3VuYmluZCBvbiBzaG93L2hpZGVcblx0ICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyKTtcblx0ICAgICAgdGhpcy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0QXR0YWNoVG8nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dGFjaFRvKCkge1xuXHQgICAgICB2YXIgb3B0cyA9IHBhcnNlU2hvcnRoYW5kKHRoaXMub3B0aW9ucy5hdHRhY2hUbywgWydlbGVtZW50JywgJ29uJ10pIHx8IHt9O1xuXHQgICAgICB2YXIgc2VsZWN0b3IgPSBvcHRzLmVsZW1lbnQ7XG5cblx0ICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBvcHRzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcblxuXHQgICAgICAgIGlmICghb3B0cy5lbGVtZW50KSB7XG5cdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlbGVtZW50IGZvciB0aGlzIFNoZXBoZXJkIHN0ZXAgd2FzIG5vdCBmb3VuZCAnICsgc2VsZWN0b3IpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiBvcHRzO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NldHVwVGV0aGVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cFRldGhlcigpIHtcblx0ICAgICAgaWYgKHR5cGVvZiBUZXRoZXIgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXNpbmcgdGhlIGF0dGFjaG1lbnQgZmVhdHVyZSBvZiBTaGVwaGVyZCByZXF1aXJlcyB0aGUgVGV0aGVyIGxpYnJhcnlcIik7XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgb3B0cyA9IHRoaXMuZ2V0QXR0YWNoVG8oKTtcblx0ICAgICAgdmFyIGF0dGFjaG1lbnQgPSBBVFRBQ0hNRU5UW29wdHMub24gfHwgJ3JpZ2h0J107XG5cdCAgICAgIGlmICh0eXBlb2Ygb3B0cy5lbGVtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIG9wdHMuZWxlbWVudCA9ICd2aWV3cG9ydCc7XG5cdCAgICAgICAgYXR0YWNobWVudCA9ICdtaWRkbGUgY2VudGVyJztcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciB0ZXRoZXJPcHRzID0ge1xuXHQgICAgICAgIGNsYXNzUHJlZml4OiAnc2hlcGhlcmQnLFxuXHQgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWwsXG5cdCAgICAgICAgY29uc3RyYWludHM6IFt7XG5cdCAgICAgICAgICB0bzogJ3dpbmRvdycsXG5cdCAgICAgICAgICBwaW46IHRydWUsXG5cdCAgICAgICAgICBhdHRhY2htZW50OiAndG9nZXRoZXInXG5cdCAgICAgICAgfV0sXG5cdCAgICAgICAgdGFyZ2V0OiBvcHRzLmVsZW1lbnQsXG5cdCAgICAgICAgb2Zmc2V0OiBvcHRzLm9mZnNldCB8fCAnMCAwJyxcblx0ICAgICAgICBhdHRhY2htZW50OiBhdHRhY2htZW50XG5cdCAgICAgIH07XG5cblx0ICAgICAgaWYgKHRoaXMudGV0aGVyKSB7XG5cdCAgICAgICAgdGhpcy50ZXRoZXIuZGVzdHJveSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy50ZXRoZXIgPSBuZXcgVGV0aGVyKGV4dGVuZCh0ZXRoZXJPcHRzLCB0aGlzLm9wdGlvbnMudGV0aGVyT3B0aW9ucykpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Nob3cnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coKSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmJlZm9yZVNob3dQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHZhciBiZWZvcmVTaG93UHJvbWlzZSA9IHRoaXMub3B0aW9ucy5iZWZvcmVTaG93UHJvbWlzZSgpO1xuXHQgICAgICAgIGlmICh0eXBlb2YgYmVmb3JlU2hvd1Byb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICByZXR1cm4gYmVmb3JlU2hvd1Byb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfdGhpczMuX3Nob3coKTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICB0aGlzLl9zaG93KCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnX3Nob3cnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9zaG93KCkge1xuXHQgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuXHQgICAgICB0aGlzLnRyaWdnZXIoJ2JlZm9yZS1zaG93Jyk7XG5cblx0ICAgICAgaWYgKCF0aGlzLmVsKSB7XG5cdCAgICAgICAgdGhpcy5yZW5kZXIoKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGFkZENsYXNzKHRoaXMuZWwsICdzaGVwaGVyZC1vcGVuJyk7XG5cblx0ICAgICAgZG9jdW1lbnQuYm9keS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2hlcGhlcmQtc3RlcCcsIHRoaXMuaWQpO1xuXG5cdCAgICAgIHRoaXMuc2V0dXBUZXRoZXIoKTtcblxuXHQgICAgICBpZiAodGhpcy5vcHRpb25zLnNjcm9sbFRvKSB7XG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBfdGhpczQuc2Nyb2xsVG8oKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHRoaXMudHJpZ2dlcignc2hvdycpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2hpZGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG5cdCAgICAgIHRoaXMudHJpZ2dlcignYmVmb3JlLWhpZGUnKTtcblxuXHQgICAgICByZW1vdmVDbGFzcyh0aGlzLmVsLCAnc2hlcGhlcmQtb3BlbicpO1xuXG5cdCAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNoZXBoZXJkLXN0ZXAnKTtcblxuXHQgICAgICBpZiAodGhpcy50ZXRoZXIpIHtcblx0ICAgICAgICB0aGlzLnRldGhlci5kZXN0cm95KCk7XG5cdCAgICAgIH1cblx0ICAgICAgdGhpcy50ZXRoZXIgPSBudWxsO1xuXG5cdCAgICAgIHRoaXMudHJpZ2dlcignaGlkZScpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2lzT3BlbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcGVuKCkge1xuXHQgICAgICByZXR1cm4gaGFzQ2xhc3ModGhpcy5lbCwgJ3NoZXBoZXJkLW9wZW4nKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjYW5jZWwnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcblx0ICAgICAgdGhpcy50b3VyLmNhbmNlbCgpO1xuXHQgICAgICB0aGlzLnRyaWdnZXIoJ2NhbmNlbCcpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbXBsZXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcblx0ICAgICAgdGhpcy50b3VyLmNvbXBsZXRlKCk7XG5cdCAgICAgIHRoaXMudHJpZ2dlcignY29tcGxldGUnKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzY3JvbGxUbycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsVG8oKSB7XG5cdCAgICAgIHZhciBfZ2V0QXR0YWNoVG8gPSB0aGlzLmdldEF0dGFjaFRvKCk7XG5cblx0ICAgICAgdmFyIGVsZW1lbnQgPSBfZ2V0QXR0YWNoVG8uZWxlbWVudDtcblxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5zY3JvbGxUb0hhbmRsZXIgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5vcHRpb25zLnNjcm9sbFRvSGFuZGxlcihlbGVtZW50KTtcblx0ICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBlbGVtZW50LnNjcm9sbEludG9WaWV3KCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkZXN0cm95Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuXHQgICAgICBpZiAodHlwZW9mIHRoaXMuZWwgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmVsKTtcblx0ICAgICAgICBkZWxldGUgdGhpcy5lbDtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICh0aGlzLnRldGhlcikge1xuXHQgICAgICAgIHRoaXMudGV0aGVyLmRlc3Ryb3koKTtcblx0ICAgICAgfVxuXHQgICAgICB0aGlzLnRldGhlciA9IG51bGw7XG5cblx0ICAgICAgdGhpcy50cmlnZ2VyKCdkZXN0cm95Jyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVuZGVyJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLmRlc3Ryb3koKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHRoaXMuZWwgPSBjcmVhdGVGcm9tSFRNTCgnPGRpdiBjbGFzcz1cXCdzaGVwaGVyZC1zdGVwICcgKyAodGhpcy5vcHRpb25zLmNsYXNzZXMgfHwgJycpICsgJ1xcJyBkYXRhLWlkPVxcJycgKyB0aGlzLmlkICsgJ1xcJyAnICsgKHRoaXMub3B0aW9ucy5pZEF0dHJpYnV0ZSA/ICdpZD1cIicgKyB0aGlzLm9wdGlvbnMuaWRBdHRyaWJ1dGUgKyAnXCInIDogJycpICsgJz48L2Rpdj4nKTtcblxuXHQgICAgICB2YXIgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgICBjb250ZW50LmNsYXNzTmFtZSA9ICdzaGVwaGVyZC1jb250ZW50Jztcblx0ICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZChjb250ZW50KTtcblxuXHQgICAgICB2YXIgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaGVhZGVyJyk7XG5cdCAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoaGVhZGVyKTtcblxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy50aXRsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBoZWFkZXIuaW5uZXJIVE1MICs9ICc8aDMgY2xhc3M9XFwnc2hlcGhlcmQtdGl0bGVcXCc+JyArIHRoaXMub3B0aW9ucy50aXRsZSArICc8L2gzPic7XG5cdCAgICAgICAgdGhpcy5lbC5jbGFzc05hbWUgKz0gJyBzaGVwaGVyZC1oYXMtdGl0bGUnO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93Q2FuY2VsTGluaykge1xuXHQgICAgICAgIHZhciBsaW5rID0gY3JlYXRlRnJvbUhUTUwoXCI8YSBocmVmIGNsYXNzPSdzaGVwaGVyZC1jYW5jZWwtbGluayc+4pyVPC9hPlwiKTtcblx0ICAgICAgICBoZWFkZXIuYXBwZW5kQ2hpbGQobGluayk7XG5cblx0ICAgICAgICB0aGlzLmVsLmNsYXNzTmFtZSArPSAnIHNoZXBoZXJkLWhhcy1jYW5jZWwtbGluayc7XG5cblx0ICAgICAgICB0aGlzLmJpbmRDYW5jZWxMaW5rKGxpbmspO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMudGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgdmFyIHRleHQgPSBjcmVhdGVGcm9tSFRNTChcIjxkaXYgY2xhc3M9J3NoZXBoZXJkLXRleHQnPjwvZGl2PlwiKTtcblx0ICAgICAgICAgIHZhciBwYXJhZ3JhcGhzID0gX3RoaXM1Lm9wdGlvbnMudGV4dDtcblxuXHQgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhZ3JhcGhzID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIHBhcmFncmFwaHMgPSBwYXJhZ3JhcGhzLmNhbGwoX3RoaXM1LCB0ZXh0KTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgaWYgKHBhcmFncmFwaHMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuXHQgICAgICAgICAgICB0ZXh0LmFwcGVuZENoaWxkKHBhcmFncmFwaHMpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhZ3JhcGhzID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgIHBhcmFncmFwaHMgPSBbcGFyYWdyYXBoc107XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBwYXJhZ3JhcGhzLm1hcChmdW5jdGlvbiAocGFyYWdyYXBoKSB7XG5cdCAgICAgICAgICAgICAgdGV4dC5pbm5lckhUTUwgKz0gJzxwPicgKyBwYXJhZ3JhcGggKyAnPC9wPic7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKHRleHQpO1xuXHQgICAgICAgIH0pKCk7XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgZm9vdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9vdGVyJyk7XG5cblx0ICAgICAgaWYgKHRoaXMub3B0aW9ucy5idXR0b25zKSB7XG5cdCAgICAgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBidXR0b25zID0gY3JlYXRlRnJvbUhUTUwoXCI8dWwgY2xhc3M9J3NoZXBoZXJkLWJ1dHRvbnMnPjwvdWw+XCIpO1xuXG5cdCAgICAgICAgICBfdGhpczUub3B0aW9ucy5idXR0b25zLm1hcChmdW5jdGlvbiAoY2ZnKSB7XG5cdCAgICAgICAgICAgIHZhciBidXR0b24gPSBjcmVhdGVGcm9tSFRNTCgnPGxpPjxhIGNsYXNzPVxcJ3NoZXBoZXJkLWJ1dHRvbiAnICsgKGNmZy5jbGFzc2VzIHx8ICcnKSArICdcXCc+JyArIGNmZy50ZXh0ICsgJzwvYT4nKTtcblx0ICAgICAgICAgICAgYnV0dG9ucy5hcHBlbmRDaGlsZChidXR0b24pO1xuXHQgICAgICAgICAgICBfdGhpczUuYmluZEJ1dHRvbkV2ZW50cyhjZmcsIGJ1dHRvbi5xdWVyeVNlbGVjdG9yKCdhJykpO1xuXHQgICAgICAgICAgfSk7XG5cblx0ICAgICAgICAgIGZvb3Rlci5hcHBlbmRDaGlsZChidXR0b25zKTtcblx0ICAgICAgICB9KSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgY29udGVudC5hcHBlbmRDaGlsZChmb290ZXIpO1xuXG5cdCAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbCk7XG5cblx0ICAgICAgdGhpcy5zZXR1cFRldGhlcigpO1xuXG5cdCAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWR2YW5jZU9uKSB7XG5cdCAgICAgICAgdGhpcy5iaW5kQWR2YW5jZSgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnYmluZENhbmNlbExpbmsnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmRDYW5jZWxMaW5rKGxpbmspIHtcblx0ICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cblx0ICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIF90aGlzNi5jYW5jZWwoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnYmluZEJ1dHRvbkV2ZW50cycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYmluZEJ1dHRvbkV2ZW50cyhjZmcsIGVsKSB7XG5cdCAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG5cdCAgICAgIGNmZy5ldmVudHMgPSBjZmcuZXZlbnRzIHx8IHt9O1xuXHQgICAgICBpZiAodHlwZW9mIGNmZy5hY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgLy8gSW5jbHVkaW5nIGJvdGggYSBjbGljayBldmVudCBhbmQgYW4gYWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWRcblx0ICAgICAgICBjZmcuZXZlbnRzLmNsaWNrID0gY2ZnLmFjdGlvbjtcblx0ICAgICAgfVxuXG5cdCAgICAgIGZvciAodmFyIF9ldmVudDIgaW4gY2ZnLmV2ZW50cykge1xuXHQgICAgICAgIGlmICgoe30pLmhhc093blByb3BlcnR5LmNhbGwoY2ZnLmV2ZW50cywgX2V2ZW50MikpIHtcblx0ICAgICAgICAgIHZhciBoYW5kbGVyID0gY2ZnLmV2ZW50c1tfZXZlbnQyXTtcblx0ICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICB2YXIgcGFnZSA9IGhhbmRsZXI7XG5cdCAgICAgICAgICAgICAgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczcudG91ci5zaG93KHBhZ2UpO1xuXHQgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH0pKCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKF9ldmVudDIsIGhhbmRsZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIHRoaXMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2V2ZW50MyBpbiBjZmcuZXZlbnRzKSB7XG5cdCAgICAgICAgICBpZiAoKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNmZy5ldmVudHMsIF9ldmVudDMpKSB7XG5cdCAgICAgICAgICAgIHZhciBoYW5kbGVyID0gY2ZnLmV2ZW50c1tfZXZlbnQzXTtcblx0ICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihfZXZlbnQzLCBoYW5kbGVyKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBTdGVwO1xuXHR9KShFdmVudGVkKTtcblxuXHR2YXIgVG91ciA9IChmdW5jdGlvbiAoX0V2ZW50ZWQyKSB7XG5cdCAgX2luaGVyaXRzKFRvdXIsIF9FdmVudGVkMik7XG5cblx0ICBmdW5jdGlvbiBUb3VyKCkge1xuXHQgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cblx0ICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG5cblx0ICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUb3VyKTtcblxuXHQgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoVG91ci5wcm90b3R5cGUpLCAnY29uc3RydWN0b3InLCB0aGlzKS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHQgICAgdGhpcy5iaW5kTWV0aG9kcygpO1xuXHQgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0ICAgIHRoaXMuc3RlcHMgPSB0aGlzLm9wdGlvbnMuc3RlcHMgfHwgW107XG5cblx0ICAgIC8vIFBhc3MgdGhlc2UgZXZlbnRzIG9udG8gdGhlIGdsb2JhbCBTaGVwaGVyZCBvYmplY3Rcblx0ICAgIHZhciBldmVudHMgPSBbJ2NvbXBsZXRlJywgJ2NhbmNlbCcsICdoaWRlJywgJ3N0YXJ0JywgJ3Nob3cnLCAnYWN0aXZlJywgJ2luYWN0aXZlJ107XG5cdCAgICBldmVudHMubWFwKGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAoZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICBfdGhpczgub24oZSwgZnVuY3Rpb24gKG9wdHMpIHtcblx0ICAgICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXHQgICAgICAgICAgb3B0cy50b3VyID0gX3RoaXM4O1xuXHQgICAgICAgICAgU2hlcGhlcmQudHJpZ2dlcihlLCBvcHRzKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSkoZXZlbnQpO1xuXHQgICAgfSk7XG5cblx0ICAgIHJldHVybiB0aGlzO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhUb3VyLCBbe1xuXHQgICAga2V5OiAnYmluZE1ldGhvZHMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmRNZXRob2RzKCkge1xuXHQgICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuXHQgICAgICB2YXIgbWV0aG9kcyA9IFsnbmV4dCcsICdiYWNrJywgJ2NhbmNlbCcsICdjb21wbGV0ZScsICdoaWRlJ107XG5cdCAgICAgIG1ldGhvZHMubWFwKGZ1bmN0aW9uIChtZXRob2QpIHtcblx0ICAgICAgICBfdGhpczlbbWV0aG9kXSA9IF90aGlzOVttZXRob2RdLmJpbmQoX3RoaXM5KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnYWRkU3RlcCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3RlcChuYW1lLCBzdGVwKSB7XG5cdCAgICAgIGlmICh0eXBlb2Ygc3RlcCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBzdGVwID0gbmFtZTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICghKHN0ZXAgaW5zdGFuY2VvZiBTdGVwKSkge1xuXHQgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5hbWUgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgICBzdGVwLmlkID0gbmFtZS50b1N0cmluZygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdGVwID0gZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMuZGVmYXVsdHMsIHN0ZXApO1xuXHQgICAgICAgIHN0ZXAgPSBuZXcgU3RlcCh0aGlzLCBzdGVwKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBzdGVwLnRvdXIgPSB0aGlzO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy5zdGVwcy5wdXNoKHN0ZXApO1xuXHQgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRCeUlkJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdGVwcy5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgIHZhciBzdGVwID0gdGhpcy5zdGVwc1tpXTtcblx0ICAgICAgICBpZiAoc3RlcC5pZCA9PT0gaWQpIHtcblx0ICAgICAgICAgIHJldHVybiBzdGVwO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldEN1cnJlbnRTdGVwJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50U3RlcCgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFN0ZXA7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnbmV4dCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCgpIHtcblx0ICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdGVwcy5pbmRleE9mKHRoaXMuY3VycmVudFN0ZXApO1xuXG5cdCAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5zdGVwcy5sZW5ndGggLSAxKSB7XG5cdCAgICAgICAgdGhpcy5oaWRlKGluZGV4KTtcblx0ICAgICAgICB0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7XG5cdCAgICAgICAgdGhpcy5kb25lKCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5zaG93KGluZGV4ICsgMSwgdHJ1ZSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdiYWNrJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBiYWNrKCkge1xuXHQgICAgICB2YXIgaW5kZXggPSB0aGlzLnN0ZXBzLmluZGV4T2YodGhpcy5jdXJyZW50U3RlcCk7XG5cdCAgICAgIHRoaXMuc2hvdyhpbmRleCAtIDEsIGZhbHNlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjYW5jZWwnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbnRTdGVwICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRoaXMuY3VycmVudFN0ZXAuaGlkZSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMudHJpZ2dlcignY2FuY2VsJyk7XG5cdCAgICAgIHRoaXMuZG9uZSgpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbXBsZXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbnRTdGVwICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRoaXMuY3VycmVudFN0ZXAuaGlkZSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMudHJpZ2dlcignY29tcGxldGUnKTtcblx0ICAgICAgdGhpcy5kb25lKCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaGlkZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZSgpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLmN1cnJlbnRTdGVwICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHRoaXMuY3VycmVudFN0ZXAuaGlkZSgpO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMudHJpZ2dlcignaGlkZScpO1xuXHQgICAgICB0aGlzLmRvbmUoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkb25lJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb25lKCkge1xuXHQgICAgICBTaGVwaGVyZC5hY3RpdmVUb3VyID0gbnVsbDtcblx0ICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgJ3NoZXBoZXJkLWFjdGl2ZScpO1xuXHQgICAgICB0aGlzLnRyaWdnZXIoJ2luYWN0aXZlJywgeyB0b3VyOiB0aGlzIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Nob3cnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coKSB7XG5cdCAgICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyAwIDogYXJndW1lbnRzWzBdO1xuXHQgICAgICB2YXIgZm9yd2FyZCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMV07XG5cblx0ICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXApIHtcblx0ICAgICAgICB0aGlzLmN1cnJlbnRTdGVwLmhpZGUoKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCAnc2hlcGhlcmQtYWN0aXZlJyk7XG5cdCAgICAgICAgdGhpcy50cmlnZ2VyKCdhY3RpdmUnLCB7IHRvdXI6IHRoaXMgfSk7XG5cdCAgICAgIH1cblxuXHQgICAgICBTaGVwaGVyZC5hY3RpdmVUb3VyID0gdGhpcztcblxuXHQgICAgICB2YXIgbmV4dCA9IHVuZGVmaW5lZDtcblxuXHQgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICBuZXh0ID0gdGhpcy5nZXRCeUlkKGtleSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgbmV4dCA9IHRoaXMuc3RlcHNba2V5XTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChuZXh0KSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBuZXh0Lm9wdGlvbnMuc2hvd09uICE9PSAndW5kZWZpbmVkJyAmJiAhbmV4dC5vcHRpb25zLnNob3dPbigpKSB7XG5cdCAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLnN0ZXBzLmluZGV4T2YobmV4dCk7XG5cdCAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gZm9yd2FyZCA/IGluZGV4ICsgMSA6IGluZGV4IC0gMTtcblx0ICAgICAgICAgIHRoaXMuc2hvdyhuZXh0SW5kZXgsIGZvcndhcmQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3Nob3cnLCB7XG5cdCAgICAgICAgICAgIHN0ZXA6IG5leHQsXG5cdCAgICAgICAgICAgIHByZXZpb3VzOiB0aGlzLmN1cnJlbnRTdGVwXG5cdCAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgdGhpcy5jdXJyZW50U3RlcCA9IG5leHQ7XG5cdCAgICAgICAgICBuZXh0LnNob3coKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzdGFydCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG5cdCAgICAgIHRoaXMudHJpZ2dlcignc3RhcnQnKTtcblxuXHQgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gbnVsbDtcblx0ICAgICAgdGhpcy5uZXh0KCk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIFRvdXI7XG5cdH0pKEV2ZW50ZWQpO1xuXG5cdGV4dGVuZChTaGVwaGVyZCwgeyBUb3VyOiBUb3VyLCBTdGVwOiBTdGVwLCBFdmVudGVkOiBFdmVudGVkIH0pO1xuXHRyZXR1cm4gU2hlcGhlcmQ7XG5cblx0fSkpO1xuXG5cbi8qKiovIH0sXG4vKiAxMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohIHRldGhlciAxLjIuMCAqL1xuXG5cdChmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdCAgaWYgKHRydWUpIHtcblx0ICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID8gKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIGV4cG9ydHMsIG1vZHVsZSkpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdCAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcm9vdC5UZXRoZXIgPSBmYWN0b3J5KCk7XG5cdCAgfVxuXHR9KHRoaXMsIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpO1xuXG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7IH0gfVxuXG5cdHZhciBUZXRoZXJCYXNlID0gdW5kZWZpbmVkO1xuXHRpZiAodHlwZW9mIFRldGhlckJhc2UgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgVGV0aGVyQmFzZSA9IHsgbW9kdWxlczogW10gfTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbCkge1xuXHQgIC8vIEluIGZpcmVmb3ggaWYgdGhlIGVsIGlzIGluc2lkZSBhbiBpZnJhbWUgd2l0aCBkaXNwbGF5OiBub25lOyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgpIHdpbGwgcmV0dXJuIG51bGw7XG5cdCAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG5cdCAgdmFyIGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKSB8fCB7fTtcblx0ICB2YXIgcG9zaXRpb24gPSBjb21wdXRlZFN0eWxlLnBvc2l0aW9uO1xuXG5cdCAgaWYgKHBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG5cdCAgICByZXR1cm4gZWw7XG5cdCAgfVxuXG5cdCAgdmFyIHBhcmVudCA9IGVsO1xuXHQgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSkge1xuXHQgICAgdmFyIHN0eWxlID0gdW5kZWZpbmVkO1xuXHQgICAgdHJ5IHtcblx0ICAgICAgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBhcmVudCk7XG5cdCAgICB9IGNhdGNoIChlcnIpIHt9XG5cblx0ICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnIHx8IHN0eWxlID09PSBudWxsKSB7XG5cdCAgICAgIHJldHVybiBwYXJlbnQ7XG5cdCAgICB9XG5cblx0ICAgIHZhciBfc3R5bGUgPSBzdHlsZTtcblx0ICAgIHZhciBvdmVyZmxvdyA9IF9zdHlsZS5vdmVyZmxvdztcblx0ICAgIHZhciBvdmVyZmxvd1ggPSBfc3R5bGUub3ZlcmZsb3dYO1xuXHQgICAgdmFyIG92ZXJmbG93WSA9IF9zdHlsZS5vdmVyZmxvd1k7XG5cblx0ICAgIGlmICgvKGF1dG98c2Nyb2xsKS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcblx0ICAgICAgaWYgKHBvc2l0aW9uICE9PSAnYWJzb2x1dGUnIHx8IFsncmVsYXRpdmUnLCAnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKHN0eWxlLnBvc2l0aW9uKSA+PSAwKSB7XG5cdCAgICAgICAgcmV0dXJuIHBhcmVudDtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1cblxuXHQgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuXHR9XG5cblx0dmFyIHVuaXF1ZUlkID0gKGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgaWQgPSAwO1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gKytpZDtcblx0ICB9O1xuXHR9KSgpO1xuXG5cdHZhciB6ZXJvUG9zQ2FjaGUgPSB7fTtcblx0dmFyIGdldE9yaWdpbiA9IGZ1bmN0aW9uIGdldE9yaWdpbihkb2MpIHtcblx0ICAvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdW5mb3J0dW5hdGVseSB0b28gYWNjdXJhdGUuICBJdCBpbnRyb2R1Y2VzIGEgcGl4ZWwgb3IgdHdvIG9mXG5cdCAgLy8gaml0dGVyIGFzIHRoZSB1c2VyIHNjcm9sbHMgdGhhdCBtZXNzZXMgd2l0aCBvdXIgYWJpbGl0eSB0byBkZXRlY3QgaWYgdHdvIHBvc2l0aW9uc1xuXHQgIC8vIGFyZSBlcXVpdmlsYW50IG9yIG5vdC4gIFdlIHBsYWNlIGFuIGVsZW1lbnQgYXQgdGhlIHRvcCBsZWZ0IG9mIHRoZSBwYWdlIHRoYXQgd2lsbFxuXHQgIC8vIGdldCB0aGUgc2FtZSBqaXR0ZXIsIHNvIHdlIGNhbiBjYW5jZWwgdGhlIHR3byBvdXQuXG5cdCAgdmFyIG5vZGUgPSBkb2MuX3RldGhlclplcm9FbGVtZW50O1xuXHQgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIG5vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS10ZXRoZXItaWQnLCB1bmlxdWVJZCgpKTtcblx0ICAgIGV4dGVuZChub2RlLnN0eWxlLCB7XG5cdCAgICAgIHRvcDogMCxcblx0ICAgICAgbGVmdDogMCxcblx0ICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcblx0ICAgIH0pO1xuXG5cdCAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcblxuXHQgICAgZG9jLl90ZXRoZXJaZXJvRWxlbWVudCA9IG5vZGU7XG5cdCAgfVxuXG5cdCAgdmFyIGlkID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGV0aGVyLWlkJyk7XG5cdCAgaWYgKHR5cGVvZiB6ZXJvUG9zQ2FjaGVbaWRdID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgemVyb1Bvc0NhY2hlW2lkXSA9IHt9O1xuXG5cdCAgICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdCAgICBmb3IgKHZhciBrIGluIHJlY3QpIHtcblx0ICAgICAgLy8gQ2FuJ3QgdXNlIGV4dGVuZCwgYXMgb24gSUU5LCBlbGVtZW50cyBkb24ndCByZXNvbHZlIHRvIGJlIGhhc093blByb3BlcnR5XG5cdCAgICAgIHplcm9Qb3NDYWNoZVtpZF1ba10gPSByZWN0W2tdO1xuXHQgICAgfVxuXG5cdCAgICAvLyBDbGVhciB0aGUgY2FjaGUgd2hlbiB0aGlzIHBvc2l0aW9uIGNhbGwgaXMgZG9uZVxuXHQgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuXHQgICAgICBkZWxldGUgemVyb1Bvc0NhY2hlW2lkXTtcblx0ICAgIH0pO1xuXHQgIH1cblxuXHQgIHJldHVybiB6ZXJvUG9zQ2FjaGVbaWRdO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldEJvdW5kcyhlbCkge1xuXHQgIHZhciBkb2MgPSB1bmRlZmluZWQ7XG5cdCAgaWYgKGVsID09PSBkb2N1bWVudCkge1xuXHQgICAgZG9jID0gZG9jdW1lbnQ7XG5cdCAgICBlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ICB9IGVsc2Uge1xuXHQgICAgZG9jID0gZWwub3duZXJEb2N1bWVudDtcblx0ICB9XG5cblx0ICB2YXIgZG9jRWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdCAgdmFyIGJveCA9IHt9O1xuXHQgIC8vIFRoZSBvcmlnaW5hbCBvYmplY3QgcmV0dXJuZWQgYnkgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIGltbXV0YWJsZSwgc28gd2UgY2xvbmUgaXRcblx0ICAvLyBXZSBjYW4ndCB1c2UgZXh0ZW5kIGJlY2F1c2UgdGhlIHByb3BlcnRpZXMgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIG9iamVjdCBieSBoYXNPd25Qcm9wZXJ0eSBpbiBJRTlcblx0ICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHQgIGZvciAodmFyIGsgaW4gcmVjdCkge1xuXHQgICAgYm94W2tdID0gcmVjdFtrXTtcblx0ICB9XG5cblx0ICB2YXIgb3JpZ2luID0gZ2V0T3JpZ2luKGRvYyk7XG5cblx0ICBib3gudG9wIC09IG9yaWdpbi50b3A7XG5cdCAgYm94LmxlZnQgLT0gb3JpZ2luLmxlZnQ7XG5cblx0ICBpZiAodHlwZW9mIGJveC53aWR0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIGJveC53aWR0aCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsV2lkdGggLSBib3gubGVmdCAtIGJveC5yaWdodDtcblx0ICB9XG5cdCAgaWYgKHR5cGVvZiBib3guaGVpZ2h0ID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgYm94LmhlaWdodCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0IC0gYm94LnRvcCAtIGJveC5ib3R0b207XG5cdCAgfVxuXG5cdCAgYm94LnRvcCA9IGJveC50b3AgLSBkb2NFbC5jbGllbnRUb3A7XG5cdCAgYm94LmxlZnQgPSBib3gubGVmdCAtIGRvY0VsLmNsaWVudExlZnQ7XG5cdCAgYm94LnJpZ2h0ID0gZG9jLmJvZHkuY2xpZW50V2lkdGggLSBib3gud2lkdGggLSBib3gubGVmdDtcblx0ICBib3guYm90dG9tID0gZG9jLmJvZHkuY2xpZW50SGVpZ2h0IC0gYm94LmhlaWdodCAtIGJveC50b3A7XG5cblx0ICByZXR1cm4gYm94O1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsKSB7XG5cdCAgcmV0dXJuIGVsLm9mZnNldFBhcmVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRTY3JvbGxCYXJTaXplKCkge1xuXHQgIHZhciBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgIGlubmVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuXHQgIGlubmVyLnN0eWxlLmhlaWdodCA9ICcyMDBweCc7XG5cblx0ICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICBleHRlbmQob3V0ZXIuc3R5bGUsIHtcblx0ICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHQgICAgdG9wOiAwLFxuXHQgICAgbGVmdDogMCxcblx0ICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcblx0ICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuXHQgICAgd2lkdGg6ICcyMDBweCcsXG5cdCAgICBoZWlnaHQ6ICcxNTBweCcsXG5cdCAgICBvdmVyZmxvdzogJ2hpZGRlbidcblx0ICB9KTtcblxuXHQgIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcblxuXHQgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuXG5cdCAgdmFyIHdpZHRoQ29udGFpbmVkID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cdCAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcblx0ICB2YXIgd2lkdGhTY3JvbGwgPSBpbm5lci5vZmZzZXRXaWR0aDtcblxuXHQgIGlmICh3aWR0aENvbnRhaW5lZCA9PT0gd2lkdGhTY3JvbGwpIHtcblx0ICAgIHdpZHRoU2Nyb2xsID0gb3V0ZXIuY2xpZW50V2lkdGg7XG5cdCAgfVxuXG5cdCAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvdXRlcik7XG5cblx0ICB2YXIgd2lkdGggPSB3aWR0aENvbnRhaW5lZCAtIHdpZHRoU2Nyb2xsO1xuXG5cdCAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IHdpZHRoIH07XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQoKSB7XG5cdCAgdmFyIG91dCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuXG5cdCAgdmFyIGFyZ3MgPSBbXTtcblxuXHQgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG5cblx0ICBhcmdzLnNsaWNlKDEpLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuXHQgICAgaWYgKG9iaikge1xuXHQgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdCAgICAgICAgaWYgKCh7fSkuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcblx0ICAgICAgICAgIG91dFtrZXldID0gb2JqW2tleV07XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSk7XG5cblx0ICByZXR1cm4gb3V0O1xuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpIHtcblx0ICBpZiAodHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIG5hbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcblx0ICAgICAgaWYgKGNscy50cmltKCkpIHtcblx0ICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH0gZWxzZSB7XG5cdCAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCcoXnwgKScgKyBuYW1lLnNwbGl0KCcgJykuam9pbignfCcpICsgJyggfCQpJywgJ2dpJyk7XG5cdCAgICB2YXIgY2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKGVsKS5yZXBsYWNlKHJlZ2V4LCAnICcpO1xuXHQgICAgc2V0Q2xhc3NOYW1lKGVsLCBjbGFzc05hbWUpO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBuYW1lKSB7XG5cdCAgaWYgKHR5cGVvZiBlbC5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBuYW1lLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG5cdCAgICAgIGlmIChjbHMudHJpbSgpKSB7XG5cdCAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpO1xuXHQgICAgdmFyIGNscyA9IGdldENsYXNzTmFtZShlbCkgKyAoJyAnICsgbmFtZSk7XG5cdCAgICBzZXRDbGFzc05hbWUoZWwsIGNscyk7XG5cdCAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gaGFzQ2xhc3MoZWwsIG5hbWUpIHtcblx0ICBpZiAodHlwZW9mIGVsLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSk7XG5cdCAgfVxuXHQgIHZhciBjbGFzc05hbWUgPSBnZXRDbGFzc05hbWUoZWwpO1xuXHQgIHJldHVybiBuZXcgUmVnRXhwKCcoXnwgKScgKyBuYW1lICsgJyggfCQpJywgJ2dpJykudGVzdChjbGFzc05hbWUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKGVsKSB7XG5cdCAgaWYgKGVsLmNsYXNzTmFtZSBpbnN0YW5jZW9mIFNWR0FuaW1hdGVkU3RyaW5nKSB7XG5cdCAgICByZXR1cm4gZWwuY2xhc3NOYW1lLmJhc2VWYWw7XG5cdCAgfVxuXHQgIHJldHVybiBlbC5jbGFzc05hbWU7XG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDbGFzc05hbWUoZWwsIGNsYXNzTmFtZSkge1xuXHQgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc05hbWUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQ2xhc3NlcyhlbCwgYWRkLCBhbGwpIHtcblx0ICAvLyBPZiB0aGUgc2V0IG9mICdhbGwnIGNsYXNzZXMsIHdlIG5lZWQgdGhlICdhZGQnIGNsYXNzZXMsIGFuZCBvbmx5IHRoZVxuXHQgIC8vICdhZGQnIGNsYXNzZXMgdG8gYmUgc2V0LlxuXHQgIGFsbC5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcblx0ICAgIGlmIChhZGQuaW5kZXhPZihjbHMpID09PSAtMSAmJiBoYXNDbGFzcyhlbCwgY2xzKSkge1xuXHQgICAgICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcblx0ICAgIH1cblx0ICB9KTtcblxuXHQgIGFkZC5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcblx0ICAgIGlmICghaGFzQ2xhc3MoZWwsIGNscykpIHtcblx0ICAgICAgYWRkQ2xhc3MoZWwsIGNscyk7XG5cdCAgICB9XG5cdCAgfSk7XG5cdH1cblxuXHR2YXIgZGVmZXJyZWQgPSBbXTtcblxuXHR2YXIgZGVmZXIgPSBmdW5jdGlvbiBkZWZlcihmbikge1xuXHQgIGRlZmVycmVkLnB1c2goZm4pO1xuXHR9O1xuXG5cdHZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuXHQgIHZhciBmbiA9IHVuZGVmaW5lZDtcblx0ICB3aGlsZSAoZm4gPSBkZWZlcnJlZC5wb3AoKSkge1xuXHQgICAgZm4oKTtcblx0ICB9XG5cdH07XG5cblx0dmFyIEV2ZW50ZWQgPSAoZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIEV2ZW50ZWQoKSB7XG5cdCAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRlZCk7XG5cdCAgfVxuXG5cdCAgX2NyZWF0ZUNsYXNzKEV2ZW50ZWQsIFt7XG5cdCAgICBrZXk6ICdvbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gb24oZXZlbnQsIGhhbmRsZXIsIGN0eCkge1xuXHQgICAgICB2YXIgb25jZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJndW1lbnRzWzNdO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5iaW5kaW5ncyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLmJpbmRpbmdzID0ge307XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzW2V2ZW50XSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XSA9IFtdO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuYmluZGluZ3NbZXZlbnRdLnB1c2goeyBoYW5kbGVyOiBoYW5kbGVyLCBjdHg6IGN0eCwgb25jZTogb25jZSB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdvbmNlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBvbmNlKGV2ZW50LCBoYW5kbGVyLCBjdHgpIHtcblx0ICAgICAgdGhpcy5vbihldmVudCwgaGFuZGxlciwgY3R4LCB0cnVlKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdvZmYnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG9mZihldmVudCwgaGFuZGxlcikge1xuXHQgICAgICBpZiAodHlwZW9mIHRoaXMuYmluZGluZ3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLmJpbmRpbmdzW2V2ZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgZGVsZXRlIHRoaXMuYmluZGluZ3NbZXZlbnRdO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBpID0gMDtcblx0ICAgICAgICB3aGlsZSAoaSA8IHRoaXMuYmluZGluZ3NbZXZlbnRdLmxlbmd0aCkge1xuXHQgICAgICAgICAgaWYgKHRoaXMuYmluZGluZ3NbZXZlbnRdW2ldLmhhbmRsZXIgPT09IGhhbmRsZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy5iaW5kaW5nc1tldmVudF0uc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgKytpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3RyaWdnZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnQpIHtcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpbmRpbmdzICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmJpbmRpbmdzW2V2ZW50XSkge1xuXHQgICAgICAgIHZhciBpID0gMDtcblxuXHQgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgd2hpbGUgKGkgPCB0aGlzLmJpbmRpbmdzW2V2ZW50XS5sZW5ndGgpIHtcblx0ICAgICAgICAgIHZhciBfYmluZGluZ3MkZXZlbnQkaSA9IHRoaXMuYmluZGluZ3NbZXZlbnRdW2ldO1xuXHQgICAgICAgICAgdmFyIGhhbmRsZXIgPSBfYmluZGluZ3MkZXZlbnQkaS5oYW5kbGVyO1xuXHQgICAgICAgICAgdmFyIGN0eCA9IF9iaW5kaW5ncyRldmVudCRpLmN0eDtcblx0ICAgICAgICAgIHZhciBvbmNlID0gX2JpbmRpbmdzJGV2ZW50JGkub25jZTtcblxuXHQgICAgICAgICAgdmFyIGNvbnRleHQgPSBjdHg7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuXG5cdCAgICAgICAgICBpZiAob25jZSkge1xuXHQgICAgICAgICAgICB0aGlzLmJpbmRpbmdzW2V2ZW50XS5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICArK2k7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfV0pO1xuXG5cdCAgcmV0dXJuIEV2ZW50ZWQ7XG5cdH0pKCk7XG5cblx0VGV0aGVyQmFzZS5VdGlscyA9IHtcblx0ICBnZXRTY3JvbGxQYXJlbnQ6IGdldFNjcm9sbFBhcmVudCxcblx0ICBnZXRCb3VuZHM6IGdldEJvdW5kcyxcblx0ICBnZXRPZmZzZXRQYXJlbnQ6IGdldE9mZnNldFBhcmVudCxcblx0ICBleHRlbmQ6IGV4dGVuZCxcblx0ICBhZGRDbGFzczogYWRkQ2xhc3MsXG5cdCAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuXHQgIGhhc0NsYXNzOiBoYXNDbGFzcyxcblx0ICB1cGRhdGVDbGFzc2VzOiB1cGRhdGVDbGFzc2VzLFxuXHQgIGRlZmVyOiBkZWZlcixcblx0ICBmbHVzaDogZmx1c2gsXG5cdCAgdW5pcXVlSWQ6IHVuaXF1ZUlkLFxuXHQgIEV2ZW50ZWQ6IEV2ZW50ZWQsXG5cdCAgZ2V0U2Nyb2xsQmFyU2l6ZTogZ2V0U2Nyb2xsQmFyU2l6ZVxuXHR9O1xuXHQvKiBnbG9iYWxzIFRldGhlckJhc2UsIHBlcmZvcm1hbmNlICovXG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBfc2xpY2VkVG9BcnJheSA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWydyZXR1cm4nXSkgX2lbJ3JldHVybiddKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UnKTsgfSB9OyB9KSgpO1xuXG5cdHZhciBfY3JlYXRlQ2xhc3MgPSAoZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0pKCk7XG5cblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9XG5cblx0aWYgKHR5cGVvZiBUZXRoZXJCYXNlID09PSAndW5kZWZpbmVkJykge1xuXHQgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgaW5jbHVkZSB0aGUgdXRpbHMuanMgZmlsZSBiZWZvcmUgdGV0aGVyLmpzJyk7XG5cdH1cblxuXHR2YXIgX1RldGhlckJhc2UkVXRpbHMgPSBUZXRoZXJCYXNlLlV0aWxzO1xuXHR2YXIgZ2V0U2Nyb2xsUGFyZW50ID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0U2Nyb2xsUGFyZW50O1xuXHR2YXIgZ2V0Qm91bmRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0Qm91bmRzO1xuXHR2YXIgZ2V0T2Zmc2V0UGFyZW50ID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0T2Zmc2V0UGFyZW50O1xuXHR2YXIgZXh0ZW5kID0gX1RldGhlckJhc2UkVXRpbHMuZXh0ZW5kO1xuXHR2YXIgYWRkQ2xhc3MgPSBfVGV0aGVyQmFzZSRVdGlscy5hZGRDbGFzcztcblx0dmFyIHJlbW92ZUNsYXNzID0gX1RldGhlckJhc2UkVXRpbHMucmVtb3ZlQ2xhc3M7XG5cdHZhciB1cGRhdGVDbGFzc2VzID0gX1RldGhlckJhc2UkVXRpbHMudXBkYXRlQ2xhc3Nlcztcblx0dmFyIGRlZmVyID0gX1RldGhlckJhc2UkVXRpbHMuZGVmZXI7XG5cdHZhciBmbHVzaCA9IF9UZXRoZXJCYXNlJFV0aWxzLmZsdXNoO1xuXHR2YXIgZ2V0U2Nyb2xsQmFyU2l6ZSA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldFNjcm9sbEJhclNpemU7XG5cblx0ZnVuY3Rpb24gd2l0aGluKGEsIGIpIHtcblx0ICB2YXIgZGlmZiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IDEgOiBhcmd1bWVudHNbMl07XG5cblx0ICByZXR1cm4gYSArIGRpZmYgPj0gYiAmJiBiID49IGEgLSBkaWZmO1xuXHR9XG5cblx0dmFyIHRyYW5zZm9ybUtleSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHJldHVybiAnJztcblx0ICB9XG5cdCAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cblx0ICB2YXIgdHJhbnNmb3JtcyA9IFsndHJhbnNmb3JtJywgJ3dlYmtpdFRyYW5zZm9ybScsICdPVHJhbnNmb3JtJywgJ01velRyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddO1xuXHQgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7ICsraSkge1xuXHQgICAgdmFyIGtleSA9IHRyYW5zZm9ybXNbaV07XG5cdCAgICBpZiAoZWwuc3R5bGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHJldHVybiBrZXk7XG5cdCAgICB9XG5cdCAgfVxuXHR9KSgpO1xuXG5cdHZhciB0ZXRoZXJzID0gW107XG5cblx0dmFyIHBvc2l0aW9uID0gZnVuY3Rpb24gcG9zaXRpb24oKSB7XG5cdCAgdGV0aGVycy5mb3JFYWNoKGZ1bmN0aW9uICh0ZXRoZXIpIHtcblx0ICAgIHRldGhlci5wb3NpdGlvbihmYWxzZSk7XG5cdCAgfSk7XG5cdCAgZmx1c2goKTtcblx0fTtcblxuXHRmdW5jdGlvbiBub3coKSB7XG5cdCAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcblx0ICB9XG5cdCAgcmV0dXJuICtuZXcgRGF0ZSgpO1xuXHR9XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICB2YXIgbGFzdENhbGwgPSBudWxsO1xuXHQgIHZhciBsYXN0RHVyYXRpb24gPSBudWxsO1xuXHQgIHZhciBwZW5kaW5nVGltZW91dCA9IG51bGw7XG5cblx0ICB2YXIgdGljayA9IGZ1bmN0aW9uIHRpY2soKSB7XG5cdCAgICBpZiAodHlwZW9mIGxhc3REdXJhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbGFzdER1cmF0aW9uID4gMTYpIHtcblx0ICAgICAgLy8gV2Ugdm9sdW50YXJpbHkgdGhyb3R0bGUgb3Vyc2VsdmVzIGlmIHdlIGNhbid0IG1hbmFnZSA2MGZwc1xuXHQgICAgICBsYXN0RHVyYXRpb24gPSBNYXRoLm1pbihsYXN0RHVyYXRpb24gLSAxNiwgMjUwKTtcblxuXHQgICAgICAvLyBKdXN0IGluIGNhc2UgdGhpcyBpcyB0aGUgbGFzdCBldmVudCwgcmVtZW1iZXIgdG8gcG9zaXRpb24ganVzdCBvbmNlIG1vcmVcblx0ICAgICAgcGVuZGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRpY2ssIDI1MCk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgaWYgKHR5cGVvZiBsYXN0Q2FsbCAhPT0gJ3VuZGVmaW5lZCcgJiYgbm93KCkgLSBsYXN0Q2FsbCA8IDEwKSB7XG5cdCAgICAgIC8vIFNvbWUgYnJvd3NlcnMgY2FsbCBldmVudHMgYSBsaXR0bGUgdG9vIGZyZXF1ZW50bHksIHJlZnVzZSB0byBydW4gbW9yZSB0aGFuIGlzIHJlYXNvbmFibGVcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICBpZiAodHlwZW9mIHBlbmRpbmdUaW1lb3V0ICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICBjbGVhclRpbWVvdXQocGVuZGluZ1RpbWVvdXQpO1xuXHQgICAgICBwZW5kaW5nVGltZW91dCA9IG51bGw7XG5cdCAgICB9XG5cblx0ICAgIGxhc3RDYWxsID0gbm93KCk7XG5cdCAgICBwb3NpdGlvbigpO1xuXHQgICAgbGFzdER1cmF0aW9uID0gbm93KCkgLSBsYXN0Q2FsbDtcblx0ICB9O1xuXG5cdCAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBbJ3Jlc2l6ZScsICdzY3JvbGwnLCAndG91Y2htb3ZlJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRpY2spO1xuXHQgICAgfSk7XG5cdCAgfVxuXHR9KSgpO1xuXG5cdHZhciBNSVJST1JfTFIgPSB7XG5cdCAgY2VudGVyOiAnY2VudGVyJyxcblx0ICBsZWZ0OiAncmlnaHQnLFxuXHQgIHJpZ2h0OiAnbGVmdCdcblx0fTtcblxuXHR2YXIgTUlSUk9SX1RCID0ge1xuXHQgIG1pZGRsZTogJ21pZGRsZScsXG5cdCAgdG9wOiAnYm90dG9tJyxcblx0ICBib3R0b206ICd0b3AnXG5cdH07XG5cblx0dmFyIE9GRlNFVF9NQVAgPSB7XG5cdCAgdG9wOiAwLFxuXHQgIGxlZnQ6IDAsXG5cdCAgbWlkZGxlOiAnNTAlJyxcblx0ICBjZW50ZXI6ICc1MCUnLFxuXHQgIGJvdHRvbTogJzEwMCUnLFxuXHQgIHJpZ2h0OiAnMTAwJSdcblx0fTtcblxuXHR2YXIgYXV0b1RvRml4ZWRBdHRhY2htZW50ID0gZnVuY3Rpb24gYXV0b1RvRml4ZWRBdHRhY2htZW50KGF0dGFjaG1lbnQsIHJlbGF0aXZlVG9BdHRhY2htZW50KSB7XG5cdCAgdmFyIGxlZnQgPSBhdHRhY2htZW50LmxlZnQ7XG5cdCAgdmFyIHRvcCA9IGF0dGFjaG1lbnQudG9wO1xuXG5cdCAgaWYgKGxlZnQgPT09ICdhdXRvJykge1xuXHQgICAgbGVmdCA9IE1JUlJPUl9MUltyZWxhdGl2ZVRvQXR0YWNobWVudC5sZWZ0XTtcblx0ICB9XG5cblx0ICBpZiAodG9wID09PSAnYXV0bycpIHtcblx0ICAgIHRvcCA9IE1JUlJPUl9UQltyZWxhdGl2ZVRvQXR0YWNobWVudC50b3BdO1xuXHQgIH1cblxuXHQgIHJldHVybiB7IGxlZnQ6IGxlZnQsIHRvcDogdG9wIH07XG5cdH07XG5cblx0dmFyIGF0dGFjaG1lbnRUb09mZnNldCA9IGZ1bmN0aW9uIGF0dGFjaG1lbnRUb09mZnNldChhdHRhY2htZW50KSB7XG5cdCAgdmFyIGxlZnQgPSBhdHRhY2htZW50LmxlZnQ7XG5cdCAgdmFyIHRvcCA9IGF0dGFjaG1lbnQudG9wO1xuXG5cdCAgaWYgKHR5cGVvZiBPRkZTRVRfTUFQW2F0dGFjaG1lbnQubGVmdF0gIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICBsZWZ0ID0gT0ZGU0VUX01BUFthdHRhY2htZW50LmxlZnRdO1xuXHQgIH1cblxuXHQgIGlmICh0eXBlb2YgT0ZGU0VUX01BUFthdHRhY2htZW50LnRvcF0gIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICB0b3AgPSBPRkZTRVRfTUFQW2F0dGFjaG1lbnQudG9wXTtcblx0ICB9XG5cblx0ICByZXR1cm4geyBsZWZ0OiBsZWZ0LCB0b3A6IHRvcCB9O1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGFkZE9mZnNldCgpIHtcblx0ICB2YXIgb3V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBvZmZzZXRzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICBvZmZzZXRzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuXHQgIH1cblxuXHQgIG9mZnNldHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuXHQgICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuXHQgICAgdmFyIGxlZnQgPSBfcmVmLmxlZnQ7XG5cblx0ICAgIGlmICh0eXBlb2YgdG9wID09PSAnc3RyaW5nJykge1xuXHQgICAgICB0b3AgPSBwYXJzZUZsb2F0KHRvcCwgMTApO1xuXHQgICAgfVxuXHQgICAgaWYgKHR5cGVvZiBsZWZ0ID09PSAnc3RyaW5nJykge1xuXHQgICAgICBsZWZ0ID0gcGFyc2VGbG9hdChsZWZ0LCAxMCk7XG5cdCAgICB9XG5cblx0ICAgIG91dC50b3AgKz0gdG9wO1xuXHQgICAgb3V0LmxlZnQgKz0gbGVmdDtcblx0ICB9KTtcblxuXHQgIHJldHVybiBvdXQ7XG5cdH1cblxuXHRmdW5jdGlvbiBvZmZzZXRUb1B4KG9mZnNldCwgc2l6ZSkge1xuXHQgIGlmICh0eXBlb2Ygb2Zmc2V0LmxlZnQgPT09ICdzdHJpbmcnICYmIG9mZnNldC5sZWZ0LmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcblx0ICAgIG9mZnNldC5sZWZ0ID0gcGFyc2VGbG9hdChvZmZzZXQubGVmdCwgMTApIC8gMTAwICogc2l6ZS53aWR0aDtcblx0ICB9XG5cdCAgaWYgKHR5cGVvZiBvZmZzZXQudG9wID09PSAnc3RyaW5nJyAmJiBvZmZzZXQudG9wLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcblx0ICAgIG9mZnNldC50b3AgPSBwYXJzZUZsb2F0KG9mZnNldC50b3AsIDEwKSAvIDEwMCAqIHNpemUuaGVpZ2h0O1xuXHQgIH1cblxuXHQgIHJldHVybiBvZmZzZXQ7XG5cdH1cblxuXHR2YXIgcGFyc2VPZmZzZXQgPSBmdW5jdGlvbiBwYXJzZU9mZnNldCh2YWx1ZSkge1xuXHQgIHZhciBfdmFsdWUkc3BsaXQgPSB2YWx1ZS5zcGxpdCgnICcpO1xuXG5cdCAgdmFyIF92YWx1ZSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfdmFsdWUkc3BsaXQsIDIpO1xuXG5cdCAgdmFyIHRvcCA9IF92YWx1ZSRzcGxpdDJbMF07XG5cdCAgdmFyIGxlZnQgPSBfdmFsdWUkc3BsaXQyWzFdO1xuXG5cdCAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQgfTtcblx0fTtcblx0dmFyIHBhcnNlQXR0YWNobWVudCA9IHBhcnNlT2Zmc2V0O1xuXG5cdHZhciBUZXRoZXJDbGFzcyA9IChmdW5jdGlvbiAoKSB7XG5cdCAgZnVuY3Rpb24gVGV0aGVyQ2xhc3Mob3B0aW9ucykge1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRldGhlckNsYXNzKTtcblxuXHQgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24uYmluZCh0aGlzKTtcblxuXHQgICAgdGV0aGVycy5wdXNoKHRoaXMpO1xuXG5cdCAgICB0aGlzLmhpc3RvcnkgPSBbXTtcblxuXHQgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMsIGZhbHNlKTtcblxuXHQgICAgVGV0aGVyQmFzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xuXHQgICAgICBpZiAodHlwZW9mIG1vZHVsZS5pbml0aWFsaXplICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIG1vZHVsZS5pbml0aWFsaXplLmNhbGwoX3RoaXMpO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgdGhpcy5wb3NpdGlvbigpO1xuXHQgIH1cblxuXHQgIF9jcmVhdGVDbGFzcyhUZXRoZXJDbGFzcywgW3tcblx0ICAgIGtleTogJ2dldENsYXNzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDbGFzcygpIHtcblx0ICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/ICcnIDogYXJndW1lbnRzWzBdO1xuXHQgICAgICB2YXIgY2xhc3NlcyA9IHRoaXMub3B0aW9ucy5jbGFzc2VzO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgY2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2xhc3Nlc1trZXldKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGFzc2VzW2tleV07XG5cdCAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNsYXNzUHJlZml4KSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5jbGFzc1ByZWZpeCArICctJyArIGtleTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4ga2V5O1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0T3B0aW9ucycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG5cdCAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdCAgICAgIHZhciBwb3MgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzFdO1xuXG5cdCAgICAgIHZhciBkZWZhdWx0cyA9IHtcblx0ICAgICAgICBvZmZzZXQ6ICcwIDAnLFxuXHQgICAgICAgIHRhcmdldE9mZnNldDogJzAgMCcsXG5cdCAgICAgICAgdGFyZ2V0QXR0YWNobWVudDogJ2F1dG8gYXV0bycsXG5cdCAgICAgICAgY2xhc3NQcmVmaXg6ICd0ZXRoZXInXG5cdCAgICAgIH07XG5cblx0ICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuXHQgICAgICB2YXIgX29wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cdCAgICAgIHZhciBlbGVtZW50ID0gX29wdGlvbnMuZWxlbWVudDtcblx0ICAgICAgdmFyIHRhcmdldCA9IF9vcHRpb25zLnRhcmdldDtcblx0ICAgICAgdmFyIHRhcmdldE1vZGlmaWVyID0gX29wdGlvbnMudGFyZ2V0TW9kaWZpZXI7XG5cblx0ICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblx0ICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG5cdCAgICAgIHRoaXMudGFyZ2V0TW9kaWZpZXIgPSB0YXJnZXRNb2RpZmllcjtcblxuXHQgICAgICBpZiAodGhpcy50YXJnZXQgPT09ICd2aWV3cG9ydCcpIHtcblx0ICAgICAgICB0aGlzLnRhcmdldCA9IGRvY3VtZW50LmJvZHk7XG5cdCAgICAgICAgdGhpcy50YXJnZXRNb2RpZmllciA9ICd2aXNpYmxlJztcblx0ICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldCA9PT0gJ3Njcm9sbC1oYW5kbGUnKSB7XG5cdCAgICAgICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xuXHQgICAgICAgIHRoaXMudGFyZ2V0TW9kaWZpZXIgPSAnc2Nyb2xsLWhhbmRsZSc7XG5cdCAgICAgIH1cblxuXHQgICAgICBbJ2VsZW1lbnQnLCAndGFyZ2V0J10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBfdGhpczJba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV0aGVyIEVycm9yOiBCb3RoIGVsZW1lbnQgYW5kIHRhcmdldCBtdXN0IGJlIGRlZmluZWQnKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodHlwZW9mIF90aGlzMltrZXldLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgIF90aGlzMltrZXldID0gX3RoaXMyW2tleV1bMF07XG5cdCAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgX3RoaXMyW2tleV0gPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICBfdGhpczJba2V5XSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoX3RoaXMyW2tleV0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cblx0ICAgICAgYWRkQ2xhc3ModGhpcy5lbGVtZW50LCB0aGlzLmdldENsYXNzKCdlbGVtZW50JykpO1xuXHQgICAgICBpZiAoISh0aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG5cdCAgICAgICAgYWRkQ2xhc3ModGhpcy50YXJnZXQsIHRoaXMuZ2V0Q2xhc3MoJ3RhcmdldCcpKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICghdGhpcy5vcHRpb25zLmF0dGFjaG1lbnQpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RldGhlciBFcnJvcjogWW91IG11c3QgcHJvdmlkZSBhbiBhdHRhY2htZW50Jyk7XG5cdCAgICAgIH1cblxuXHQgICAgICB0aGlzLnRhcmdldEF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQodGhpcy5vcHRpb25zLnRhcmdldEF0dGFjaG1lbnQpO1xuXHQgICAgICB0aGlzLmF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQodGhpcy5vcHRpb25zLmF0dGFjaG1lbnQpO1xuXHQgICAgICB0aGlzLm9mZnNldCA9IHBhcnNlT2Zmc2V0KHRoaXMub3B0aW9ucy5vZmZzZXQpO1xuXHQgICAgICB0aGlzLnRhcmdldE9mZnNldCA9IHBhcnNlT2Zmc2V0KHRoaXMub3B0aW9ucy50YXJnZXRPZmZzZXQpO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5zY3JvbGxQYXJlbnQgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5kaXNhYmxlKCk7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodGhpcy50YXJnZXRNb2RpZmllciA9PT0gJ3Njcm9sbC1oYW5kbGUnKSB7XG5cdCAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnQgPSB0aGlzLnRhcmdldDtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLnNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudCh0aGlzLnRhcmdldCk7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoISh0aGlzLm9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UpKSB7XG5cdCAgICAgICAgdGhpcy5lbmFibGUocG9zKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFRhcmdldEJvdW5kcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFyZ2V0Qm91bmRzKCkge1xuXHQgICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0TW9kaWZpZXIgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgaWYgKHRoaXMudGFyZ2V0TW9kaWZpZXIgPT09ICd2aXNpYmxlJykge1xuXHQgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB7IHRvcDogcGFnZVlPZmZzZXQsIGxlZnQ6IHBhZ2VYT2Zmc2V0LCBoZWlnaHQ6IGlubmVySGVpZ2h0LCB3aWR0aDogaW5uZXJXaWR0aCB9O1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIGJvdW5kcyA9IGdldEJvdW5kcyh0aGlzLnRhcmdldCk7XG5cblx0ICAgICAgICAgICAgdmFyIG91dCA9IHtcblx0ICAgICAgICAgICAgICBoZWlnaHQ6IGJvdW5kcy5oZWlnaHQsXG5cdCAgICAgICAgICAgICAgd2lkdGg6IGJvdW5kcy53aWR0aCxcblx0ICAgICAgICAgICAgICB0b3A6IGJvdW5kcy50b3AsXG5cdCAgICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnRcblx0ICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICBvdXQuaGVpZ2h0ID0gTWF0aC5taW4ob3V0LmhlaWdodCwgYm91bmRzLmhlaWdodCAtIChwYWdlWU9mZnNldCAtIGJvdW5kcy50b3ApKTtcblx0ICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWluKG91dC5oZWlnaHQsIGJvdW5kcy5oZWlnaHQgLSAoYm91bmRzLnRvcCArIGJvdW5kcy5oZWlnaHQgLSAocGFnZVlPZmZzZXQgKyBpbm5lckhlaWdodCkpKTtcblx0ICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWluKGlubmVySGVpZ2h0LCBvdXQuaGVpZ2h0KTtcblx0ICAgICAgICAgICAgb3V0LmhlaWdodCAtPSAyO1xuXG5cdCAgICAgICAgICAgIG91dC53aWR0aCA9IE1hdGgubWluKG91dC53aWR0aCwgYm91bmRzLndpZHRoIC0gKHBhZ2VYT2Zmc2V0IC0gYm91bmRzLmxlZnQpKTtcblx0ICAgICAgICAgICAgb3V0LndpZHRoID0gTWF0aC5taW4ob3V0LndpZHRoLCBib3VuZHMud2lkdGggLSAoYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGggLSAocGFnZVhPZmZzZXQgKyBpbm5lcldpZHRoKSkpO1xuXHQgICAgICAgICAgICBvdXQud2lkdGggPSBNYXRoLm1pbihpbm5lcldpZHRoLCBvdXQud2lkdGgpO1xuXHQgICAgICAgICAgICBvdXQud2lkdGggLT0gMjtcblxuXHQgICAgICAgICAgICBpZiAob3V0LnRvcCA8IHBhZ2VZT2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgb3V0LnRvcCA9IHBhZ2VZT2Zmc2V0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChvdXQubGVmdCA8IHBhZ2VYT2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgb3V0LmxlZnQgPSBwYWdlWE9mZnNldDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBvdXQ7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldE1vZGlmaWVyID09PSAnc2Nyb2xsLWhhbmRsZScpIHtcblx0ICAgICAgICAgIHZhciBib3VuZHMgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG5cdCAgICAgICAgICBpZiAodGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG5cdCAgICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHQgICAgICAgICAgICBib3VuZHMgPSB7XG5cdCAgICAgICAgICAgICAgbGVmdDogcGFnZVhPZmZzZXQsXG5cdCAgICAgICAgICAgICAgdG9wOiBwYWdlWU9mZnNldCxcblx0ICAgICAgICAgICAgICBoZWlnaHQ6IGlubmVySGVpZ2h0LFxuXHQgICAgICAgICAgICAgIHdpZHRoOiBpbm5lcldpZHRoXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBib3VuZHMgPSBnZXRCb3VuZHModGFyZ2V0KTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xuXG5cdCAgICAgICAgICB2YXIgaGFzQm90dG9tU2Nyb2xsID0gdGFyZ2V0LnNjcm9sbFdpZHRoID4gdGFyZ2V0LmNsaWVudFdpZHRoIHx8IFtzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYXS5pbmRleE9mKCdzY3JvbGwnKSA+PSAwIHx8IHRoaXMudGFyZ2V0ICE9PSBkb2N1bWVudC5ib2R5O1xuXG5cdCAgICAgICAgICB2YXIgc2Nyb2xsQm90dG9tID0gMDtcblx0ICAgICAgICAgIGlmIChoYXNCb3R0b21TY3JvbGwpIHtcblx0ICAgICAgICAgICAgc2Nyb2xsQm90dG9tID0gMTU7XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIHZhciBoZWlnaHQgPSBib3VuZHMuaGVpZ2h0IC0gcGFyc2VGbG9hdChzdHlsZS5ib3JkZXJUb3BXaWR0aCkgLSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKSAtIHNjcm9sbEJvdHRvbTtcblxuXHQgICAgICAgICAgdmFyIG91dCA9IHtcblx0ICAgICAgICAgICAgd2lkdGg6IDE1LFxuXHQgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAqIDAuOTc1ICogKGhlaWdodCAvIHRhcmdldC5zY3JvbGxIZWlnaHQpLFxuXHQgICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdCArIGJvdW5kcy53aWR0aCAtIHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyTGVmdFdpZHRoKSAtIDE1XG5cdCAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICB2YXIgZml0QWRqID0gMDtcblx0ICAgICAgICAgIGlmIChoZWlnaHQgPCA0MDggJiYgdGhpcy50YXJnZXQgPT09IGRvY3VtZW50LmJvZHkpIHtcblx0ICAgICAgICAgICAgZml0QWRqID0gLTAuMDAwMTEgKiBNYXRoLnBvdyhoZWlnaHQsIDIpIC0gMC4wMDcyNyAqIGhlaWdodCArIDIyLjU4O1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBpZiAodGhpcy50YXJnZXQgIT09IGRvY3VtZW50LmJvZHkpIHtcblx0ICAgICAgICAgICAgb3V0LmhlaWdodCA9IE1hdGgubWF4KG91dC5oZWlnaHQsIDI0KTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgdmFyIHNjcm9sbFBlcmNlbnRhZ2UgPSB0aGlzLnRhcmdldC5zY3JvbGxUb3AgLyAodGFyZ2V0LnNjcm9sbEhlaWdodCAtIGhlaWdodCk7XG5cdCAgICAgICAgICBvdXQudG9wID0gc2Nyb2xsUGVyY2VudGFnZSAqIChoZWlnaHQgLSBvdXQuaGVpZ2h0IC0gZml0QWRqKSArIGJvdW5kcy50b3AgKyBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlclRvcFdpZHRoKTtcblxuXHQgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0ID09PSBkb2N1bWVudC5ib2R5KSB7XG5cdCAgICAgICAgICAgIG91dC5oZWlnaHQgPSBNYXRoLm1heChvdXQuaGVpZ2h0LCAyNCk7XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIHJldHVybiBvdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBnZXRCb3VuZHModGhpcy50YXJnZXQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY2xlYXJDYWNoZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJDYWNoZSgpIHtcblx0ICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjYWNoZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY2FjaGUoaywgZ2V0dGVyKSB7XG5cdCAgICAgIC8vIE1vcmUgdGhhbiBvbmUgbW9kdWxlIHdpbGwgb2Z0ZW4gbmVlZCB0aGUgc2FtZSBET00gaW5mbywgc29cblx0ICAgICAgLy8gd2Uga2VlcCBhIGNhY2hlIHdoaWNoIGlzIGNsZWFyZWQgb24gZWFjaCBwb3NpdGlvbiBjYWxsXG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5fY2FjaGUgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5fY2FjaGVba10gPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5fY2FjaGVba10gPSBnZXR0ZXIuY2FsbCh0aGlzKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHJldHVybiB0aGlzLl9jYWNoZVtrXTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdlbmFibGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcblx0ICAgICAgdmFyIHBvcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF07XG5cblx0ICAgICAgaWYgKCEodGhpcy5vcHRpb25zLmFkZFRhcmdldENsYXNzZXMgPT09IGZhbHNlKSkge1xuXHQgICAgICAgIGFkZENsYXNzKHRoaXMudGFyZ2V0LCB0aGlzLmdldENsYXNzKCdlbmFibGVkJykpO1xuXHQgICAgICB9XG5cdCAgICAgIGFkZENsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcblx0ICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHQgICAgICBpZiAodGhpcy5zY3JvbGxQYXJlbnQgIT09IGRvY3VtZW50KSB7XG5cdCAgICAgICAgdGhpcy5zY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5wb3NpdGlvbik7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAocG9zKSB7XG5cdCAgICAgICAgdGhpcy5wb3NpdGlvbigpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZGlzYWJsZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcblx0ICAgICAgcmVtb3ZlQ2xhc3ModGhpcy50YXJnZXQsIHRoaXMuZ2V0Q2xhc3MoJ2VuYWJsZWQnKSk7XG5cdCAgICAgIHJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudCwgdGhpcy5nZXRDbGFzcygnZW5hYmxlZCcpKTtcblx0ICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLnNjcm9sbFBhcmVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICB0aGlzLnNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnBvc2l0aW9uKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2Rlc3Ryb3knLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG5cdCAgICAgIHRoaXMuZGlzYWJsZSgpO1xuXG5cdCAgICAgIHRldGhlcnMuZm9yRWFjaChmdW5jdGlvbiAodGV0aGVyLCBpKSB7XG5cdCAgICAgICAgaWYgKHRldGhlciA9PT0gX3RoaXMzKSB7XG5cdCAgICAgICAgICB0ZXRoZXJzLnNwbGljZShpLCAxKTtcblx0ICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICB9XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3VwZGF0ZUF0dGFjaENsYXNzZXMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUF0dGFjaENsYXNzZXMoZWxlbWVudEF0dGFjaCwgdGFyZ2V0QXR0YWNoKSB7XG5cdCAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG5cdCAgICAgIGVsZW1lbnRBdHRhY2ggPSBlbGVtZW50QXR0YWNoIHx8IHRoaXMuYXR0YWNobWVudDtcblx0ICAgICAgdGFyZ2V0QXR0YWNoID0gdGFyZ2V0QXR0YWNoIHx8IHRoaXMudGFyZ2V0QXR0YWNobWVudDtcblx0ICAgICAgdmFyIHNpZGVzID0gWydsZWZ0JywgJ3RvcCcsICdib3R0b20nLCAncmlnaHQnLCAnbWlkZGxlJywgJ2NlbnRlciddO1xuXG5cdCAgICAgIGlmICh0eXBlb2YgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5fYWRkQXR0YWNoQ2xhc3Nlcy5sZW5ndGgpIHtcblx0ICAgICAgICAvLyB1cGRhdGVBdHRhY2hDbGFzc2VzIGNhbiBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgaW4gYSBwb3NpdGlvbiBjYWxsLCBzb1xuXHQgICAgICAgIC8vIHdlIG5lZWQgdG8gY2xlYW4gdXAgYWZ0ZXIgb3Vyc2VsdmVzIHN1Y2ggdGhhdCB3aGVuIHRoZSBsYXN0IGRlZmVyIGdldHNcblx0ICAgICAgICAvLyByYW4gaXQgZG9lc24ndCBhZGQgYW55IGV4dHJhIGNsYXNzZXMgZnJvbSBwcmV2aW91cyBjYWxscy5cblx0ICAgICAgICB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLnNwbGljZSgwLCB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzLmxlbmd0aCk7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMuX2FkZEF0dGFjaENsYXNzZXMgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgdGhpcy5fYWRkQXR0YWNoQ2xhc3NlcyA9IFtdO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciBhZGQgPSB0aGlzLl9hZGRBdHRhY2hDbGFzc2VzO1xuXG5cdCAgICAgIGlmIChlbGVtZW50QXR0YWNoLnRvcCkge1xuXHQgICAgICAgIGFkZC5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ2VsZW1lbnQtYXR0YWNoZWQnKSArICctJyArIGVsZW1lbnRBdHRhY2gudG9wKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoZWxlbWVudEF0dGFjaC5sZWZ0KSB7XG5cdCAgICAgICAgYWRkLnB1c2godGhpcy5nZXRDbGFzcygnZWxlbWVudC1hdHRhY2hlZCcpICsgJy0nICsgZWxlbWVudEF0dGFjaC5sZWZ0KTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAodGFyZ2V0QXR0YWNoLnRvcCkge1xuXHQgICAgICAgIGFkZC5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ3RhcmdldC1hdHRhY2hlZCcpICsgJy0nICsgdGFyZ2V0QXR0YWNoLnRvcCk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHRhcmdldEF0dGFjaC5sZWZ0KSB7XG5cdCAgICAgICAgYWRkLnB1c2godGhpcy5nZXRDbGFzcygndGFyZ2V0LWF0dGFjaGVkJykgKyAnLScgKyB0YXJnZXRBdHRhY2gubGVmdCk7XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgYWxsID0gW107XG5cdCAgICAgIHNpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgICBhbGwucHVzaChfdGhpczQuZ2V0Q2xhc3MoJ2VsZW1lbnQtYXR0YWNoZWQnKSArICctJyArIHNpZGUpO1xuXHQgICAgICAgIGFsbC5wdXNoKF90aGlzNC5nZXRDbGFzcygndGFyZ2V0LWF0dGFjaGVkJykgKyAnLScgKyBzaWRlKTtcblx0ICAgICAgfSk7XG5cblx0ICAgICAgZGVmZXIoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICghKHR5cGVvZiBfdGhpczQuX2FkZEF0dGFjaENsYXNzZXMgIT09ICd1bmRlZmluZWQnKSkge1xuXHQgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXM0LmVsZW1lbnQsIF90aGlzNC5fYWRkQXR0YWNoQ2xhc3NlcywgYWxsKTtcblx0ICAgICAgICBpZiAoIShfdGhpczQub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcblx0ICAgICAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXM0LnRhcmdldCwgX3RoaXM0Ll9hZGRBdHRhY2hDbGFzc2VzLCBhbGwpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGRlbGV0ZSBfdGhpczQuX2FkZEF0dGFjaENsYXNzZXM7XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Bvc2l0aW9uJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NpdGlvbigpIHtcblx0ICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cblx0ICAgICAgdmFyIGZsdXNoQ2hhbmdlcyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBhcmd1bWVudHNbMF07XG5cblx0ICAgICAgLy8gZmx1c2hDaGFuZ2VzIGNvbW1pdHMgdGhlIGNoYW5nZXMgaW1tZWRpYXRlbHksIGxlYXZlIHRydWUgdW5sZXNzIHlvdSBhcmUgcG9zaXRpb25pbmcgbXVsdGlwbGVcblx0ICAgICAgLy8gdGV0aGVycyAoaW4gd2hpY2ggY2FzZSBjYWxsIFRldGhlci5VdGlscy5mbHVzaCB5b3Vyc2VsZiB3aGVuIHlvdSdyZSBkb25lKVxuXG5cdCAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cblx0ICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG5cblx0ICAgICAgLy8gVHVybiAnYXV0bycgYXR0YWNobWVudHMgaW50byB0aGUgYXBwcm9wcmlhdGUgY29ybmVyIG9yIGVkZ2Vcblx0ICAgICAgdmFyIHRhcmdldEF0dGFjaG1lbnQgPSBhdXRvVG9GaXhlZEF0dGFjaG1lbnQodGhpcy50YXJnZXRBdHRhY2htZW50LCB0aGlzLmF0dGFjaG1lbnQpO1xuXG5cdCAgICAgIHRoaXMudXBkYXRlQXR0YWNoQ2xhc3Nlcyh0aGlzLmF0dGFjaG1lbnQsIHRhcmdldEF0dGFjaG1lbnQpO1xuXG5cdCAgICAgIHZhciBlbGVtZW50UG9zID0gdGhpcy5jYWNoZSgnZWxlbWVudC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIGdldEJvdW5kcyhfdGhpczUuZWxlbWVudCk7XG5cdCAgICAgIH0pO1xuXG5cdCAgICAgIHZhciB3aWR0aCA9IGVsZW1lbnRQb3Mud2lkdGg7XG5cdCAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50UG9zLmhlaWdodDtcblxuXHQgICAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwICYmIHR5cGVvZiB0aGlzLmxhc3RTaXplICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgIHZhciBfbGFzdFNpemUgPSB0aGlzLmxhc3RTaXplO1xuXG5cdCAgICAgICAgLy8gV2UgY2FjaGUgdGhlIGhlaWdodCBhbmQgd2lkdGggdG8gbWFrZSBpdCBwb3NzaWJsZSB0byBwb3NpdGlvbiBlbGVtZW50cyB0aGF0IGFyZVxuXHQgICAgICAgIC8vIGdldHRpbmcgaGlkZGVuLlxuXHQgICAgICAgIHdpZHRoID0gX2xhc3RTaXplLndpZHRoO1xuXHQgICAgICAgIGhlaWdodCA9IF9sYXN0U2l6ZS5oZWlnaHQ7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5sYXN0U2l6ZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIHRhcmdldFBvcyA9IHRoaXMuY2FjaGUoJ3RhcmdldC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzNS5nZXRUYXJnZXRCb3VuZHMoKTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHZhciB0YXJnZXRTaXplID0gdGFyZ2V0UG9zO1xuXG5cdCAgICAgIC8vIEdldCBhbiBhY3R1YWwgcHggb2Zmc2V0IGZyb20gdGhlIGF0dGFjaG1lbnRcblx0ICAgICAgdmFyIG9mZnNldCA9IG9mZnNldFRvUHgoYXR0YWNobWVudFRvT2Zmc2V0KHRoaXMuYXR0YWNobWVudCksIHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9KTtcblx0ICAgICAgdmFyIHRhcmdldE9mZnNldCA9IG9mZnNldFRvUHgoYXR0YWNobWVudFRvT2Zmc2V0KHRhcmdldEF0dGFjaG1lbnQpLCB0YXJnZXRTaXplKTtcblxuXHQgICAgICB2YXIgbWFudWFsT2Zmc2V0ID0gb2Zmc2V0VG9QeCh0aGlzLm9mZnNldCwgeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xuXHQgICAgICB2YXIgbWFudWFsVGFyZ2V0T2Zmc2V0ID0gb2Zmc2V0VG9QeCh0aGlzLnRhcmdldE9mZnNldCwgdGFyZ2V0U2l6ZSk7XG5cblx0ICAgICAgLy8gQWRkIHRoZSBtYW51YWxseSBwcm92aWRlZCBvZmZzZXRcblx0ICAgICAgb2Zmc2V0ID0gYWRkT2Zmc2V0KG9mZnNldCwgbWFudWFsT2Zmc2V0KTtcblx0ICAgICAgdGFyZ2V0T2Zmc2V0ID0gYWRkT2Zmc2V0KHRhcmdldE9mZnNldCwgbWFudWFsVGFyZ2V0T2Zmc2V0KTtcblxuXHQgICAgICAvLyBJdCdzIG5vdyBvdXIgZ29hbCB0byBtYWtlIChlbGVtZW50IHBvc2l0aW9uICsgb2Zmc2V0KSA9PSAodGFyZ2V0IHBvc2l0aW9uICsgdGFyZ2V0IG9mZnNldClcblx0ICAgICAgdmFyIGxlZnQgPSB0YXJnZXRQb3MubGVmdCArIHRhcmdldE9mZnNldC5sZWZ0IC0gb2Zmc2V0LmxlZnQ7XG5cdCAgICAgIHZhciB0b3AgPSB0YXJnZXRQb3MudG9wICsgdGFyZ2V0T2Zmc2V0LnRvcCAtIG9mZnNldC50b3A7XG5cblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBUZXRoZXJCYXNlLm1vZHVsZXMubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICB2YXIgX21vZHVsZTIgPSBUZXRoZXJCYXNlLm1vZHVsZXNbaV07XG5cdCAgICAgICAgdmFyIHJldCA9IF9tb2R1bGUyLnBvc2l0aW9uLmNhbGwodGhpcywge1xuXHQgICAgICAgICAgbGVmdDogbGVmdCxcblx0ICAgICAgICAgIHRvcDogdG9wLFxuXHQgICAgICAgICAgdGFyZ2V0QXR0YWNobWVudDogdGFyZ2V0QXR0YWNobWVudCxcblx0ICAgICAgICAgIHRhcmdldFBvczogdGFyZ2V0UG9zLFxuXHQgICAgICAgICAgZWxlbWVudFBvczogZWxlbWVudFBvcyxcblx0ICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuXHQgICAgICAgICAgdGFyZ2V0T2Zmc2V0OiB0YXJnZXRPZmZzZXQsXG5cdCAgICAgICAgICBtYW51YWxPZmZzZXQ6IG1hbnVhbE9mZnNldCxcblx0ICAgICAgICAgIG1hbnVhbFRhcmdldE9mZnNldDogbWFudWFsVGFyZ2V0T2Zmc2V0LFxuXHQgICAgICAgICAgc2Nyb2xsYmFyU2l6ZTogc2Nyb2xsYmFyU2l6ZSxcblx0ICAgICAgICAgIGF0dGFjaG1lbnQ6IHRoaXMuYXR0YWNobWVudFxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgaWYgKHJldCA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXQgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiByZXQgIT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdG9wID0gcmV0LnRvcDtcblx0ICAgICAgICAgIGxlZnQgPSByZXQubGVmdDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICAvLyBXZSBkZXNjcmliZSB0aGUgcG9zaXRpb24gdGhyZWUgZGlmZmVyZW50IHdheXMgdG8gZ2l2ZSB0aGUgb3B0aW1pemVyXG5cdCAgICAgIC8vIGEgY2hhbmNlIHRvIGRlY2lkZSB0aGUgYmVzdCBwb3NzaWJsZSB3YXkgdG8gcG9zaXRpb24gdGhlIGVsZW1lbnRcblx0ICAgICAgLy8gd2l0aCB0aGUgZmV3ZXN0IHJlcGFpbnRzLlxuXHQgICAgICB2YXIgbmV4dCA9IHtcblx0ICAgICAgICAvLyBJdCdzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBwYWdlIChhYnNvbHV0ZSBwb3NpdGlvbmluZyB3aGVuXG5cdCAgICAgICAgLy8gdGhlIGVsZW1lbnQgaXMgYSBjaGlsZCBvZiB0aGUgYm9keSlcblx0ICAgICAgICBwYWdlOiB7XG5cdCAgICAgICAgICB0b3A6IHRvcCxcblx0ICAgICAgICAgIGxlZnQ6IGxlZnRcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLy8gSXQncyBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnQgKGZpeGVkIHBvc2l0aW9uaW5nKVxuXHQgICAgICAgIHZpZXdwb3J0OiB7XG5cdCAgICAgICAgICB0b3A6IHRvcCAtIHBhZ2VZT2Zmc2V0LFxuXHQgICAgICAgICAgYm90dG9tOiBwYWdlWU9mZnNldCAtIHRvcCAtIGhlaWdodCArIGlubmVySGVpZ2h0LFxuXHQgICAgICAgICAgbGVmdDogbGVmdCAtIHBhZ2VYT2Zmc2V0LFxuXHQgICAgICAgICAgcmlnaHQ6IHBhZ2VYT2Zmc2V0IC0gbGVmdCAtIHdpZHRoICsgaW5uZXJXaWR0aFxuXHQgICAgICAgIH1cblx0ICAgICAgfTtcblxuXHQgICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IHVuZGVmaW5lZDtcblx0ICAgICAgaWYgKGRvY3VtZW50LmJvZHkuc2Nyb2xsV2lkdGggPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xuXHQgICAgICAgIHNjcm9sbGJhclNpemUgPSB0aGlzLmNhY2hlKCdzY3JvbGxiYXItc2l6ZScsIGdldFNjcm9sbEJhclNpemUpO1xuXHQgICAgICAgIG5leHQudmlld3BvcnQuYm90dG9tIC09IHNjcm9sbGJhclNpemUuaGVpZ2h0O1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0KSB7XG5cdCAgICAgICAgc2Nyb2xsYmFyU2l6ZSA9IHRoaXMuY2FjaGUoJ3Njcm9sbGJhci1zaXplJywgZ2V0U2Nyb2xsQmFyU2l6ZSk7XG5cdCAgICAgICAgbmV4dC52aWV3cG9ydC5yaWdodCAtPSBzY3JvbGxiYXJTaXplLndpZHRoO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKFsnJywgJ3N0YXRpYyddLmluZGV4T2YoZG9jdW1lbnQuYm9keS5zdHlsZS5wb3NpdGlvbikgPT09IC0xIHx8IFsnJywgJ3N0YXRpYyddLmluZGV4T2YoZG9jdW1lbnQuYm9keS5wYXJlbnRFbGVtZW50LnN0eWxlLnBvc2l0aW9uKSA9PT0gLTEpIHtcblx0ICAgICAgICAvLyBBYnNvbHV0ZSBwb3NpdGlvbmluZyBpbiB0aGUgYm9keSB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoZSBwYWdlLCBub3QgdGhlICdpbml0aWFsIGNvbnRhaW5pbmcgYmxvY2snXG5cdCAgICAgICAgbmV4dC5wYWdlLmJvdHRvbSA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0IC0gdG9wIC0gaGVpZ2h0O1xuXHQgICAgICAgIG5leHQucGFnZS5yaWdodCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsV2lkdGggLSBsZWZ0IC0gd2lkdGg7XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5vcHRpbWl6YXRpb25zICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm9wdGlvbnMub3B0aW1pemF0aW9ucy5tb3ZlRWxlbWVudCAhPT0gZmFsc2UgJiYgISh0eXBlb2YgdGhpcy50YXJnZXRNb2RpZmllciAhPT0gJ3VuZGVmaW5lZCcpKSB7XG5cdCAgICAgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSBfdGhpczUuY2FjaGUoJ3RhcmdldC1vZmZzZXRwYXJlbnQnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoX3RoaXM1LnRhcmdldCk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIHZhciBvZmZzZXRQb3NpdGlvbiA9IF90aGlzNS5jYWNoZSgndGFyZ2V0LW9mZnNldHBhcmVudC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBnZXRCb3VuZHMob2Zmc2V0UGFyZW50KTtcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgdmFyIG9mZnNldFBhcmVudFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpO1xuXHQgICAgICAgICAgdmFyIG9mZnNldFBhcmVudFNpemUgPSBvZmZzZXRQb3NpdGlvbjtcblxuXHQgICAgICAgICAgdmFyIG9mZnNldEJvcmRlciA9IHt9O1xuXHQgICAgICAgICAgWydUb3AnLCAnTGVmdCcsICdCb3R0b20nLCAnUmlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG5cdCAgICAgICAgICAgIG9mZnNldEJvcmRlcltzaWRlLnRvTG93ZXJDYXNlKCldID0gcGFyc2VGbG9hdChvZmZzZXRQYXJlbnRTdHlsZVsnYm9yZGVyJyArIHNpZGUgKyAnV2lkdGgnXSk7XG5cdCAgICAgICAgICB9KTtcblxuXHQgICAgICAgICAgb2Zmc2V0UG9zaXRpb24ucmlnaHQgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRoIC0gb2Zmc2V0UG9zaXRpb24ubGVmdCAtIG9mZnNldFBhcmVudFNpemUud2lkdGggKyBvZmZzZXRCb3JkZXIucmlnaHQ7XG5cdCAgICAgICAgICBvZmZzZXRQb3NpdGlvbi5ib3R0b20gPSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCAtIG9mZnNldFBvc2l0aW9uLnRvcCAtIG9mZnNldFBhcmVudFNpemUuaGVpZ2h0ICsgb2Zmc2V0Qm9yZGVyLmJvdHRvbTtcblxuXHQgICAgICAgICAgaWYgKG5leHQucGFnZS50b3AgPj0gb2Zmc2V0UG9zaXRpb24udG9wICsgb2Zmc2V0Qm9yZGVyLnRvcCAmJiBuZXh0LnBhZ2UuYm90dG9tID49IG9mZnNldFBvc2l0aW9uLmJvdHRvbSkge1xuXHQgICAgICAgICAgICBpZiAobmV4dC5wYWdlLmxlZnQgPj0gb2Zmc2V0UG9zaXRpb24ubGVmdCArIG9mZnNldEJvcmRlci5sZWZ0ICYmIG5leHQucGFnZS5yaWdodCA+PSBvZmZzZXRQb3NpdGlvbi5yaWdodCkge1xuXHQgICAgICAgICAgICAgIC8vIFdlJ3JlIHdpdGhpbiB0aGUgdmlzaWJsZSBwYXJ0IG9mIHRoZSB0YXJnZXQncyBzY3JvbGwgcGFyZW50XG5cdCAgICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IG9mZnNldFBhcmVudC5zY3JvbGxUb3A7XG5cdCAgICAgICAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBvZmZzZXRQYXJlbnQuc2Nyb2xsTGVmdDtcblxuXHQgICAgICAgICAgICAgIC8vIEl0J3MgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHRhcmdldCdzIG9mZnNldCBwYXJlbnQgKGFic29sdXRlIHBvc2l0aW9uaW5nIHdoZW5cblx0ICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCBpcyBtb3ZlZCB0byBiZSBhIGNoaWxkIG9mIHRoZSB0YXJnZXQncyBvZmZzZXQgcGFyZW50KS5cblx0ICAgICAgICAgICAgICBuZXh0Lm9mZnNldCA9IHtcblx0ICAgICAgICAgICAgICAgIHRvcDogbmV4dC5wYWdlLnRvcCAtIG9mZnNldFBvc2l0aW9uLnRvcCArIHNjcm9sbFRvcCAtIG9mZnNldEJvcmRlci50b3AsXG5cdCAgICAgICAgICAgICAgICBsZWZ0OiBuZXh0LnBhZ2UubGVmdCAtIG9mZnNldFBvc2l0aW9uLmxlZnQgKyBzY3JvbGxMZWZ0IC0gb2Zmc2V0Qm9yZGVyLmxlZnRcblx0ICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSkoKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIC8vIFdlIGNvdWxkIGFsc28gdHJhdmVsIHVwIHRoZSBET00gYW5kIHRyeSBlYWNoIGNvbnRhaW5pbmcgY29udGV4dCwgcmF0aGVyIHRoYW4gb25seVxuXHQgICAgICAvLyBsb29raW5nIGF0IHRoZSBib2R5LCBidXQgd2UncmUgZ29ubmEgZ2V0IGRpbWluaXNoaW5nIHJldHVybnMuXG5cblx0ICAgICAgdGhpcy5tb3ZlKG5leHQpO1xuXG5cdCAgICAgIHRoaXMuaGlzdG9yeS51bnNoaWZ0KG5leHQpO1xuXG5cdCAgICAgIGlmICh0aGlzLmhpc3RvcnkubGVuZ3RoID4gMykge1xuXHQgICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChmbHVzaENoYW5nZXMpIHtcblx0ICAgICAgICBmbHVzaCgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cblx0ICAgIC8vIFRIRSBJU1NVRVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ21vdmUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmUocG9zKSB7XG5cdCAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG5cdCAgICAgIGlmICghKHR5cGVvZiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSAhPT0gJ3VuZGVmaW5lZCcpKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIHNhbWUgPSB7fTtcblxuXHQgICAgICBmb3IgKHZhciB0eXBlIGluIHBvcykge1xuXHQgICAgICAgIHNhbWVbdHlwZV0gPSB7fTtcblxuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBwb3NbdHlwZV0pIHtcblx0ICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuXG5cdCAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaGlzdG9yeS5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgICAgICB2YXIgcG9pbnQgPSB0aGlzLmhpc3RvcnlbaV07XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgcG9pbnRbdHlwZV0gIT09ICd1bmRlZmluZWQnICYmICF3aXRoaW4ocG9pbnRbdHlwZV1ba2V5XSwgcG9zW3R5cGVdW2tleV0pKSB7XG5cdCAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cblx0ICAgICAgICAgIGlmICghZm91bmQpIHtcblx0ICAgICAgICAgICAgc2FtZVt0eXBlXVtrZXldID0gdHJ1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICB2YXIgY3NzID0geyB0b3A6ICcnLCBsZWZ0OiAnJywgcmlnaHQ6ICcnLCBib3R0b206ICcnIH07XG5cblx0ICAgICAgdmFyIHRyYW5zY3JpYmUgPSBmdW5jdGlvbiB0cmFuc2NyaWJlKF9zYW1lLCBfcG9zKSB7XG5cdCAgICAgICAgdmFyIGhhc09wdGltaXphdGlvbnMgPSB0eXBlb2YgX3RoaXM2Lm9wdGlvbnMub3B0aW1pemF0aW9ucyAhPT0gJ3VuZGVmaW5lZCc7XG5cdCAgICAgICAgdmFyIGdwdSA9IGhhc09wdGltaXphdGlvbnMgPyBfdGhpczYub3B0aW9ucy5vcHRpbWl6YXRpb25zLmdwdSA6IG51bGw7XG5cdCAgICAgICAgaWYgKGdwdSAhPT0gZmFsc2UpIHtcblx0ICAgICAgICAgIHZhciB5UG9zID0gdW5kZWZpbmVkLFxuXHQgICAgICAgICAgICAgIHhQb3MgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICBpZiAoX3NhbWUudG9wKSB7XG5cdCAgICAgICAgICAgIGNzcy50b3AgPSAwO1xuXHQgICAgICAgICAgICB5UG9zID0gX3Bvcy50b3A7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBjc3MuYm90dG9tID0gMDtcblx0ICAgICAgICAgICAgeVBvcyA9IC1fcG9zLmJvdHRvbTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgaWYgKF9zYW1lLmxlZnQpIHtcblx0ICAgICAgICAgICAgY3NzLmxlZnQgPSAwO1xuXHQgICAgICAgICAgICB4UG9zID0gX3Bvcy5sZWZ0O1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY3NzLnJpZ2h0ID0gMDtcblx0ICAgICAgICAgICAgeFBvcyA9IC1fcG9zLnJpZ2h0O1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBjc3NbdHJhbnNmb3JtS2V5XSA9ICd0cmFuc2xhdGVYKCcgKyBNYXRoLnJvdW5kKHhQb3MpICsgJ3B4KSB0cmFuc2xhdGVZKCcgKyBNYXRoLnJvdW5kKHlQb3MpICsgJ3B4KSc7XG5cblx0ICAgICAgICAgIGlmICh0cmFuc2Zvcm1LZXkgIT09ICdtc1RyYW5zZm9ybScpIHtcblx0ICAgICAgICAgICAgLy8gVGhlIFogdHJhbnNmb3JtIHdpbGwga2VlcCB0aGlzIGluIHRoZSBHUFUgKGZhc3RlciwgYW5kIHByZXZlbnRzIGFydGlmYWN0cyksXG5cdCAgICAgICAgICAgIC8vIGJ1dCBJRTkgZG9lc24ndCBzdXBwb3J0IDNkIHRyYW5zZm9ybXMgYW5kIHdpbGwgY2hva2UuXG5cdCAgICAgICAgICAgIGNzc1t0cmFuc2Zvcm1LZXldICs9IFwiIHRyYW5zbGF0ZVooMClcIjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKF9zYW1lLnRvcCkge1xuXHQgICAgICAgICAgICBjc3MudG9wID0gX3Bvcy50b3AgKyAncHgnO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY3NzLmJvdHRvbSA9IF9wb3MuYm90dG9tICsgJ3B4Jztcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgaWYgKF9zYW1lLmxlZnQpIHtcblx0ICAgICAgICAgICAgY3NzLmxlZnQgPSBfcG9zLmxlZnQgKyAncHgnO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgY3NzLnJpZ2h0ID0gX3Bvcy5yaWdodCArICdweCc7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXG5cdCAgICAgIHZhciBtb3ZlZCA9IGZhbHNlO1xuXHQgICAgICBpZiAoKHNhbWUucGFnZS50b3AgfHwgc2FtZS5wYWdlLmJvdHRvbSkgJiYgKHNhbWUucGFnZS5sZWZ0IHx8IHNhbWUucGFnZS5yaWdodCkpIHtcblx0ICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHQgICAgICAgIHRyYW5zY3JpYmUoc2FtZS5wYWdlLCBwb3MucGFnZSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoKHNhbWUudmlld3BvcnQudG9wIHx8IHNhbWUudmlld3BvcnQuYm90dG9tKSAmJiAoc2FtZS52aWV3cG9ydC5sZWZ0IHx8IHNhbWUudmlld3BvcnQucmlnaHQpKSB7XG5cdCAgICAgICAgY3NzLnBvc2l0aW9uID0gJ2ZpeGVkJztcblx0ICAgICAgICB0cmFuc2NyaWJlKHNhbWUudmlld3BvcnQsIHBvcy52aWV3cG9ydCk7XG5cdCAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNhbWUub2Zmc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBzYW1lLm9mZnNldC50b3AgJiYgc2FtZS5vZmZzZXQubGVmdCkge1xuXHQgICAgICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHQgICAgICAgICAgdmFyIG9mZnNldFBhcmVudCA9IF90aGlzNi5jYWNoZSgndGFyZ2V0LW9mZnNldHBhcmVudCcsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChfdGhpczYudGFyZ2V0KTtcblx0ICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICBpZiAoZ2V0T2Zmc2V0UGFyZW50KF90aGlzNi5lbGVtZW50KSAhPT0gb2Zmc2V0UGFyZW50KSB7XG5cdCAgICAgICAgICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICBfdGhpczYuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF90aGlzNi5lbGVtZW50KTtcblx0ICAgICAgICAgICAgICBvZmZzZXRQYXJlbnQuYXBwZW5kQ2hpbGQoX3RoaXM2LmVsZW1lbnQpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgIH1cblxuXHQgICAgICAgICAgdHJhbnNjcmliZShzYW1lLm9mZnNldCwgcG9zLm9mZnNldCk7XG5cdCAgICAgICAgICBtb3ZlZCA9IHRydWU7XG5cdCAgICAgICAgfSkoKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBjc3MucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHQgICAgICAgIHRyYW5zY3JpYmUoeyB0b3A6IHRydWUsIGxlZnQ6IHRydWUgfSwgcG9zLnBhZ2UpO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKCFtb3ZlZCkge1xuXHQgICAgICAgIHZhciBvZmZzZXRQYXJlbnRJc0JvZHkgPSB0cnVlO1xuXHQgICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuXHQgICAgICAgIHdoaWxlIChjdXJyZW50Tm9kZSAmJiBjdXJyZW50Tm9kZS50YWdOYW1lICE9PSAnQk9EWScpIHtcblx0ICAgICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycpIHtcblx0ICAgICAgICAgICAgb2Zmc2V0UGFyZW50SXNCb2R5ID0gZmFsc2U7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKCFvZmZzZXRQYXJlbnRJc0JvZHkpIHtcblx0ICAgICAgICAgIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG5cdCAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgLy8gQW55IGNzcyBjaGFuZ2Ugd2lsbCB0cmlnZ2VyIGEgcmVwYWludCwgc28gbGV0J3MgYXZvaWQgb25lIGlmIG5vdGhpbmcgY2hhbmdlZFxuXHQgICAgICB2YXIgd3JpdGVDU1MgPSB7fTtcblx0ICAgICAgdmFyIHdyaXRlID0gZmFsc2U7XG5cdCAgICAgIGZvciAodmFyIGtleSBpbiBjc3MpIHtcblx0ICAgICAgICB2YXIgdmFsID0gY3NzW2tleV07XG5cdCAgICAgICAgdmFyIGVsVmFsID0gdGhpcy5lbGVtZW50LnN0eWxlW2tleV07XG5cblx0ICAgICAgICBpZiAoZWxWYWwgIT09ICcnICYmIHZhbCAhPT0gJycgJiYgWyd0b3AnLCAnbGVmdCcsICdib3R0b20nLCAncmlnaHQnXS5pbmRleE9mKGtleSkgPj0gMCkge1xuXHQgICAgICAgICAgZWxWYWwgPSBwYXJzZUZsb2F0KGVsVmFsKTtcblx0ICAgICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAoZWxWYWwgIT09IHZhbCkge1xuXHQgICAgICAgICAgd3JpdGUgPSB0cnVlO1xuXHQgICAgICAgICAgd3JpdGVDU1Nba2V5XSA9IHZhbDtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAod3JpdGUpIHtcblx0ICAgICAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBleHRlbmQoX3RoaXM2LmVsZW1lbnQuc3R5bGUsIHdyaXRlQ1NTKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH1dKTtcblxuXHQgIHJldHVybiBUZXRoZXJDbGFzcztcblx0fSkoKTtcblxuXHRUZXRoZXJDbGFzcy5tb2R1bGVzID0gW107XG5cblx0VGV0aGVyQmFzZS5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuXG5cdHZhciBUZXRoZXIgPSBleHRlbmQoVGV0aGVyQ2xhc3MsIFRldGhlckJhc2UpO1xuXHQvKiBnbG9iYWxzIFRldGhlckJhc2UgKi9cblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIF9zbGljZWRUb0FycmF5ID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbJ3JldHVybiddKSBfaVsncmV0dXJuJ10oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpOyB9IH07IH0pKCk7XG5cblx0dmFyIF9UZXRoZXJCYXNlJFV0aWxzID0gVGV0aGVyQmFzZS5VdGlscztcblx0dmFyIGdldEJvdW5kcyA9IF9UZXRoZXJCYXNlJFV0aWxzLmdldEJvdW5kcztcblx0dmFyIGV4dGVuZCA9IF9UZXRoZXJCYXNlJFV0aWxzLmV4dGVuZDtcblx0dmFyIHVwZGF0ZUNsYXNzZXMgPSBfVGV0aGVyQmFzZSRVdGlscy51cGRhdGVDbGFzc2VzO1xuXHR2YXIgZGVmZXIgPSBfVGV0aGVyQmFzZSRVdGlscy5kZWZlcjtcblxuXHR2YXIgQk9VTkRTX0ZPUk1BVCA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107XG5cblx0ZnVuY3Rpb24gZ2V0Qm91bmRpbmdSZWN0KHRldGhlciwgdG8pIHtcblx0ICBpZiAodG8gPT09ICdzY3JvbGxQYXJlbnQnKSB7XG5cdCAgICB0byA9IHRldGhlci5zY3JvbGxQYXJlbnQ7XG5cdCAgfSBlbHNlIGlmICh0byA9PT0gJ3dpbmRvdycpIHtcblx0ICAgIHRvID0gW3BhZ2VYT2Zmc2V0LCBwYWdlWU9mZnNldCwgaW5uZXJXaWR0aCArIHBhZ2VYT2Zmc2V0LCBpbm5lckhlaWdodCArIHBhZ2VZT2Zmc2V0XTtcblx0ICB9XG5cblx0ICBpZiAodG8gPT09IGRvY3VtZW50KSB7XG5cdCAgICB0byA9IHRvLmRvY3VtZW50RWxlbWVudDtcblx0ICB9XG5cblx0ICBpZiAodHlwZW9mIHRvLm5vZGVUeXBlICE9PSAndW5kZWZpbmVkJykge1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIHNpemUgPSBnZXRCb3VuZHModG8pO1xuXHQgICAgICB2YXIgcG9zID0gc2l6ZTtcblx0ICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSh0byk7XG5cblx0ICAgICAgdG8gPSBbcG9zLmxlZnQsIHBvcy50b3AsIHNpemUud2lkdGggKyBwb3MubGVmdCwgc2l6ZS5oZWlnaHQgKyBwb3MudG9wXTtcblxuXHQgICAgICBCT1VORFNfRk9STUFULmZvckVhY2goZnVuY3Rpb24gKHNpZGUsIGkpIHtcblx0ICAgICAgICBzaWRlID0gc2lkZVswXS50b1VwcGVyQ2FzZSgpICsgc2lkZS5zdWJzdHIoMSk7XG5cdCAgICAgICAgaWYgKHNpZGUgPT09ICdUb3AnIHx8IHNpZGUgPT09ICdMZWZ0Jykge1xuXHQgICAgICAgICAgdG9baV0gKz0gcGFyc2VGbG9hdChzdHlsZVsnYm9yZGVyJyArIHNpZGUgKyAnV2lkdGgnXSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHRvW2ldIC09IHBhcnNlRmxvYXQoc3R5bGVbJ2JvcmRlcicgKyBzaWRlICsgJ1dpZHRoJ10pO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9KSgpO1xuXHQgIH1cblxuXHQgIHJldHVybiB0bztcblx0fVxuXG5cdFRldGhlckJhc2UubW9kdWxlcy5wdXNoKHtcblx0ICBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oX3JlZikge1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuXHQgICAgdmFyIGxlZnQgPSBfcmVmLmxlZnQ7XG5cdCAgICB2YXIgdGFyZ2V0QXR0YWNobWVudCA9IF9yZWYudGFyZ2V0QXR0YWNobWVudDtcblxuXHQgICAgaWYgKCF0aGlzLm9wdGlvbnMuY29uc3RyYWludHMpIHtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cblx0ICAgIHZhciBfY2FjaGUgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIGdldEJvdW5kcyhfdGhpcy5lbGVtZW50KTtcblx0ICAgIH0pO1xuXG5cdCAgICB2YXIgaGVpZ2h0ID0gX2NhY2hlLmhlaWdodDtcblx0ICAgIHZhciB3aWR0aCA9IF9jYWNoZS53aWR0aDtcblxuXHQgICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCAmJiB0eXBlb2YgdGhpcy5sYXN0U2l6ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgdmFyIF9sYXN0U2l6ZSA9IHRoaXMubGFzdFNpemU7XG5cblx0ICAgICAgLy8gSGFuZGxlIHRoZSBpdGVtIGdldHRpbmcgaGlkZGVuIGFzIGEgcmVzdWx0IG9mIG91ciBwb3NpdGlvbmluZyB3aXRob3V0IGdsaXRjaGluZ1xuXHQgICAgICAvLyB0aGUgY2xhc3NlcyBpbiBhbmQgb3V0XG5cdCAgICAgIHdpZHRoID0gX2xhc3RTaXplLndpZHRoO1xuXHQgICAgICBoZWlnaHQgPSBfbGFzdFNpemUuaGVpZ2h0O1xuXHQgICAgfVxuXG5cdCAgICB2YXIgdGFyZ2V0U2l6ZSA9IHRoaXMuY2FjaGUoJ3RhcmdldC1ib3VuZHMnLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiBfdGhpcy5nZXRUYXJnZXRCb3VuZHMoKTtcblx0ICAgIH0pO1xuXG5cdCAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGFyZ2V0U2l6ZS5oZWlnaHQ7XG5cdCAgICB2YXIgdGFyZ2V0V2lkdGggPSB0YXJnZXRTaXplLndpZHRoO1xuXG5cdCAgICB2YXIgYWxsQ2xhc3NlcyA9IFt0aGlzLmdldENsYXNzKCdwaW5uZWQnKSwgdGhpcy5nZXRDbGFzcygnb3V0LW9mLWJvdW5kcycpXTtcblxuXHQgICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcblx0ICAgICAgdmFyIG91dE9mQm91bmRzQ2xhc3MgPSBjb25zdHJhaW50Lm91dE9mQm91bmRzQ2xhc3M7XG5cdCAgICAgIHZhciBwaW5uZWRDbGFzcyA9IGNvbnN0cmFpbnQucGlubmVkQ2xhc3M7XG5cblx0ICAgICAgaWYgKG91dE9mQm91bmRzQ2xhc3MpIHtcblx0ICAgICAgICBhbGxDbGFzc2VzLnB1c2gob3V0T2ZCb3VuZHNDbGFzcyk7XG5cdCAgICAgIH1cblx0ICAgICAgaWYgKHBpbm5lZENsYXNzKSB7XG5cdCAgICAgICAgYWxsQ2xhc3Nlcy5wdXNoKHBpbm5lZENsYXNzKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGFsbENsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7XG5cdCAgICAgIFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuXHQgICAgICAgIGFsbENsYXNzZXMucHVzaChjbHMgKyAnLScgKyBzaWRlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblxuXHQgICAgdmFyIGFkZENsYXNzZXMgPSBbXTtcblxuXHQgICAgdmFyIHRBdHRhY2htZW50ID0gZXh0ZW5kKHt9LCB0YXJnZXRBdHRhY2htZW50KTtcblx0ICAgIHZhciBlQXR0YWNobWVudCA9IGV4dGVuZCh7fSwgdGhpcy5hdHRhY2htZW50KTtcblxuXHQgICAgdGhpcy5vcHRpb25zLmNvbnN0cmFpbnRzLmZvckVhY2goZnVuY3Rpb24gKGNvbnN0cmFpbnQpIHtcblx0ICAgICAgdmFyIHRvID0gY29uc3RyYWludC50bztcblx0ICAgICAgdmFyIGF0dGFjaG1lbnQgPSBjb25zdHJhaW50LmF0dGFjaG1lbnQ7XG5cdCAgICAgIHZhciBwaW4gPSBjb25zdHJhaW50LnBpbjtcblxuXHQgICAgICBpZiAodHlwZW9mIGF0dGFjaG1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgYXR0YWNobWVudCA9ICcnO1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIGNoYW5nZUF0dGFjaFggPSB1bmRlZmluZWQsXG5cdCAgICAgICAgICBjaGFuZ2VBdHRhY2hZID0gdW5kZWZpbmVkO1xuXHQgICAgICBpZiAoYXR0YWNobWVudC5pbmRleE9mKCcgJykgPj0gMCkge1xuXHQgICAgICAgIHZhciBfYXR0YWNobWVudCRzcGxpdCA9IGF0dGFjaG1lbnQuc3BsaXQoJyAnKTtcblxuXHQgICAgICAgIHZhciBfYXR0YWNobWVudCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfYXR0YWNobWVudCRzcGxpdCwgMik7XG5cblx0ICAgICAgICBjaGFuZ2VBdHRhY2hZID0gX2F0dGFjaG1lbnQkc3BsaXQyWzBdO1xuXHQgICAgICAgIGNoYW5nZUF0dGFjaFggPSBfYXR0YWNobWVudCRzcGxpdDJbMV07XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY2hhbmdlQXR0YWNoWCA9IGNoYW5nZUF0dGFjaFkgPSBhdHRhY2htZW50O1xuXHQgICAgICB9XG5cblx0ICAgICAgdmFyIGJvdW5kcyA9IGdldEJvdW5kaW5nUmVjdChfdGhpcywgdG8pO1xuXG5cdCAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAndGFyZ2V0JyB8fCBjaGFuZ2VBdHRhY2hZID09PSAnYm90aCcpIHtcblx0ICAgICAgICBpZiAodG9wIDwgYm91bmRzWzFdICYmIHRBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcpIHtcblx0ICAgICAgICAgIHRvcCArPSB0YXJnZXRIZWlnaHQ7XG5cdCAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodG9wICsgaGVpZ2h0ID4gYm91bmRzWzNdICYmIHRBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScpIHtcblx0ICAgICAgICAgIHRvcCAtPSB0YXJnZXRIZWlnaHQ7XG5cdCAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAndG9wJztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoY2hhbmdlQXR0YWNoWSA9PT0gJ3RvZ2V0aGVyJykge1xuXHQgICAgICAgIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgdEF0dGFjaG1lbnQudG9wID09PSAndG9wJykge1xuXHQgICAgICAgICAgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ2JvdHRvbScpIHtcblx0ICAgICAgICAgICAgdG9wICs9IHRhcmdldEhlaWdodDtcblx0ICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cblx0ICAgICAgICAgICAgdG9wICs9IGhlaWdodDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGVBdHRhY2htZW50LnRvcCA9PT0gJ3RvcCcpIHtcblx0ICAgICAgICAgICAgdG9wICs9IHRhcmdldEhlaWdodDtcblx0ICAgICAgICAgICAgdEF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cblx0ICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSAmJiB0QXR0YWNobWVudC50b3AgPT09ICdib3R0b20nKSB7XG5cdCAgICAgICAgICBpZiAoZUF0dGFjaG1lbnQudG9wID09PSAndG9wJykge1xuXHQgICAgICAgICAgICB0b3AgLT0gdGFyZ2V0SGVpZ2h0O1xuXHQgICAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAndG9wJztcblxuXHQgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAnYm90dG9tJztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuXHQgICAgICAgICAgICB0b3AgLT0gdGFyZ2V0SGVpZ2h0O1xuXHQgICAgICAgICAgICB0QXR0YWNobWVudC50b3AgPSAndG9wJztcblxuXHQgICAgICAgICAgICB0b3AgKz0gaGVpZ2h0O1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAndG9wJztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodEF0dGFjaG1lbnQudG9wID09PSAnbWlkZGxlJykge1xuXHQgICAgICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG5cdCAgICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LnRvcCA9ICdib3R0b20nO1xuXHQgICAgICAgICAgfSBlbHNlIGlmICh0b3AgPCBib3VuZHNbMV0gJiYgZUF0dGFjaG1lbnQudG9wID09PSAnYm90dG9tJykge1xuXHQgICAgICAgICAgICB0b3AgKz0gaGVpZ2h0O1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC50b3AgPSAndG9wJztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoY2hhbmdlQXR0YWNoWCA9PT0gJ3RhcmdldCcgfHwgY2hhbmdlQXR0YWNoWCA9PT0gJ2JvdGgnKSB7XG5cdCAgICAgICAgaWYgKGxlZnQgPCBib3VuZHNbMF0gJiYgdEF0dGFjaG1lbnQubGVmdCA9PT0gJ2xlZnQnKSB7XG5cdCAgICAgICAgICBsZWZ0ICs9IHRhcmdldFdpZHRoO1xuXHQgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSAmJiB0QXR0YWNobWVudC5sZWZ0ID09PSAncmlnaHQnKSB7XG5cdCAgICAgICAgICBsZWZ0IC09IHRhcmdldFdpZHRoO1xuXHQgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0Jztcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAoY2hhbmdlQXR0YWNoWCA9PT0gJ3RvZ2V0aGVyJykge1xuXHQgICAgICAgIGlmIChsZWZ0IDwgYm91bmRzWzBdICYmIHRBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuXHQgICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcblx0ICAgICAgICAgICAgbGVmdCArPSB0YXJnZXRXaWR0aDtcblx0ICAgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG5cblx0ICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0Jztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2xlZnQnKSB7XG5cdCAgICAgICAgICAgIGxlZnQgKz0gdGFyZ2V0V2lkdGg7XG5cdCAgICAgICAgICAgIHRBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuXG5cdCAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdICYmIHRBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcblx0ICAgICAgICAgIGlmIChlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcblx0ICAgICAgICAgICAgbGVmdCAtPSB0YXJnZXRXaWR0aDtcblx0ICAgICAgICAgICAgdEF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0JztcblxuXHQgICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0Jztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuXHQgICAgICAgICAgICBsZWZ0IC09IHRhcmdldFdpZHRoO1xuXHQgICAgICAgICAgICB0QXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXG5cdCAgICAgICAgICAgIGxlZnQgKz0gd2lkdGg7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIGlmICh0QXR0YWNobWVudC5sZWZ0ID09PSAnY2VudGVyJykge1xuXHQgICAgICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSAmJiBlQXR0YWNobWVudC5sZWZ0ID09PSAnbGVmdCcpIHtcblx0ICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdyaWdodCc7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGxlZnQgPCBib3VuZHNbMF0gJiYgZUF0dGFjaG1lbnQubGVmdCA9PT0gJ3JpZ2h0Jykge1xuXHQgICAgICAgICAgICBsZWZ0ICs9IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ2xlZnQnO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIGlmIChjaGFuZ2VBdHRhY2hZID09PSAnZWxlbWVudCcgfHwgY2hhbmdlQXR0YWNoWSA9PT0gJ2JvdGgnKSB7XG5cdCAgICAgICAgaWYgKHRvcCA8IGJvdW5kc1sxXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICdib3R0b20nKSB7XG5cdCAgICAgICAgICB0b3AgKz0gaGVpZ2h0O1xuXHQgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ3RvcCc7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSAmJiBlQXR0YWNobWVudC50b3AgPT09ICd0b3AnKSB7XG5cdCAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuXHQgICAgICAgICAgZUF0dGFjaG1lbnQudG9wID0gJ2JvdHRvbSc7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGNoYW5nZUF0dGFjaFggPT09ICdlbGVtZW50JyB8fCBjaGFuZ2VBdHRhY2hYID09PSAnYm90aCcpIHtcblx0ICAgICAgICBpZiAobGVmdCA8IGJvdW5kc1swXSkge1xuXHQgICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdyaWdodCcpIHtcblx0ICAgICAgICAgICAgbGVmdCArPSB3aWR0aDtcblx0ICAgICAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9ICdsZWZ0Jztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2NlbnRlcicpIHtcblx0ICAgICAgICAgICAgbGVmdCArPSB3aWR0aCAvIDI7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAnbGVmdCc7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGxlZnQgKyB3aWR0aCA+IGJvdW5kc1syXSkge1xuXHQgICAgICAgICAgaWYgKGVBdHRhY2htZW50LmxlZnQgPT09ICdsZWZ0Jykge1xuXHQgICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuXHQgICAgICAgICAgICBlQXR0YWNobWVudC5sZWZ0ID0gJ3JpZ2h0Jztcblx0ICAgICAgICAgIH0gZWxzZSBpZiAoZUF0dGFjaG1lbnQubGVmdCA9PT0gJ2NlbnRlcicpIHtcblx0ICAgICAgICAgICAgbGVmdCAtPSB3aWR0aCAvIDI7XG5cdCAgICAgICAgICAgIGVBdHRhY2htZW50LmxlZnQgPSAncmlnaHQnO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICh0eXBlb2YgcGluID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHBpbiA9IHBpbi5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAocCkge1xuXHQgICAgICAgICAgcmV0dXJuIHAudHJpbSgpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9IGVsc2UgaWYgKHBpbiA9PT0gdHJ1ZSkge1xuXHQgICAgICAgIHBpbiA9IFsndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJ107XG5cdCAgICAgIH1cblxuXHQgICAgICBwaW4gPSBwaW4gfHwgW107XG5cblx0ICAgICAgdmFyIHBpbm5lZCA9IFtdO1xuXHQgICAgICB2YXIgb29iID0gW107XG5cblx0ICAgICAgaWYgKHRvcCA8IGJvdW5kc1sxXSkge1xuXHQgICAgICAgIGlmIChwaW4uaW5kZXhPZigndG9wJykgPj0gMCkge1xuXHQgICAgICAgICAgdG9wID0gYm91bmRzWzFdO1xuXHQgICAgICAgICAgcGlubmVkLnB1c2goJ3RvcCcpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvb2IucHVzaCgndG9wJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKHRvcCArIGhlaWdodCA+IGJvdW5kc1szXSkge1xuXHQgICAgICAgIGlmIChwaW4uaW5kZXhPZignYm90dG9tJykgPj0gMCkge1xuXHQgICAgICAgICAgdG9wID0gYm91bmRzWzNdIC0gaGVpZ2h0O1xuXHQgICAgICAgICAgcGlubmVkLnB1c2goJ2JvdHRvbScpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvb2IucHVzaCgnYm90dG9tJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGxlZnQgPCBib3VuZHNbMF0pIHtcblx0ICAgICAgICBpZiAocGluLmluZGV4T2YoJ2xlZnQnKSA+PSAwKSB7XG5cdCAgICAgICAgICBsZWZ0ID0gYm91bmRzWzBdO1xuXHQgICAgICAgICAgcGlubmVkLnB1c2goJ2xlZnQnKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgb29iLnB1c2goJ2xlZnQnKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAobGVmdCArIHdpZHRoID4gYm91bmRzWzJdKSB7XG5cdCAgICAgICAgaWYgKHBpbi5pbmRleE9mKCdyaWdodCcpID49IDApIHtcblx0ICAgICAgICAgIGxlZnQgPSBib3VuZHNbMl0gLSB3aWR0aDtcblx0ICAgICAgICAgIHBpbm5lZC5wdXNoKCdyaWdodCcpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBvb2IucHVzaCgncmlnaHQnKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblxuXHQgICAgICBpZiAocGlubmVkLmxlbmd0aCkge1xuXHQgICAgICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICB2YXIgcGlubmVkQ2xhc3MgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICBpZiAodHlwZW9mIF90aGlzLm9wdGlvbnMucGlubmVkQ2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgIHBpbm5lZENsYXNzID0gX3RoaXMub3B0aW9ucy5waW5uZWRDbGFzcztcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHBpbm5lZENsYXNzID0gX3RoaXMuZ2V0Q2xhc3MoJ3Bpbm5lZCcpO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBhZGRDbGFzc2VzLnB1c2gocGlubmVkQ2xhc3MpO1xuXHQgICAgICAgICAgcGlubmVkLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKHBpbm5lZENsYXNzICsgJy0nICsgc2lkZSk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9KSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKG9vYi5sZW5ndGgpIHtcblx0ICAgICAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgdmFyIG9vYkNsYXNzID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5vcHRpb25zLm91dE9mQm91bmRzQ2xhc3MgIT09ICd1bmRlZmluZWQnKSB7XG5cdCAgICAgICAgICAgIG9vYkNsYXNzID0gX3RoaXMub3B0aW9ucy5vdXRPZkJvdW5kc0NsYXNzO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgb29iQ2xhc3MgPSBfdGhpcy5nZXRDbGFzcygnb3V0LW9mLWJvdW5kcycpO1xuXHQgICAgICAgICAgfVxuXG5cdCAgICAgICAgICBhZGRDbGFzc2VzLnB1c2gob29iQ2xhc3MpO1xuXHQgICAgICAgICAgb29iLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgICAgICAgYWRkQ2xhc3Nlcy5wdXNoKG9vYkNsYXNzICsgJy0nICsgc2lkZSk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9KSgpO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKHBpbm5lZC5pbmRleE9mKCdsZWZ0JykgPj0gMCB8fCBwaW5uZWQuaW5kZXhPZigncmlnaHQnKSA+PSAwKSB7XG5cdCAgICAgICAgZUF0dGFjaG1lbnQubGVmdCA9IHRBdHRhY2htZW50LmxlZnQgPSBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAocGlubmVkLmluZGV4T2YoJ3RvcCcpID49IDAgfHwgcGlubmVkLmluZGV4T2YoJ2JvdHRvbScpID49IDApIHtcblx0ICAgICAgICBlQXR0YWNobWVudC50b3AgPSB0QXR0YWNobWVudC50b3AgPSBmYWxzZTtcblx0ICAgICAgfVxuXG5cdCAgICAgIGlmICh0QXR0YWNobWVudC50b3AgIT09IHRhcmdldEF0dGFjaG1lbnQudG9wIHx8IHRBdHRhY2htZW50LmxlZnQgIT09IHRhcmdldEF0dGFjaG1lbnQubGVmdCB8fCBlQXR0YWNobWVudC50b3AgIT09IF90aGlzLmF0dGFjaG1lbnQudG9wIHx8IGVBdHRhY2htZW50LmxlZnQgIT09IF90aGlzLmF0dGFjaG1lbnQubGVmdCkge1xuXHQgICAgICAgIF90aGlzLnVwZGF0ZUF0dGFjaENsYXNzZXMoZUF0dGFjaG1lbnQsIHRBdHRhY2htZW50KTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGRlZmVyKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgaWYgKCEoX3RoaXMub3B0aW9ucy5hZGRUYXJnZXRDbGFzc2VzID09PSBmYWxzZSkpIHtcblx0ICAgICAgICB1cGRhdGVDbGFzc2VzKF90aGlzLnRhcmdldCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG5cdCAgICAgIH1cblx0ICAgICAgdXBkYXRlQ2xhc3NlcyhfdGhpcy5lbGVtZW50LCBhZGRDbGFzc2VzLCBhbGxDbGFzc2VzKTtcblx0ICAgIH0pO1xuXG5cdCAgICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xuXHQgIH1cblx0fSk7XG5cdC8qIGdsb2JhbHMgVGV0aGVyQmFzZSAqL1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgX1RldGhlckJhc2UkVXRpbHMgPSBUZXRoZXJCYXNlLlV0aWxzO1xuXHR2YXIgZ2V0Qm91bmRzID0gX1RldGhlckJhc2UkVXRpbHMuZ2V0Qm91bmRzO1xuXHR2YXIgdXBkYXRlQ2xhc3NlcyA9IF9UZXRoZXJCYXNlJFV0aWxzLnVwZGF0ZUNsYXNzZXM7XG5cdHZhciBkZWZlciA9IF9UZXRoZXJCYXNlJFV0aWxzLmRlZmVyO1xuXG5cdFRldGhlckJhc2UubW9kdWxlcy5wdXNoKHtcblx0ICBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oX3JlZikge1xuXHQgICAgdmFyIF90aGlzID0gdGhpcztcblxuXHQgICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuXHQgICAgdmFyIGxlZnQgPSBfcmVmLmxlZnQ7XG5cblx0ICAgIHZhciBfY2FjaGUgPSB0aGlzLmNhY2hlKCdlbGVtZW50LWJvdW5kcycsIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIGdldEJvdW5kcyhfdGhpcy5lbGVtZW50KTtcblx0ICAgIH0pO1xuXG5cdCAgICB2YXIgaGVpZ2h0ID0gX2NhY2hlLmhlaWdodDtcblx0ICAgIHZhciB3aWR0aCA9IF9jYWNoZS53aWR0aDtcblxuXHQgICAgdmFyIHRhcmdldFBvcyA9IHRoaXMuZ2V0VGFyZ2V0Qm91bmRzKCk7XG5cblx0ICAgIHZhciBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG5cdCAgICB2YXIgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG5cblx0ICAgIHZhciBhYnV0dGVkID0gW107XG5cdCAgICBpZiAodG9wIDw9IHRhcmdldFBvcy5ib3R0b20gJiYgYm90dG9tID49IHRhcmdldFBvcy50b3ApIHtcblx0ICAgICAgWydsZWZ0JywgJ3JpZ2h0J10uZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuXHQgICAgICAgIHZhciB0YXJnZXRQb3NTaWRlID0gdGFyZ2V0UG9zW3NpZGVdO1xuXHQgICAgICAgIGlmICh0YXJnZXRQb3NTaWRlID09PSBsZWZ0IHx8IHRhcmdldFBvc1NpZGUgPT09IHJpZ2h0KSB7XG5cdCAgICAgICAgICBhYnV0dGVkLnB1c2goc2lkZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0ICAgIH1cblxuXHQgICAgaWYgKGxlZnQgPD0gdGFyZ2V0UG9zLnJpZ2h0ICYmIHJpZ2h0ID49IHRhcmdldFBvcy5sZWZ0KSB7XG5cdCAgICAgIFsndG9wJywgJ2JvdHRvbSddLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgICB2YXIgdGFyZ2V0UG9zU2lkZSA9IHRhcmdldFBvc1tzaWRlXTtcblx0ICAgICAgICBpZiAodGFyZ2V0UG9zU2lkZSA9PT0gdG9wIHx8IHRhcmdldFBvc1NpZGUgPT09IGJvdHRvbSkge1xuXHQgICAgICAgICAgYWJ1dHRlZC5wdXNoKHNpZGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgIHZhciBhbGxDbGFzc2VzID0gW107XG5cdCAgICB2YXIgYWRkQ2xhc3NlcyA9IFtdO1xuXG5cdCAgICB2YXIgc2lkZXMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddO1xuXHQgICAgYWxsQ2xhc3Nlcy5wdXNoKHRoaXMuZ2V0Q2xhc3MoJ2FidXR0ZWQnKSk7XG5cdCAgICBzaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzaWRlKSB7XG5cdCAgICAgIGFsbENsYXNzZXMucHVzaChfdGhpcy5nZXRDbGFzcygnYWJ1dHRlZCcpICsgJy0nICsgc2lkZSk7XG5cdCAgICB9KTtcblxuXHQgICAgaWYgKGFidXR0ZWQubGVuZ3RoKSB7XG5cdCAgICAgIGFkZENsYXNzZXMucHVzaCh0aGlzLmdldENsYXNzKCdhYnV0dGVkJykpO1xuXHQgICAgfVxuXG5cdCAgICBhYnV0dGVkLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcblx0ICAgICAgYWRkQ2xhc3Nlcy5wdXNoKF90aGlzLmdldENsYXNzKCdhYnV0dGVkJykgKyAnLScgKyBzaWRlKTtcblx0ICAgIH0pO1xuXG5cdCAgICBkZWZlcihmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGlmICghKF90aGlzLm9wdGlvbnMuYWRkVGFyZ2V0Q2xhc3NlcyA9PT0gZmFsc2UpKSB7XG5cdCAgICAgICAgdXBkYXRlQ2xhc3NlcyhfdGhpcy50YXJnZXQsIGFkZENsYXNzZXMsIGFsbENsYXNzZXMpO1xuXHQgICAgICB9XG5cdCAgICAgIHVwZGF0ZUNsYXNzZXMoX3RoaXMuZWxlbWVudCwgYWRkQ2xhc3NlcywgYWxsQ2xhc3Nlcyk7XG5cdCAgICB9KTtcblxuXHQgICAgcmV0dXJuIHRydWU7XG5cdCAgfVxuXHR9KTtcblx0LyogZ2xvYmFscyBUZXRoZXJCYXNlICovXG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBfc2xpY2VkVG9BcnJheSA9IChmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWydyZXR1cm4nXSkgX2lbJ3JldHVybiddKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UnKTsgfSB9OyB9KSgpO1xuXG5cdFRldGhlckJhc2UubW9kdWxlcy5wdXNoKHtcblx0ICBwb3NpdGlvbjogZnVuY3Rpb24gcG9zaXRpb24oX3JlZikge1xuXHQgICAgdmFyIHRvcCA9IF9yZWYudG9wO1xuXHQgICAgdmFyIGxlZnQgPSBfcmVmLmxlZnQ7XG5cblx0ICAgIGlmICghdGhpcy5vcHRpb25zLnNoaWZ0KSB7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgdmFyIHNoaWZ0ID0gdGhpcy5vcHRpb25zLnNoaWZ0O1xuXHQgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuc2hpZnQgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgc2hpZnQgPSB0aGlzLm9wdGlvbnMuc2hpZnQuY2FsbCh0aGlzLCB7IHRvcDogdG9wLCBsZWZ0OiBsZWZ0IH0pO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgc2hpZnRUb3AgPSB1bmRlZmluZWQsXG5cdCAgICAgICAgc2hpZnRMZWZ0ID0gdW5kZWZpbmVkO1xuXHQgICAgaWYgKHR5cGVvZiBzaGlmdCA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgc2hpZnQgPSBzaGlmdC5zcGxpdCgnICcpO1xuXHQgICAgICBzaGlmdFsxXSA9IHNoaWZ0WzFdIHx8IHNoaWZ0WzBdO1xuXG5cdCAgICAgIHZhciBfc2hpZnQgPSBzaGlmdDtcblxuXHQgICAgICB2YXIgX3NoaWZ0MiA9IF9zbGljZWRUb0FycmF5KF9zaGlmdCwgMik7XG5cblx0ICAgICAgc2hpZnRUb3AgPSBfc2hpZnQyWzBdO1xuXHQgICAgICBzaGlmdExlZnQgPSBfc2hpZnQyWzFdO1xuXG5cdCAgICAgIHNoaWZ0VG9wID0gcGFyc2VGbG9hdChzaGlmdFRvcCwgMTApO1xuXHQgICAgICBzaGlmdExlZnQgPSBwYXJzZUZsb2F0KHNoaWZ0TGVmdCwgMTApO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc2hpZnRUb3AgPSBzaGlmdC50b3A7XG5cdCAgICAgIHNoaWZ0TGVmdCA9IHNoaWZ0LmxlZnQ7XG5cdCAgICB9XG5cblx0ICAgIHRvcCArPSBzaGlmdFRvcDtcblx0ICAgIGxlZnQgKz0gc2hpZnRMZWZ0O1xuXG5cdCAgICByZXR1cm4geyB0b3A6IHRvcCwgbGVmdDogbGVmdCB9O1xuXHQgIH1cblx0fSk7XG5cdHJldHVybiBUZXRoZXI7XG5cblx0fSkpO1xuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pXG59KTtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pSWl3aWMyOTFjbU5sY3lJNld5SnpkSGxzWldkMWFXUmxMbXB6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpQjNaV0p3WVdOclZXNXBkbVZ5YzJGc1RXOWtkV3hsUkdWbWFXNXBkR2x2YmloeWIyOTBMQ0JtWVdOMGIzSjVLU0I3WEc1Y2RHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJRDA5UFNBbmIySnFaV04wSnlsY2JseDBYSFJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1poWTNSdmNua29LVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwWEc1Y2RGeDBaR1ZtYVc1bEtGdGRMQ0JtWVdOMGIzSjVLVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjcFhHNWNkRngwWlhod2IzSjBjMXRjSW5OMGVXeGxaM1ZwWkdWY0lsMGdQU0JtWVdOMGIzSjVLQ2s3WEc1Y2RHVnNjMlZjYmx4MFhIUnliMjkwVzF3aWMzUjViR1ZuZFdsa1pWd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JuMHBLSFJvYVhNc0lHWjFibU4wYVc5dUtDa2dlMXh1Y21WMGRYSnVJQzhxS2lvcUtpb3ZJQ2htZFc1amRHbHZiaWh0YjJSMWJHVnpLU0I3SUM4dklIZGxZbkJoWTJ0Q2IyOTBjM1J5WVhCY2JpOHFLaW9xS2lvdklGeDBMeThnVkdobElHMXZaSFZzWlNCallXTm9aVnh1THlvcUtpb3FLaThnWEhSMllYSWdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN5QTlJSHQ5TzF4dVhHNHZLaW9xS2lvcUx5QmNkQzh2SUZSb1pTQnlaWEYxYVhKbElHWjFibU4wYVc5dVhHNHZLaW9xS2lvcUx5QmNkR1oxYm1OMGFXOXVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvYlc5a2RXeGxTV1FwSUh0Y2JseHVMeW9xS2lvcUtpOGdYSFJjZEM4dklFTm9aV05ySUdsbUlHMXZaSFZzWlNCcGN5QnBiaUJqWVdOb1pWeHVMeW9xS2lvcUtpOGdYSFJjZEdsbUtHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZEtWeHVMeW9xS2lvcUtpOGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc1Y2JpOHFLaW9xS2lvdklGeDBYSFF2THlCRGNtVmhkR1VnWVNCdVpYY2diVzlrZFd4bElDaGhibVFnY0hWMElHbDBJR2x1ZEc4Z2RHaGxJR05oWTJobEtWeHVMeW9xS2lvcUtpOGdYSFJjZEhaaGNpQnRiMlIxYkdVZ1BTQnBibk4wWVd4c1pXUk5iMlIxYkdWelcyMXZaSFZzWlVsa1hTQTlJSHRjYmk4cUtpb3FLaW92SUZ4MFhIUmNkR1Y0Y0c5eWRITTZJSHQ5TEZ4dUx5b3FLaW9xS2k4Z1hIUmNkRngwYVdRNklHMXZaSFZzWlVsa0xGeHVMeW9xS2lvcUtpOGdYSFJjZEZ4MGJHOWhaR1ZrT2lCbVlXeHpaVnh1THlvcUtpb3FLaThnWEhSY2RIMDdYRzVjYmk4cUtpb3FLaW92SUZ4MFhIUXZMeUJGZUdWamRYUmxJSFJvWlNCdGIyUjFiR1VnWm5WdVkzUnBiMjVjYmk4cUtpb3FLaW92SUZ4MFhIUnRiMlIxYkdWelcyMXZaSFZzWlVsa1hTNWpZV3hzS0cxdlpIVnNaUzVsZUhCdmNuUnpMQ0J0YjJSMWJHVXNJRzF2WkhWc1pTNWxlSEJ2Y25SekxDQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLVHRjYmx4dUx5b3FLaW9xS2k4Z1hIUmNkQzh2SUVac1lXY2dkR2hsSUcxdlpIVnNaU0JoY3lCc2IyRmtaV1JjYmk4cUtpb3FLaW92SUZ4MFhIUnRiMlIxYkdVdWJHOWhaR1ZrSUQwZ2RISjFaVHRjYmx4dUx5b3FLaW9xS2k4Z1hIUmNkQzh2SUZKbGRIVnliaUIwYUdVZ1pYaHdiM0owY3lCdlppQjBhR1VnYlc5a2RXeGxYRzR2S2lvcUtpb3FMeUJjZEZ4MGNtVjBkWEp1SUcxdlpIVnNaUzVsZUhCdmNuUnpPMXh1THlvcUtpb3FLaThnWEhSOVhHNWNibHh1THlvcUtpb3FLaThnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pYTWdiMkpxWldOMElDaGZYM2RsWW5CaFkydGZiVzlrZFd4bGMxOWZLVnh1THlvcUtpb3FLaThnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1WEc0dktpb3FLaW9xTHlCY2RDOHZJR1Y0Y0c5elpTQjBhR1VnYlc5a2RXeGxJR05oWTJobFhHNHZLaW9xS2lvcUx5QmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WXlBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhNN1hHNWNiaThxS2lvcUtpb3ZJRngwTHk4Z1gxOTNaV0p3WVdOclgzQjFZbXhwWTE5d1lYUm9YMTljYmk4cUtpb3FLaW92SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXdJRDBnWENKY0lqdGNibHh1THlvcUtpb3FLaThnWEhRdkx5Qk1iMkZrSUdWdWRISjVJRzF2WkhWc1pTQmhibVFnY21WMGRYSnVJR1Y0Y0c5eWRITmNiaThxS2lvcUtpb3ZJRngwY21WMGRYSnVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTUNrN1hHNHZLaW9xS2lvcUx5QjlLVnh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JpOHFLaW9xS2lvdklDaGJYRzR2S2lBd0lDb3ZYRzR2S2lvcUx5Qm1kVzVqZEdsdmJpaHRiMlIxYkdVc0lHVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJSHRjYmx4dVhIUnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNibHgwSUNCRWNtOXdaRzkzYmpvZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5Z3hLU3hjYmx4MElDQkdiR0Z1Ym1Wc1JtRmpkRzl5ZVRvZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5Z3lLU3hjYmx4MElDQkdiSGx2ZFhSR1lXTjBiM0o1T2lCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktEUXBMRnh1WEhRZ0lFMWxiblZHWVdOMGIzSjVPaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0RVcExGeHVYSFFnSUUxdlpHRnNSbUZqZEc5eWVUb2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWcyS1N4Y2JseDBJQ0JVYjJkbmJHVkdZV04wYjNKNU9pQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRGNwTEZ4dVhIUWdJRlJ2ZFhKR1lXTjBiM0o1T2lCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktEZ3BYRzVjZEgwN1hHNWNibHh1THlvcUtpOGdmU3hjYmk4cUlERWdLaTljYmk4cUtpb3ZJR1oxYm1OMGFXOXVLRzF2WkhWc1pTd2daWGh3YjNKMGN5a2dlMXh1WEc1Y2RIWmhjaUJFY205d1pHOTNiaUE5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWld4bGJXVnVkQ2tnZTF4dVhIUWdJSFJvYVhNdVpHUWdQU0JsYkdWdFpXNTBPMXh1WEhRZ0lIUm9hWE11YjNKcFpXNTBZWFJwYjI0Z1BTQmxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2duWkdGMFlTMXZjbWxsYm5SaGRHbHZiaWNwSUh4OElDZGliM1IwYjIwbk8xeHVYSFFnSUhSb2FYTXVjMlZzWldOMFlXSnNaU0E5SUdWc1pXMWxiblF1YUdGelFYUjBjbWxpZFhSbEtDZGtZWFJoTFhObGJHVmpkR0ZpYkdVbktUdGNibHgwSUNCMGFHbHpMbVJrTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMlJ5YjNCa2IzZHVMVzl5YVdWdWRHRjBhVzl1TFNjZ0t5QjBhR2x6TG05eWFXVnVkR0YwYVc5dUtUdGNibHh1WEhRZ0lIUm9hWE11Y0d4aFkyVm9iMnhrWlhJZ1BTQjBhR2x6TG1Sa0xuRjFaWEo1VTJWc1pXTjBiM0lvSjNOd1lXNG5LVHRjYmx4MElDQjBhR2x6TG05d2RITWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2gwYUdsekxtUmtMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeTVrY205d1pHOTNiaTF2Y0hScGIyNXpJRDRnYkdrbktTazdYRzVjZENBZ2RHaHBjeTUyWVd3Z1BTQW5KenRjYmx4MElDQjBhR2x6TG1sdVpHVjRJRDBnTFRFN1hHNWNibHgwSUNCMGFHbHpMbWx1YVhSRmRtVnVkSE1vS1R0Y2JseDBmVnh1WEc1Y2RFUnliM0JrYjNkdUxuQnliM1J2ZEhsd1pTQTlJSHRjYmx4MElDQnBibWwwUlhabGJuUnpPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBJQ0FnSUhaaGNpQnZZbW9nUFNCMGFHbHpPMXh1WEc1Y2RDQWdJQ0J2WW1vdVpHUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVYSFFnSUNBZ0lDQmxkbVZ1ZEM1emRHOXdVSEp2Y0dGbllYUnBiMjRvS1R0Y2JseDBJQ0FnSUNBZ2IySnFMbVJrTG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvSjJGamRHbDJaU2NwTzF4dVhIUWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjZENBZ0lDQjlLVHRjYmx4dVhIUWdJQ0FnYjJKcUxtOXdkSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWh2Y0hRcElIdGNibHgwSUNBZ0lDQWdiM0IwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmx4MElDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1WEc1Y2RDQWdJQ0FnSUNBZ2RtRnlJRzV2WkdVZ1BTQnZjSFE3WEc1Y2RDQWdJQ0FnSUNBZ2RtRnlJR2x1WkdWNElEMGdNRHRjYmx4dVhIUWdJQ0FnSUNBZ0lIZG9hV3hsSUNnb2JtOWtaU0E5SUc1dlpHVXVjSEpsZG1sdmRYTkZiR1Z0Wlc1MFUybGliR2x1WnlrZ0lUMDlJRzUxYkd3cElIdGNibHgwSUNBZ0lDQWdJQ0FnSUdsdVpHVjRLeXM3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnYjJKcUxuWmhiQ0E5SUc5d2RDNTBaWGgwUTI5dWRHVnVkRHRjYmx4MElDQWdJQ0FnSUNCdlltb3VhVzVrWlhnZ1BTQnBibVJsZUR0Y2JseHVYSFFnSUNBZ0lDQWdJR2xtSUNodlltb3VjMlZzWldOMFlXSnNaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdiMkpxTG5Cc1lXTmxhRzlzWkdWeUxtbHVibVZ5U0ZSTlRDQTlJRzl3ZEM1cGJtNWxjbFJsZUhRdWRISnBiU2dwTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibHgwSUNBZ0lDQWdmU2s3WEc1Y2RDQWdJQ0I5S1R0Y2JseDBJQ0I5WEc1Y2RIMWNibHh1WEc0dktpb3FMeUI5TEZ4dUx5b2dNaUFxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpMQ0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS1NCN1hHNWNibHgwZG1GeUlIWmxiRzlqYVhSNUlEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd6S1R0Y2JseHVYSFIyWVhJZ1JteGhibTVsYkVaaFkzUnZjbmtnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dWc1pXMWxiblFwSUh0Y2JseDBJQ0IyWVhJZ2JXOWlhV3hsUW5KbFlXdHdiMmx1ZENBOUlEUXlNRHRjYmx4MElDQjJZWElnY0dGa1pHbHVaeUE5SURFd08xeHVYSFFnSUhaaGNpQm9iM1psY21GaWJHVnpJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtRndjR3g1S0dSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjF0a1lYUmhMV1pzWVc1dVpXeGRKeWtwTzF4dVhHNWNkQ0FnWm5WdVkzUnBiMjRnYUdsa1pVWnNZVzV1Wld3b1pteGhibTVsYkN3Z2FHOTJaWEpoWW14bEtTQjdYRzVjZENBZ0lDQnBaaUFvWkc5amRXMWxiblF1WW05a2VTNXZabVp6WlhSWGFXUjBhQ0E4SUcxdlltbHNaVUp5WldGcmNHOXBiblFwSUh0Y2JseDBJQ0FnSUNBZ2RtVnNiMk5wZEhrb1pteGhibTVsYkN3Z2UxeHVYSFFnSUNBZ0lDQWdJR3hsWm5RNklHUnZZM1Z0Wlc1MExtSnZaSGt1YjJabWMyVjBWMmxrZEdoY2JseDBJQ0FnSUNBZ2ZTd2dlMXh1WEhRZ0lDQWdJQ0FnSUdSMWNtRjBhVzl1T2lBek5UQXNYRzVjZENBZ0lDQWdJQ0FnWTI5dGNHeGxkR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnWm14aGJtNWxiQzVqYkdGemMweHBjM1F1WVdSa0tDZG1iR0Z1Ym1Wc0xXaHBaR1JsYmljcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnYUc5MlpYSmhZbXhsTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJGamRHbDJaU2NwTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdmU2s3WEc1Y2JseDBJQ0FnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzV6ZEhsc1pTNXZkbVZ5Wm14dmR5QTlJQ2NuTzF4dVhIUWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnWm14aGJtNWxiQzVqYkdGemMweHBjM1F1WVdSa0tDZG1iR0Z1Ym1Wc0xXaHBaR1JsYmljcE8xeHVYSFFnSUNBZ0lDQm9iM1psY21GaWJHVXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25ZV04wYVhabEp5azdYRzVjZENBZ0lDQjlYRzVjZENBZ2ZWeHVYRzVjZENBZ1puVnVZM1JwYjI0Z2NHOXphWFJwYjI1R2JHRnVibVZzS0dac1lXNXVaV3dzSUdodmRtVnlZV0pzWlNrZ2UxeHVYSFFnSUNBZ2RtRnlJRzV2WkdVZ1BTQm9iM1psY21GaWJHVTdYRzVjZENBZ0lDQjJZWElnYkdWbWRDQTlJREE3WEc1Y2RDQWdJQ0IyWVhJZ2RHOXdJRDBnTUR0Y2JseDBJQ0FnSUhaaGNpQm1iR0Z1Ym1Wc1YybGtkR2dnUFNCbWJHRnVibVZzTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMbmRwWkhSb08xeHVYSFFnSUNBZ2RtRnlJSGRwYm1SdmQxZHBaSFJvSUQwZ1pHOWpkVzFsYm5RdVltOWtlUzV2Wm1aelpYUlhhV1IwYUR0Y2JseHVYSFFnSUNBZ1pHOGdlMXh1WEhRZ0lDQWdJQ0JzWldaMElDczlJRzV2WkdVdWIyWm1jMlYwVEdWbWREdGNibHgwSUNBZ0lDQWdkRzl3SUNzOUlHNXZaR1V1YjJabWMyVjBWRzl3TzF4dVhIUWdJQ0FnZlNCM2FHbHNaU0FvS0c1dlpHVWdQU0J1YjJSbExtOW1abk5sZEZCaGNtVnVkQ2tnSVQwOUlHNTFiR3dwTzF4dVhHNWNkQ0FnSUNCc1pXWjBJRDBnYkdWbWRDQXJJR2h2ZG1WeVlXSnNaUzV2Wm1aelpYUlhhV1IwYUNBdklESTdYRzVjZENBZ0lDQjBiM0FnUFNCMGIzQWdLeUJvYjNabGNtRmliR1V1YjJabWMyVjBTR1ZwWjJoMElDc2djR0ZrWkdsdVp6dGNibHh1WEhRZ0lDQWdhV1lnS0d4bFpuUWdLeUJtYkdGdWJtVnNWMmxrZEdnZ1BpQjNhVzVrYjNkWGFXUjBhQ0FtSmlCM2FXNWtiM2RYYVdSMGFDQStQU0J0YjJKcGJHVkNjbVZoYTNCdmFXNTBLU0I3WEc1Y2RDQWdJQ0FnSUdac1lXNXVaV3d1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duWm14aGJtNWxiQzF5YVdkb2RDY3BPMXh1WEhRZ0lDQWdJQ0JtYkdGdWJtVnNMbU5zWVhOelRHbHpkQzVoWkdRb0oyWnNZVzV1Wld3dGJHVm1kQ2NwTzF4dVhIUWdJQ0FnSUNCc1pXWjBJQzA5SUdac1lXNXVaV3hYYVdSMGFEdGNibHgwSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lHWnNZVzV1Wld3dVkyeGhjM05NYVhOMExuSmxiVzkyWlNnblpteGhibTVsYkMxc1pXWjBKeWs3WEc1Y2RDQWdJQ0FnSUdac1lXNXVaV3d1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25abXhoYm01bGJDMXlhV2RvZENjcE8xeHVYSFFnSUNBZ2ZWeHVYRzVjZENBZ0lDQnBaaUFvZDJsdVpHOTNWMmxrZEdnZ1BqMGdiVzlpYVd4bFFuSmxZV3R3YjJsdWRDa2dlMXh1WEhRZ0lDQWdJQ0JtYkdGdWJtVnNMbk4wZVd4bExteGxablFnUFNCc1pXWjBJQ3NnSjNCNEp6dGNibHgwSUNBZ0lDQWdabXhoYm01bGJDNXpkSGxzWlM1MGIzQWdQU0IwYjNBZ0t5QW5jSGduTzF4dVhIUWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnWm14aGJtNWxiQzV6ZEhsc1pTNXNaV1owSUQwZ2QybHVaRzkzVjJsa2RHZ2dLeUFuY0hnbk8xeHVYSFFnSUNBZ0lDQm1iR0Z1Ym1Wc0xuTjBlV3hsTG5SdmNDQTlJREE3WEc1Y2RDQWdJQ0FnSUhabGJHOWphWFI1S0dac1lXNXVaV3dzSUh0Y2JseDBJQ0FnSUNBZ0lDQnNaV1owT2lBd1hHNWNkQ0FnSUNBZ0lIMHNJRE0xTUNrN1hHNWNkQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1YzNSNWJHVXViM1psY21ac2IzY2dQU0FuYUdsa1pHVnVKenRjYmx4MElDQWdJSDFjYmx4MElDQjlYRzVjYmx4MElDQm9iM1psY21GaWJHVnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hRzkyWlhKaFlteGxLU0I3WEc1Y2RDQWdJQ0IyWVhJZ1pteGhibTVsYkVsa0lEMGdhRzkyWlhKaFlteGxMbWRsZEVGMGRISnBZblYwWlNnblpHRjBZUzFtYkdGdWJtVnNKeWs3WEc1Y2RDQWdJQ0IyWVhJZ1pteGhibTVsYkNBOUlHUnZZM1Z0Wlc1MExuRjFaWEo1VTJWc1pXTjBiM0lvSnlNbklDc2dabXhoYm01bGJFbGtLVHRjYmx4MElDQWdJSFpoY2lCa2FYTnRhWE56WVd4eklEMGdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1Gd2NHeDVLR1pzWVc1dVpXd3VjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XMlJoZEdFdFpteGhibTVsYkMxa2FYTnRhWE56WFNjcEtUdGNibHh1WEhRZ0lDQWdaR2x6YldsemMyRnNjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR1JwYzIxcGMzTmhiQ2tnZTF4dVhIUWdJQ0FnSUNCa2FYTnRhWE56WVd3dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlncElIdGNibHgwSUNBZ0lDQWdJQ0JvYVdSbFJteGhibTVsYkNobWJHRnVibVZzTENCb2IzWmxjbUZpYkdVcE8xeHVYSFFnSUNBZ0lDQjlLVHRjYmx4MElDQWdJSDBwTzF4dVhHNWNkQ0FnSUNCb2IzWmxjbUZpYkdVdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlobGRtVnVkQ2tnZTF4dVhIUWdJQ0FnSUNCbGRtVnVkQzV6ZEc5d1VISnZjR0ZuWVhScGIyNG9LVHRjYmx4dVhIUWdJQ0FnSUNCbWJHRnVibVZzTG1Oc1lYTnpUR2x6ZEM1MGIyZG5iR1VvSjJac1lXNXVaV3d0YUdsa1pHVnVKeWs3WEc1Y2RDQWdJQ0FnSUhCdmMybDBhVzl1Um14aGJtNWxiQ2htYkdGdWJtVnNMQ0JvYjNabGNtRmliR1VwTzF4dVhIUWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0JtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1WEhRZ0lDQWdJQ0IyWVhJZ2JtOWtaU0E5SUdWMlpXNTBMblJoY21kbGREdGNibHh1WEhRZ0lDQWdJQ0IzYUdsc1pTQW9ibTlrWlM1d1lYSmxiblJGYkdWdFpXNTBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2FXWWdLRzV2WkdVdWFXUWdQVDA5SUdac1lXNXVaV3hKWkNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJRzV2WkdVZ1BTQnViMlJsTG5CaGNtVnVkRVZzWlcxbGJuUTdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCb2FXUmxSbXhoYm01bGJDaG1iR0Z1Ym1Wc0xDQm9iM1psY21GaWJHVXBPMXh1WEhRZ0lDQWdmU2s3WEc1Y2JseDBJQ0FnSUdSdlkzVnRaVzUwTG1KdlpIa3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25hMlY1ZFhBbkxDQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVYSFFnSUNBZ0lDQjJZWElnYTJWNUlEMGdaWFpsYm5RdWQyaHBZMmdnZkh3Z1pYWmxiblF1YTJWNVEyOWtaVHRjYmx4dVhIUWdJQ0FnSUNBdkx5QkZVME5jYmx4MElDQWdJQ0FnYVdZZ0tHdGxlU0E5UFQwZ01qY3BJSHRjYmx4MElDQWdJQ0FnSUNCb2FXUmxSbXhoYm01bGJDaG1iR0Z1Ym1Wc0xDQm9iM1psY21GaWJHVXBPMXh1WEhRZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0I5S1R0Y2JseHVYSFFnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNKbGMybDZaU2NzSUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFFnSUNBZ0lDQnBaaUFvSVdac1lXNXVaV3d1WTJ4aGMzTk1hWE4wTG1OdmJuUmhhVzV6S0NkbWJHRnVibVZzTFdocFpHUmxiaWNwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdjRzl6YVhScGIyNUdiR0Z1Ym1Wc0tHWnNZVzV1Wld3c0lHaHZkbVZ5WVdKc1pTazdYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJSDBwTzF4dVhIUWdJSDBwTzF4dVhIUjlYRzVjYmx4dUx5b3FLaThnZlN4Y2JpOHFJRE1nS2k5Y2JpOHFLaW92SUdaMWJtTjBhVzl1S0cxdlpIVnNaU3dnWlhod2IzSjBjeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrZ2UxeHVYRzVjZEhaaGNpQmZYMWRGUWxCQlEwdGZRVTFFWDBSRlJrbE9SVjlHUVVOVVQxSlpYMThzSUY5ZlYwVkNVRUZEUzE5QlRVUmZSRVZHU1U1RlgxSkZVMVZNVkY5Zk95OHFJU0JXWld4dlkybDBlVXBUTG05eVp5QW9NUzR5TGpNcExpQW9ReWtnTWpBeE5DQktkV3hwWVc0Z1UyaGhjR2x5Ynk0Z1RVbFVJRUJzYVdObGJuTmxPaUJsYmk1M2FXdHBjR1ZrYVdFdWIzSm5MM2RwYTJrdlRVbFVYMHhwWTJWdWMyVWdLaTljYmx4dVhIUXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNCV1pXeHZZMmwwZVNCcVVYVmxjbmtnVTJocGJWeHVYSFFxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDOHFJU0JXWld4dlkybDBlVXBUTG05eVp5QnFVWFZsY25rZ1UyaHBiU0FvTVM0d0xqRXBMaUFvUXlrZ01qQXhOQ0JVYUdVZ2FsRjFaWEo1SUVadmRXNWtZWFJwYjI0dUlFMUpWQ0JBYkdsalpXNXpaVG9nWlc0dWQybHJhWEJsWkdsaExtOXlaeTkzYVd0cEwwMUpWRjlNYVdObGJuTmxMaUFxTDF4dVhHNWNkQzhxSUZSb2FYTWdabWxzWlNCamIyNTBZV2x1Y3lCMGFHVWdhbEYxWlhKNUlHWjFibU4wYVc5dWN5QjBhR0YwSUZabGJHOWphWFI1SUhKbGJHbGxjeUJ2Yml3Z2RHaGxjbVZpZVNCeVpXMXZkbWx1WnlCV1pXeHZZMmwwZVNkeklHUmxjR1Z1WkdWdVkza2diMjRnWVNCbWRXeHNJR052Y0hrZ2IyWWdhbEYxWlhKNUxDQmhibVFnWVd4c2IzZHBibWNnYVhRZ2RHOGdkMjl5YXlCcGJpQmhibmtnWlc1MmFYSnZibTFsYm5RdUlDb3ZYRzVjZEM4cUlGUm9aWE5sSUhOb2FXMXRaV1FnWm5WdVkzUnBiMjV6SUdGeVpTQnZibXg1SUhWelpXUWdhV1lnYWxGMVpYSjVJR2x6YmlkMElIQnlaWE5sYm5RdUlFbG1JR0p2ZEdnZ2RHaHBjeUJ6YUdsdElHRnVaQ0JxVVhWbGNua2dZWEpsSUd4dllXUmxaQ3dnVm1Wc2IyTnBkSGtnWkdWbVlYVnNkSE1nZEc4Z2FsRjFaWEo1SUhCeWIzQmxjaTRnS2k5Y2JseDBMeW9nUW5KdmQzTmxjaUJ6ZFhCd2IzSjBPaUJWYzJsdVp5QjBhR2x6SUhOb2FXMGdhVzV6ZEdWaFpDQnZaaUJxVVhWbGNua2djSEp2Y0dWeUlISmxiVzkyWlhNZ2MzVndjRzl5ZENCbWIzSWdTVVU0TGlBcUwxeHVYRzVjZERzb1puVnVZM1JwYjI0Z0tIZHBibVJ2ZHlrZ2UxeHVYSFFnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2x4dVhIUWdJQ0FnSUNBZ0lDQlRaWFIxY0Z4dVhIUWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0F2S2lCSlppQnFVWFZsY25rZ2FYTWdZV3h5WldGa2VTQnNiMkZrWldRc0lIUm9aWEpsSjNNZ2JtOGdjRzlwYm5RZ2FXNGdiRzloWkdsdVp5QjBhR2x6SUhOb2FXMHVJQ292WEc1Y2RDQWdJQ0JwWmlBb2QybHVaRzkzTG1wUmRXVnllU2tnZTF4dVhIUWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JseDBJQ0FnSUgxY2JseHVYSFFnSUNBZ0x5b2dhbEYxWlhKNUlHSmhjMlV1SUNvdlhHNWNkQ0FnSUNCMllYSWdKQ0E5SUdaMWJtTjBhVzl1SUNoelpXeGxZM1J2Y2l3Z1kyOXVkR1Y0ZENrZ2UxeHVYSFFnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnSkM1bWJpNXBibWwwS0hObGJHVmpkRzl5TENCamIyNTBaWGgwS1R0Y2JseDBJQ0FnSUgwN1hHNWNibHgwSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnVUhKcGRtRjBaU0JOWlhSb2IyUnpYRzVjZENBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnTHlvZ2FsRjFaWEo1SUNvdlhHNWNkQ0FnSUNBa0xtbHpWMmx1Wkc5M0lEMGdablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVYSFFnSUNBZ0lDQWdJQzhxSUdwemFHbHVkQ0JsY1dWeFpYRTZJR1poYkhObElDb3ZYRzVjZENBZ0lDQWdJQ0FnY21WMGRYSnVJRzlpYWlBaFBTQnVkV3hzSUNZbUlHOWlhaUE5UFNCdlltb3VkMmx1Wkc5M08xeHVYSFFnSUNBZ2ZUdGNibHh1WEhRZ0lDQWdMeW9nYWxGMVpYSjVJQ292WEc1Y2RDQWdJQ0FrTG5SNWNHVWdQU0JtZFc1amRHbHZiaUFvYjJKcUtTQjdYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tHOWlhaUE5UFNCdWRXeHNLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZZbW9nS3lCY0lsd2lPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2IySnFJRDA5UFNCY0ltOWlhbVZqZEZ3aUlIeDhJSFI1Y0dWdlppQnZZbW9nUFQwOUlGd2lablZ1WTNScGIyNWNJaUEvWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOek1uUjVjR1ZiZEc5VGRISnBibWN1WTJGc2JDaHZZbW9wWFNCOGZDQmNJbTlpYW1WamRGd2lJRHBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHOWlhanRjYmx4MElDQWdJSDA3WEc1Y2JseDBJQ0FnSUM4cUlHcFJkV1Z5ZVNBcUwxeHVYSFFnSUNBZ0pDNXBjMEZ5Y21GNUlEMGdRWEp5WVhrdWFYTkJjbkpoZVNCOGZDQm1kVzVqZEdsdmJpQW9iMkpxS1NCN1hHNWNkQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDUXVkSGx3WlNodlltb3BJRDA5UFNCY0ltRnljbUY1WENJN1hHNWNkQ0FnSUNCOU8xeHVYRzVjZENBZ0lDQXZLaUJxVVhWbGNua2dLaTljYmx4MElDQWdJR1oxYm1OMGFXOXVJR2x6UVhKeVlYbHNhV3RsSUNodlltb3BJSHRjYmx4MElDQWdJQ0FnSUNCMllYSWdiR1Z1WjNSb0lEMGdiMkpxTG14bGJtZDBhQ3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkSGx3WlNBOUlDUXVkSGx3WlNodlltb3BPMXh1WEc1Y2RDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlCOGZDQWtMbWx6VjJsdVpHOTNLRzlpYWlrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJR2xtSUNodlltb3VibTlrWlZSNWNHVWdQVDA5SURFZ0ppWWdiR1Z1WjNSb0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJSEpsZEhWeWJpQjBlWEJsSUQwOVBTQmNJbUZ5Y21GNVhDSWdmSHdnYkdWdVozUm9JRDA5UFNBd0lIeDhJSFI1Y0dWdlppQnNaVzVuZEdnZ1BUMDlJRndpYm5WdFltVnlYQ0lnSmlZZ2JHVnVaM1JvSUQ0Z01DQW1KaUFvYkdWdVozUm9JQzBnTVNrZ2FXNGdiMkpxTzF4dVhIUWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBa0lFMWxkR2h2WkhOY2JseDBJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnTHlvZ2FsRjFaWEo1T2lCVGRYQndiM0owSUhKbGJXOTJaV1FnWm05eUlFbEZQRGt1SUNvdlhHNWNkQ0FnSUNBa0xtbHpVR3hoYVc1UFltcGxZM1FnUFNCbWRXNWpkR2x2YmlBb2IySnFLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2RtRnlJR3RsZVR0Y2JseHVYSFFnSUNBZ0lDQWdJR2xtSUNnaGIySnFJSHg4SUNRdWRIbHdaU2h2WW1vcElDRTlQU0JjSW05aWFtVmpkRndpSUh4OElHOWlhaTV1YjJSbFZIbHdaU0I4ZkNBa0xtbHpWMmx1Wkc5M0tHOWlhaWtwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lIUnllU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodlltb3VZMjl1YzNSeWRXTjBiM0lnSmlaY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRm9ZWE5QZDI0dVkyRnNiQ2h2WW1vc0lGd2lZMjl1YzNSeWRXTjBiM0pjSWlrZ0ppWmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ZvWVhOUGQyNHVZMkZzYkNodlltb3VZMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsTENCY0ltbHpVSEp2ZEc5MGVYQmxUMlpjSWlrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlHOWlhaWtnZTMxY2JseHVYSFFnSUNBZ0lDQWdJSEpsZEhWeWJpQnJaWGtnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0JvWVhOUGQyNHVZMkZzYkNodlltb3NJR3RsZVNrN1hHNWNkQ0FnSUNCOU8xeHVYRzVjZENBZ0lDQXZLaUJxVVhWbGNua2dLaTljYmx4MElDQWdJQ1F1WldGamFDQTlJR1oxYm1OMGFXOXVLRzlpYWl3Z1kyRnNiR0poWTJzc0lHRnlaM01wSUh0Y2JseDBJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHa2dQU0F3TEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JzWlc1bmRHZ2dQU0J2WW1vdWJHVnVaM1JvTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JwYzBGeWNtRjVJRDBnYVhOQmNuSmhlV3hwYTJVb2IySnFLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lHbG1JQ2hoY21kektTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzBGeWNtRjVLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLRHNnYVNBOElHeGxibWQwYURzZ2FTc3JLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1BTQmpZV3hzWW1GamF5NWhjSEJzZVNodlltcGJhVjBzSUdGeVozTXBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5UFNCbVlXeHpaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHa2dhVzRnYjJKcUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCallXeHNZbUZqYXk1aGNIQnNlU2h2WW1wYmFWMHNJR0Z5WjNNcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbElEMDlQU0JtWVd4elpTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMwRnljbUY1S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0RzZ2FTQThJR3hsYm1kMGFEc2dhU3NyS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0JqWVd4c1ltRmpheTVqWVd4c0tHOWlhbHRwWFN3Z2FTd2diMkpxVzJsZEtUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTQTlQVDBnWm1Gc2MyVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNocElHbHVJRzlpYWlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnWTJGc2JHSmhZMnN1WTJGc2JDaHZZbXBiYVYwc0lHa3NJRzlpYWx0cFhTazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdQVDA5SUdaaGJITmxLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJSEpsZEhWeWJpQnZZbW83WEc1Y2RDQWdJQ0I5TzF4dVhHNWNkQ0FnSUNBdktpQkRkWE4wYjIwZ0tpOWNibHgwSUNBZ0lDUXVaR0YwWVNBOUlHWjFibU4wYVc5dUlDaHViMlJsTENCclpYa3NJSFpoYkhWbEtTQjdYRzVjZENBZ0lDQWdJQ0FnTHlvZ0pDNW5aWFJFWVhSaEtDa2dLaTljYmx4MElDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXUWdQU0J1YjJSbFd5UXVaWGh3WVc1a2IxMHNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEc5eVpTQTlJR2xrSUNZbUlHTmhZMmhsVzJsa1hUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHOXlaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6ZEc5eVpTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdGxlU0JwYmlCemRHOXlaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkRzl5WlZ0clpYbGRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0x5b2dKQzV6WlhSRVlYUmhLQ2tnS2k5Y2JseDBJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR3RsZVNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcFpDQTlJRzV2WkdWYkpDNWxlSEJoYm1SdlhTQjhmQ0FvYm05a1pWc2tMbVY0Y0dGdVpHOWRJRDBnS3lza0xuVjFhV1FwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxXMmxrWFNBOUlHTmhZMmhsVzJsa1hTQjhmQ0I3ZlR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmJhV1JkVzJ0bGVWMGdQU0IyWVd4MVpUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ2ZUdGNibHh1WEhRZ0lDQWdMeW9nUTNWemRHOXRJQ292WEc1Y2RDQWdJQ0FrTG5KbGJXOTJaVVJoZEdFZ1BTQm1kVzVqZEdsdmJpQW9ibTlrWlN3Z2EyVjVjeWtnZTF4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJwWkNBOUlHNXZaR1ZiSkM1bGVIQmhibVJ2WFN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYzNSdmNtVWdQU0JwWkNBbUppQmpZV05vWlZ0cFpGMDdYRzVjYmx4MElDQWdJQ0FnSUNCcFppQW9jM1J2Y21VcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0pDNWxZV05vS0d0bGVYTXNJR1oxYm1OMGFXOXVLRjhzSUd0bGVTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSE4wYjNKbFcydGxlVjA3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lIMDdYRzVjYmx4MElDQWdJQzhxSUdwUmRXVnllU0FxTDF4dVhIUWdJQ0FnSkM1bGVIUmxibVFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZENBZ0lDQWdJQ0FnZG1GeUlITnlZeXdnWTI5d2VVbHpRWEp5WVhrc0lHTnZjSGtzSUc1aGJXVXNJRzl3ZEdsdmJuTXNJR05zYjI1bExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFFnUFNCaGNtZDFiV1Z1ZEhOYk1GMGdmSHdnZTMwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdrZ1BTQXhMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnNaVzVuZEdnZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0xGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCa1pXVndJRDBnWm1Gc2MyVTdYRzVjYmx4MElDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIUmhjbWRsZENBOVBUMGdYQ0ppYjI5c1pXRnVYQ0lwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWkdWbGNDQTlJSFJoY21kbGREdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRZ1BTQmhjbWQxYldWdWRITmJhVjBnZkh3Z2UzMDdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHa3JLenRjYmx4MElDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhSaGNtZGxkQ0FoUFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUFrTG5SNWNHVW9kR0Z5WjJWMEtTQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZENBOUlIdDlPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJR2xtSUNocElEMDlQU0JzWlc1bmRHZ3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMElEMGdkR2hwY3p0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVMwdE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lHWnZjaUFvT3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDaHZjSFJwYjI1eklEMGdZWEpuZFcxbGJuUnpXMmxkS1NBaFBTQnVkV3hzS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0c1aGJXVWdhVzRnYjNCMGFXOXVjeWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE55WXlBOUlIUmhjbWRsZEZ0dVlXMWxYVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiM0I1SUQwZ2IzQjBhVzl1YzF0dVlXMWxYVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFFnUFQwOUlHTnZjSGtwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmxaWEFnSmlZZ1kyOXdlU0FtSmlBb0pDNXBjMUJzWVdsdVQySnFaV04wS0dOdmNIa3BJSHg4SUNoamIzQjVTWE5CY25KaGVTQTlJQ1F1YVhOQmNuSmhlU2hqYjNCNUtTa3BLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiM0I1U1hOQmNuSmhlU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVVselFYSnlZWGtnUFNCbVlXeHpaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNiMjVsSUQwZ2MzSmpJQ1ltSUNRdWFYTkJjbkpoZVNoemNtTXBJRDhnYzNKaklEb2dXMTA3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zYjI1bElEMGdjM0pqSUNZbUlDUXVhWE5RYkdGcGJrOWlhbVZqZENoemNtTXBJRDhnYzNKaklEb2dlMzA3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhSYmJtRnRaVjBnUFNBa0xtVjRkR1Z1WkNoa1pXVndMQ0JqYkc5dVpTd2dZMjl3ZVNrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTnZjSGtnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUmJibUZ0WlYwZ1BTQmpiM0I1TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUhKbGRIVnliaUIwWVhKblpYUTdYRzVjZENBZ0lDQjlPMXh1WEc1Y2RDQWdJQ0F2S2lCcVVYVmxjbmtnTVM0MExqTWdLaTljYmx4MElDQWdJQ1F1Y1hWbGRXVWdQU0JtZFc1amRHbHZiaUFvWld4bGJTd2dkSGx3WlN3Z1pHRjBZU2tnZTF4dVhIUWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDUnRZV3RsUVhKeVlYa2dLR0Z5Y2l3Z2NtVnpkV3gwY3lrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVYwSUQwZ2NtVnpkV3gwY3lCOGZDQmJYVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYSnlJQ0U5SUc1MWJHd3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMEZ5Y21GNWJHbHJaU2hQWW1wbFkzUW9ZWEp5S1NrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQWtMbTFsY21kbElDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tHWjFibU4wYVc5dUtHWnBjbk4wTENCelpXTnZibVFwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3hsYmlBOUlDdHpaV052Ym1RdWJHVnVaM1JvTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhaUE5SURBc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwSUQwZ1ptbHljM1F1YkdWdVozUm9PMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hxSUR3Z2JHVnVLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hWEp6ZEZ0cEt5dGRJRDBnYzJWamIyNWtXMm9ySzEwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JHVnVJQ0U5UFNCc1pXNHBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNoelpXTnZibVJiYWwwZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGNuTjBXMmtySzEwZ1BTQnpaV052Ym1SYmFpc3JYVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGNuTjBMbXhsYm1kMGFDQTlJR2s3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdacGNuTjBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBLSEpsZEN3Z2RIbHdaVzltSUdGeWNpQTlQVDBnWENKemRISnBibWRjSWlBL0lGdGhjbkpkSURvZ1lYSnlLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXMTB1Y0hWemFDNWpZV3hzS0hKbGRDd2dZWEp5S1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0NGbGJHVnRLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQjBlWEJsSUQwZ0tIUjVjR1VnZkh3Z1hDSm1lRndpS1NBcklGd2ljWFZsZFdWY0lqdGNibHh1WEhRZ0lDQWdJQ0FnSUhaaGNpQnhJRDBnSkM1a1lYUmhLR1ZzWlcwc0lIUjVjR1VwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0NGa1lYUmhLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnhJSHg4SUZ0ZE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lHbG1JQ2doY1NCOGZDQWtMbWx6UVhKeVlYa29aR0YwWVNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2NTQTlJQ1F1WkdGMFlTaGxiR1Z0TENCMGVYQmxMQ0FrYldGclpVRnljbUY1S0dSaGRHRXBLVHRjYmx4MElDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J4TG5CMWMyZ29aR0YwWVNrN1hHNWNkQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhFN1hHNWNkQ0FnSUNCOU8xeHVYRzVjZENBZ0lDQXZLaUJxVVhWbGNua2dNUzQwTGpNZ0tpOWNibHgwSUNBZ0lDUXVaR1Z4ZFdWMVpTQTlJR1oxYm1OMGFXOXVJQ2hsYkdWdGN5d2dkSGx3WlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQzhxSUVOMWMzUnZiVG9nUlcxaVpXUWdaV3hsYldWdWRDQnBkR1Z5WVhScGIyNHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0pDNWxZV05vS0dWc1pXMXpMbTV2WkdWVWVYQmxJRDhnV3lCbGJHVnRjeUJkSURvZ1pXeGxiWE1zSUdaMWJtTjBhVzl1S0drc0lHVnNaVzBwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pTQTlJSFI1Y0dVZ2ZId2dYQ0ptZUZ3aU8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ4ZFdWMVpTQTlJQ1F1Y1hWbGRXVW9aV3hsYlN3Z2RIbHdaU2tzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWJpQTlJSEYxWlhWbExuTm9hV1owS0NrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1p1SUQwOVBTQmNJbWx1Y0hKdlozSmxjM05jSWlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTRnUFNCeGRXVjFaUzV6YUdsbWRDZ3BPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dadUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaU0E5UFQwZ1hDSm1lRndpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY1hWbGRXVXVkVzV6YUdsbWRDaGNJbWx1Y0hKdlozSmxjM05jSWlrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadUxtTmhiR3dvWld4bGJTd2dablZ1WTNScGIyNG9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQzVrWlhGMVpYVmxLR1ZzWlcwc0lIUjVjR1VwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0I5S1R0Y2JseDBJQ0FnSUgwN1hHNWNibHgwSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ1F1Wm00Z1RXVjBhRzlrYzF4dVhIUWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBdktpQnFVWFZsY25rZ0tpOWNibHgwSUNBZ0lDUXVabTRnUFNBa0xuQnliM1J2ZEhsd1pTQTlJSHRjYmx4MElDQWdJQ0FnSUNCcGJtbDBPaUJtZFc1amRHbHZiaUFvYzJWc1pXTjBiM0lwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NuVnpkQ0J5WlhSMWNtNGdkR2hsSUdWc1pXMWxiblFnZDNKaGNIQmxaQ0JwYm5OcFpHVWdZVzRnWVhKeVlYazdJR1J2YmlkMElIQnliMk5sWldRZ2QybDBhQ0IwYUdVZ1lXTjBkV0ZzSUdwUmRXVnllU0J1YjJSbElIZHlZWEJ3YVc1bklIQnliMk5sYzNNdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bFkzUnZjaTV1YjJSbFZIbHdaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjMXN3WFNBOUlITmxiR1ZqZEc5eU8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWs1dmRDQmhJRVJQVFNCdWIyUmxMbHdpS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMHNYRzVjYmx4MElDQWdJQ0FnSUNCdlptWnpaWFE2SUdaMWJtTjBhVzl1SUNncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dhbEYxWlhKNUlHRnNkR1Z5WldRZ1kyOWtaVG9nUkhKdmNIQmxaQ0JrYVhOamIyNXVaV04wWldRZ1JFOU5JRzV2WkdVZ1kyaGxZMnRwYm1jdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJpYjNnZ1BTQjBhR2x6V3pCZExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ0EvSUhSb2FYTmJNRjB1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDa2dPaUI3SUhSdmNEb2dNQ3dnYkdWbWREb2dNQ0I5TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzQTZJR0p2ZUM1MGIzQWdLeUFvZDJsdVpHOTNMbkJoWjJWWlQyWm1jMlYwSUh4OElHUnZZM1Z0Wlc1MExuTmpjbTlzYkZSdmNDQWdmSHdnTUNrZ0lDMGdLR1J2WTNWdFpXNTBMbU5zYVdWdWRGUnZjQ0FnZkh3Z01Da3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWldaME9pQmliM2d1YkdWbWRDQXJJQ2gzYVc1a2IzY3VjR0ZuWlZoUFptWnpaWFFnZkh3Z1pHOWpkVzFsYm5RdWMyTnliMnhzVEdWbWRDQWdmSHdnTUNrZ0xTQW9aRzlqZFcxbGJuUXVZMnhwWlc1MFRHVm1kQ0I4ZkNBd0tWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVYSFFnSUNBZ0lDQWdJSDBzWEc1Y2JseDBJQ0FnSUNBZ0lDQndiM05wZEdsdmJqb2dablZ1WTNScGIyNGdLQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCcVVYVmxjbmtnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYjJabWMyVjBVR0Z5Wlc1MEtDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOW1abk5sZEZCaGNtVnVkQ0E5SUhSb2FYTXViMlptYzJWMFVHRnlaVzUwSUh4OElHUnZZM1Z0Wlc1ME8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9iMlptYzJWMFVHRnlaVzUwSUNZbUlDZ2hiMlptYzJWMFVHRnlaVzUwTG01dlpHVlVlWEJsTG5SdlRHOTNaWEpEWVhObElEMDlQU0JjSW1oMGJXeGNJaUFtSmlCdlptWnpaWFJRWVhKbGJuUXVjM1I1YkdVdWNHOXphWFJwYjI0Z1BUMDlJRndpYzNSaGRHbGpYQ0lwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBVR0Z5Wlc1MElEMGdiMlptYzJWMFVHRnlaVzUwTG05bVpuTmxkRkJoY21WdWREdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5bVpuTmxkRkJoY21WdWRDQjhmQ0JrYjJOMWJXVnVkRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZwbGNIUnZJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGJHVnRJRDBnZEdocGMxc3dYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRkJoY21WdWRDQTlJRzltWm5ObGRGQmhjbVZ1ZEM1aGNIQnNlU2hsYkdWdEtTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRDQTlJSFJvYVhNdWIyWm1jMlYwS0Nrc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWEpsYm5SUFptWnpaWFFnUFNBdlhpZy9PbUp2WkhsOGFIUnRiQ2trTDJrdWRHVnpkQ2h2Wm1aelpYUlFZWEpsYm5RdWJtOWtaVTVoYldVcElEOGdleUIwYjNBNklEQXNJR3hsWm5RNklEQWdmU0E2SUNRb2IyWm1jMlYwVUdGeVpXNTBLUzV2Wm1aelpYUW9LVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRzltWm5ObGRDNTBiM0FnTFQwZ2NHRnljMlZHYkc5aGRDaGxiR1Z0TG5OMGVXeGxMbTFoY21kcGJsUnZjQ2tnZkh3Z01EdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwTG14bFpuUWdMVDBnY0dGeWMyVkdiRzloZENobGJHVnRMbk4wZVd4bExtMWhjbWRwYmt4bFpuUXBJSHg4SURBN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzltWm5ObGRGQmhjbVZ1ZEM1emRIbHNaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnlaVzUwVDJabWMyVjBMblJ2Y0NBclBTQndZWEp6WlVac2IyRjBLRzltWm5ObGRGQmhjbVZ1ZEM1emRIbHNaUzVpYjNKa1pYSlViM0JYYVdSMGFDa2dmSHdnTUZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRnlaVzUwVDJabWMyVjBMbXhsWm5RZ0t6MGdjR0Z5YzJWR2JHOWhkQ2h2Wm1aelpYUlFZWEpsYm5RdWMzUjViR1V1WW05eVpHVnlUR1ZtZEZkcFpIUm9LU0I4ZkNBd1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOXdPaUJ2Wm1aelpYUXVkRzl3SUMwZ2NHRnlaVzUwVDJabWMyVjBMblJ2Y0N4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxablE2SUc5bVpuTmxkQzVzWldaMElDMGdjR0Z5Wlc1MFQyWm1jMlYwTG14bFpuUmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0I5TzF4dVhHNWNkQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnVUhKcGRtRjBaU0JXWVhKcFlXSnNaWE5jYmx4MElDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDOHFJRVp2Y2lBa0xtUmhkR0VvS1NBcUwxeHVYSFFnSUNBZ2RtRnlJR05oWTJobElEMGdlMzA3WEc1Y2RDQWdJQ0FrTG1WNGNHRnVaRzhnUFNCY0luWmxiRzlqYVhSNVhDSWdLeUFvYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NrcE8xeHVYSFFnSUNBZ0pDNTFkV2xrSUQwZ01EdGNibHh1WEhRZ0lDQWdMeW9nUm05eUlDUXVjWFZsZFdVb0tTQXFMMXh1WEhRZ0lDQWdkbUZ5SUdOc1lYTnpNblI1Y0dVZ1BTQjdmU3hjYmx4MElDQWdJQ0FnSUNCb1lYTlBkMjRnUFNCamJHRnpjekowZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TEZ4dVhIUWdJQ0FnSUNBZ0lIUnZVM1J5YVc1bklEMGdZMnhoYzNNeWRIbHdaUzUwYjFOMGNtbHVaenRjYmx4dVhIUWdJQ0FnZG1GeUlIUjVjR1Z6SUQwZ1hDSkNiMjlzWldGdUlFNTFiV0psY2lCVGRISnBibWNnUm5WdVkzUnBiMjRnUVhKeVlYa2dSR0YwWlNCU1pXZEZlSEFnVDJKcVpXTjBJRVZ5Y205eVhDSXVjM0JzYVhRb1hDSWdYQ0lwTzF4dVhIUWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMGVYQmxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVYSFFnSUNBZ0lDQWdJR05zWVhOek1uUjVjR1ZiWENKYmIySnFaV04wSUZ3aUlDc2dkSGx3WlhOYmFWMGdLeUJjSWwxY0lsMGdQU0IwZVhCbGMxdHBYUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVYSFFnSUNBZ2ZWeHVYRzVjZENBZ0lDQXZLaUJOWVd0bGN5QWtLRzV2WkdVcElIQnZjM05wWW14bExDQjNhWFJvYjNWMElHaGhkbWx1WnlCMGJ5QmpZV3hzSUdsdWFYUXVJQ292WEc1Y2RDQWdJQ0FrTG1adUxtbHVhWFF1Y0hKdmRHOTBlWEJsSUQwZ0pDNW1ianRjYmx4dVhIUWdJQ0FnTHlvZ1IyeHZZbUZzYVhwbElGWmxiRzlqYVhSNUlHOXVkRzhnZEdobElIZHBibVJ2ZHl3Z1lXNWtJR0Z6YzJsbmJpQnBkSE1nVlhScGJHbDBhV1Z6SUhCeWIzQmxjblI1TGlBcUwxeHVYSFFnSUNBZ2QybHVaRzkzTGxabGJHOWphWFI1SUQwZ2V5QlZkR2xzYVhScFpYTTZJQ1FnZlR0Y2JseDBmU2tvZDJsdVpHOTNLVHRjYmx4dVhIUXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQldaV3h2WTJsMGVTNXFjMXh1WEhRcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwT3lobWRXNWpkR2x2YmlBb1ptRmpkRzl5ZVNrZ2UxeHVYSFFnSUNBZ0x5b2dRMjl0Ylc5dVNsTWdiVzlrZFd4bExpQXFMMXh1WEhRZ0lDQWdhV1lnS0hSNWNHVnZaaUJ0YjJSMWJHVWdQVDA5SUZ3aWIySnFaV04wWENJZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwOVBTQmNJbTlpYW1WamRGd2lLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbVlXTjBiM0o1S0NrN1hHNWNkQ0FnSUNBdktpQkJUVVFnYlc5a2RXeGxMaUFxTDF4dVhIUWdJQ0FnZlNCbGJITmxJR2xtSUNoMGNuVmxLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lTaGZYMWRGUWxCQlEwdGZRVTFFWDBSRlJrbE9SVjlHUVVOVVQxSlpYMThnUFNBb1ptRmpkRzl5ZVNrc0lGOWZWMFZDVUVGRFMxOUJUVVJmUkVWR1NVNUZYMUpGVTFWTVZGOWZJRDBnS0hSNWNHVnZaaUJmWDFkRlFsQkJRMHRmUVUxRVgwUkZSa2xPUlY5R1FVTlVUMUpaWDE4Z1BUMDlJQ2RtZFc1amRHbHZiaWNnUHlBb1gxOVhSVUpRUVVOTFgwRk5SRjlFUlVaSlRrVmZSa0ZEVkU5U1dWOWZMbU5oYkd3b1pYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5d2daWGh3YjNKMGN5d2diVzlrZFd4bEtTa2dPaUJmWDFkRlFsQkJRMHRmUVUxRVgwUkZSa2xPUlY5R1FVTlVUMUpaWDE4cExDQmZYMWRGUWxCQlEwdGZRVTFFWDBSRlJrbE9SVjlTUlZOVlRGUmZYeUFoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JQ2h0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlCVFVSZlJFVkdTVTVGWDFKRlUxVk1WRjlmS1NrN1hHNWNkQ0FnSUNBdktpQkNjbTkzYzJWeUlHZHNiMkpoYkhNdUlDb3ZYRzVjZENBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJR1poWTNSdmNua29LVHRjYmx4MElDQWdJSDFjYmx4MGZTaG1kVzVqZEdsdmJpZ3BJSHRjYmx4MGNtVjBkWEp1SUdaMWJtTjBhVzl1SUNobmJHOWlZV3dzSUhkcGJtUnZkeXdnWkc5amRXMWxiblFzSUhWdVpHVm1hVzVsWkNrZ2UxeHVYRzVjZENBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdVM1Z0YldGeWVWeHVYSFFnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBdktseHVYSFFnSUNBZ0xTQkRVMU02SUVOVFV5QnpkR0ZqYXlCMGFHRjBJSGR2Y210eklHbHVaR1Z3Wlc1a1pXNTBiSGtnWm5KdmJTQjBhR1VnY21WemRDQnZaaUJXWld4dlkybDBlUzVjYmx4MElDQWdJQzBnWVc1cGJXRjBaU2dwT2lCRGIzSmxJR0Z1YVcxaGRHbHZiaUJ0WlhSb2IyUWdkR2hoZENCcGRHVnlZWFJsY3lCdmRtVnlJSFJvWlNCMFlYSm5aWFJsWkNCbGJHVnRaVzUwY3lCaGJtUWdjWFZsZFdWeklIUm9aU0JwYm1OdmJXbHVaeUJqWVd4c0lHOXVkRzhnWldGamFDQmxiR1Z0Wlc1MElHbHVaR2wyYVdSMVlXeHNlUzVjYmx4MElDQWdJQ0FnTFNCUWNtVXRVWFZsZFdWcGJtYzZJRkJ5WlhCaGNtVWdkR2hsSUdWc1pXMWxiblFnWm05eUlHRnVhVzFoZEdsdmJpQmllU0JwYm5OMFlXNTBhV0YwYVc1bklHbDBjeUJrWVhSaElHTmhZMmhsSUdGdVpDQndjbTlqWlhOemFXNW5JSFJvWlNCallXeHNKM01nYjNCMGFXOXVjeTVjYmx4MElDQWdJQ0FnTFNCUmRXVjFaV2x1WnpvZ1ZHaGxJR3h2WjJsaklIUm9ZWFFnY25WdWN5QnZibU5sSUhSb1pTQmpZV3hzSUdoaGN5QnlaV0ZqYUdWa0lHbDBjeUJ3YjJsdWRDQnZaaUJsZUdWamRYUnBiMjRnYVc0Z2RHaGxJR1ZzWlcxbGJuUW5jeUFrTG5GMVpYVmxLQ2tnYzNSaFkyc3VYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUUxdmMzUWdiRzluYVdNZ2FYTWdjR3hoWTJWa0lHaGxjbVVnZEc4Z1lYWnZhV1FnY21semEybHVaeUJwZENCaVpXTnZiV2x1WnlCemRHRnNaU0FvYVdZZ2RHaGxJR1ZzWlcxbGJuUW5jeUJ3Y205d1pYSjBhV1Z6SUdoaGRtVWdZMmhoYm1kbFpDa3VYRzVjZENBZ0lDQWdJQzBnVUhWemFHbHVaem9nUTI5dWMyOXNhV1JoZEdsdmJpQnZaaUIwYUdVZ2RIZGxaVzRnWkdGMFlTQm1iMnhzYjNkbFpDQmllU0JwZEhNZ2NIVnphQ0J2Ym5SdklIUm9aU0JuYkc5aVlXd2dhVzR0Y0hKdlozSmxjM01nWTJGc2JITWdZMjl1ZEdGcGJtVnlMbHh1WEhRZ0lDQWdMU0IwYVdOcktDazZJRlJvWlNCemFXNW5iR1VnY21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElHeHZiM0FnY21WemNHOXVjMmxpYkdVZ1ptOXlJSFIzWldWdWFXNW5JR0ZzYkNCcGJpMXdjbTluY21WemN5QmpZV3hzY3k1Y2JseDBJQ0FnSUMwZ1kyOXRjR3hsZEdWRFlXeHNLQ2s2SUVoaGJtUnNaWE1nZEdobElHTnNaV0Z1ZFhBZ2NISnZZMlZ6Y3lCbWIzSWdaV0ZqYUNCV1pXeHZZMmwwZVNCallXeHNMbHh1WEhRZ0lDQWdLaTljYmx4dVhIUWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdTR1ZzY0dWeUlFWjFibU4wYVc5dWMxeHVYSFFnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0F2S2lCSlJTQmtaWFJsWTNScGIyNHVJRWRwYzNRNklHaDBkSEJ6T2k4dloybHpkQzVuYVhSb2RXSXVZMjl0TDJwMWJHbGhibk5vWVhCcGNtOHZPVEE1T0RZd09TQXFMMXh1WEhRZ0lDQWdkbUZ5SUVsRklEMGdLR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lHbG1JQ2hrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRTF2WkdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwVFc5a1pUdGNibHgwSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTnpzZ2FTQStJRFE3SUdrdExTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUnBkaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0prYVhaY0lpazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGRpNXBibTVsY2toVVRVd2dQU0JjSWp3aExTMWJhV1lnU1VVZ1hDSWdLeUJwSUNzZ1hDSmRQanh6Y0dGdVBqd3ZjM0JoYmo0OElWdGxibVJwWmwwdExUNWNJanRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JwZGk1blpYUkZiR1Z0Wlc1MGMwSjVWR0ZuVG1GdFpTaGNJbk53WVc1Y0lpa3ViR1Z1WjNSb0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbDJJRDBnYm5Wc2JEdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIVnVaR1ZtYVc1bFpEdGNibHgwSUNBZ0lIMHBLQ2s3WEc1Y2JseDBJQ0FnSUM4cUlISkJSaUJ6YUdsdExpQkhhWE4wT2lCb2RIUndjem92TDJkcGMzUXVaMmwwYUhWaUxtTnZiUzlxZFd4cFlXNXphR0Z3YVhKdkx6azBPVGMxTVRNZ0tpOWNibHgwSUNBZ0lIWmhjaUJ5UVVaVGFHbHRJRDBnS0daMWJtTjBhVzl1S0NrZ2UxeHVYSFFnSUNBZ0lDQWdJSFpoY2lCMGFXMWxUR0Z6ZENBOUlEQTdYRzVjYmx4MElDQWdJQ0FnSUNCeVpYUjFjbTRnZDJsdVpHOTNMbmRsWW10cGRGSmxjWFZsYzNSQmJtbHRZWFJwYjI1R2NtRnRaU0I4ZkNCM2FXNWtiM2N1Ylc5NlVtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxJSHg4SUdaMWJtTjBhVzl1S0dOaGJHeGlZV05yS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBhVzFsUTNWeWNtVnVkQ0E5SUNodVpYY2dSR0YwWlNncEtTNW5aWFJVYVcxbEtDa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbFJHVnNkR0U3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1JIbHVZVzFwWTJGc2JIa2djMlYwSUdSbGJHRjVJRzl1SUdFZ2NHVnlMWFJwWTJzZ1ltRnphWE1nZEc4Z2JXRjBZMmdnTmpCbWNITXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZSbFkyaHVhWEYxWlNCaWVTQkZjbWxySUUxdmJHeGxjaTRnVFVsVUlHeHBZMlZ1YzJVNklHaDBkSEJ6T2k4dloybHpkQzVuYVhSb2RXSXVZMjl0TDNCaGRXeHBjbWx6YUM4eE5UYzVOamN4SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhScGJXVkVaV3gwWVNBOUlFMWhkR2d1YldGNEtEQXNJREUySUMwZ0tIUnBiV1ZEZFhKeVpXNTBJQzBnZEdsdFpVeGhjM1FwS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEdsdFpVeGhjM1FnUFNCMGFXMWxRM1Z5Y21WdWRDQXJJSFJwYldWRVpXeDBZVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaWdwSUhzZ1kyRnNiR0poWTJzb2RHbHRaVU4xY25KbGJuUWdLeUIwYVcxbFJHVnNkR0VwT3lCOUxDQjBhVzFsUkdWc2RHRXBPMXh1WEhRZ0lDQWdJQ0FnSUgwN1hHNWNkQ0FnSUNCOUtTZ3BPMXh1WEc1Y2RDQWdJQ0F2S2lCQmNuSmhlU0JqYjIxd1lXTjBhVzVuTGlCRGIzQjVjbWxuYUhRZ1RHOHRSR0Z6YUM0Z1RVbFVJRXhwWTJWdWMyVTZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlzYjJSaGMyZ3ZiRzlrWVhOb0wySnNiMkl2YldGemRHVnlMMHhKUTBWT1UwVXVkSGgwSUNvdlhHNWNkQ0FnSUNCbWRXNWpkR2x2YmlCamIyMXdZV04wVTNCaGNuTmxRWEp5WVhrZ0tHRnljbUY1S1NCN1hHNWNkQ0FnSUNBZ0lDQWdkbUZ5SUdsdVpHVjRJRDBnTFRFc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUd4bGJtZDBhQ0E5SUdGeWNtRjVJRDhnWVhKeVlYa3ViR1Z1WjNSb0lEb2dNQ3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdXMTA3WEc1Y2JseDBJQ0FnSUNBZ0lDQjNhR2xzWlNBb0t5dHBibVJsZUNBOElHeGxibWQwYUNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQmhjbkpoZVZ0cGJtUmxlRjA3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWNIVnphQ2gyWVd4MVpTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dVhIUWdJQ0FnZlZ4dVhHNWNkQ0FnSUNCbWRXNWpkR2x2YmlCellXNXBkR2w2WlVWc1pXMWxiblJ6SUNobGJHVnRaVzUwY3lrZ2UxeHVYSFFnSUNBZ0lDQWdJQzhxSUZWdWQzSmhjQ0JxVVhWbGNua3ZXbVZ3ZEc4Z2IySnFaV04wY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0JwWmlBb1ZIbHdaUzVwYzFkeVlYQndaV1FvWld4bGJXVnVkSE1wS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblJ6SUQwZ1cxMHVjMnhwWTJVdVkyRnNiQ2hsYkdWdFpXNTBjeWs3WEc1Y2RDQWdJQ0FnSUNBZ0x5b2dWM0poY0NCaElITnBibWRzWlNCbGJHVnRaVzUwSUdsdUlHRnVJR0Z5Y21GNUlITnZJSFJvWVhRZ0pDNWxZV05vS0NrZ1kyRnVJR2wwWlhKaGRHVWdkMmwwYUNCMGFHVWdaV3hsYldWdWRDQnBibk4wWldGa0lHOW1JR2wwY3lCdWIyUmxKM01nWTJocGJHUnlaVzR1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hVZVhCbExtbHpUbTlrWlNobGJHVnRaVzUwY3lrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEhNZ1BTQmJJR1ZzWlcxbGJuUnpJRjA3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZzWlcxbGJuUnpPMXh1WEhRZ0lDQWdmVnh1WEc1Y2RDQWdJQ0IyWVhJZ1ZIbHdaU0E5SUh0Y2JseDBJQ0FnSUNBZ0lDQnBjMU4wY21sdVp6b2dablZ1WTNScGIyNGdLSFpoY21saFlteGxLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9kSGx3Wlc5bUlIWmhjbWxoWW14bElEMDlQU0JjSW5OMGNtbHVaMXdpS1R0Y2JseDBJQ0FnSUNBZ0lDQjlMRnh1WEhRZ0lDQWdJQ0FnSUdselFYSnlZWGs2SUVGeWNtRjVMbWx6UVhKeVlYa2dmSHdnWm5WdVkzUnBiMjRnS0haaGNtbGhZbXhsS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2RtRnlhV0ZpYkdVcElEMDlQU0JjSWx0dlltcGxZM1FnUVhKeVlYbGRYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ2ZTeGNibHgwSUNBZ0lDQWdJQ0JwYzBaMWJtTjBhVzl1T2lCbWRXNWpkR2x2YmlBb2RtRnlhV0ZpYkdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaDJZWEpwWVdKc1pTa2dQVDA5SUZ3aVcyOWlhbVZqZENCR2RXNWpkR2x2YmwxY0lqdGNibHgwSUNBZ0lDQWdJQ0I5TEZ4dVhIUWdJQ0FnSUNBZ0lHbHpUbTlrWlRvZ1puVnVZM1JwYjI0Z0tIWmhjbWxoWW14bEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllYSnBZV0pzWlNBbUppQjJZWEpwWVdKc1pTNXViMlJsVkhsd1pUdGNibHgwSUNBZ0lDQWdJQ0I5TEZ4dVhIUWdJQ0FnSUNBZ0lDOHFJRU52Y0hseWFXZG9kQ0JOWVhKMGFXNGdRbTlvYlM0Z1RVbFVJRXhwWTJWdWMyVTZJR2gwZEhCek9pOHZaMmx6ZEM1bmFYUm9kV0l1WTI5dEwxUnZiV0ZzWVdzdk9ERTRZVGM0WVRJeU5tRXdOek00WldGaFpHVWdLaTljYmx4MElDQWdJQ0FnSUNCcGMwNXZaR1ZNYVhOME9pQm1kVzVqZEdsdmJpQW9kbUZ5YVdGaWJHVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCMllYSnBZV0pzWlNBOVBUMGdYQ0p2WW1wbFkzUmNJaUFtSmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0wxNWNYRnR2WW1wbFkzUWdLRWhVVFV4RGIyeHNaV04wYVc5dWZFNXZaR1ZNYVhOMGZFOWlhbVZqZENsY1hGMGtMeTUwWlhOMEtFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyWVhKcFlXSnNaU2twSUNZbVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWEpwWVdKc1pTNXNaVzVuZEdnZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIWmhjbWxoWW14bExteGxibWQwYUNBOVBUMGdNQ0I4ZkNBb2RIbHdaVzltSUhaaGNtbGhZbXhsV3pCZElEMDlQU0JjSW05aWFtVmpkRndpSUNZbUlIWmhjbWxoWW14bFd6QmRMbTV2WkdWVWVYQmxJRDRnTUNrcE8xeHVYSFFnSUNBZ0lDQWdJSDBzWEc1Y2RDQWdJQ0FnSUNBZ0x5b2dSR1YwWlhKdGFXNWxJR2xtSUhaaGNtbGhZbXhsSUdseklHRWdkM0poY0hCbFpDQnFVWFZsY25rZ2IzSWdXbVZ3ZEc4Z1pXeGxiV1Z1ZEM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0JwYzFkeVlYQndaV1E2SUdaMWJtTjBhVzl1SUNoMllYSnBZV0pzWlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1GeWFXRmliR1VnSmlZZ0tIWmhjbWxoWW14bExtcHhkV1Z5ZVNCOGZDQW9kMmx1Wkc5M0xscGxjSFJ2SUNZbUlIZHBibVJ2ZHk1YVpYQjBieTU2WlhCMGJ5NXBjMW9vZG1GeWFXRmliR1VwS1NrN1hHNWNkQ0FnSUNBZ0lDQWdmU3hjYmx4MElDQWdJQ0FnSUNCcGMxTldSem9nWm5WdVkzUnBiMjRnS0haaGNtbGhZbXhsS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIzYVc1a2IzY3VVMVpIUld4bGJXVnVkQ0FtSmlBb2RtRnlhV0ZpYkdVZ2FXNXpkR0Z1WTJWdlppQjNhVzVrYjNjdVUxWkhSV3hsYldWdWRDazdYRzVjZENBZ0lDQWdJQ0FnZlN4Y2JseDBJQ0FnSUNBZ0lDQnBjMFZ0Y0hSNVQySnFaV04wT2lCbWRXNWpkR2x2YmlBb2RtRnlhV0ZpYkdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2JtRnRaU0JwYmlCMllYSnBZV0pzWlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNkQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdmVHRjYmx4dVhIUWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNCRVpYQmxibVJsYm1OcFpYTmNibHgwSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQjJZWElnSkN4Y2JseDBJQ0FnSUNBZ0lDQnBjMHBSZFdWeWVTQTlJR1poYkhObE8xeHVYRzVjZENBZ0lDQnBaaUFvWjJ4dlltRnNMbVp1SUNZbUlHZHNiMkpoYkM1bWJpNXFjWFZsY25rcElIdGNibHgwSUNBZ0lDQWdJQ0FrSUQwZ1oyeHZZbUZzTzF4dVhIUWdJQ0FnSUNBZ0lHbHpTbEYxWlhKNUlEMGdkSEoxWlR0Y2JseDBJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0pDQTlJSGRwYm1SdmR5NVdaV3h2WTJsMGVTNVZkR2xzYVhScFpYTTdYRzVjZENBZ0lDQjlYRzVjYmx4MElDQWdJR2xtSUNoSlJTQThQU0E0SUNZbUlDRnBjMHBSZFdWeWVTa2dlMXh1WEhRZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxabGJHOWphWFI1T2lCSlJUZ2dZVzVrSUdKbGJHOTNJSEpsY1hWcGNtVWdhbEYxWlhKNUlIUnZJR0psSUd4dllXUmxaQ0JpWldadmNtVWdWbVZzYjJOcGRIa3VYQ0lwTzF4dVhIUWdJQ0FnZlNCbGJITmxJR2xtSUNoSlJTQThQU0EzS1NCN1hHNWNkQ0FnSUNBZ0lDQWdMeW9nVW1WMlpYSjBJSFJ2SUdwUmRXVnllU2R6SUNRdVlXNXBiV0YwWlNncExDQmhibVFnYkc5elpTQldaV3h2WTJsMGVTZHpJR1Y0ZEhKaElHWmxZWFIxY21WekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUdwUmRXVnllUzVtYmk1MlpXeHZZMmwwZVNBOUlHcFJkV1Z5ZVM1bWJpNWhibWx0WVhSbE8xeHVYRzVjZENBZ0lDQWdJQ0FnTHlvZ1RtOTNJSFJvWVhRZ0pDNW1iaTUyWld4dlkybDBlU0JwY3lCaGJHbGhjMlZrTENCaFltOXlkQ0IwYUdseklGWmxiRzlqYVhSNUlHUmxZMnhoY21GMGFXOXVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JseDBJQ0FnSUgxY2JseHVYSFFnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdRMjl1YzNSaGJuUnpYRzVjZENBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdkbUZ5SUVSVlVrRlVTVTlPWDBSRlJrRlZURlFnUFNBME1EQXNYRzVjZENBZ0lDQWdJQ0FnUlVGVFNVNUhYMFJGUmtGVlRGUWdQU0JjSW5OM2FXNW5YQ0k3WEc1Y2JseDBJQ0FnSUM4cUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnVTNSaGRHVmNibHgwSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUhaaGNpQldaV3h2WTJsMGVTQTlJSHRjYmx4MElDQWdJQ0FnSUNBdktpQkRiMjUwWVdsdVpYSWdabTl5SUhCaFoyVXRkMmxrWlNCV1pXeHZZMmwwZVNCemRHRjBaU0JrWVhSaExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUZOMFlYUmxPaUI3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVSbGRHVmpkQ0J0YjJKcGJHVWdaR1YyYVdObGN5QjBieUJrWlhSbGNtMXBibVVnYVdZZ2JXOWlhV3hsU0VFZ2MyaHZkV3hrSUdKbElIUjFjbTVsWkNCdmJpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdhWE5OYjJKcGJHVTZJQzlCYm1SeWIybGtmSGRsWWs5VGZHbFFhRzl1Wlh4cFVHRmtmR2xRYjJSOFFteGhZMnRDWlhKeWVYeEpSVTF2WW1sc1pYeFBjR1Z5WVNCTmFXNXBMMmt1ZEdWemRDaHVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBLU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nVkdobElHMXZZbWxzWlVoQklHOXdkR2x2YmlkeklHSmxhR0YyYVc5eUlHTm9ZVzVuWlhNZ2IyNGdiMnhrWlhJZ1FXNWtjbTlwWkNCa1pYWnBZMlZ6SUNoSGFXNW5aWEppY21WaFpDd2dkbVZ5YzJsdmJuTWdNaTR6TGpNdE1pNHpMamNwTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCcGMwRnVaSEp2YVdRNklDOUJibVJ5YjJsa0wya3VkR1Z6ZENodVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MEtTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2FYTkhhVzVuWlhKaWNtVmhaRG9nTDBGdVpISnZhV1FnTWx4Y0xqTmNYQzViTXkwM1hTOXBMblJsYzNRb2JtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbHpRMmh5YjIxbE9pQjNhVzVrYjNjdVkyaHliMjFsTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JwYzBacGNtVm1iM2c2SUM5R2FYSmxabTk0TDJrdWRHVnpkQ2h1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwS1N4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1EzSmxZWFJsSUdFZ1kyRmphR1ZrSUdWc1pXMWxiblFnWm05eUlISmxMWFZ6WlNCM2FHVnVJR05vWldOcmFXNW5JR1p2Y2lCRFUxTWdjSEp2Y0dWeWRIa2djSEpsWm1sNFpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldacGVFVnNaVzFsYm5RNklHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKa2FYWmNJaWtzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVOaFkyaGxJR1YyWlhKNUlIQnlaV1pwZUNCdFlYUmphQ0IwYnlCaGRtOXBaQ0J5WlhCbFlYUnBibWNnYkc5dmEzVndjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnY0hKbFptbDRUV0YwWTJobGN6b2dlMzBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVOaFkyaGxJSFJvWlNCaGJtTm9iM0lnZFhObFpDQm1iM0lnWVc1cGJXRjBhVzVuSUhkcGJtUnZkeUJ6WTNKdmJHeHBibWN1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhOamNtOXNiRUZ1WTJodmNqb2diblZzYkN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1EyRmphR1VnZEdobElHSnliM2R6WlhJdGMzQmxZMmxtYVdNZ2NISnZjR1Z5ZEhrZ2JtRnRaWE1nWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvWlNCelkzSnZiR3dnWVc1amFHOXlMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J6WTNKdmJHeFFjbTl3WlhKMGVVeGxablE2SUc1MWJHd3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lITmpjbTlzYkZCeWIzQmxjblI1Vkc5d09pQnVkV3hzTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCTFpXVndJSFJ5WVdOcklHOW1JSGRvWlhSb1pYSWdiM1Z5SUZKQlJpQjBhV05ySUdseklISjFibTVwYm1jdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbHpWR2xqYTJsdVp6b2dabUZzYzJVc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFTnZiblJoYVc1bGNpQm1iM0lnWlhabGNua2dhVzR0Y0hKdlozSmxjM01nWTJGc2JDQjBieUJXWld4dlkybDBlUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JITTZJRnRkWEc1Y2RDQWdJQ0FnSUNBZ2ZTeGNibHgwSUNBZ0lDQWdJQ0F2S2lCV1pXeHZZMmwwZVNkeklHTjFjM1J2YlNCRFUxTWdjM1JoWTJzdUlFMWhaR1VnWjJ4dlltRnNJR1p2Y2lCMWJtbDBJSFJsYzNScGJtY3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ1ExTlRPaUI3SUM4cUlFUmxabWx1WldRZ1ltVnNiM2N1SUNvdklIMHNYRzVjZENBZ0lDQWdJQ0FnTHlvZ1FTQnphR2x0SUc5bUlIUm9aU0JxVVhWbGNua2dkWFJwYkdsMGVTQm1kVzVqZEdsdmJuTWdkWE5sWkNCaWVTQldaV3h2WTJsMGVTQXRMU0J3Y205MmFXUmxaQ0JpZVNCV1pXeHZZMmwwZVNkeklHOXdkR2x2Ym1Gc0lHcFJkV1Z5ZVNCemFHbHRMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lGVjBhV3hwZEdsbGN6b2dKQ3hjYmx4MElDQWdJQ0FnSUNBdktpQkRiMjUwWVdsdVpYSWdabTl5SUhSb1pTQjFjMlZ5SjNNZ1kzVnpkRzl0SUdGdWFXMWhkR2x2YmlCeVpXUnBjbVZqZEhNZ2RHaGhkQ0JoY21VZ2NtVm1aWEpsYm1ObFpDQmllU0J1WVcxbElHbHVJSEJzWVdObElHOW1JSFJvWlNCd2NtOXdaWEowYVdWeklHMWhjQ0JoY21kMWJXVnVkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQlNaV1JwY21WamRITTZJSHNnTHlvZ1RXRnVkV0ZzYkhrZ2NtVm5hWE4wWlhKbFpDQmllU0IwYUdVZ2RYTmxjaTRnS2k4Z2ZTeGNibHgwSUNBZ0lDQWdJQ0JGWVhOcGJtZHpPaUI3SUM4cUlFUmxabWx1WldRZ1ltVnNiM2N1SUNvdklIMHNYRzVjZENBZ0lDQWdJQ0FnTHlvZ1FYUjBaVzF3ZENCMGJ5QjFjMlVnUlZNMklGQnliMjFwYzJWeklHSjVJR1JsWm1GMWJIUXVJRlZ6WlhKeklHTmhiaUJ2ZG1WeWNtbGtaU0IwYUdseklIZHBkR2dnWVNCMGFHbHlaQzF3WVhKMGVTQndjbTl0YVhObGN5QnNhV0p5WVhKNUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUZCeWIyMXBjMlU2SUhkcGJtUnZkeTVRY205dGFYTmxMRnh1WEhRZ0lDQWdJQ0FnSUM4cUlGWmxiRzlqYVhSNUlHOXdkR2x2YmlCa1pXWmhkV3gwY3l3Z2QyaHBZMmdnWTJGdUlHSmxJRzkyWlhKeWFXUmxiaUJpZVNCMGFHVWdkWE5sY2k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0JrWldaaGRXeDBjem9nZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J4ZFdWMVpUb2dYQ0pjSWl4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWkhWeVlYUnBiMjQ2SUVSVlVrRlVTVTlPWDBSRlJrRlZURlFzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVp6b2dSVUZUU1U1SFgwUkZSa0ZWVEZRc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdKbFoybHVPaUIxYm1SbFptbHVaV1FzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR052YlhCc1pYUmxPaUIxYm1SbFptbHVaV1FzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjJkeVpYTnpPaUIxYm1SbFptbHVaV1FzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazZJSFZ1WkdWbWFXNWxaQ3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkbWx6YVdKcGJHbDBlVG9nZFc1a1pXWnBibVZrTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JzYjI5d09pQm1ZV3h6WlN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1lYazZJR1poYkhObExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCdGIySnBiR1ZJUVRvZ2RISjFaU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nUVdSMllXNWpaV1E2SUZObGRDQjBieUJtWVd4elpTQjBieUJ3Y21WMlpXNTBJSEJ5YjNCbGNuUjVJSFpoYkhWbGN5Qm1jbTl0SUdKbGFXNW5JR05oWTJobFpDQmlaWFIzWldWdUlHTnZibk5sWTNWMGFYWmxJRlpsYkc5amFYUjVMV2x1YVhScFlYUmxaQ0JqYUdGcGJpQmpZV3hzY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1gyTmhZMmhsVm1Gc2RXVnpPaUIwY25WbFhHNWNkQ0FnSUNBZ0lDQWdmU3hjYmx4MElDQWdJQ0FnSUNBdktpQkJJR1JsYzJsbmJpQm5iMkZzSUc5bUlGWmxiRzlqYVhSNUlHbHpJSFJ2SUdOaFkyaGxJR1JoZEdFZ2QyaGxjbVYyWlhJZ2NHOXpjMmxpYkdVZ2FXNGdiM0prWlhJZ2RHOGdZWFp2YVdRZ1JFOU5JSEpsY1hWbGNubHBibWN1SUVGalkyOXlaR2x1WjJ4NUxDQmxZV05vSUdWc1pXMWxiblFnYUdGeklHRWdaR0YwWVNCallXTm9aUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQnBibWwwT2lCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZENrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBa0xtUmhkR0VvWld4bGJXVnVkQ3dnWENKMlpXeHZZMmwwZVZ3aUxDQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVGRHOXlaU0IzYUdWMGFHVnlJSFJvYVhNZ2FYTWdZVzRnVTFaSElHVnNaVzFsYm5Rc0lITnBibU5sSUdsMGN5QndjbTl3WlhKMGFXVnpJR0Z5WlNCeVpYUnlhV1YyWldRZ1lXNWtJSFZ3WkdGMFpXUWdaR2xtWm1WeVpXNTBiSGtnZEdoaGJpQnpkR0Z1WkdGeVpDQklWRTFNSUdWc1pXMWxiblJ6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5UVmtjNklGUjVjR1V1YVhOVFZrY29aV3hsYldWdWRDa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCTFpXVndJSFJ5WVdOcklHOW1JSGRvWlhSb1pYSWdkR2hsSUdWc1pXMWxiblFnYVhNZ1kzVnljbVZ1ZEd4NUlHSmxhVzVuSUdGdWFXMWhkR1ZrSUdKNUlGWmxiRzlqYVhSNUxseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVkdocGN5QnBjeUIxYzJWa0lIUnZJR1Z1YzNWeVpTQjBhR0YwSUhCeWIzQmxjblI1SUhaaGJIVmxjeUJoY21VZ2JtOTBJSFJ5WVc1elptVnljbVZrSUdKbGRIZGxaVzRnYm05dUxXTnZibk5sWTNWMGFYWmxJQ2h6ZEdGc1pTa2dZMkZzYkhNdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzBGdWFXMWhkR2x1WnpvZ1ptRnNjMlVzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkJJSEpsWm1WeVpXNWpaU0IwYnlCMGFHVWdaV3hsYldWdWRDZHpJR3hwZG1VZ1kyOXRjSFYwWldSVGRIbHNaU0J2WW1wbFkzUXVJRXhsWVhKdUlHMXZjbVVnYUdWeVpUb2dhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXViVzk2YVd4c1lTNXZjbWN2Wlc0dlpHOWpjeTlYWldJdlFWQkpMM2RwYm1SdmR5NW5aWFJEYjIxd2RYUmxaRk4wZVd4bElDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjIxd2RYUmxaRk4wZVd4bE9pQnVkV3hzTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dWSGRsWlc0Z1pHRjBZU0JwY3lCallXTm9aV1FnWm05eUlHVmhZMmdnWVc1cGJXRjBhVzl1SUc5dUlIUm9aU0JsYkdWdFpXNTBJSE52SUhSb1lYUWdaR0YwWVNCallXNGdZbVVnY0dGemMyVmtJR0ZqY205emN5QmpZV3hzY3lBdExWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc0Z2NHRnlkR2xqZFd4aGNpd2daVzVrSUhaaGJIVmxjeUJoY21VZ2RYTmxaQ0JoY3lCemRXSnpaWEYxWlc1MElITjBZWEowSUhaaGJIVmxjeUJwYmlCamIyNXpaV04xZEdsMlpTQldaV3h2WTJsMGVTQmpZV3hzY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFIzWldWdWMwTnZiblJoYVc1bGNqb2diblZzYkN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRlJvWlNCbWRXeHNJSEp2YjNRZ2NISnZjR1Z5ZEhrZ2RtRnNkV1Z6SUc5bUlHVmhZMmdnUTFOVElHaHZiMnNnWW1WcGJtY2dZVzVwYldGMFpXUWdiMjRnZEdocGN5QmxiR1Z0Wlc1MElHRnlaU0JqWVdOb1pXUWdjMjhnZEdoaGREcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURFcElFTnZibU4xY25KbGJuUnNlUzFoYm1sdFlYUnBibWNnYUc5dmEzTWdjMmhoY21sdVp5QjBhR1VnYzJGdFpTQnliMjkwSUdOaGJpQm9ZWFpsSUhSb1pXbHlJSEp2YjNRZ2RtRnNkV1Z6SnlCdFpYSm5aV1FnYVc1MGJ5QnZibVVnZDJocGJHVWdkSGRsWlc1cGJtY3VYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBeUtTQlFiM04wTFdodmIyc3RhVzVxWldOMGFXOXVJSEp2YjNRZ2RtRnNkV1Z6SUdOaGJpQmlaU0IwY21GdWMyWmxjbkpsWkNCdmRtVnlJSFJ2SUdOdmJuTmxZM1YwYVhabGJIa2dZMmhoYVc1bFpDQldaV3h2WTJsMGVTQmpZV3hzY3lCaGN5QnpkR0Z5ZEdsdVp5QnliMjkwSUhaaGJIVmxjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiM1JRY205d1pYSjBlVlpoYkhWbFEyRmphR1U2SUh0OUxGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUVNCallXTm9aU0JtYjNJZ2RISmhibk5tYjNKdElIVndaR0YwWlhNc0lIZG9hV05vSUcxMWMzUWdZbVVnYldGdWRXRnNiSGtnWm14MWMyaGxaQ0IyYVdFZ1ExTlRMbVpzZFhOb1ZISmhibk5tYjNKdFEyRmphR1VvS1M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1elptOXliVU5oWTJobE9pQjdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4MElDQWdJQ0FnSUNCOUxGeHVYSFFnSUNBZ0lDQWdJQzhxSUVFZ2NHRnlZV3hzWld3Z2RHOGdhbEYxWlhKNUozTWdKQzVqYzNNb0tTd2dkWE5sWkNCbWIzSWdaMlYwZEdsdVp5OXpaWFIwYVc1bklGWmxiRzlqYVhSNUozTWdhRzl2YTJWa0lFTlRVeUJ3Y205d1pYSjBhV1Z6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJR2h2YjJzNklHNTFiR3dzSUM4cUlFUmxabWx1WldRZ1ltVnNiM2N1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdMeW9nVm1Wc2IyTnBkSGt0ZDJsa1pTQmhibWx0WVhScGIyNGdkR2x0WlNCeVpXMWhjSEJwYm1jZ1ptOXlJSFJsYzNScGJtY2djSFZ5Y0c5elpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ2JXOWphem9nWm1Gc2MyVXNYRzVjZENBZ0lDQWdJQ0FnZG1WeWMybHZiam9nZXlCdFlXcHZjam9nTVN3Z2JXbHViM0k2SURJc0lIQmhkR05vT2lBeUlIMHNYRzVjZENBZ0lDQWdJQ0FnTHlvZ1UyVjBJSFJ2SURFZ2IzSWdNaUFvYlc5emRDQjJaWEppYjNObEtTQjBieUJ2ZFhSd2RYUWdaR1ZpZFdjZ2FXNW1ieUIwYnlCamIyNXpiMnhsTGlBcUwxeHVYSFFnSUNBZ0lDQWdJR1JsWW5Wbk9pQm1ZV3h6WlZ4dVhIUWdJQ0FnZlR0Y2JseHVYSFFnSUNBZ0x5b2dVbVYwY21sbGRtVWdkR2hsSUdGd2NISnZjSEpwWVhSbElITmpjbTlzYkNCaGJtTm9iM0lnWVc1a0lIQnliM0JsY25SNUlHNWhiV1VnWm05eUlIUm9aU0JpY205M2MyVnlPaUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlCVUVrdlYybHVaRzkzTG5OamNtOXNiRmtnS2k5Y2JseDBJQ0FnSUdsbUlDaDNhVzVrYjNjdWNHRm5aVmxQWm1aelpYUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFFnSUNBZ0lDQWdJRlpsYkc5amFYUjVMbE4wWVhSbExuTmpjbTlzYkVGdVkyaHZjaUE5SUhkcGJtUnZkenRjYmx4MElDQWdJQ0FnSUNCV1pXeHZZMmwwZVM1VGRHRjBaUzV6WTNKdmJHeFFjbTl3WlhKMGVVeGxablFnUFNCY0luQmhaMlZZVDJabWMyVjBYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ1ZtVnNiMk5wZEhrdVUzUmhkR1V1YzJOeWIyeHNVSEp2Y0dWeWRIbFViM0FnUFNCY0luQmhaMlZaVDJabWMyVjBYQ0k3WEc1Y2RDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUZabGJHOWphWFI1TGxOMFlYUmxMbk5qY205c2JFRnVZMmh2Y2lBOUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZENCOGZDQmtiMk4xYldWdWRDNWliMlI1TG5CaGNtVnVkRTV2WkdVZ2ZId2daRzlqZFcxbGJuUXVZbTlrZVR0Y2JseDBJQ0FnSUNBZ0lDQldaV3h2WTJsMGVTNVRkR0YwWlM1elkzSnZiR3hRY205d1pYSjBlVXhsWm5RZ1BTQmNJbk5qY205c2JFeGxablJjSWp0Y2JseDBJQ0FnSUNBZ0lDQldaV3h2WTJsMGVTNVRkR0YwWlM1elkzSnZiR3hRY205d1pYSjBlVlJ2Y0NBOUlGd2ljMk55YjJ4c1ZHOXdYQ0k3WEc1Y2RDQWdJQ0I5WEc1Y2JseDBJQ0FnSUM4cUlGTm9iM0owYUdGdVpDQmhiR2xoY3lCbWIzSWdhbEYxWlhKNUozTWdKQzVrWVhSaEtDa2dkWFJwYkdsMGVTNGdLaTljYmx4MElDQWdJR1oxYm1OMGFXOXVJRVJoZEdFZ0tHVnNaVzFsYm5RcElIdGNibHgwSUNBZ0lDQWdJQ0F2S2lCSVlYSmtZMjlrWlNCaElISmxabVZ5Wlc1alpTQjBieUIwYUdVZ2NHeDFaMmx1SUc1aGJXVXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ2RtRnlJSEpsYzNCdmJuTmxJRDBnSkM1a1lYUmhLR1ZzWlcxbGJuUXNJRndpZG1Wc2IyTnBkSGxjSWlrN1hHNWNibHgwSUNBZ0lDQWdJQ0F2S2lCcVVYVmxjbmtnUEQweExqUXVNaUJ5WlhSMWNtNXpJRzUxYkd3Z2FXNXpkR1ZoWkNCdlppQjFibVJsWm1sdVpXUWdkMmhsYmlCdWJ5QnRZWFJqYUNCcGN5Qm1iM1Z1WkM0Z1YyVWdibTl5YldGc2FYcGxJSFJvYVhNZ1ltVm9ZWFpwYjNJdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNCdmJuTmxJRDA5UFNCdWRXeHNJRDhnZFc1a1pXWnBibVZrSURvZ2NtVnpjRzl1YzJVN1hHNWNkQ0FnSUNCOU8xeHVYRzVjZENBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lwY2JseDBJQ0FnSUNBZ0lDQkZZWE5wYm1kY2JseDBJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0F2S2lCVGRHVndJR1ZoYzJsdVp5Qm5aVzVsY21GMGIzSXVJQ292WEc1Y2RDQWdJQ0JtZFc1amRHbHZiaUJuWlc1bGNtRjBaVk4wWlhBZ0tITjBaWEJ6S1NCN1hHNWNkQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDaHdLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG5KdmRXNWtLSEFnS2lCemRHVndjeWtnS2lBb01TQXZJSE4wWlhCektUdGNibHgwSUNBZ0lDQWdJQ0I5TzF4dVhIUWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBdktpQkNaWHBwWlhJZ1kzVnlkbVVnWm5WdVkzUnBiMjRnWjJWdVpYSmhkRzl5TGlCRGIzQjVjbWxuYUhRZ1IyRmxkR0Z1SUZKbGJtRjFaR1ZoZFM0Z1RVbFVJRXhwWTJWdWMyVTZJR2gwZEhBNkx5OWxiaTUzYVd0cGNHVmthV0V1YjNKbkwzZHBhMmt2VFVsVVgweHBZMlZ1YzJVZ0tpOWNibHgwSUNBZ0lHWjFibU4wYVc5dUlHZGxibVZ5WVhSbFFtVjZhV1Z5SUNodFdERXNJRzFaTVN3Z2JWZ3lMQ0J0V1RJcElIdGNibHgwSUNBZ0lDQWdJQ0IyWVhJZ1RrVlhWRTlPWDBsVVJWSkJWRWxQVGxNZ1BTQTBMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQk9SVmRVVDA1ZlRVbE9YMU5NVDFCRklEMGdNQzR3TURFc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUZOVlFrUkpWa2xUU1U5T1gxQlNSVU5KVTBsUFRpQTlJREF1TURBd01EQXdNU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdVMVZDUkVsV1NWTkpUMDVmVFVGWVgwbFVSVkpCVkVsUFRsTWdQU0F4TUN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYTFOd2JHbHVaVlJoWW14bFUybDZaU0E5SURFeExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCclUyRnRjR3hsVTNSbGNGTnBlbVVnUFNBeExqQWdMeUFvYTFOd2JHbHVaVlJoWW14bFUybDZaU0F0SURFdU1Da3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHWnNiMkYwTXpKQmNuSmhlVk4xY0hCdmNuUmxaQ0E5SUZ3aVJteHZZWFF6TWtGeWNtRjVYQ0lnYVc0Z2QybHVaRzkzTzF4dVhHNWNkQ0FnSUNBZ0lDQWdMeW9nVFhWemRDQmpiMjUwWVdsdUlHWnZkWElnWVhKbmRXMWxiblJ6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUNFOVBTQTBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBdktpQkJjbWQxYldWdWRITWdiWFZ6ZENCaVpTQnVkVzFpWlhKekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z05Ec2dLeXRwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1lYSm5kVzFsYm5SelcybGRJQ0U5UFNCY0ltNTFiV0psY2x3aUlIeDhJR2x6VG1GT0tHRnlaM1Z0Wlc1MGMxdHBYU2tnZkh3Z0lXbHpSbWx1YVhSbEtHRnlaM1Z0Wlc1MGMxdHBYU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQzhxSUZnZ2RtRnNkV1Z6SUcxMWMzUWdZbVVnYVc0Z2RHaGxJRnN3TENBeFhTQnlZVzVuWlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0J0V0RFZ1BTQk5ZWFJvTG0xcGJpaHRXREVzSURFcE8xeHVYSFFnSUNBZ0lDQWdJRzFZTWlBOUlFMWhkR2d1YldsdUtHMVlNaXdnTVNrN1hHNWNkQ0FnSUNBZ0lDQWdiVmd4SUQwZ1RXRjBhQzV0WVhnb2JWZ3hMQ0F3S1R0Y2JseDBJQ0FnSUNBZ0lDQnRXRElnUFNCTllYUm9MbTFoZUNodFdESXNJREFwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdkbUZ5SUcxVFlXMXdiR1ZXWVd4MVpYTWdQU0JtYkc5aGRETXlRWEp5WVhsVGRYQndiM0owWldRZ1B5QnVaWGNnUm14dllYUXpNa0Z5Y21GNUtHdFRjR3hwYm1WVVlXSnNaVk5wZW1VcElEb2dibVYzSUVGeWNtRjVLR3RUY0d4cGJtVlVZV0pzWlZOcGVtVXBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1FTQW9ZVUV4TENCaFFUSXBJSHNnY21WMGRYSnVJREV1TUNBdElETXVNQ0FxSUdGQk1pQXJJRE11TUNBcUlHRkJNVHNnZlZ4dVhIUWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlFSWdLR0ZCTVN3Z1lVRXlLU0I3SUhKbGRIVnliaUF6TGpBZ0tpQmhRVElnTFNBMkxqQWdLaUJoUVRFN0lIMWNibHgwSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJESUNoaFFURXBJQ0FnSUNBZ2V5QnlaWFIxY200Z015NHdJQ29nWVVFeE95QjlYRzVjYmx4MElDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCallXeGpRbVY2YVdWeUlDaGhWQ3dnWVVFeExDQmhRVElwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2dvUVNoaFFURXNJR0ZCTWlrcVlWUWdLeUJDS0dGQk1Td2dZVUV5S1NrcVlWUWdLeUJES0dGQk1Ta3BLbUZVTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdkbGRGTnNiM0JsSUNoaFZDd2dZVUV4TENCaFFUSXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlETXVNQ0FxSUVFb1lVRXhMQ0JoUVRJcEttRlVLbUZVSUNzZ01pNHdJQ29nUWloaFFURXNJR0ZCTWlrZ0tpQmhWQ0FySUVNb1lVRXhLVHRjYmx4MElDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ1WlhkMGIyNVNZWEJvYzI5dVNYUmxjbUYwWlNBb1lWZ3NJR0ZIZFdWemMxUXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JPUlZkVVQwNWZTVlJGVWtGVVNVOU9VenNnS3l0cEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kzVnljbVZ1ZEZOc2IzQmxJRDBnWjJWMFUyeHZjR1VvWVVkMVpYTnpWQ3dnYlZneExDQnRXRElwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRk5zYjNCbElEMDlQU0F3TGpBcElISmxkSFZ5YmlCaFIzVmxjM05VTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTNWeWNtVnVkRmdnUFNCallXeGpRbVY2YVdWeUtHRkhkV1Z6YzFRc0lHMVlNU3dnYlZneUtTQXRJR0ZZTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lVZDFaWE56VkNBdFBTQmpkWEp5Wlc1MFdDQXZJR04xY25KbGJuUlRiRzl3WlR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJoUjNWbGMzTlVPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR05oYkdOVFlXMXdiR1ZXWVd4MVpYTWdLQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd0VGNHeHBibVZVWVdKc1pWTnBlbVU3SUNzcmFTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlZOaGJYQnNaVlpoYkhWbGMxdHBYU0E5SUdOaGJHTkNaWHBwWlhJb2FTQXFJR3RUWVcxd2JHVlRkR1Z3VTJsNlpTd2diVmd4TENCdFdESXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdZbWx1WVhKNVUzVmlaR2wyYVdSbElDaGhXQ3dnWVVFc0lHRkNLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamRYSnlaVzUwV0N3Z1kzVnljbVZ1ZEZRc0lHa2dQU0F3TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdSdklIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlVJRDBnWVVFZ0t5QW9ZVUlnTFNCaFFTa2dMeUF5TGpBN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFdDQTlJR05oYkdOQ1pYcHBaWElvWTNWeWNtVnVkRlFzSUcxWU1Td2diVmd5S1NBdElHRllPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5SWUlENGdNQzR3S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZDSUQwZ1kzVnljbVZ1ZEZRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoUVNBOUlHTjFjbkpsYm5SVU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlJSGRvYVd4bElDaE5ZWFJvTG1GaWN5aGpkWEp5Wlc1MFdDa2dQaUJUVlVKRVNWWkpVMGxQVGw5UVVrVkRTVk5KVDA0Z0ppWWdLeXRwSUR3Z1UxVkNSRWxXU1ZOSlQwNWZUVUZZWDBsVVJWSkJWRWxQVGxNcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwVkR0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCblpYUlVSbTl5V0NBb1lWZ3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsdWRHVnlkbUZzVTNSaGNuUWdQU0F3TGpBc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFUyRnRjR3hsSUQwZ01TeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSVFlXMXdiR1VnUFNCclUzQnNhVzVsVkdGaWJHVlRhWHBsSUMwZ01UdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0RzZ1kzVnljbVZ1ZEZOaGJYQnNaU0FoUFNCc1lYTjBVMkZ0Y0d4bElDWW1JRzFUWVcxd2JHVldZV3gxWlhOYlkzVnljbVZ1ZEZOaGJYQnNaVjBnUEQwZ1lWZzdJQ3NyWTNWeWNtVnVkRk5oYlhCc1pTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1MFpYSjJZV3hUZEdGeWRDQXJQU0JyVTJGdGNHeGxVM1JsY0ZOcGVtVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXRMV04xY25KbGJuUlRZVzF3YkdVN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JwYzNRZ1BTQW9ZVmdnTFNCdFUyRnRjR3hsVm1Gc2RXVnpXMk4xY25KbGJuUlRZVzF3YkdWZEtTQXZJQ2h0VTJGdGNHeGxWbUZzZFdWelcyTjFjbkpsYm5SVFlXMXdiR1VyTVYwZ0xTQnRVMkZ0Y0d4bFZtRnNkV1Z6VzJOMWNuSmxiblJUWVcxd2JHVmRLU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkMVpYTnpSbTl5VkNBOUlHbHVkR1Z5ZG1Gc1UzUmhjblFnS3lCa2FYTjBJQ29nYTFOaGJYQnNaVk4wWlhCVGFYcGxMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1cGRHbGhiRk5zYjNCbElEMGdaMlYwVTJ4dmNHVW9aM1ZsYzNOR2IzSlVMQ0J0V0RFc0lHMVlNaWs3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVhWFJwWVd4VGJHOXdaU0ErUFNCT1JWZFVUMDVmVFVsT1gxTk1UMUJGS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNkRzl1VW1Gd2FITnZia2wwWlhKaGRHVW9ZVmdzSUdkMVpYTnpSbTl5VkNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FXNXBkR2xoYkZOc2IzQmxJRDA5SURBdU1Da2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2QxWlhOelJtOXlWRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmlhVzVoY25sVGRXSmthWFpwWkdVb1lWZ3NJR2x1ZEdWeWRtRnNVM1JoY25Rc0lHbHVkR1Z5ZG1Gc1UzUmhjblFnS3lCclUyRnRjR3hsVTNSbGNGTnBlbVVwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnZG1GeUlGOXdjbVZqYjIxd2RYUmxaQ0E5SUdaaGJITmxPMXh1WEc1Y2RDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NISmxZMjl0Y0hWMFpTZ3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdYM0J5WldOdmJYQjFkR1ZrSUQwZ2RISjFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxWU1TQWhQU0J0V1RFZ2ZId2diVmd5SUNFOUlHMVpNaWtnWTJGc1kxTmhiWEJzWlZaaGJIVmxjeWdwTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUhaaGNpQm1JRDBnWm5WdVkzUnBiMjRnS0dGWUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWDNCeVpXTnZiWEIxZEdWa0tTQndjbVZqYjIxd2RYUmxLQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodFdERWdQVDA5SUcxWk1TQW1KaUJ0V0RJZ1BUMDlJRzFaTWlrZ2NtVjBkWEp1SUdGWU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZVmdnUFQwOUlEQXBJSEpsZEhWeWJpQXdPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVZnZ1BUMDlJREVwSUhKbGRIVnliaUF4TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVd4alFtVjZhV1Z5S0dkbGRGUkdiM0pZS0dGWUtTd2diVmt4TENCdFdUSXBPMXh1WEhRZ0lDQWdJQ0FnSUgwN1hHNWNibHgwSUNBZ0lDQWdJQ0JtTG1kbGRFTnZiblJ5YjJ4UWIybHVkSE1nUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlGdDdJSGc2SUcxWU1Td2dlVG9nYlZreElIMHNJSHNnZURvZ2JWZ3lMQ0I1T2lCdFdUSWdmVjA3SUgwN1hHNWNibHgwSUNBZ0lDQWdJQ0IyWVhJZ2MzUnlJRDBnWENKblpXNWxjbUYwWlVKbGVtbGxjaWhjSWlBcklGdHRXREVzSUcxWk1Td2diVmd5TENCdFdUSmRJQ3NnWENJcFhDSTdYRzVjZENBZ0lDQWdJQ0FnWmk1MGIxTjBjbWx1WnlBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSE4wY2pzZ2ZUdGNibHh1WEhRZ0lDQWdJQ0FnSUhKbGRIVnliaUJtTzF4dVhIUWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBdktpQlNkVzVuWlMxTGRYUjBZU0J6Y0hKcGJtY2djR2g1YzJsamN5Qm1kVzVqZEdsdmJpQm5aVzVsY21GMGIzSXVJRUZrWVhCMFpXUWdabkp2YlNCR2NtRnRaWEl1YW5Nc0lHTnZjSGx5YVdkb2RDQkxiMlZ1SUVKdmF5NGdUVWxVSUV4cFkyVnVjMlU2SUdoMGRIQTZMeTlsYmk1M2FXdHBjR1ZrYVdFdWIzSm5MM2RwYTJrdlRVbFVYMHhwWTJWdWMyVWdLaTljYmx4MElDQWdJQzhxSUVkcGRtVnVJR0VnZEdWdWMybHZiaXdnWm5KcFkzUnBiMjRzSUdGdVpDQmtkWEpoZEdsdmJpd2dZU0J6YVcxMWJHRjBhVzl1SUdGMElEWXdSbEJUSUhkcGJHd2dabWx5YzNRZ2NuVnVJSGRwZEdodmRYUWdZU0JrWldacGJtVmtJR1IxY21GMGFXOXVJR2x1SUc5eVpHVnlJSFJ2SUdOaGJHTjFiR0YwWlNCMGFHVWdablZzYkNCd1lYUm9MaUJCSUhObFkyOXVaQ0J3WVhOelhHNWNkQ0FnSUNBZ0lDQjBhR1Z1SUdGa2FuVnpkSE1nZEdobElIUnBiV1VnWkdWc2RHRWdMUzBnZFhOcGJtY2dkR2hsSUhKbGJHRjBhVzl1SUdKbGRIZGxaVzRnWVdOMGRXRnNJSFJwYldVZ1lXNWtJR1IxY21GMGFXOXVJQzB0SUhSdklHTmhiR04xYkdGMFpTQjBhR1VnY0dGMGFDQm1iM0lnZEdobElHUjFjbUYwYVc5dUxXTnZibk4wY21GcGJtVmtJR0Z1YVcxaGRHbHZiaTRnS2k5Y2JseDBJQ0FnSUhaaGNpQm5aVzVsY21GMFpWTndjbWx1WjFKTE5DQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdjM0J5YVc1blFXTmpaV3hsY21GMGFXOXVSbTl5VTNSaGRHVWdLSE4wWVhSbEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb0xYTjBZWFJsTG5SbGJuTnBiMjRnS2lCemRHRjBaUzU0S1NBdElDaHpkR0YwWlM1bWNtbGpkR2x2YmlBcUlITjBZWFJsTG5ZcE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlITndjbWx1WjBWMllXeDFZWFJsVTNSaGRHVlhhWFJvUkdWeWFYWmhkR2wyWlNBb2FXNXBkR2xoYkZOMFlYUmxMQ0JrZEN3Z1pHVnlhWFpoZEdsMlpTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzNSaGRHVWdQU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE9pQnBibWwwYVdGc1UzUmhkR1V1ZUNBcklHUmxjbWwyWVhScGRtVXVaSGdnS2lCa2RDeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFk2SUdsdWFYUnBZV3hUZEdGMFpTNTJJQ3NnWkdWeWFYWmhkR2wyWlM1a2RpQXFJR1IwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVnVjMmx2YmpvZ2FXNXBkR2xoYkZOMFlYUmxMblJsYm5OcGIyNHNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY21samRHbHZiam9nYVc1cGRHbGhiRk4wWVhSbExtWnlhV04wYVc5dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzZ1pIZzZJSE4wWVhSbExuWXNJR1IyT2lCemNISnBibWRCWTJObGJHVnlZWFJwYjI1R2IzSlRkR0YwWlNoemRHRjBaU2tnZlR0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCemNISnBibWRKYm5SbFozSmhkR1ZUZEdGMFpTQW9jM1JoZEdVc0lHUjBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaElEMGdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUjRPaUJ6ZEdGMFpTNTJMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUjJPaUJ6Y0hKcGJtZEJZMk5sYkdWeVlYUnBiMjVHYjNKVGRHRjBaU2h6ZEdGMFpTbGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaUlEMGdjM0J5YVc1blJYWmhiSFZoZEdWVGRHRjBaVmRwZEdoRVpYSnBkbUYwYVhabEtITjBZWFJsTENCa2RDQXFJREF1TlN3Z1lTa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqSUQwZ2MzQnlhVzVuUlhaaGJIVmhkR1ZUZEdGMFpWZHBkR2hFWlhKcGRtRjBhWFpsS0hOMFlYUmxMQ0JrZENBcUlEQXVOU3dnWWlrc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtJRDBnYzNCeWFXNW5SWFpoYkhWaGRHVlRkR0YwWlZkcGRHaEVaWEpwZG1GMGFYWmxLSE4wWVhSbExDQmtkQ3dnWXlrc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtlR1IwSUQwZ01TNHdJQzhnTmk0d0lDb2dLR0V1WkhnZ0t5QXlMakFnS2lBb1lpNWtlQ0FySUdNdVpIZ3BJQ3NnWkM1a2VDa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrZG1SMElEMGdNUzR3SUM4Z05pNHdJQ29nS0dFdVpIWWdLeUF5TGpBZ0tpQW9ZaTVrZGlBcklHTXVaSFlwSUNzZ1pDNWtkaWs3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVXVlQ0E5SUhOMFlYUmxMbmdnS3lCa2VHUjBJQ29nWkhRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYUmxMbllnUFNCemRHRjBaUzUySUNzZ1pIWmtkQ0FxSUdSME8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHRjBaVHRjYmx4MElDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdjM0J5YVc1blVrczBSbUZqZEc5eWVTQW9kR1Z1YzJsdmJpd2dabkpwWTNScGIyNHNJR1IxY21GMGFXOXVLU0I3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbHVhWFJUZEdGMFpTQTlJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRPaUF0TVN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyT2lBd0xGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGJuTnBiMjQ2SUc1MWJHd3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puSnBZM1JwYjI0NklHNTFiR3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvSUQwZ1d6QmRMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsdFpWOXNZWEJ6WldRZ1BTQXdMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5c1pYSmhibU5sSUQwZ01TQXZJREV3TURBd0xGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSRlFnUFNBeE5pQXZJREV3TURBc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZWFpsWDJSMWNtRjBhVzl1TENCa2RDd2diR0Z6ZEY5emRHRjBaVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0IwWlc1emFXOXVJRDBnY0dGeWMyVkdiRzloZENoMFpXNXphVzl1S1NCOGZDQTFNREE3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR1p5YVdOMGFXOXVJRDBnY0dGeWMyVkdiRzloZENobWNtbGpkR2x2YmlrZ2ZId2dNakE3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR1IxY21GMGFXOXVJRDBnWkhWeVlYUnBiMjRnZkh3Z2JuVnNiRHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JwYm1sMFUzUmhkR1V1ZEdWdWMybHZiaUE5SUhSbGJuTnBiMjQ3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2x1YVhSVGRHRjBaUzVtY21samRHbHZiaUE5SUdaeWFXTjBhVzl1TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdoaGRtVmZaSFZ5WVhScGIyNGdQU0JrZFhKaGRHbHZiaUFoUFQwZ2JuVnNiRHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRFlXeGpkV3hoZEdVZ2RHaGxJR0ZqZEhWaGJDQjBhVzFsSUdsMElIUmhhMlZ6SUdadmNpQjBhR2x6SUdGdWFXMWhkR2x2YmlCMGJ5QmpiMjF3YkdWMFpTQjNhWFJvSUhSb1pTQndjbTkyYVdSbFpDQmpiMjVrYVhScGIyNXpMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHRjJaVjlrZFhKaGRHbHZiaWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVblZ1SUhSb1pTQnphVzExYkdGMGFXOXVJSGRwZEdodmRYUWdZU0JrZFhKaGRHbHZiaTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1ZmYkdGd2MyVmtJRDBnYzNCeWFXNW5Va3MwUm1GamRHOXllU2gwWlc1emFXOXVMQ0JtY21samRHbHZiaWs3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkRiMjF3ZFhSbElIUm9aU0JoWkdwMWMzUmxaQ0IwYVcxbElHUmxiSFJoTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSFFnUFNCMGFXMWxYMnhoY0hObFpDQXZJR1IxY21GMGFXOXVJQ29nUkZRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2RDQTlJRVJVTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLSFJ5ZFdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1bGVIUXZjM1JsY0NCbWRXNWpkR2x2YmlBdUtpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSZmMzUmhkR1VnUFNCemNISnBibWRKYm5SbFozSmhkR1ZUZEdGMFpTaHNZWE4wWDNOMFlYUmxJSHg4SUdsdWFYUlRkR0YwWlN3Z1pIUXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1UzUnZjbVVnZEdobElIQnZjMmwwYVc5dUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFDNXdkWE5vS0RFZ0t5QnNZWE4wWDNOMFlYUmxMbmdwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaVjlzWVhCelpXUWdLejBnTVRZN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKWmlCMGFHVWdZMmhoYm1kbElIUm9jbVZ6YUc5c1pDQnBjeUJ5WldGamFHVmtMQ0JpY21WaGF5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hLRTFoZEdndVlXSnpLR3hoYzNSZmMzUmhkR1V1ZUNrZ1BpQjBiMnhsY21GdVkyVWdKaVlnVFdGMGFDNWhZbk1vYkdGemRGOXpkR0YwWlM1MktTQStJSFJ2YkdWeVlXNWpaU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsbUlHUjFjbUYwYVc5dUlHbHpJRzV2ZENCa1pXWnBibVZrTENCeVpYUjFjbTRnZEdobElHRmpkSFZoYkNCMGFXMWxJSEpsY1hWcGNtVmtJR1p2Y2lCamIyMXdiR1YwYVc1bklIUm9hWE1nWVc1cGJXRjBhVzl1TGlCUGRHaGxjbmRwYzJVc0lISmxkSFZ5YmlCaElHTnNiM04xY21VZ2RHaGhkQ0JvYjJ4a2N5QjBhR1ZjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dGNIVjBaV1FnY0dGMGFDQmhibVFnY21WMGRYSnVjeUJoSUhOdVlYQnphRzkwSUc5bUlIUm9aU0J3YjNOcGRHbHZiaUJoWTJOdmNtUnBibWNnZEc4Z1lTQm5hWFpsYmlCd1pYSmpaVzUwUTI5dGNHeGxkR1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFoYUdGMlpWOWtkWEpoZEdsdmJpQS9JSFJwYldWZmJHRndjMlZrSURvZ1puVnVZM1JwYjI0b2NHVnlZMlZ1ZEVOdmJYQnNaWFJsS1NCN0lISmxkSFZ5YmlCd1lYUm9XeUFvY0dWeVkyVnVkRU52YlhCc1pYUmxJQ29nS0hCaGRHZ3ViR1Z1WjNSb0lDMGdNU2twSUh3Z01DQmRPeUI5TzF4dVhIUWdJQ0FnSUNBZ0lIMDdYRzVjZENBZ0lDQjlLQ2twTzF4dVhHNWNkQ0FnSUNBdktpQnFVWFZsY25rZ1pXRnphVzVuY3k0Z0tpOWNibHgwSUNBZ0lGWmxiRzlqYVhSNUxrVmhjMmx1WjNNZ1BTQjdYRzVjZENBZ0lDQWdJQ0FnYkdsdVpXRnlPaUJtZFc1amRHbHZiaWh3S1NCN0lISmxkSFZ5YmlCd095QjlMRnh1WEhRZ0lDQWdJQ0FnSUhOM2FXNW5PaUJtZFc1amRHbHZiaWh3S1NCN0lISmxkSFZ5YmlBd0xqVWdMU0JOWVhSb0xtTnZjeWdnY0NBcUlFMWhkR2d1VUVrZ0tTQXZJRElnZlN4Y2JseDBJQ0FnSUNBZ0lDQXZLaUJDYjI1MWN5QmNJbk53Y21sdVoxd2lJR1ZoYzJsdVp5d2dkMmhwWTJnZ2FYTWdZU0JzWlhOeklHVjRZV2RuWlhKaGRHVmtJSFpsY25OcGIyNGdiMllnWldGelpVbHVUM1YwUld4aGMzUnBZeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQnpjSEpwYm1jNklHWjFibU4wYVc5dUtIQXBJSHNnY21WMGRYSnVJREVnTFNBb1RXRjBhQzVqYjNNb2NDQXFJRFF1TlNBcUlFMWhkR2d1VUVrcElDb2dUV0YwYUM1bGVIQW9MWEFnS2lBMktTazdJSDFjYmx4MElDQWdJSDA3WEc1Y2JseDBJQ0FnSUM4cUlFTlRVek1nWVc1a0lGSnZZbVZ5ZENCUVpXNXVaWElnWldGemFXNW5jeTRnS2k5Y2JseDBJQ0FnSUNRdVpXRmphQ2hjYmx4MElDQWdJQ0FnSUNCYlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUZzZ1hDSmxZWE5sWENJc0lGc2dNQzR5TlN3Z01DNHhMQ0F3TGpJMUxDQXhMakFnWFNCZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCYklGd2laV0Z6WlMxcGJsd2lMQ0JiSURBdU5ESXNJREF1TUN3Z01TNHdNQ3dnTVM0d0lGMGdYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdXeUJjSW1WaGMyVXRiM1YwWENJc0lGc2dNQzR3TUN3Z01DNHdMQ0F3TGpVNExDQXhMakFnWFNCZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCYklGd2laV0Z6WlMxcGJpMXZkWFJjSWl3Z1d5QXdMalF5TENBd0xqQXNJREF1TlRnc0lERXVNQ0JkSUYwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUZzZ1hDSmxZWE5sU1c1VGFXNWxYQ0lzSUZzZ01DNDBOeXdnTUN3Z01DNDNORFVzSURBdU56RTFJRjBnWFN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnV3lCY0ltVmhjMlZQZFhSVGFXNWxYQ0lzSUZzZ01DNHpPU3dnTUM0MU56VXNJREF1TlRZMUxDQXhJRjBnWFN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnV3lCY0ltVmhjMlZKYms5MWRGTnBibVZjSWl3Z1d5QXdMalEwTlN3Z01DNHdOU3dnTUM0MU5Td2dNQzQ1TlNCZElGMHNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lGc2dYQ0psWVhObFNXNVJkV0ZrWENJc0lGc2dNQzQxTlN3Z01DNHdPRFVzSURBdU5qZ3NJREF1TlRNZ1hTQmRMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmJJRndpWldGelpVOTFkRkYxWVdSY0lpd2dXeUF3TGpJMUxDQXdMalEyTENBd0xqUTFMQ0F3TGprMElGMGdYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdXeUJjSW1WaGMyVkpiazkxZEZGMVlXUmNJaXdnV3lBd0xqUTFOU3dnTUM0d015d2dNQzQxTVRVc0lEQXVPVFUxSUYwZ1hTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1d5QmNJbVZoYzJWSmJrTjFZbWxqWENJc0lGc2dNQzQxTlN3Z01DNHdOVFVzSURBdU5qYzFMQ0F3TGpFNUlGMGdYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdXeUJjSW1WaGMyVlBkWFJEZFdKcFkxd2lMQ0JiSURBdU1qRTFMQ0F3TGpZeExDQXdMak0xTlN3Z01TQmRJRjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRnNnWENKbFlYTmxTVzVQZFhSRGRXSnBZMXdpTENCYklEQXVOalExTENBd0xqQTBOU3dnTUM0ek5UVXNJREVnWFNCZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCYklGd2laV0Z6WlVsdVVYVmhjblJjSWl3Z1d5QXdMamc1TlN3Z01DNHdNeXdnTUM0Mk9EVXNJREF1TWpJZ1hTQmRMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmJJRndpWldGelpVOTFkRkYxWVhKMFhDSXNJRnNnTUM0eE5qVXNJREF1T0RRc0lEQXVORFFzSURFZ1hTQmRMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmJJRndpWldGelpVbHVUM1YwVVhWaGNuUmNJaXdnV3lBd0xqYzNMQ0F3TENBd0xqRTNOU3dnTVNCZElGMHNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lGc2dYQ0psWVhObFNXNVJkV2x1ZEZ3aUxDQmJJREF1TnpVMUxDQXdMakExTENBd0xqZzFOU3dnTUM0d05pQmRJRjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRnNnWENKbFlYTmxUM1YwVVhWcGJuUmNJaXdnV3lBd0xqSXpMQ0F4TENBd0xqTXlMQ0F4SUYwZ1hTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1d5QmNJbVZoYzJWSmJrOTFkRkYxYVc1MFhDSXNJRnNnTUM0NE5pd2dNQ3dnTUM0d055d2dNU0JkSUYwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUZzZ1hDSmxZWE5sU1c1RmVIQnZYQ0lzSUZzZ01DNDVOU3dnTUM0d05Td2dNQzQzT1RVc0lEQXVNRE0xSUYwZ1hTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1d5QmNJbVZoYzJWUGRYUkZlSEJ2WENJc0lGc2dNQzR4T1N3Z01Td2dNQzR5TWl3Z01TQmRJRjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRnNnWENKbFlYTmxTVzVQZFhSRmVIQnZYQ0lzSUZzZ01Td2dNQ3dnTUN3Z01TQmRJRjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRnNnWENKbFlYTmxTVzVEYVhKalhDSXNJRnNnTUM0MkxDQXdMakEwTENBd0xqazRMQ0F3TGpNek5TQmRJRjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRnNnWENKbFlYTmxUM1YwUTJseVkxd2lMQ0JiSURBdU1EYzFMQ0F3TGpneUxDQXdMakUyTlN3Z01TQmRJRjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRnNnWENKbFlYTmxTVzVQZFhSRGFYSmpYQ0lzSUZzZ01DNDNPRFVzSURBdU1UTTFMQ0F3TGpFMUxDQXdMamcySUYwZ1hWeHVYSFFnSUNBZ0lDQWdJRjBzSUdaMWJtTjBhVzl1S0drc0lHVmhjMmx1WjBGeWNtRjVLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRlpsYkc5amFYUjVMa1ZoYzJsdVozTmJaV0Z6YVc1blFYSnlZWGxiTUYxZElEMGdaMlZ1WlhKaGRHVkNaWHBwWlhJdVlYQndiSGtvYm5Wc2JDd2daV0Z6YVc1blFYSnlZWGxiTVYwcE8xeHVYSFFnSUNBZ0lDQWdJSDBwTzF4dVhHNWNkQ0FnSUNBdktpQkVaWFJsY20xcGJtVWdkR2hsSUdGd2NISnZjSEpwWVhSbElHVmhjMmx1WnlCMGVYQmxJR2RwZG1WdUlHRnVJR1ZoYzJsdVp5QnBibkIxZEM0Z0tpOWNibHgwSUNBZ0lHWjFibU4wYVc5dUlHZGxkRVZoYzJsdVp5aDJZV3gxWlN3Z1pIVnlZWFJwYjI0cElIdGNibHgwSUNBZ0lDQWdJQ0IyWVhJZ1pXRnphVzVuSUQwZ2RtRnNkV1U3WEc1Y2JseDBJQ0FnSUNBZ0lDQXZLaUJVYUdVZ1pXRnphVzVuSUc5d2RHbHZiaUJqWVc0Z1pXbDBhR1Z5SUdKbElHRWdjM1J5YVc1bklIUm9ZWFFnY21WbVpYSmxibU5sY3lCaElIQnlaUzF5WldkcGMzUmxjbVZrSUdWaGMybHVaeXhjYmx4MElDQWdJQ0FnSUNBZ0lDQnZjaUJwZENCallXNGdZbVVnWVNCMGQyOHRMMlp2ZFhJdGFYUmxiU0JoY25KaGVTQnZaaUJwYm5SbFoyVnljeUIwYnlCaVpTQmpiMjUyWlhKMFpXUWdhVzUwYnlCaElHSmxlbWxsY2k5emNISnBibWNnWm5WdVkzUnBiMjR1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0ZSNWNHVXVhWE5UZEhKcGJtY29kbUZzZFdVcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVZ1YzNWeVpTQjBhR0YwSUhSb1pTQmxZWE5wYm1jZ2FHRnpJR0psWlc0Z1lYTnphV2R1WldRZ2RHOGdhbEYxWlhKNUozTWdWbVZzYjJOcGRIa3VSV0Z6YVc1bmN5QnZZbXBsWTNRdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doVm1Wc2IyTnBkSGt1UldGemFXNW5jMXQyWVd4MVpWMHBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWaGMybHVaeUE5SUdaaGJITmxPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoVWVYQmxMbWx6UVhKeVlYa29kbUZzZFdVcElDWW1JSFpoYkhWbExteGxibWQwYUNBOVBUMGdNU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JsWVhOcGJtY2dQU0JuWlc1bGNtRjBaVk4wWlhBdVlYQndiSGtvYm5Wc2JDd2dkbUZzZFdVcE8xeHVYSFFnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvVkhsd1pTNXBjMEZ5Y21GNUtIWmhiSFZsS1NBbUppQjJZV3gxWlM1c1pXNW5kR2dnUFQwOUlESXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nYzNCeWFXNW5Va3MwSUcxMWMzUWdZbVVnY0dGemMyVmtJSFJvWlNCaGJtbHRZWFJwYjI0bmN5QmtkWEpoZEdsdmJpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dTV1lnZEdobElITndjbWx1WjFKTE5DQmhjbkpoZVNCamIyNTBZV2x1Y3lCdWIyNHRiblZ0WW1WeWN5d2daMlZ1WlhKaGRHVlRjSEpwYm1kU1N6UW9LU0J5WlhSMWNtNXpJR0Z1SUdWaGMybHVaMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJuWlc1bGNtRjBaV1FnZDJsMGFDQmtaV1poZFd4MElIUmxibk5wYjI0Z1lXNWtJR1p5YVdOMGFXOXVJSFpoYkhWbGN5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdaV0Z6YVc1bklEMGdaMlZ1WlhKaGRHVlRjSEpwYm1kU1N6UXVZWEJ3Ykhrb2JuVnNiQ3dnZG1Gc2RXVXVZMjl1WTJGMEtGc2daSFZ5WVhScGIyNGdYU2twTzF4dVhIUWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9WSGx3WlM1cGMwRnljbUY1S0haaGJIVmxLU0FtSmlCMllXeDFaUzVzWlc1bmRHZ2dQVDA5SURRcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1NXWWdkR2hsSUdKbGVtbGxjaUJoY25KaGVTQmpiMjUwWVdsdWN5QnViMjR0Ym5WdFltVnljeXdnWjJWdVpYSmhkR1ZDWlhwcFpYSW9LU0J5WlhSMWNtNXpJR1poYkhObExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmxZWE5wYm1jZ1BTQm5aVzVsY21GMFpVSmxlbWxsY2k1aGNIQnNlU2h1ZFd4c0xDQjJZV3gxWlNrN1hHNWNkQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1pXRnphVzVuSUQwZ1ptRnNjMlU3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnTHlvZ1VtVjJaWEowSUhSdklIUm9aU0JXWld4dlkybDBlUzEzYVdSbElHUmxabUYxYkhRZ1pXRnphVzVuSUhSNWNHVXNJRzl5SUdaaGJHd2dZbUZqYXlCMGJ5QmNJbk4zYVc1blhDSWdLSGRvYVdOb0lHbHpJR0ZzYzI4Z2FsRjFaWEo1SjNNZ1pHVm1ZWFZzZENsY2JseDBJQ0FnSUNBZ0lDQWdJQ0JwWmlCMGFHVWdWbVZzYjJOcGRIa3RkMmxrWlNCa1pXWmhkV3gwSUdoaGN5QmlaV1Z1SUdsdVkyOXljbVZqZEd4NUlHMXZaR2xtYVdWa0xpQXFMMXh1WEhRZ0lDQWdJQ0FnSUdsbUlDaGxZWE5wYm1jZ1BUMDlJR1poYkhObEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hXWld4dlkybDBlUzVGWVhOcGJtZHpXMVpsYkc5amFYUjVMbVJsWm1GMWJIUnpMbVZoYzJsdVoxMHBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWaGMybHVaeUE5SUZabGJHOWphWFI1TG1SbFptRjFiSFJ6TG1WaGMybHVaenRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVp5QTlJRVZCVTBsT1IxOUVSVVpCVlV4VU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWaGMybHVaenRjYmx4MElDQWdJSDFjYmx4dVhIUWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ1ExTlRJRk4wWVdOclhHNWNkQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVYSFFnSUNBZ0x5b2dWR2hsSUVOVFV5QnZZbXBsWTNRZ2FYTWdZU0JvYVdkb2JIa2dZMjl1WkdWdWMyVmtJR0Z1WkNCd1pYSm1iM0p0WVc1MElFTlRVeUJ6ZEdGamF5QjBhR0YwSUdaMWJHeDVJSEpsY0d4aFkyVnpJR3BSZFdWeWVTZHpMbHh1WEhRZ0lDQWdJQ0FnU1hRZ2FHRnVaR3hsY3lCMGFHVWdkbUZzYVdSaGRHbHZiaXdnWjJWMGRHbHVaeXdnWVc1a0lITmxkSFJwYm1jZ2IyWWdZbTkwYUNCemRHRnVaR0Z5WkNCRFUxTWdjSEp2Y0dWeWRHbGxjeUJoYm1RZ1ExTlRJSEJ5YjNCbGNuUjVJR2h2YjJ0ekxpQXFMMXh1WEhRZ0lDQWdMeW9nVG05MFpUb2dRU0JjSWtOVFUxd2lJSE5vYjNKMGFHRnVaQ0JwY3lCaGJHbGhjMlZrSUhOdklIUm9ZWFFnYjNWeUlHTnZaR1VnYVhNZ1pXRnphV1Z5SUhSdklISmxZV1F1SUNvdlhHNWNkQ0FnSUNCMllYSWdRMU5USUQwZ1ZtVnNiMk5wZEhrdVExTlRJRDBnZTF4dVhHNWNkQ0FnSUNBZ0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnVW1WblJYaGNibHgwSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQWdJQ0FnVW1WblJYZzZJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdhWE5JWlhnNklDOWVJeWhiUVMxbVhGeGtYWHN6ZlNsN01Td3lmU1F2YVN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1ZXNTNjbUZ3SUdFZ2NISnZjR1Z5ZEhrZ2RtRnNkV1VuY3lCemRYSnliM1Z1WkdsdVp5QjBaWGgwTENCbExtY3VJRndpY21kaVlTZzBMQ0F6TENBeUxDQXhLVndpSUQwOVBpQmNJalFzSURNc0lESXNJREZjSWlCaGJtUWdYQ0p5WldOMEtEUndlQ0F6Y0hnZ01uQjRJREZ3ZUNsY0lpQTlQVDRnWENJMGNIZ2dNM0I0SURKd2VDQXhjSGhjSWk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1ZWYm5keVlYQTZJQzllVzBFdGVsMHJYRndvS0M0cUtWeGNLU1F2YVN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZDNKaGNIQmxaRlpoYkhWbFFXeHlaV0ZrZVVWNGRISmhZM1JsWkRvZ0wxc3dMVGt1WFNzZ1d6QXRPUzVkS3lCYk1DMDVMbDByS0NCYk1DMDVMbDByS1Q4dkxGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQlRjR3hwZENCaElHMTFiSFJwTFhaaGJIVmxJSEJ5YjNCbGNuUjVJR2x1ZEc4Z1lXNGdZWEp5WVhrZ2IyWWdjM1ZpZG1Gc2RXVnpMQ0JsTG1jdUlGd2ljbWRpWVNnMExDQXpMQ0F5TENBeEtTQTBjSGdnTTNCNElESndlQ0F4Y0hoY0lpQTlQVDRnV3lCY0luSm5ZbUVvTkN3Z015d2dNaXdnTVNsY0lpd2dYQ0kwY0hoY0lpd2dYQ0l6Y0hoY0lpd2dYQ0l5Y0hoY0lpd2dYQ0l4Y0hoY0lpQmRMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpWTndiR2wwT2lBdktGdEJMWHBkSzF4Y0tDNHJYRndwS1h3b0tGdEJMWG93TFRrakxTNWRLejhwS0Q4OVhGeHpmQ1FwS1M5cFoxeHVYSFFnSUNBZ0lDQWdJSDBzWEc1Y2JseDBJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRXhwYzNSelhHNWNkQ0FnSUNBZ0lDQWdLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdUR2x6ZEhNNklIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0p6T2lCYklGd2labWxzYkZ3aUxDQmNJbk4wY205clpWd2lMQ0JjSW5OMGIzQkRiMnh2Y2x3aUxDQmNJbU52Ykc5eVhDSXNJRndpWW1GamEyZHliM1Z1WkVOdmJHOXlYQ0lzSUZ3aVltOXlaR1Z5UTI5c2IzSmNJaXdnWENKaWIzSmtaWEpVYjNCRGIyeHZjbHdpTENCY0ltSnZjbVJsY2xKcFoyaDBRMjlzYjNKY0lpd2dYQ0ppYjNKa1pYSkNiM1IwYjIxRGIyeHZjbHdpTENCY0ltSnZjbVJsY2t4bFpuUkRiMnh2Y2x3aUxDQmNJbTkxZEd4cGJtVkRiMnh2Y2x3aUlGMHNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJYTkNZWE5sT2lCYklGd2lkSEpoYm5Oc1lYUmxXRndpTENCY0luUnlZVzV6YkdGMFpWbGNJaXdnWENKelkyRnNaVndpTENCY0luTmpZV3hsV0Z3aUxDQmNJbk5qWVd4bFdWd2lMQ0JjSW5OclpYZFlYQ0lzSUZ3aWMydGxkMWxjSWl3Z1hDSnliM1JoZEdWYVhDSWdYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRjek5FT2lCYklGd2lkSEpoYm5ObWIzSnRVR1Z5YzNCbFkzUnBkbVZjSWl3Z1hDSjBjbUZ1YzJ4aGRHVmFYQ0lzSUZ3aWMyTmhiR1ZhWENJc0lGd2ljbTkwWVhSbFdGd2lMQ0JjSW5KdmRHRjBaVmxjSWlCZFhHNWNkQ0FnSUNBZ0lDQWdmU3hjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaXBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdTRzl2YTNOY2JseDBJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQXZLaUJJYjI5cmN5QmhiR3h2ZHlCaElITjFZbkJ5YjNCbGNuUjVJQ2hsTG1jdUlGd2lZbTk0VTJoaFpHOTNRbXgxY2x3aUtTQnZaaUJoSUdOdmJYQnZkVzVrTFhaaGJIVmxJRU5UVXlCd2NtOXdaWEowZVZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ2hsTG1jdUlGd2lZbTk0VTJoaFpHOTNPaUJZSUZrZ1FteDFjaUJUY0hKbFlXUWdRMjlzYjNKY0lpa2dkRzhnWW1VZ1lXNXBiV0YwWldRZ1lYTWdhV1lnYVhRZ2QyVnlaU0JoSUdScGMyTnlaWFJsSUhCeWIzQmxjblI1TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRUpsZVc5dVpDQmxibUZpYkdsdVp5Qm1hVzVsTFdkeVlXbHVaV1FnY0hKdmNHVnlkSGtnWVc1cGJXRjBhVzl1TENCb2IyOXJhVzVuSUdseklHNWxZMlZ6YzJGeWVTQnphVzVqWlNCV1pXeHZZMmwwZVNCdmJteDVYRzVjZENBZ0lDQWdJQ0FnSUNBZ2RIZGxaVzV6SUhCeWIzQmxjblJwWlhNZ2QybDBhQ0J6YVc1bmJHVWdiblZ0WlhKcFl5QjJZV3gxWlhNN0lIVnViR2xyWlNCRFUxTWdkSEpoYm5OcGRHbHZibk1zSUZabGJHOWphWFI1SUdSdlpYTWdibTkwSUdsdWRHVnljRzlzWVhSbElHTnZiWEJ2ZFc1a0xYWmhiSFZsY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0JJYjI5cmN6b2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZKbFoybHpkSEpoZEdsdmJseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJVWlcxd2JHRjBaWE1nWVhKbElHRWdZMjl1WTJselpTQjNZWGtnYjJZZ2FXNWthV05oZEdsdVp5QjNhR2xqYUNCemRXSndjbTl3WlhKMGFXVnpJRzExYzNRZ1ltVWdhVzVrYVhacFpIVmhiR3g1SUhKbFoybHpkR1Z5WldRZ1ptOXlJR1ZoWTJnZ1kyOXRjRzkxYm1RdGRtRnNkV1VnUTFOVElIQnliM0JsY25SNUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJGWVdOb0lIUmxiWEJzWVhSbElHTnZibk5wYzNSeklHOW1JSFJvWlNCamIyMXdiM1Z1WkMxMllXeDFaU2R6SUdKaGMyVWdibUZ0WlN3Z2FYUnpJR052Ym5OMGFYUjFaVzUwSUhOMVluQnliM0JsY25SNUlHNWhiV1Z6TENCaGJtUWdkR2h2YzJVZ2MzVmljSEp2Y0dWeWRHbGxjeWNnWkdWbVlYVnNkQ0IyWVd4MVpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCc1lYUmxjem9nZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSjBaWGgwVTJoaFpHOTNYQ0k2SUZzZ1hDSkRiMnh2Y2lCWUlGa2dRbXgxY2x3aUxDQmNJbUpzWVdOcklEQndlQ0F3Y0hnZ01IQjRYQ0lnWFN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lZbTk0VTJoaFpHOTNYQ0k2SUZzZ1hDSkRiMnh2Y2lCWUlGa2dRbXgxY2lCVGNISmxZV1JjSWl3Z1hDSmliR0ZqYXlBd2NIZ2dNSEI0SURCd2VDQXdjSGhjSWlCZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pqYkdsd1hDSTZJRnNnWENKVWIzQWdVbWxuYUhRZ1FtOTBkRzl0SUV4bFpuUmNJaXdnWENJd2NIZ2dNSEI0SURCd2VDQXdjSGhjSWlCZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0ppWVdOclozSnZkVzVrVUc5emFYUnBiMjVjSWpvZ1d5QmNJbGdnV1Z3aUxDQmNJakFsSURBbFhDSWdYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aWRISmhibk5tYjNKdFQzSnBaMmx1WENJNklGc2dYQ0pZSUZrZ1dsd2lMQ0JjSWpVd0pTQTFNQ1VnTUhCNFhDSWdYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aWNHVnljM0JsWTNScGRtVlBjbWxuYVc1Y0lqb2dXeUJjSWxnZ1dWd2lMQ0JjSWpVd0pTQTFNQ1ZjSWlCZFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRU0JjSW5KbFoybHpkR1Z5WldSY0lpQm9iMjlySUdseklHOXVaU0IwYUdGMElHaGhjeUJpWldWdUlHTnZiblpsY25SbFpDQm1jbTl0SUdsMGN5QjBaVzF3YkdGMFpTQm1iM0p0SUdsdWRHOGdZU0JzYVhabExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBkMlZsYm1GaWJHVWdjSEp2Y0dWeWRIa3VJRWwwSUdOdmJuUmhhVzV6SUdSaGRHRWdkRzhnWVhOemIyTnBZWFJsSUdsMElIZHBkR2dnYVhSeklISnZiM1FnY0hKdmNHVnlkSGt1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbFoybHpkR1Z5WldRNklIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRUVnY21WbmFYTjBaWEpsWkNCb2IyOXJJR3h2YjJ0eklHeHBhMlVnZEdocGN5QTlQVDRnZEdWNGRGTm9ZV1J2ZDBKc2RYSTZJRnNnWENKMFpYaDBVMmhoWkc5M1hDSXNJRE1nWFN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRvYVdOb0lHTnZibk5wYzNSeklHOW1JSFJvWlNCemRXSndjbTl3WlhKMGVTZHpJRzVoYldVc0lIUm9aU0JoYzNOdlkybGhkR1ZrSUhKdmIzUWdjSEp2Y0dWeWRIa25jeUJ1WVcxbExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVc1a0lIUm9aU0J6ZFdKd2NtOXdaWEowZVNkeklIQnZjMmwwYVc5dUlHbHVJSFJvWlNCeWIyOTBKM01nZG1Gc2RXVXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVOdmJuWmxjblFnZEdobElIUmxiWEJzWVhSbGN5QnBiblJ2SUdsdVpHbDJhV1IxWVd3Z2FHOXZhM01nZEdobGJpQmhjSEJsYm1RZ2RHaGxiU0IwYnlCMGFHVWdjbVZuYVhOMFpYSmxaQ0J2WW1wbFkzUWdZV0p2ZG1VdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxaMmx6ZEdWeU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkRiMnh2Y2lCb2IyOXJjeUJ5WldkcGMzUnlZWFJwYjI0NklFTnZiRzl5Y3lCaGNtVWdaR1ZtWVhWc2RHVmtJSFJ2SUhkb2FYUmxJQzB0SUdGeklHOXdjRzl6WldRZ2RHOGdZbXhoWTJzZ0xTMGdjMmx1WTJVZ1kyOXNiM0p6SUhSb1lYUWdZWEpsWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MGJIa2djMlYwSUhSdklGd2lkSEpoYm5Od1lYSmxiblJjSWlCa1pXWmhkV3gwSUhSdklIUm9aV2x5SUhKbGMzQmxZM1JwZG1VZ2RHVnRjR3hoZEdVZ1ltVnNiM2NnZDJobGJpQmpiMnh2Y2kxaGJtbHRZWFJsWkN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z1WkNCM2FHbDBaU0JwY3lCMGVYQnBZMkZzYkhrZ1lTQmpiRzl6WlhJZ2JXRjBZMmdnZEc4Z2RISmhibk53WVhKbGJuUWdkR2hoYmlCaWJHRmpheUJwY3k0Z1FXNGdaWGhqWlhCMGFXOXVJR2x6SUcxaFpHVWdabTl5SUhSbGVIUWdLRndpWTI5c2IzSmNJaWtzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xqYUNCcGN5QmhiRzF2YzNRZ1lXeDNZWGx6SUhObGRDQmpiRzl6WlhJZ2RHOGdZbXhoWTJzZ2RHaGhiaUIzYUdsMFpTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1ExTlRMa3hwYzNSekxtTnZiRzl5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WjJKRGIyMXdiMjVsYm5SeklEMGdLRU5UVXk1TWFYTjBjeTVqYjJ4dmNuTmJhVjBnUFQwOUlGd2lZMjlzYjNKY0lpa2dQeUJjSWpBZ01DQXdJREZjSWlBNklGd2lNalUxSURJMU5TQXlOVFVnTVZ3aU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVOVFV5NUliMjlyY3k1MFpXMXdiR0YwWlhOYlExTlRMa3hwYzNSekxtTnZiRzl5YzF0cFhWMGdQU0JiSUZ3aVVtVmtJRWR5WldWdUlFSnNkV1VnUVd4d2FHRmNJaXdnY21kaVEyOXRjRzl1Wlc1MGN5QmRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY205dmRGQnliM0JsY25SNUxGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdodmIydFVaVzF3YkdGMFpTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2IyOXJUbUZ0WlhNN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsdUlFbEZMQ0JqYjJ4dmNpQjJZV3gxWlhNZ2FXNXphV1JsSUdOdmJYQnZkVzVrTFhaaGJIVmxJSEJ5YjNCbGNuUnBaWE1nWVhKbElIQnZjMmwwYVc5dVpXUWdZWFFnZEdobElHVnVaQ0IwYUdVZ2RtRnNkV1VnYVc1emRHVmhaQ0J2WmlCaGRDQjBhR1VnWW1WbmFXNXVhVzVuTGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWR2gxY3l3Z2QyVWdjbVV0WVhKeVlXNW5aU0IwYUdVZ2RHVnRjR3hoZEdWeklHRmpZMjl5WkdsdVoyeDVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRWxGS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHliMjkwVUhKdmNHVnlkSGtnYVc0Z1ExTlRMa2h2YjJ0ekxuUmxiWEJzWVhSbGN5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvYjI5clZHVnRjR3hoZEdVZ1BTQkRVMU11U0c5dmEzTXVkR1Z0Y0d4aGRHVnpXM0p2YjNSUWNtOXdaWEowZVYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaHZiMnRPWVcxbGN5QTlJR2h2YjJ0VVpXMXdiR0YwWlZzd1hTNXpjR3hwZENoY0lpQmNJaWs3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsWm1GMWJIUldZV3gxWlhNZ1BTQm9iMjlyVkdWdGNHeGhkR1ZiTVYwdWJXRjBZMmdvUTFOVExsSmxaMFY0TG5aaGJIVmxVM0JzYVhRcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob2IyOXJUbUZ0WlhOYk1GMGdQVDA5SUZ3aVEyOXNiM0pjSWlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1VtVndiM05wZEdsdmJpQmliM1JvSUhSb1pTQm9iMjlySjNNZ2JtRnRaU0JoYm1RZ2FYUnpJR1JsWm1GMWJIUWdkbUZzZFdVZ2RHOGdkR2hsSUdWdVpDQnZaaUIwYUdWcGNpQnlaWE53WldOMGFYWmxJSE4wY21sdVozTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9iMjlyVG1GdFpYTXVjSFZ6YUNob2IyOXJUbUZ0WlhNdWMyaHBablFvS1NrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBWbUZzZFdWekxuQjFjMmdvWkdWbVlYVnNkRlpoYkhWbGN5NXphR2xtZENncEtUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVbVZ3YkdGalpTQjBhR1VnWlhocGMzUnBibWNnZEdWdGNHeGhkR1VnWm05eUlIUm9aU0JvYjI5ckozTWdjbTl2ZENCd2NtOXdaWEowZVM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVOVFV5NUliMjlyY3k1MFpXMXdiR0YwWlhOYmNtOXZkRkJ5YjNCbGNuUjVYU0E5SUZzZ2FHOXZhMDVoYldWekxtcHZhVzRvWENJZ1hDSXBMQ0JrWldaaGRXeDBWbUZzZFdWekxtcHZhVzRvWENJZ1hDSXBJRjA3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVodmIyc2djbVZuYVhOMGNtRjBhVzl1TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoeWIyOTBVSEp2Y0dWeWRIa2dhVzRnUTFOVExraHZiMnR6TG5SbGJYQnNZWFJsY3lrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdodmIydFVaVzF3YkdGMFpTQTlJRU5UVXk1SWIyOXJjeTUwWlcxd2JHRjBaWE5iY205dmRGQnliM0JsY25SNVhUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2IyOXJUbUZ0WlhNZ1BTQm9iMjlyVkdWdGNHeGhkR1ZiTUYwdWMzQnNhWFFvWENJZ1hDSXBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0JwYmlCb2IyOXJUbUZ0WlhNcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdaMWJHeEliMjlyVG1GdFpTQTlJSEp2YjNSUWNtOXdaWEowZVNBcklHaHZiMnRPWVcxbGMxdHBYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaHZiMnRRYjNOcGRHbHZiaUE5SUdrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUm05eUlHVmhZMmdnYUc5dmF5d2djbVZuYVhOMFpYSWdhWFJ6SUdaMWJHd2dibUZ0WlNBb1pTNW5MaUIwWlhoMFUyaGhaRzkzUW14MWNpa2dkMmwwYUNCcGRITWdjbTl2ZENCd2NtOXdaWEowZVNBb1pTNW5MaUIwWlhoMFUyaGhaRzkzS1Z4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhibVFnZEdobElHaHZiMnNuY3lCd2IzTnBkR2x2YmlCcGJpQnBkSE1nZEdWdGNHeGhkR1VuY3lCa1pXWmhkV3gwSUhaaGJIVmxJSE4wY21sdVp5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUTFOVExraHZiMnR6TG5KbFoybHpkR1Z5WldSYlpuVnNiRWh2YjJ0T1lXMWxYU0E5SUZzZ2NtOXZkRkJ5YjNCbGNuUjVMQ0JvYjI5clVHOXphWFJwYjI0Z1hUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVsdWFtVmpkR2x2YmlCaGJtUWdSWGgwY21GamRHbHZibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCTWIyOXJJSFZ3SUhSb1pTQnliMjkwSUhCeWIzQmxjblI1SUdGemMyOWphV0YwWldRZ2QybDBhQ0IwYUdVZ2FHOXZheUFvWlM1bkxpQnlaWFIxY200Z1hDSjBaWGgwVTJoaFpHOTNYQ0lnWm05eUlGd2lkR1Y0ZEZOb1lXUnZkMEpzZFhKY0lpa3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZOcGJtTmxJR0VnYUc5dmF5QmpZVzV1YjNRZ1ltVWdjMlYwSUdScGNtVmpkR3g1SUNoMGFHVWdZbkp2ZDNObGNpQjNiMjRuZENCeVpXTnZaMjVwZW1VZ2FYUXBMQ0J6ZEhsc1pTQjFjR1JoZEdsdVp5Qm1iM0lnYUc5dmEzTWdhWE1nY205MWRHVmtJSFJvY205MVoyZ2dkR2hsSUdodmIyc25jeUJ5YjI5MElIQnliM0JsY25SNUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQm5aWFJTYjI5ME9pQm1kVzVqZEdsdmJpQW9jSEp2Y0dWeWRIa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm9iMjlyUkdGMFlTQTlJRU5UVXk1SWIyOXJjeTV5WldkcGMzUmxjbVZrVzNCeWIzQmxjblI1WFR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dodmIydEVZWFJoS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2h2YjJ0RVlYUmhXekJkTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCSlppQjBhR1Z5WlNCM1lYTWdibThnYUc5dmF5QnRZWFJqYUN3Z2NtVjBkWEp1SUhSb1pTQndjbTl3WlhKMGVTQnVZVzFsSUhWdWRHOTFZMmhsWkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY0hKdmNHVnlkSGs3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFTnZiblpsY25RZ1lXNTVJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxMQ0J1ZFd4c0lHOXlJRzkwYUdWeWQybHpaU3dnYVc1MGJ5QmhJSE53WVdObExXUmxiR2x0YVhSbFpDQnNhWE4wSUc5bUlHaHZiMnNnZG1Gc2RXVnpJSE52SUhSb1lYUmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hsSUhSaGNtZGxkR1ZrSUdodmIyc2dZMkZ1SUdKbElHbHVhbVZqZEdWa0lHOXlJR1Y0ZEhKaFkzUmxaQ0JoZENCcGRITWdjM1JoYm1SaGNtUWdjRzl6YVhScGIyNHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR05zWldGdVVtOXZkRkJ5YjNCbGNuUjVWbUZzZFdVNklHWjFibU4wYVc5dUtISnZiM1JRY205d1pYSjBlU3dnY205dmRGQnliM0JsY25SNVZtRnNkV1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUhSb1pTQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTQnBjeUIzY21Gd2NHVmtJSGRwZEdnZ1hDSnlaMklvS1Z3aUxDQmNJbU5zYVhBb0tWd2lMQ0JsZEdNdUxDQnlaVzF2ZG1VZ2RHaGxJSGR5WVhCd2FXNW5JSFJ2SUc1dmNtMWhiR2w2WlNCMGFHVWdkbUZzZFdVZ1ltVm1iM0psSUcxaGJtbHdkV3hoZEdsdmJpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaERVMU11VW1WblJYZ3VkbUZzZFdWVmJuZHlZWEF1ZEdWemRDaHliMjkwVUhKdmNHVnlkSGxXWVd4MVpTa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTQTlJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxMbTFoZEdOb0tFTlRVeTVTWldkRmVDNTJZV3gxWlZWdWQzSmhjQ2xiTVYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbG1JSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxJR2x6SUdFZ1ExTlRJRzUxYkd3dGRtRnNkV1VnS0daeWIyMGdkMmhwWTJnZ2RHaGxjbVVuY3lCcGJtaGxjbVZ1ZEd4NUlHNXZJR2h2YjJzZ2RtRnNkV1VnZEc4Z1pYaDBjbUZqZENrc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBJSFJ2SUhSb1pTQnliMjkwSjNNZ1pHVm1ZWFZzZENCMllXeDFaU0JoY3lCa1pXWnBibVZrSUdsdUlFTlRVeTVJYjI5cmN5NTBaVzF3YkdGMFpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQk9iM1JsT2lCRFUxTWdiblZzYkMxMllXeDFaWE1nYVc1amJIVmtaU0JjSW01dmJtVmNJaXdnWENKaGRYUnZYQ0lzSUdGdVpDQmNJblJ5WVc1emNHRnlaVzUwWENJdUlGUm9aWGtnYlhWemRDQmlaU0JqYjI1MlpYSjBaV1FnYVc1MGJ5QjBhR1ZwY2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlbVZ5YnkxMllXeDFaWE1nS0dVdVp5NGdkR1Y0ZEZOb1lXUnZkem9nWENKdWIyNWxYQ0lnUFQwK0lIUmxlSFJUYUdGa2IzYzZJRndpTUhCNElEQndlQ0F3Y0hnZ1lteGhZMnRjSWlrZ1ptOXlJR2h2YjJzZ2JXRnVhWEIxYkdGMGFXOXVJSFJ2SUhCeWIyTmxaV1F1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUTFOVExsWmhiSFZsY3k1cGMwTlRVMDUxYkd4V1lXeDFaU2h5YjI5MFVISnZjR1Z5ZEhsV1lXeDFaU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjI5MFVISnZjR1Z5ZEhsV1lXeDFaU0E5SUVOVFV5NUliMjlyY3k1MFpXMXdiR0YwWlhOYmNtOXZkRkJ5YjNCbGNuUjVYVnN4WFR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJGZUhSeVlXTjBaV1FnZEdobElHaHZiMnNuY3lCMllXeDFaU0JtY205dElHbDBjeUJ5YjI5MElIQnliM0JsY25SNUozTWdkbUZzZFdVdUlGUm9hWE1nYVhNZ2RYTmxaQ0IwYnlCblpYUWdkR2hsSUhOMFlYSjBhVzVuSUhaaGJIVmxJRzltSUdGdUlHRnVhVzFoZEdsdVp5Qm9iMjlyTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCbGVIUnlZV04wVm1Gc2RXVTZJR1oxYm1OMGFXOXVJQ2htZFd4c1NHOXZhMDVoYldVc0lISnZiM1JRY205d1pYSjBlVlpoYkhWbEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FHOXZhMFJoZEdFZ1BTQkRVMU11U0c5dmEzTXVjbVZuYVhOMFpYSmxaRnRtZFd4c1NHOXZhMDVoYldWZE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHOXZhMFJoZEdFcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhRzl2YTFKdmIzUWdQU0JvYjI5clJHRjBZVnN3WFN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHOXZhMUJ2YzJsMGFXOXVJRDBnYUc5dmEwUmhkR0ZiTVYwN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlNBOUlFTlRVeTVJYjI5cmN5NWpiR1ZoYmxKdmIzUlFjbTl3WlhKMGVWWmhiSFZsS0dodmIydFNiMjkwTENCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlNrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlRjR3hwZENCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlNCcGJuUnZJR2wwY3lCamIyNXpkR2wwZFdWdWRDQm9iMjlySUhaaGJIVmxjeUIwYUdWdUlHZHlZV0lnZEdobElHUmxjMmx5WldRZ2FHOXZheUJoZENCcGRITWdjM1JoYm1SaGNtUWdjRzl6YVhScGIyNHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISnZiM1JRY205d1pYSjBlVlpoYkhWbExuUnZVM1J5YVc1bktDa3ViV0YwWTJnb1ExTlRMbEpsWjBWNExuWmhiSFZsVTNCc2FYUXBXMmh2YjJ0UWIzTnBkR2x2YmwwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbG1JSFJvWlNCd2NtOTJhV1JsWkNCbWRXeHNTRzl2YTA1aGJXVWdhWE51SjNRZ1lTQnlaV2RwYzNSbGNtVmtJR2h2YjJzc0lISmxkSFZ5YmlCMGFHVWdjbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVWdkR2hoZENCM1lYTWdjR0Z6YzJWa0lHbHVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nU1c1cVpXTjBJSFJvWlNCb2IyOXJKM01nZG1Gc2RXVWdhVzUwYnlCcGRITWdjbTl2ZENCd2NtOXdaWEowZVNkeklIWmhiSFZsTGlCVWFHbHpJR2x6SUhWelpXUWdkRzhnY0dsbFkyVWdZbUZqYXlCMGIyZGxkR2hsY2lCMGFHVWdjbTl2ZENCd2NtOXdaWEowZVZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJtTmxJRlpsYkc5amFYUjVJR2hoY3lCMWNHUmhkR1ZrSUc5dVpTQnZaaUJwZEhNZ2FXNWthWFpwWkhWaGJHeDVJR2h2YjJ0bFpDQjJZV3gxWlhNZ2RHaHliM1ZuYUNCMGQyVmxibWx1Wnk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2FXNXFaV04wVm1Gc2RXVTZJR1oxYm1OMGFXOXVJQ2htZFd4c1NHOXZhMDVoYldVc0lHaHZiMnRXWVd4MVpTd2djbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQm9iMjlyUkdGMFlTQTlJRU5UVXk1SWIyOXJjeTV5WldkcGMzUmxjbVZrVzJaMWJHeEliMjlyVG1GdFpWMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9iMjlyUkdGMFlTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJvYjI5clVtOXZkQ0E5SUdodmIydEVZWFJoV3pCZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9iMjlyVUc5emFYUnBiMjRnUFNCb2IyOXJSR0YwWVZzeFhTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVlFZWEowY3l4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdWVmNHUmhkR1ZrTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205dmRGQnliM0JsY25SNVZtRnNkV1VnUFNCRFUxTXVTRzl2YTNNdVkyeGxZVzVTYjI5MFVISnZjR1Z5ZEhsV1lXeDFaU2hvYjI5clVtOXZkQ3dnY205dmRGQnliM0JsY25SNVZtRnNkV1VwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1UzQnNhWFFnY205dmRGQnliM0JsY25SNVZtRnNkV1VnYVc1MGJ5QnBkSE1nYVc1a2FYWnBaSFZoYkNCb2IyOXJJSFpoYkhWbGN5d2djbVZ3YkdGalpTQjBhR1VnZEdGeVoyVjBaV1FnZG1Gc2RXVWdkMmwwYUNCb2IyOXJWbUZzZFdVc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxiaUJ5WldOdmJuTjBjblZqZENCMGFHVWdjbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVWdjM1J5YVc1bkxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiM1JRY205d1pYSjBlVlpoYkhWbFVHRnlkSE1nUFNCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlM1MGIxTjBjbWx1WnlncExtMWhkR05vS0VOVFV5NVNaV2RGZUM1MllXeDFaVk53YkdsMEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlZCaGNuUnpXMmh2YjJ0UWIzTnBkR2x2YmwwZ1BTQm9iMjlyVm1Gc2RXVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdWVmNHUmhkR1ZrSUQwZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdWUVlYSjBjeTVxYjJsdUtGd2lJRndpS1R0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5YjI5MFVISnZjR1Z5ZEhsV1lXeDFaVlZ3WkdGMFpXUTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUhSb1pTQndjbTkyYVdSbFpDQm1kV3hzU0c5dmEwNWhiV1VnYVhOdUozUWdZU0J5WldkcGMzUmxjbVZrSUdodmIyc3NJSEpsZEhWeWJpQjBhR1VnY205dmRGQnliM0JsY25SNVZtRnNkV1VnZEdoaGRDQjNZWE1nY0dGemMyVmtJR2x1TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5YjI5MFVISnZjR1Z5ZEhsV1lXeDFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMHNYRzVjYmx4MElDQWdJQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJQ0FnSUU1dmNtMWhiR2w2WVhScGIyNXpYRzVjZENBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVYSFFnSUNBZ0lDQWdJQzhxSUU1dmNtMWhiR2w2WVhScGIyNXpJSE4wWVc1a1lYSmthWHBsSUVOVFV5QndjbTl3WlhKMGVTQnRZVzVwY0hWc1lYUnBiMjRnWW5rZ2NHOXNiSGxtYVd4c2FXNW5JR0p5YjNkelpYSXRjM0JsWTJsbWFXTWdhVzF3YkdWdFpXNTBZWFJwYjI1eklDaGxMbWN1SUc5d1lXTnBkSGtwWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdZVzVrSUhKbFptOXliV0YwZEdsdVp5QnpjR1ZqYVdGc0lIQnliM0JsY25ScFpYTWdLR1V1Wnk0Z1kyeHBjQ3dnY21kaVlTa2dkRzhnYkc5dmF5QnNhV3RsSUhOMFlXNWtZWEprSUc5dVpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ1RtOXliV0ZzYVhwaGRHbHZibk02SUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOXliV0ZzYVhwaGRHbHZibk1nWVhKbElIQmhjM05sWkNCaElHNXZjbTFoYkdsNllYUnBiMjRnZEdGeVoyVjBJQ2hsYVhSb1pYSWdkR2hsSUhCeWIzQmxjblI1SjNNZ2JtRnRaU3dnYVhSeklHVjRkSEpoWTNSbFpDQjJZV3gxWlN3Z2IzSWdhWFJ6SUdsdWFtVmpkR1ZrSUhaaGJIVmxLU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdobElIUmhjbWRsZEdWa0lHVnNaVzFsYm5RZ0tIZG9hV05vSUcxaGVTQnVaV1ZrSUhSdklHSmxJSEYxWlhKcFpXUXBMQ0JoYm1RZ2RHaGxJSFJoY21kbGRHVmtJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnlaV2RwYzNSbGNtVmtPaUI3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHbHdPaUJtZFc1amRHbHZiaUFvZEhsd1pTd2daV3hsYldWdWRDd2djSEp2Y0dWeWRIbFdZV3gxWlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvZEhsd1pTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2libUZ0WlZ3aU9seHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRndpWTJ4cGNGd2lPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRGJHbHdJRzVsWldSeklIUnZJR0psSUhWdWQzSmhjSEJsWkNCaGJtUWdjM1J5YVhCd1pXUWdiMllnYVhSeklHTnZiVzFoY3lCa2RYSnBibWNnWlhoMGNtRmpkR2x2Ymk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltVjRkSEpoWTNSY0lqcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxlSFJ5WVdOMFpXUTdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUZabGJHOWphWFI1SUdGc2MyOGdaWGgwY21GamRHVmtJSFJvYVhNZ2RtRnNkV1VzSUhOcmFYQWdaWGgwY21GamRHbHZiaTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRFUxTXVVbVZuUlhndWQzSmhjSEJsWkZaaGJIVmxRV3h5WldGa2VVVjRkSEpoWTNSbFpDNTBaWE4wS0hCeWIzQmxjblI1Vm1Gc2RXVXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhoMGNtRmpkR1ZrSUQwZ2NISnZjR1Z5ZEhsV1lXeDFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVbVZ0YjNabElIUm9aU0JjSW5KbFkzUW9LVndpSUhkeVlYQndaWEl1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYaDBjbUZqZEdWa0lEMGdjSEp2Y0dWeWRIbFdZV3gxWlM1MGIxTjBjbWx1WnlncExtMWhkR05vS0VOVFV5NVNaV2RGZUM1MllXeDFaVlZ1ZDNKaGNDazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVGRISnBjQ0J2Wm1ZZ1kyOXRiV0Z6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRkSEpoWTNSbFpDQTlJR1Y0ZEhKaFkzUmxaQ0EvSUdWNGRISmhZM1JsWkZzeFhTNXlaWEJzWVdObEtDOHNLRnhjY3lzcFB5OW5MQ0JjSWlCY0lpa2dPaUJ3Y205d1pYSjBlVlpoYkhWbE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWGgwY21GamRHVmtPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRGJHbHdJRzVsWldSeklIUnZJR0psSUhKbExYZHlZWEJ3WldRZ1pIVnlhVzVuSUdsdWFtVmpkR2x2Ymk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltbHVhbVZqZEZ3aU9seHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRndpY21WamRDaGNJaUFySUhCeWIzQmxjblI1Vm1Gc2RXVWdLeUJjSWlsY0lqdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWJIVnlPaUJtZFc1amRHbHZiaWgwZVhCbExDQmxiR1Z0Wlc1MExDQndjbTl3WlhKMGVWWmhiSFZsS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnVZVzFsWENJNlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdWbVZzYjJOcGRIa3VVM1JoZEdVdWFYTkdhWEpsWm05NElEOGdYQ0ptYVd4MFpYSmNJaUE2SUZ3aUxYZGxZbXRwZEMxbWFXeDBaWEpjSWp0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSW1WNGRISmhZM1JjSWpwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGVIUnlZV04wWldRZ1BTQndZWEp6WlVac2IyRjBLSEJ5YjNCbGNuUjVWbUZzZFdVcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUJsZUhSeVlXTjBaV1FnYVhNZ1RtRk9MQ0J0WldGdWFXNW5JSFJvWlNCMllXeDFaU0JwYzI0bmRDQmhiSEpsWVdSNUlHVjRkSEpoWTNSbFpDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0dWNGRISmhZM1JsWkNCOGZDQmxlSFJ5WVdOMFpXUWdQVDA5SURBcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdKc2RYSkRiMjF3YjI1bGJuUWdQU0J3Y205d1pYSjBlVlpoYkhWbExuUnZVM1J5YVc1bktDa3ViV0YwWTJnb0wySnNkWEpjWENnb1d6QXRPVjByVzBFdGVsMHJLVnhjS1M5cEtUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsbUlIUm9aU0JtYVd4MFpYSWdjM1J5YVc1bklHaGhaQ0JoSUdKc2RYSWdZMjl0Y0c5dVpXNTBMQ0J5WlhSMWNtNGdhblZ6ZENCMGFHVWdZbXgxY2lCMllXeDFaU0JoYm1RZ2RXNXBkQ0IwZVhCbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaWJIVnlRMjl0Y0c5dVpXNTBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRkSEpoWTNSbFpDQTlJR0pzZFhKRGIyMXdiMjVsYm5SYk1WMDdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1dZZ2RHaGxJR052YlhCdmJtVnVkQ0JrYjJWemJpZDBJR1Y0YVhOMExDQmtaV1poZFd4MElHSnNkWElnZEc4Z01DNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVIUnlZV04wWldRZ1BTQXdPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWNGRISmhZM1JsWkR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRbXgxY2lCdVpXVmtjeUIwYnlCaVpTQnlaUzEzY21Gd2NHVmtJR1IxY21sdVp5QnBibXBsWTNScGIyNHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pwYm1wbFkzUmNJanBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVp2Y2lCMGFHVWdZbXgxY2lCbFptWmxZM1FnZEc4Z1ltVWdablZzYkhrZ1pHVXRZWEJ3YkdsbFpDd2dhWFFnYm1WbFpITWdkRzhnWW1VZ2MyVjBJSFJ2SUZ3aWJtOXVaVndpSUdsdWMzUmxZV1FnYjJZZ01DNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY0dGeWMyVkdiRzloZENod2NtOXdaWEowZVZaaGJIVmxLU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSW01dmJtVmNJanRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVlteDFjaWhjSWlBcklIQnliM0JsY25SNVZtRnNkV1VnS3lCY0lpbGNJanRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQThQVWxGT0NCa2J5QnViM1FnYzNWd2NHOXlkQ0IwYUdVZ2MzUmhibVJoY21RZ2IzQmhZMmwwZVNCd2NtOXdaWEowZVM0Z1ZHaGxlU0IxYzJVZ1ptbHNkR1Z5T21Gc2NHaGhLRzl3WVdOcGRIazlTVTVVS1NCcGJuTjBaV0ZrTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0JoWTJsMGVUb2dablZ1WTNScGIyNGdLSFI1Y0dVc0lHVnNaVzFsYm5Rc0lIQnliM0JsY25SNVZtRnNkV1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1NVVWdQRDBnT0NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIUjVjR1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnVZVzFsWENJNlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVptbHNkR1Z5WENJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2laWGgwY21GamRGd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUR3OVNVVTRJSEpsZEhWeWJpQmhJRndpWm1sc2RHVnlYQ0lnZG1Gc2RXVWdiMllnWENKaGJIQm9ZU2h2Y0dGamFYUjVQVnhjWkhzeExETjlLVndpTGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFVjRkSEpoWTNRZ2RHaGxJSFpoYkhWbElHRnVaQ0JqYjI1MlpYSjBJR2wwSUhSdklHRWdaR1ZqYVcxaGJDQjJZV3gxWlNCMGJ5QnRZWFJqYUNCMGFHVWdjM1JoYm1SaGNtUWdRMU5USUc5d1lXTnBkSGtnY0hKdmNHVnlkSGtuY3lCbWIzSnRZWFIwYVc1bkxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGVIUnlZV04wWldRZ1BTQndjbTl3WlhKMGVWWmhiSFZsTG5SdlUzUnlhVzVuS0NrdWJXRjBZMmdvTDJGc2NHaGhYRndvYjNCaFkybDBlVDBvTGlvcFhGd3BMMmtwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Y0ZEhKaFkzUmxaQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEYjI1MlpYSjBJSFJ2SUdSbFkybHRZV3dnZG1Gc2RXVXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNVZtRnNkV1VnUFNCbGVIUnlZV04wWldSYk1WMGdMeUF4TURBN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVjJobGJpQmxlSFJ5WVdOMGFXNW5JRzl3WVdOcGRIa3NJR1JsWm1GMWJIUWdkRzhnTVNCemFXNWpaU0JoSUc1MWJHd2dkbUZzZFdVZ2JXVmhibk1nYjNCaFkybDBlU0JvWVhOdUozUWdZbVZsYmlCelpYUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNVZtRnNkV1VnUFNBeE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbTl3WlhKMGVWWmhiSFZsTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0ltbHVhbVZqZEZ3aU9seHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTl3WVdOcFptbGxaQ0JsYkdWdFpXNTBjeUJoY21VZ2NtVnhkV2x5WldRZ2RHOGdhR0YyWlNCMGFHVnBjaUI2YjI5dElIQnliM0JsY25SNUlITmxkQ0IwYnlCaElHNXZiaTE2WlhKdklIWmhiSFZsTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RdWMzUjViR1V1ZW05dmJTQTlJREU3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlRaWFIwYVc1bklIUm9aU0JtYVd4MFpYSWdjSEp2Y0dWeWRIa2diMjRnWld4bGJXVnVkSE1nZDJsMGFDQmpaWEowWVdsdUlHWnZiblFnY0hKdmNHVnlkSGtnWTI5dFltbHVZWFJwYjI1eklHTmhiaUJ5WlhOMWJIUWdhVzRnWVZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaHBaMmhzZVNCMWJtRndjR1ZoYkdsdVp5QjFiSFJ5WVMxaWIyeGthVzVuSUdWbVptVmpkQzRnVkdobGNtVW5jeUJ1YnlCM1lYa2dkRzhnY21WdFpXUjVJSFJvYVhNZ2RHaHliM1ZuYUc5MWRDQmhJSFIzWldWdUxDQmlkWFFnWkhKdmNIQnBibWNnZEdobFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVZ1lXeDBiMmRsZEdobGNpQW9kMmhsYmlCdmNHRmphWFI1SUdocGRITWdNU2tnWVhRZ2JHVmhjM1J6SUdWdWMzVnlaWE1nZEdoaGRDQjBhR1VnWjJ4cGRHTm9JR2x6SUdkdmJtVWdjRzl6ZEMxMGQyVmxibWx1Wnk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGeWMyVkdiRzloZENod2NtOXdaWEowZVZaaGJIVmxLU0ErUFNBeEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSWx3aU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJCY3lCd1pYSWdkR2hsSUdacGJIUmxjaUJ3Y205d1pYSjBlU2R6SUhOd1pXTXNJR052Ym5abGNuUWdkR2hsSUdSbFkybHRZV3dnZG1Gc2RXVWdkRzhnWVNCM2FHOXNaU0J1ZFcxaVpYSWdZVzVrSUhkeVlYQWdkR2hsSUhaaGJIVmxMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVlXeHdhR0VvYjNCaFkybDBlVDFjSWlBcklIQmhjbk5sU1c1MEtIQmhjbk5sUm14dllYUW9jSEp2Y0dWeWRIbFdZV3gxWlNrZ0tpQXhNREFzSURFd0tTQXJJRndpS1Z3aU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRmRwZEdnZ1lXeHNJRzkwYUdWeUlHSnliM2R6WlhKekxDQnViM0p0WVd4cGVtRjBhVzl1SUdseklHNXZkQ0J5WlhGMWFYSmxaRHNnY21WMGRYSnVJSFJvWlNCellXMWxJSFpoYkhWbGN5QjBhR0YwSUhkbGNtVWdjR0Z6YzJWa0lHbHVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbTVoYldWY0lqcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSnZjR0ZqYVhSNVhDSTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpWlhoMGNtRmpkRndpT2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y205d1pYSjBlVlpoYkhWbE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbWx1YW1WamRGd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbTl3WlhKMGVWWmhiSFZsTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUW1GMFkyaGxaQ0JTWldkcGMzUnlZWFJwYjI1elhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTV2ZEdVNklFSmhkR05vWldRZ2JtOXliV0ZzYVhwaGRHbHZibk1nWlhoMFpXNWtJSFJvWlNCRFUxTXVUbTl5YldGc2FYcGhkR2x2Ym5NdWNtVm5hWE4wWlhKbFpDQnZZbXBsWTNRdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxaMmx6ZEdWeU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSeVlXNXpabTl5YlhOY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWNtRnVjMlp2Y20xeklHRnlaU0IwYUdVZ2MzVmljSEp2Y0dWeWRHbGxjeUJqYjI1MFlXbHVaV1FnWW5rZ2RHaGxJRU5UVXlCY0luUnlZVzV6Wm05eWJWd2lJSEJ5YjNCbGNuUjVMaUJVY21GdWMyWnZjbTF6SUcxMWMzUWdkVzVrWlhKbmJ5QnViM0p0WVd4cGVtRjBhVzl1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpieUIwYUdGMElIUm9aWGtnWTJGdUlHSmxJSEpsWm1WeVpXNWpaV1FnYVc0Z1lTQndjbTl3WlhKMGFXVnpJRzFoY0NCaWVTQjBhR1ZwY2lCcGJtUnBkbWxrZFdGc0lHNWhiV1Z6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dWMmhsYmlCMGNtRnVjMlp2Y20xeklHRnlaU0JjSW5ObGRGd2lMQ0IwYUdWNUlHRnlaU0JoWTNSMVlXeHNlU0JoYzNOcFoyNWxaQ0IwYnlCaElIQmxjaTFsYkdWdFpXNTBJSFJ5WVc1elptOXliVU5oWTJobExpQlhhR1Z1SUdGc2JDQjBjbUZ1YzJadmNtMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWNnYVhNZ1kyOXRjR3hsZEdVZ1kyOXRjR3hsZEdVc0lFTlRVeTVtYkhWemFGUnlZVzV6Wm05eWJVTmhZMmhsS0NrZ2JYVnpkQ0JpWlNCdFlXNTFZV3hzZVNCallXeHNaV1FnZEc4Z1pteDFjMmdnZEdobElIWmhiSFZsY3lCMGJ5QjBhR1VnUkU5TkxseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVkhKaGJuTm1iM0p0SUhObGRIUnBibWNnYVhNZ1ltRjBZMmhsWkNCcGJpQjBhR2x6SUhkaGVTQjBieUJwYlhCeWIzWmxJSEJsY21admNtMWhibU5sT2lCMGFHVWdkSEpoYm5ObWIzSnRJSE4wZVd4bElHOXViSGtnYm1WbFpITWdkRzhnWW1VZ2RYQmtZWFJsWkZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVqWlNCM2FHVnVJRzExYkhScGNHeGxJSFJ5WVc1elptOXliU0J6ZFdKd2NtOXdaWEowYVdWeklHRnlaU0JpWldsdVp5QmhibWx0WVhSbFpDQnphVzExYkhSaGJtVnZkWE5zZVM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRWxGT1NCaGJtUWdRVzVrY205cFpDQkhhVzVuWlhKaWNtVmhaQ0JvWVhabElITjFjSEJ2Y25RZ1ptOXlJREpFSUMwdElHSjFkQ0J1YjNRZ00wUWdMUzBnZEhKaGJuTm1iM0p0Y3k0Z1UybHVZMlVnWVc1cGJXRjBhVzVuSUhWdWMzVndjRzl5ZEdWa1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTBnY0hKdmNHVnlkR2xsY3lCeVpYTjFiSFJ6SUdsdUlIUm9aU0JpY205M2MyVnlJR2xuYm05eWFXNW5JSFJvWlNBcVpXNTBhWEpsS2lCMGNtRnVjMlp2Y20wZ2MzUnlhVzVuTENCM1pTQndjbVYyWlc1MElIUm9aWE5sSURORUlIWmhiSFZsYzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlNCaVpXbHVaeUJ1YjNKdFlXeHBlbVZrSUdadmNpQjBhR1Z6WlNCaWNtOTNjMlZ5Y3lCemJ5QjBhR0YwSUhSM1pXVnVhVzVuSUhOcmFYQnpJSFJvWlhObElIQnliM0JsY25ScFpYTWdZV3gwYjJkbGRHaGxjbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tITnBibU5sSUdsMElIZHBiR3dnYVdkdWIzSmxJSFJvWlcwZ1lYTWdZbVZwYm1jZ2RXNXpkWEJ3YjNKMFpXUWdZbmtnZEdobElHSnliM2R6WlhJdUtTQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRW9TVVVnUEQwZ09Ta2dKaVlnSVZabGJHOWphWFI1TGxOMFlYUmxMbWx6UjJsdVoyVnlZbkpsWVdRcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQk9iM1JsT2lCVGFXNWpaU0IwYUdVZ2MzUmhibVJoYkc5dVpTQkRVMU1nWENKd1pYSnpjR1ZqZEdsMlpWd2lJSEJ5YjNCbGNuUjVJR0Z1WkNCMGFHVWdRMU5USUhSeVlXNXpabTl5YlNCY0luQmxjbk53WldOMGFYWmxYQ0lnYzNWaWNISnZjR1Z5ZEhsY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUdGeVpTQjBhR1VnYzJGdFpTQnVZVzFsTENCMGFHVWdiR0YwZEdWeUlHbHpJR2RwZG1WdUlHRWdkVzVwY1hWbElIUnZhMlZ1SUhkcGRHaHBiaUJXWld4dlkybDBlVG9nWENKMGNtRnVjMlp2Y20xUVpYSnpjR1ZqZEdsMlpWd2lMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRU5UVXk1TWFYTjBjeTUwY21GdWMyWnZjbTF6UW1GelpTQTlJRU5UVXk1TWFYTjBjeTUwY21GdWMyWnZjbTF6UW1GelpTNWpiMjVqWVhRb1ExTlRMa3hwYzNSekxuUnlZVzV6Wm05eWJYTXpSQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnUTFOVExreHBjM1J6TG5SeVlXNXpabTl5YlhOQ1lYTmxMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1YzSmhjQ0IwYUdVZ1pIbHVZVzFwWTJGc2JIa2daMlZ1WlhKaGRHVmtJRzV2Y20xaGJHbDZZWFJwYjI0Z1puVnVZM1JwYjI0Z2FXNGdZU0J1WlhjZ2MyTnZjR1VnYzI4Z2RHaGhkQ0IwY21GdWMyWnZjbTFPWVcxbEozTWdkbUZzZFdVZ2FYTmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXbHlaV1FnZDJsMGFDQnBkSE1nY21WemNHVmpkR2wyWlNCbWRXNWpkR2x2Ymk0Z0tFOTBhR1Z5ZDJselpTd2dZV3hzSUdaMWJtTjBhVzl1Y3lCM2IzVnNaQ0IwWVd0bElIUm9aU0JtYVc1aGJDQm1iM0lnYkc5dmNDZHpJSFJ5WVc1elptOXliVTVoYldVdUtTQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaG1kVzVqZEdsdmJpZ3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnlZVzV6Wm05eWJVNWhiV1VnUFNCRFUxTXVUR2x6ZEhNdWRISmhibk5tYjNKdGMwSmhjMlZiYVYwN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRMU5UTGs1dmNtMWhiR2w2WVhScGIyNXpMbkpsWjJsemRHVnlaV1JiZEhKaGJuTm1iM0p0VG1GdFpWMGdQU0JtZFc1amRHbHZiaUFvZEhsd1pTd2daV3hsYldWdWRDd2djSEp2Y0dWeWRIbFdZV3gxWlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVkdobElHNXZjbTFoYkdsNlpXUWdjSEp2Y0dWeWRIa2dibUZ0WlNCcGN5QjBhR1VnY0dGeVpXNTBJRndpZEhKaGJuTm1iM0p0WENJZ2NISnZjR1Z5ZEhrZ0xTMGdkR2hsSUhCeWIzQmxjblI1SUhSb1lYUWdhWE1nWVdOMGRXRnNiSGtnYzJWMElHbHVJRU5UVXk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWJtRnRaVndpT2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSjBjbUZ1YzJadmNtMWNJanRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWNtRnVjMlp2Y20wZ2RtRnNkV1Z6SUdGeVpTQmpZV05vWldRZ2IyNTBieUJoSUhCbGNpMWxiR1Z0Wlc1MElIUnlZVzV6Wm05eWJVTmhZMmhsSUc5aWFtVmpkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpWlhoMGNtRmpkRndpT2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKWmlCMGFHbHpJSFJ5WVc1elptOXliU0JvWVhNZ2VXVjBJSFJ2SUdKbElHRnpjMmxuYm1Wa0lHRWdkbUZzZFdVc0lISmxkSFZ5YmlCcGRITWdiblZzYkNCMllXeDFaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VSaGRHRW9aV3hsYldWdWRDa2dQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQkVZWFJoS0dWc1pXMWxiblFwTG5SeVlXNXpabTl5YlVOaFkyaGxXM1J5WVc1elptOXliVTVoYldWZElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGTmpZV3hsSUVOVFV5NU1hWE4wY3k1MGNtRnVjMlp2Y20xelFtRnpaU0JrWldaaGRXeDBJSFJ2SURFZ2QyaGxjbVZoY3lCaGJHd2diM1JvWlhJZ2RISmhibk5tYjNKdElIQnliM0JsY25ScFpYTWdaR1ZtWVhWc2RDQjBieUF3TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUM5ZWMyTmhiR1V2YVM1MFpYTjBLSFJ5WVc1elptOXliVTVoYldVcElEOGdNU0E2SURBN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZkb1pXNGdkSEpoYm5ObWIzSnRJSFpoYkhWbGN5QmhjbVVnYzJWMExDQjBhR1Y1SUdGeVpTQjNjbUZ3Y0dWa0lHbHVJSEJoY21WdWRHaGxjMlZ6SUdGeklIQmxjaUIwYUdVZ1ExTlRJSE53WldNdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSb2RYTXNJSGRvWlc0Z1pYaDBjbUZqZEdsdVp5QjBhR1ZwY2lCMllXeDFaWE1nS0dadmNpQjBkMlZsYmlCallXeGpkV3hoZEdsdmJuTXBMQ0IzWlNCemRISnBjQ0J2Wm1ZZ2RHaGxJSEJoY21WdWRHaGxjMlZ6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0VvWld4bGJXVnVkQ2t1ZEhKaGJuTm1iM0p0UTJGamFHVmJkSEpoYm5ObWIzSnRUbUZ0WlYwdWNtVndiR0ZqWlNndld5Z3BYUzluTENCY0lsd2lLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKcGJtcGxZM1JjSWpwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsdWRtRnNhV1FnUFNCbVlXeHpaVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKWmlCaGJpQnBibVJwZG1sa2RXRnNJSFJ5WVc1elptOXliU0J3Y205d1pYSjBlU0JqYjI1MFlXbHVjeUJoYmlCMWJuTjFjSEJ2Y25SbFpDQjFibWwwSUhSNWNHVXNJSFJvWlNCaWNtOTNjMlZ5SUdsbmJtOXlaWE1nZEdobElDcGxiblJwY21VcUlIUnlZVzV6Wm05eWJTQndjbTl3WlhKMGVTNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZHaDFjeXdnY0hKdmRHVmpkQ0IxYzJWeWN5Qm1jbTl0SUhSb1pXMXpaV3gyWlhNZ1lua2djMnRwY0hCcGJtY2djMlYwZEdsdVp5Qm1iM0lnZEhKaGJuTm1iM0p0SUhaaGJIVmxjeUJ6ZFhCd2JHbGxaQ0IzYVhSb0lHbHVkbUZzYVdRZ2RXNXBkQ0IwZVhCbGN5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVM2RwZEdOb0lHOXVJSFJvWlNCaVlYTmxJSFJ5WVc1elptOXliU0IwZVhCbE95QnBaMjV2Y21VZ2RHaGxJR0Y0YVhNZ1lua2djbVZ0YjNacGJtY2dkR2hsSUd4aGMzUWdiR1YwZEdWeUlHWnliMjBnZEdobElIUnlZVzV6Wm05eWJTZHpJRzVoYldVdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvZEhKaGJuTm1iM0p0VG1GdFpTNXpkV0p6ZEhJb01Dd2dkSEpoYm5ObWIzSnRUbUZ0WlM1c1pXNW5kR2dnTFNBeEtTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVjJocGRHVnNhWE4wSUhWdWFYUWdkSGx3WlhNZ1ptOXlJR1ZoWTJnZ2RISmhibk5tYjNKdExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luUnlZVzV6YkdGMFpWd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWRtRnNhV1FnUFNBaEx5Z2xmSEI0ZkdWdGZISmxiWHgyZDN4MmFIeGNYR1FwSkM5cExuUmxjM1FvY0hKdmNHVnlkSGxXWVd4MVpTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJUYVc1alpTQmhiaUJoZUdsekxXWnlaV1VnWENKelkyRnNaVndpSUhCeWIzQmxjblI1SUdseklITjFjSEJ2Y25SbFpDQmhjeUIzWld4c0xDQmhJR3hwZEhSc1pTQm9ZV05ySUdseklIVnpaV1FnYUdWeVpTQjBieUJrWlhSbFkzUWdhWFFnWW5rZ1kyaHZjSEJwYm1jZ2IyWm1JR2wwY3lCc1lYTjBJR3hsZEhSbGNpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnpZMkZzWENJNlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYzJOaGJHVmNJanBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkRhSEp2YldVZ2IyNGdRVzVrY205cFpDQm9ZWE1nWVNCaWRXY2dhVzRnZDJocFkyZ2djMk5oYkdWa0lHVnNaVzFsYm5SeklHSnNkWElnYVdZZ2RHaGxhWElnYVc1cGRHbGhiQ0J6WTJGc1pWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJR2x6SUdKbGJHOTNJREVnS0hkb2FXTm9JR05oYmlCb1lYQndaVzRnZDJsMGFDQm1iM0pqWldabFpXUnBibWNwTGlCVWFIVnpMQ0IzWlNCa1pYUmxZM1FnWVNCNVpYUXRkVzV6WlhRZ2MyTmhiR1VnY0hKdmNHVnlkSGxjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhibVFnWlc1emRYSmxJSFJvWVhRZ2FYUnpJR1pwY25OMElIWmhiSFZsSUdseklHRnNkMkY1Y3lBeExpQk5iM0psSUdsdVptODZJR2gwZEhBNkx5OXpkR0ZqYTI5MlpYSm1iRzkzTG1OdmJTOXhkV1Z6ZEdsdmJuTXZNVEEwTVRjNE9UQXZZM056TXkxaGJtbHRZWFJwYjI1ekxYZHBkR2d0ZEhKaGJuTm1iM0p0TFdOaGRYTmxjeTFpYkhWeWNtVmtMV1ZzWlcxbGJuUnpMVzl1TFhkbFltdHBkQzh4TURReE56azJNaU14TURReE56azJNaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hXWld4dlkybDBlUzVUZEdGMFpTNXBjMEZ1WkhKdmFXUWdKaVlnUkdGMFlTaGxiR1Z0Wlc1MEtTNTBjbUZ1YzJadmNtMURZV05vWlZ0MGNtRnVjMlp2Y20xT1lXMWxYU0E5UFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSEJ5YjNCbGNuUjVWbUZzZFdVZ1BDQXhLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUjVWbUZzZFdVZ1BTQXhPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1ZG1Gc2FXUWdQU0FoTHloY1hHUXBKQzlwTG5SbGMzUW9jSEp2Y0dWeWRIbFdZV3gxWlNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYzJ0bGQxd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWRtRnNhV1FnUFNBaEx5aGtaV2Q4WEZ4a0tTUXZhUzUwWlhOMEtIQnliM0JsY25SNVZtRnNkV1VwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbkp2ZEdGMFpWd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWRtRnNhV1FnUFNBaEx5aGtaV2Q4WEZ4a0tTUXZhUzUwWlhOMEtIQnliM0JsY25SNVZtRnNkV1VwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwYm5aaGJHbGtLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCQmN5QndaWElnZEdobElFTlRVeUJ6Y0dWakxDQjNjbUZ3SUhSb1pTQjJZV3gxWlNCcGJpQndZWEpsYm5Sb1pYTmxjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVSaGRHRW9aV3hsYldWdWRDa3VkSEpoYm5ObWIzSnRRMkZqYUdWYmRISmhibk5tYjNKdFRtRnRaVjBnUFNCY0lpaGNJaUFySUhCeWIzQmxjblI1Vm1Gc2RXVWdLeUJjSWlsY0lqdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVGc2RHaHZkV2RvSUhSb1pTQjJZV3gxWlNCcGN5QnpaWFFnYjI0Z2RHaGxJSFJ5WVc1elptOXliVU5oWTJobElHOWlhbVZqZEN3Z2NtVjBkWEp1SUhSb1pTQnVaWGRzZVMxMWNHUmhkR1ZrSUhaaGJIVmxJR1p2Y2lCMGFHVWdZMkZzYkdsdVp5QmpiMlJsSUhSdklIQnliMk5sYzNNZ1lYTWdibTl5YldGc0xpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUkdGMFlTaGxiR1Z0Wlc1MEtTNTBjbUZ1YzJadmNtMURZV05vWlZ0MGNtRnVjMlp2Y20xT1lXMWxYVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU2dwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVOdmJHOXljMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1UybHVZMlVnVm1Wc2IyTnBkSGtnYjI1c2VTQmhibWx0WVhSbGN5QmhJSE5wYm1kc1pTQnVkVzFsY21saklIWmhiSFZsSUhCbGNpQndjbTl3WlhKMGVTd2dZMjlzYjNJZ1lXNXBiV0YwYVc5dUlHbHpJR0ZqYUdsbGRtVmtJR0o1SUdodmIydHBibWNnZEdobElHbHVaR2wyYVdSMVlXd2dVa2RDUVNCamIyMXdiMjVsYm5SeklHOW1JRU5UVXlCamIyeHZjaUJ3Y205d1pYSjBhV1Z6TGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRV05qYjNKa2FXNW5iSGtzSUdOdmJHOXlJSFpoYkhWbGN5QnRkWE4wSUdKbElHNXZjbTFoYkdsNlpXUWdLR1V1Wnk0Z1hDSWpabVl3TURBd1hDSXNJRndpY21Wa1hDSXNJR0Z1WkNCY0luSm5ZaWd5TlRVc0lEQXNJREFwWENJZ1BUMCtJRndpTWpVMUlEQWdNQ0F4WENJcElITnZJSFJvWVhRZ2RHaGxhWElnWTI5dGNHOXVaVzUwY3lCallXNGdZbVVnYVc1cVpXTjBaV1F2WlhoMGNtRmpkR1ZrSUdKNUlFTlRVeTVJYjI5cmN5QnNiMmRwWXk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnUTFOVExreHBjM1J6TG1OdmJHOXljeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGZHlZWEFnZEdobElHUjVibUZ0YVdOaGJHeDVJR2RsYm1WeVlYUmxaQ0J1YjNKdFlXeHBlbUYwYVc5dUlHWjFibU4wYVc5dUlHbHVJR0VnYm1WM0lITmpiM0JsSUhOdklIUm9ZWFFnWTI5c2IzSk9ZVzFsSjNNZ2RtRnNkV1VnYVhNZ2NHRnBjbVZrSUhkcGRHZ2dhWFJ6SUhKbGMzQmxZM1JwZG1VZ1puVnVZM1JwYjI0dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tFOTBhR1Z5ZDJselpTd2dZV3hzSUdaMWJtTjBhVzl1Y3lCM2IzVnNaQ0IwWVd0bElIUm9aU0JtYVc1aGJDQm1iM0lnYkc5dmNDZHpJR052Ykc5eVRtRnRaUzRwSUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0daMWJtTjBhVzl1SUNncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJHOXlUbUZ0WlNBOUlFTlRVeTVNYVhOMGN5NWpiMnh2Y25OYmFWMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nU1c0Z1NVVThQVGdzSUhkb2FXTm9JSE4xY0hCdmNuUWdjbWRpSUdKMWRDQnViM1FnY21kaVlTd2dZMjlzYjNJZ2NISnZjR1Z5ZEdsbGN5QmhjbVVnY21WMlpYSjBaV1FnZEc4Z2NtZGlJR0o1SUhOMGNtbHdjR2x1WnlCdlptWWdkR2hsSUdGc2NHaGhJR052YlhCdmJtVnVkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ExTlRMazV2Y20xaGJHbDZZWFJwYjI1ekxuSmxaMmx6ZEdWeVpXUmJZMjlzYjNKT1lXMWxYU0E5SUdaMWJtTjBhVzl1S0hSNWNHVXNJR1ZzWlcxbGJuUXNJSEJ5YjNCbGNuUjVWbUZzZFdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvZEhsd1pTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnVZVzFsWENJNlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMnh2Y2s1aGJXVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUTI5dWRtVnlkQ0JoYkd3Z1kyOXNiM0lnZG1Gc2RXVnpJR2x1ZEc4Z2RHaGxJSEpuWWlCbWIzSnRZWFF1SUNoUGJHUWdTVVVnWTJGdUlISmxkSFZ5YmlCb1pYZ2dkbUZzZFdWeklHRnVaQ0JqYjJ4dmNpQnVZVzFsY3lCcGJuTjBaV0ZrSUc5bUlISm5ZaTl5WjJKaExpa2dLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2laWGgwY21GamRGd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaWGgwY21GamRHVmtPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUhSb1pTQmpiMnh2Y2lCcGN5QmhiSEpsWVdSNUlHbHVJR2wwY3lCb2IyOXJZV0pzWlNCbWIzSnRJQ2hsTG1jdUlGd2lNalUxSURJMU5TQXlOVFVnTVZ3aUtTQmtkV1VnZEc4Z2FHRjJhVzVuSUdKbFpXNGdjSEpsZG1sdmRYTnNlU0JsZUhSeVlXTjBaV1FzSUhOcmFYQWdaWGgwY21GamRHbHZiaTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VOVFV5NVNaV2RGZUM1M2NtRndjR1ZrVm1Gc2RXVkJiSEpsWVdSNVJYaDBjbUZqZEdWa0xuUmxjM1FvY0hKdmNHVnlkSGxXWVd4MVpTa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEhKaFkzUmxaQ0E5SUhCeWIzQmxjblI1Vm1Gc2RXVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyOXVkbVZ5ZEdWa0xGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVRtRnRaWE1nUFNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKc1lXTnJPaUJjSW5KbllpZ3dMQ0F3TENBd0tWd2lMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliSFZsT2lCY0luSm5ZaWd3TENBd0xDQXlOVFVwWENJc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkeVlYazZJRndpY21kaUtERXlPQ3dnTVRJNExDQXhNamdwWENJc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkeVpXVnVPaUJjSW5KbllpZ3dMQ0F4TWpnc0lEQXBYQ0lzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWkRvZ1hDSnlaMklvTWpVMUxDQXdMQ0F3S1Z3aUxGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FHbDBaVG9nWENKeVoySW9NalUxTENBeU5UVXNJREkxTlNsY0lseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFTnZiblpsY25RZ1kyOXNiM0lnYm1GdFpYTWdkRzhnY21kaUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0M5ZVcwRXRlbDBySkM5cExuUmxjM1FvY0hKdmNHVnlkSGxXWVd4MVpTa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMjlzYjNKT1lXMWxjMXR3Y205d1pYSjBlVlpoYkhWbFhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuWmxjblJsWkNBOUlHTnZiRzl5VG1GdFpYTmJjSEp2Y0dWeWRIbFdZV3gxWlYxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUJoYmlCMWJtMWhkR05vWldRZ1kyOXNiM0lnYm1GdFpTQnBjeUJ3Y205MmFXUmxaQ3dnWkdWbVlYVnNkQ0IwYnlCaWJHRmpheTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRtVnlkR1ZrSUQwZ1kyOXNiM0pPWVcxbGN5NWliR0ZqYXp0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEYjI1MlpYSjBJR2hsZUNCMllXeDFaWE1nZEc4Z2NtZGlMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoRFUxTXVVbVZuUlhndWFYTklaWGd1ZEdWemRDaHdjbTl3WlhKMGVWWmhiSFZsS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5abGNuUmxaQ0E5SUZ3aWNtZGlLRndpSUNzZ1ExTlRMbFpoYkhWbGN5NW9aWGhVYjFKbllpaHdjbTl3WlhKMGVWWmhiSFZsS1M1cWIybHVLRndpSUZ3aUtTQXJJRndpS1Z3aU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnZEdobElIQnliM1pwWkdWa0lHTnZiRzl5SUdSdlpYTnVKM1FnYldGMFkyZ2dZVzU1SUc5bUlIUm9aU0JoWTJObGNIUmxaQ0JqYjJ4dmNpQm1iM0p0WVhSekxDQmtaV1poZFd4MElIUnZJR0pzWVdOckxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2doS0M5ZWNtZGlZVDljWENndmFTNTBaWE4wS0hCeWIzQmxjblI1Vm1Gc2RXVXBLU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblpsY25SbFpDQTlJR052Ykc5eVRtRnRaWE11WW14aFkyczdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZKbGJXOTJaU0IwYUdVZ2MzVnljbTkxYm1ScGJtY2dYQ0p5WjJJdmNtZGlZU2dwWENJZ2MzUnlhVzVuSUhSb1pXNGdjbVZ3YkdGalpTQmpiMjF0WVhNZ2QybDBhQ0J6Y0dGalpYTWdZVzVrSUhOMGNtbHdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhCbFlYUmxaQ0J6Y0dGalpYTWdLR2x1SUdOaGMyVWdkR2hsSUhaaGJIVmxJR2x1WTJ4MVpHVmtJSE53WVdObGN5QjBieUJpWldkcGJpQjNhWFJvS1M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRkSEpoWTNSbFpDQTlJQ2hqYjI1MlpYSjBaV1FnZkh3Z2NISnZjR1Z5ZEhsV1lXeDFaU2t1ZEc5VGRISnBibWNvS1M1dFlYUmphQ2hEVTFNdVVtVm5SWGd1ZG1Gc2RXVlZibmR5WVhBcFd6RmRMbkpsY0d4aFkyVW9MeXdvWEZ4ekt5ay9MMmNzSUZ3aUlGd2lLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGTnZJR3h2Ym1jZ1lYTWdkR2hwY3lCcGMyNG5kQ0E4UFVsRk9Dd2dZV1JrSUdFZ1ptOTFjblJvSUNoaGJIQm9ZU2tnWTI5dGNHOXVaVzUwSUdsbUlHbDBKM01nYldsemMybHVaeUJoYm1RZ1pHVm1ZWFZzZENCcGRDQjBieUF4SUNoMmFYTnBZbXhsS1M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRW9TVVVnUEQwZ09Da2dKaVlnWlhoMGNtRmpkR1ZrTG5Od2JHbDBLRndpSUZ3aUtTNXNaVzVuZEdnZ1BUMDlJRE1wSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGRISmhZM1JsWkNBclBTQmNJaUF4WENJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYaDBjbUZqZEdWa08xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKcGJtcGxZM1JjSWpwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1dZZ2RHaHBjeUJwY3lCSlJUdzlPQ0JoYm1RZ1lXNGdZV3h3YUdFZ1kyOXRjRzl1Wlc1MElHVjRhWE4wY3l3Z2MzUnlhWEFnYVhRZ2IyWm1MaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvU1VVZ1BEMGdPQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnliM0JsY25SNVZtRnNkV1V1YzNCc2FYUW9YQ0lnWENJcExteGxibWQwYUNBOVBUMGdOQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNVZtRnNkV1VnUFNCd2NtOXdaWEowZVZaaGJIVmxMbk53YkdsMEtDOWNYSE1yTHlrdWMyeHBZMlVvTUN3Z015a3VhbTlwYmloY0lpQmNJaWs3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTkwYUdWeWQybHpaU3dnWVdSa0lHRWdabTkxY25Sb0lDaGhiSEJvWVNrZ1kyOXRjRzl1Wlc1MElHbG1JR2wwSjNNZ2JXbHpjMmx1WnlCaGJtUWdaR1ZtWVhWc2RDQnBkQ0IwYnlBeElDaDJhWE5wWW14bEtTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbTl3WlhKMGVWWmhiSFZsTG5Od2JHbDBLRndpSUZ3aUtTNXNaVzVuZEdnZ1BUMDlJRE1wSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblI1Vm1Gc2RXVWdLejBnWENJZ01Wd2lPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1VtVXRhVzV6WlhKMElIUm9aU0JpY205M2MyVnlMV0Z3Y0hKdmNISnBZWFJsSUhkeVlYQndaWElvWENKeVoySXZjbWRpWVNncFhDSXBMQ0JwYm5ObGNuUWdZMjl0YldGekxDQmhibVFnYzNSeWFYQWdiMlptSUdSbFkybHRZV3dnZFc1cGRITmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNGdZV3hzSUhaaGJIVmxjeUJpZFhRZ2RHaGxJR1p2ZFhKMGFDQW9VaXdnUnl3Z1lXNWtJRUlnYjI1c2VTQmhZMk5sY0hRZ2QyaHZiR1VnYm5WdFltVnljeWt1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9TVVVnUEQwZ09DQS9JRndpY21kaVhDSWdPaUJjSW5KblltRmNJaWtnS3lCY0lpaGNJaUFySUhCeWIzQmxjblI1Vm1Gc2RXVXVjbVZ3YkdGalpTZ3ZYRnh6S3k5bkxDQmNJaXhjSWlrdWNtVndiR0ZqWlNndlhGd3VLRnhjWkNrcktEODlMQ2t2Wnl3Z1hDSmNJaWtnS3lCY0lpbGNJanRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU2dwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmU3hjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JseDBJQ0FnSUNBZ0lDQWdJQ0JEVTFNZ1VISnZjR1Z5ZEhrZ1RtRnRaWE5jYmx4MElDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQk9ZVzFsY3pvZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQkRZVzFsYkdOaGMyVWdZU0J3Y205d1pYSjBlU0J1WVcxbElHbHVkRzhnYVhSeklFcGhkbUZUWTNKcGNIUWdibTkwWVhScGIyNGdLR1V1Wnk0Z1hDSmlZV05yWjNKdmRXNWtMV052Ykc5eVhDSWdQVDArSUZ3aVltRmphMmR5YjNWdVpFTnZiRzl5WENJcExseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkRZVzFsYkdOaGMybHVaeUJwY3lCMWMyVmtJSFJ2SUc1dmNtMWhiR2w2WlNCd2NtOXdaWEowZVNCdVlXMWxjeUJpWlhSM1pXVnVJR0Z1WkNCaFkzSnZjM01nWTJGc2JITXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR05oYldWc1EyRnpaVG9nWm5WdVkzUnBiMjRnS0hCeWIzQmxjblI1S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISnZjR1Z5ZEhrdWNtVndiR0ZqWlNndkxTaGNYSGNwTDJjc0lHWjFibU4wYVc5dUlDaHRZWFJqYUN3Z2MzVmlUV0YwWTJncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNWaVRXRjBZMmd1ZEc5VmNIQmxja05oYzJVb0tUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFWnZjaUJUVmtjZ1pXeGxiV1Z1ZEhNc0lITnZiV1VnY0hKdmNHVnlkR2xsY3lBb2JtRnRaV3g1TENCa2FXMWxibk5wYjI1aGJDQnZibVZ6S1NCaGNtVWdSMFZVTDFORlZDQjJhV0VnZEdobElHVnNaVzFsYm5RbmN5QklWRTFNSUdGMGRISnBZblYwWlhNZ0tHbHVjM1JsWVdRZ2IyWWdkbWxoSUVOVFV5QnpkSGxzWlhNcExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQlRWa2RCZEhSeWFXSjFkR1U2SUdaMWJtTjBhVzl1SUNod2NtOXdaWEowZVNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUZOV1IwRjBkSEpwWW5WMFpYTWdQU0JjSW5kcFpIUm9mR2hsYVdkb2RIeDRmSGw4WTNoOFkzbDhjbnh5ZUh4eWVYeDRNWHg0TW54NU1YeDVNbHdpTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEWlhKMFlXbHVJR0p5YjNkelpYSnpJSEpsY1hWcGNtVWdZVzRnVTFaSElIUnlZVzV6Wm05eWJTQjBieUJpWlNCaGNIQnNhV1ZrSUdGeklHRnVJR0YwZEhKcFluVjBaUzRnS0U5MGFHVnlkMmx6WlN3Z1lYQndiR2xqWVhScGIyNGdkbWxoSUVOVFV5QnBjeUJ3Y21WbVpYSmhZbXhsSUdSMVpTQjBieUF6UkNCemRYQndiM0owTGlrZ0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoSlJTQjhmQ0FvVm1Wc2IyTnBkSGt1VTNSaGRHVXVhWE5CYm1SeWIybGtJQ1ltSUNGV1pXeHZZMmwwZVM1VGRHRjBaUzVwYzBOb2NtOXRaU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JUVmtkQmRIUnlhV0oxZEdWeklDczlJRndpZkhSeVlXNXpabTl5YlZ3aU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGSmxaMFY0Y0NoY0lsNG9YQ0lnS3lCVFZrZEJkSFJ5YVdKMWRHVnpJQ3NnWENJcEpGd2lMQ0JjSW1sY0lpa3VkR1Z6ZENod2NtOXdaWEowZVNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dSR1YwWlhKdGFXNWxJSGRvWlhSb1pYSWdZU0J3Y205d1pYSjBlU0J6YUc5MWJHUWdZbVVnYzJWMElIZHBkR2dnWVNCMlpXNWtiM0lnY0hKbFptbDRMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCSlppQmhJSEJ5WldacGVHVmtJSFpsY25OcGIyNGdiMllnZEdobElIQnliM0JsY25SNUlHVjRhWE4wY3l3Z2NtVjBkWEp1SUdsMExpQlBkR2hsY25kcGMyVXNJSEpsZEhWeWJpQjBhR1VnYjNKcFoybHVZV3dnY0hKdmNHVnlkSGtnYm1GdFpTNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTV1lnZEdobElIQnliM0JsY25SNUlHbHpJRzV2ZENCaGRDQmhiR3dnYzNWd2NHOXlkR1ZrSUdKNUlIUm9aU0JpY205M2MyVnlMQ0J5WlhSMWNtNGdZU0JtWVd4elpTQm1iR0ZuTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCd2NtVm1hWGhEYUdWamF6b2dablZ1WTNScGIyNGdLSEJ5YjNCbGNuUjVLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUIwYUdseklIQnliM0JsY25SNUlHaGhjeUJoYkhKbFlXUjVJR0psWlc0Z1kyaGxZMnRsWkN3Z2NtVjBkWEp1SUhSb1pTQmpZV05vWldRZ2RtRnNkV1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvVm1Wc2IyTnBkSGt1VTNSaGRHVXVjSEpsWm1sNFRXRjBZMmhsYzF0d2NtOXdaWEowZVYwcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3lCV1pXeHZZMmwwZVM1VGRHRjBaUzV3Y21WbWFYaE5ZWFJqYUdWelczQnliM0JsY25SNVhTd2dkSEoxWlNCZE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbVZ1Wkc5eWN5QTlJRnNnWENKY0lpd2dYQ0pYWldKcmFYUmNJaXdnWENKTmIzcGNJaXdnWENKdGMxd2lMQ0JjSWs5Y0lpQmRPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lIWmxibVJ2Y25OTVpXNW5kR2dnUFNCMlpXNWtiM0p6TG14bGJtZDBhRHNnYVNBOElIWmxibVJ2Y25OTVpXNW5kR2c3SUdrckt5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZjR1Z5ZEhsUWNtVm1hWGhsWkR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBOVBUMGdNQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRIbFFjbVZtYVhobFpDQTlJSEJ5YjNCbGNuUjVPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRMkZ3YVhSaGJHbDZaU0IwYUdVZ1ptbHljM1FnYkdWMGRHVnlJRzltSUhSb1pTQndjbTl3WlhKMGVTQjBieUJqYjI1bWIzSnRJSFJ2SUVwaGRtRlRZM0pwY0hRZ2RtVnVaRzl5SUhCeVpXWnBlQ0J1YjNSaGRHbHZiaUFvWlM1bkxpQjNaV0pyYVhSR2FXeDBaWElwTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkSGxRY21WbWFYaGxaQ0E5SUhabGJtUnZjbk5iYVYwZ0t5QndjbTl3WlhKMGVTNXlaWEJzWVdObEtDOWVYRngzTHl3Z1puVnVZM1JwYjI0b2JXRjBZMmdwSUhzZ2NtVjBkWEp1SUcxaGRHTm9MblJ2VlhCd1pYSkRZWE5sS0NrN0lIMHBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRMmhsWTJzZ2FXWWdkR2hsSUdKeWIzZHpaWElnYzNWd2NHOXlkSE1nZEdocGN5QndjbTl3WlhKMGVTQmhjeUJ3Y21WbWFYaGxaQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRlI1Y0dVdWFYTlRkSEpwYm1jb1ZtVnNiMk5wZEhrdVUzUmhkR1V1Y0hKbFptbDRSV3hsYldWdWRDNXpkSGxzWlZ0d2NtOXdaWEowZVZCeVpXWnBlR1ZrWFNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFTmhZMmhsSUhSb1pTQnRZWFJqYUM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZabGJHOWphWFI1TGxOMFlYUmxMbkJ5WldacGVFMWhkR05vWlhOYmNISnZjR1Z5ZEhsZElEMGdjSEp2Y0dWeWRIbFFjbVZtYVhobFpEdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZzZ2NISnZjR1Z5ZEhsUWNtVm1hWGhsWkN3Z2RISjFaU0JkTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdkR2hsSUdKeWIzZHpaWElnWkc5bGMyNG5kQ0J6ZFhCd2IzSjBJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2FXNGdZVzU1SUdadmNtMHNJR2x1WTJ4MVpHVWdZU0JtWVd4elpTQm1iR0ZuSUhOdklIUm9ZWFFnZEdobElHTmhiR3hsY2lCallXNGdaR1ZqYVdSbElHaHZkeUIwYnlCd2NtOWpaV1ZrTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiSUhCeWIzQmxjblI1TENCbVlXeHpaU0JkTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmU3hjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JseDBJQ0FnSUNBZ0lDQWdJQ0JEVTFNZ1VISnZjR1Z5ZEhrZ1ZtRnNkV1Z6WEc1Y2RDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdWbUZzZFdWek9pQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWhsZUNCMGJ5QlNSMElnWTI5dWRtVnljMmx2Ymk0Z1EyOXdlWEpwWjJoMElGUnBiU0JFYjNkdU9pQm9kSFJ3T2k4dmMzUmhZMnR2ZG1WeVpteHZkeTVqYjIwdmNYVmxjM1JwYjI1ekx6VTJNak00TXpndmNtZGlMWFJ2TFdobGVDMWhibVF0YUdWNExYUnZMWEpuWWlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCb1pYaFViMUpuWWpvZ1puVnVZM1JwYjI0Z0tHaGxlQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5vYjNKMFptOXliVkpsWjJWNElEMGdMMTRqUHloYllTMW1YRnhrWFNrb1cyRXRabHhjWkYwcEtGdGhMV1pjWEdSZEtTUXZhU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMjVuWm05eWJWSmxaMlY0SUQwZ0wxNGpQeWhiWVMxbVhGeGtYWHN5ZlNrb1cyRXRabHhjWkYxN01uMHBLRnRoTFdaY1hHUmRleko5S1NRdmFTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVoySlFZWEowY3p0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR1Y0SUQwZ2FHVjRMbkpsY0d4aFkyVW9jMmh2Y25SbWIzSnRVbVZuWlhnc0lHWjFibU4wYVc5dUlDaHRMQ0J5TENCbkxDQmlLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISWdLeUJ5SUNzZ1p5QXJJR2NnS3lCaUlDc2dZanRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WjJKUVlYSjBjeUE5SUd4dmJtZG1iM0p0VW1WblpYZ3VaWGhsWXlob1pYZ3BPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21kaVVHRnlkSE1nUHlCYklIQmhjbk5sU1c1MEtISm5ZbEJoY25Seld6RmRMQ0F4Tmlrc0lIQmhjbk5sU1c1MEtISm5ZbEJoY25Seld6SmRMQ0F4Tmlrc0lIQmhjbk5sU1c1MEtISm5ZbEJoY25Seld6TmRMQ0F4TmlrZ1hTQTZJRnNnTUN3Z01Dd2dNQ0JkTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdselExTlRUblZzYkZaaGJIVmxPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGUm9aU0JpY205M2MyVnlJR1JsWm1GMWJIUnpJRU5UVXlCMllXeDFaWE1nZEdoaGRDQm9ZWFpsSUc1dmRDQmlaV1Z1SUhObGRDQjBieUJsYVhSb1pYSWdNQ0J2Y2lCdmJtVWdiMllnYzJWMlpYSmhiQ0J3YjNOemFXSnNaU0J1ZFd4c0xYWmhiSFZsSUhOMGNtbHVaM011WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVhSFZ6TENCM1pTQmphR1ZqYXlCbWIzSWdZbTkwYUNCbVlXeHphVzVsYzNNZ1lXNWtJSFJvWlhObElITndaV05wWVd3Z2MzUnlhVzVuY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1MWJHd3RkbUZzZFdVZ1kyaGxZMnRwYm1jZ2FYTWdjR1Z5Wm05eWJXVmtJSFJ2SUdSbFptRjFiSFFnZEdobElITndaV05wWVd3Z2MzUnlhVzVuY3lCMGJ5QXdJQ2htYjNJZ2RHaGxJSE5oYTJVZ2IyWWdkSGRsWlc1cGJtY3BJRzl5SUhSb1pXbHlJR2h2YjJ0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCc1lYUmxjeUJoY3lCa1pXWnBibVZrSUdGeklFTlRVeTVJYjI5cmN5QW9abTl5SUhSb1pTQnpZV3RsSUc5bUlHaHZiMnNnYVc1cVpXTjBhVzl1TDJWNGRISmhZM1JwYjI0cExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nUTJoeWIyMWxJSEpsZEhWeWJuTWdYQ0p5WjJKaEtEQXNJREFzSURBc0lEQXBYQ0lnWm05eUlHRnVJSFZ1WkdWbWFXNWxaQ0JqYjJ4dmNpQjNhR1Z5WldGeklFbEZJSEpsZEhWeWJuTWdYQ0owY21GdWMzQmhjbVZ1ZEZ3aUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2gyWVd4MVpTQTlQU0F3SUh4OElDOWVLRzV2Ym1WOFlYVjBiM3gwY21GdWMzQmhjbVZ1ZEh3b2NtZGlZVnhjS0RBc0lEOHdMQ0EvTUN3Z1B6QmNYQ2twS1NRdmFTNTBaWE4wS0haaGJIVmxLU2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1VtVjBjbWxsZG1VZ1lTQndjbTl3WlhKMGVTZHpJR1JsWm1GMWJIUWdkVzVwZENCMGVYQmxMaUJWYzJWa0lHWnZjaUJoYzNOcFoyNXBibWNnWVNCMWJtbDBJSFI1Y0dVZ2QyaGxiaUJ2Ym1VZ2FYTWdibTkwSUhOMWNIQnNhV1ZrSUdKNUlIUm9aU0IxYzJWeUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQm5aWFJWYm1sMFZIbHdaVG9nWm5WdVkzUnBiMjRnS0hCeWIzQmxjblI1S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvTDE0b2NtOTBZWFJsZkhOclpYY3BMMmt1ZEdWemRDaHdjbTl3WlhKMGVTa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1hDSmtaV2RjSWp0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9MeWhlS0hOallXeGxmSE5qWVd4bFdIeHpZMkZzWlZsOGMyTmhiR1ZhZkdGc2NHaGhmR1pzWlhoSGNtOTNmR1pzWlhoSVpXbG5hSFI4ZWtsdVpHVjRmR1p2Ym5SWFpXbG5hSFFwSkNsOEtDaHZjR0ZqYVhSNWZISmxaSHhuY21WbGJueGliSFZsZkdGc2NHaGhLU1FwTDJrdWRHVnpkQ2h3Y205d1pYSjBlU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWFHVWdZV0p2ZG1VZ2NISnZjR1Z5ZEdsbGN5QmhjbVVnZFc1cGRHeGxjM011SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRndpWENJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFUmxabUYxYkhRZ2RHOGdjSGdnWm05eUlHRnNiQ0J2ZEdobGNpQndjbTl3WlhKMGFXVnpMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmNJbkI0WENJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nU0ZSTlRDQmxiR1Z0Wlc1MGN5QmtaV1poZFd4MElIUnZJR0Z1SUdGemMyOWphV0YwWldRZ1pHbHpjR3hoZVNCMGVYQmxJSGRvWlc0Z2RHaGxlU2R5WlNCdWIzUWdjMlYwSUhSdklHUnBjM0JzWVhrNmJtOXVaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nVkdocGN5Qm1kVzVqZEdsdmJpQnBjeUIxYzJWa0lHWnZjaUJqYjNKeVpXTjBiSGtnYzJWMGRHbHVaeUIwYUdVZ2JtOXVMVndpYm05dVpWd2lJR1JwYzNCc1lYa2dkbUZzZFdVZ2FXNGdZMlZ5ZEdGcGJpQldaV3h2WTJsMGVTQnlaV1JwY21WamRITXNJSE4xWTJnZ1lYTWdabUZrWlVsdUwwOTFkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWjJWMFJHbHpjR3hoZVZSNWNHVTZJR1oxYm1OMGFXOXVJQ2hsYkdWdFpXNTBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkR0ZuVG1GdFpTQTlJR1ZzWlcxbGJuUWdKaVlnWld4bGJXVnVkQzUwWVdkT1lXMWxMblJ2VTNSeWFXNW5LQ2t1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDOWVLR0o4WW1sbmZHbDhjMjFoYkd4OGRIUjhZV0ppY254aFkzSnZibmx0ZkdOcGRHVjhZMjlrWlh4a1ptNThaVzE4YTJKa2ZITjBjbTl1WjN4ellXMXdmSFpoY254aGZHSmtiM3hpY254cGJXZDhiV0Z3Zkc5aWFtVmpkSHh4ZkhOamNtbHdkSHh6Y0dGdWZITjFZbnh6ZFhCOFluVjBkRzl1ZkdsdWNIVjBmR3hoWW1Wc2ZITmxiR1ZqZEh4MFpYaDBZWEpsWVNra0wya3VkR1Z6ZENoMFlXZE9ZVzFsS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSW1sdWJHbHVaVndpTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ3ZYaWhzYVNra0wya3VkR1Z6ZENoMFlXZE9ZVzFsS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSW14cGMzUXRhWFJsYlZ3aU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2d2WGloMGNpa2tMMmt1ZEdWemRDaDBZV2RPWVcxbEtTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0luUmhZbXhsTFhKdmQxd2lPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNndlhpaDBZV0pzWlNra0wya3VkR1Z6ZENoMFlXZE9ZVzFsS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSW5SaFlteGxYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDOWVLSFJpYjJSNUtTUXZhUzUwWlhOMEtIUmhaMDVoYldVcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aWRHRmliR1V0Y205M0xXZHliM1Z3WENJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJFWldaaGRXeDBJSFJ2SUZ3aVlteHZZMnRjSWlCM2FHVnVJRzV2SUcxaGRHTm9JR2x6SUdadmRXNWtMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYQ0ppYkc5amExd2lPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGUm9aU0JqYkdGemN5QmhaR1F2Y21WdGIzWmxJR1oxYm1OMGFXOXVjeUJoY21VZ2RYTmxaQ0IwYnlCMFpXMXdiM0poY21sc2VTQmhjSEJzZVNCaElGd2lkbVZzYjJOcGRIa3RZVzVwYldGMGFXNW5YQ0lnWTJ4aGMzTWdkRzhnWld4bGJXVnVkSE1nZDJocGJHVWdkR2hsZVNkeVpTQmhibWx0WVhScGJtY3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR0ZrWkVOc1lYTnpPaUJtZFc1amRHbHZiaUFvWld4bGJXVnVkQ3dnWTJ4aGMzTk9ZVzFsS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWld4bGJXVnVkQzVqYkdGemMweHBjM1FwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1kyeGhjM05PWVcxbEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1amJHRnpjMDVoYldVZ0t6MGdLR1ZzWlcxbGJuUXVZMnhoYzNOT1lXMWxMbXhsYm1kMGFDQS9JRndpSUZ3aUlEb2dYQ0pjSWlrZ0t5QmpiR0Z6YzA1aGJXVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnY21WdGIzWmxRMnhoYzNNNklHWjFibU4wYVc5dUlDaGxiR1Z0Wlc1MExDQmpiR0Z6YzA1aGJXVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxiR1Z0Wlc1MExtTnNZWE56VEdsemRDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RdVkyeGhjM05NYVhOMExuSmxiVzkyWlNoamJHRnpjMDVoYldVcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG1Oc1lYTnpUbUZ0WlNBOUlHVnNaVzFsYm5RdVkyeGhjM05PWVcxbExuUnZVM1J5YVc1bktDa3VjbVZ3YkdGalpTaHVaWGNnVW1WblJYaHdLRndpS0Y1OFhGeGNYSE1wWENJZ0t5QmpiR0Z6YzA1aGJXVXVjM0JzYVhRb1hDSWdYQ0lwTG1wdmFXNG9YQ0o4WENJcElDc2dYQ0lvWEZ4Y1hITjhKQ2xjSWl3Z1hDSm5hVndpS1N3Z1hDSWdYQ0lwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmU3hjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ1UzUjViR1VnUjJWMGRHbHVaeUFtSUZObGRIUnBibWRjYmx4MElDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQWdJQ0FnTHlvZ1ZHaGxJSE5wYm1kMWJHRnlJR2RsZEZCeWIzQmxjblI1Vm1Gc2RXVXNJSGRvYVdOb0lISnZkWFJsY3lCMGFHVWdiRzluYVdNZ1ptOXlJR0ZzYkNCdWIzSnRZV3hwZW1GMGFXOXVjeXdnYUc5dmEzTXNJR0Z1WkNCemRHRnVaR0Z5WkNCRFUxTWdjSEp2Y0dWeWRHbGxjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQm5aWFJRY205d1pYSjBlVlpoYkhWbE9pQm1kVzVqZEdsdmJpQW9aV3hsYldWdWRDd2djSEp2Y0dWeWRIa3NJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxMQ0JtYjNKalpWTjBlV3hsVEc5dmEzVndLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVkbGRDQmhiaUJsYkdWdFpXNTBKM01nWTI5dGNIVjBaV1FnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRkpsZEhKcFpYWnBibWNnZEdobElIWmhiSFZsSUc5bUlHRWdRMU5USUhCeWIzQmxjblI1SUdOaGJtNXZkQ0J6YVcxd2JIa2dZbVVnY0dWeVptOXliV1ZrSUdKNUlHTm9aV05yYVc1bklHRnVJR1ZzWlcxbGJuUW5jMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pTQmhkSFJ5YVdKMWRHVWdLSGRvYVdOb0lHOXViSGtnY21WbWJHVmpkSE1nZFhObGNpMWtaV1pwYm1Wa0lIWmhiSFZsY3lrdUlFbHVjM1JsWVdRc0lIUm9aU0JpY205M2MyVnlJRzExYzNRZ1ltVWdjWFZsY21sbFpDQm1iM0lnWVNCd2NtOXdaWEowZVNkelhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDcGpiMjF3ZFhSbFpDb2dkbUZzZFdVdUlGbHZkU0JqWVc0Z2NtVmhaQ0J0YjNKbElHRmliM1YwSUdkbGRFTnZiWEIxZEdWa1UzUjViR1VnYUdWeVpUb2dhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXViVzk2YVd4c1lTNXZjbWN2Wlc0dlpHOWpjeTlYWldJdlFWQkpMM2RwYm1SdmR5NW5aWFJEYjIxd2RYUmxaRk4wZVd4bElDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHTnZiWEIxZEdWUWNtOXdaWEowZVZaaGJIVmxJQ2hsYkdWdFpXNTBMQ0J3Y205d1pYSjBlU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dWMmhsYmlCaWIzZ3RjMmw2YVc1bklHbHpiaWQwSUhObGRDQjBieUJpYjNKa1pYSXRZbTk0TENCb1pXbG5hSFFnWVc1a0lIZHBaSFJvSUhOMGVXeGxJSFpoYkhWbGN5QmhjbVVnYVc1amIzSnlaV04wYkhrZ1kyOXRjSFYwWldRZ2QyaGxiaUJoYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDZHpJSE5qY205c2JHSmhjbk1nWVhKbElIWnBjMmxpYkdVZ0tIZG9hV05vSUdWNGNHRnVaSE1nZEdobElHVnNaVzFsYm5RbmN5QmthVzFsYm5OcGIyNXpLUzRnVkdoMWN5d2dkMlVnWkdWbVpYSWdkRzhnZEdobElHMXZjbVVnWVdOamRYSmhkR1ZjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEVobGFXZG9kQzlYYVdSMGFDQndjbTl3WlhKMGVTd2dkMmhwWTJnZ2FXNWpiSFZrWlhNZ2RHaGxJSFJ2ZEdGc0lHUnBiV1Z1YzJsdmJuTWdabTl5SUdsdWRHVnlhVzl5TENCaWIzSmtaWElzSUhCaFpHUnBibWNzSUdGdVpDQnpZM0p2Ykd4aVlYSXVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWFpTQnpkV0owY21GamRDQmliM0prWlhJZ1lXNWtJSEJoWkdScGJtY2dkRzhnWjJWMElIUm9aU0J6ZFcwZ2IyWWdhVzUwWlhKcGIzSWdLeUJ6WTNKdmJHeGlZWEl1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5dGNIVjBaV1JXWVd4MVpTQTlJREE3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxGUEQwNElHUnZaWE51SjNRZ2MzVndjRzl5ZENCM2FXNWtiM2N1WjJWMFEyOXRjSFYwWldSVGRIbHNaU3dnZEdoMWN5QjNaU0JrWldabGNpQjBieUJxVVhWbGNua3NJSGRvYVdOb0lHaGhjeUJoYmlCbGVIUmxibk5wZG1VZ1lYSnlZWGxjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOW1JR2hoWTJ0eklIUnZJR0ZqWTNWeVlYUmxiSGtnY21WMGNtbGxkbVVnU1VVNElIQnliM0JsY25SNUlIWmhiSFZsY3k0Z1VtVXRhVzF3YkdWdFpXNTBhVzVuSUhSb1lYUWdiRzluYVdNZ2FHVnlaU0JwY3lCdWIzUWdkMjl5ZEdnZ1lteHZZWFJwYm1jZ2RHaGxYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxZbUZ6WlNCbWIzSWdZU0JrZVdsdVp5QmljbTkzYzJWeUxpQlVhR1VnY0dWeVptOXliV0Z1WTJVZ2NtVndaWEpqZFhOemFXOXVjeUJ2WmlCMWMybHVaeUJxVVhWbGNua2dhR1Z5WlNCaGNtVWdiV2x1YVcxaGJDQnphVzVqWlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWbVZzYjJOcGRIa2dhWE1nYjNCMGFXMXBlbVZrSUhSdklISmhjbVZzZVNBb1lXNWtJSE52YldWMGFXMWxjeUJ1WlhabGNpa2djWFZsY25rZ2RHaGxJRVJQVFM0Z1JuVnlkR2hsY2l3Z2RHaGxJQ1F1WTNOektDa2dZMjlrWlhCaGRHZ2dhWE51SjNRZ2RHaGhkQ0J6Ykc5M0xpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFbEZJRHc5SURncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdkWFJsWkZaaGJIVmxJRDBnSkM1amMzTW9aV3hsYldWdWRDd2djSEp2Y0dWeWRIa3BPeUF2S2lCSFJWUWdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFRnNiQ0J2ZEdobGNpQmljbTkzYzJWeWN5QnpkWEJ3YjNKMElHZGxkRU52YlhCMWRHVmtVM1I1YkdVdUlGUm9aU0J5WlhSMWNtNWxaQ0JzYVhabElHOWlhbVZqZENCeVpXWmxjbVZ1WTJVZ2FYTWdZMkZqYUdWa0lHOXVkRzhnYVhSelhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYzNOdlkybGhkR1ZrSUdWc1pXMWxiblFnYzI4Z2RHaGhkQ0JwZENCa2IyVnpJRzV2ZENCdVpXVmtJSFJ2SUdKbElISmxabVYwWTJobFpDQjFjRzl1SUdWMlpYSjVJRWRGVkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRbkp2ZDNObGNuTWdaRzhnYm05MElISmxkSFZ5YmlCb1pXbG5hSFFnWVc1a0lIZHBaSFJvSUhaaGJIVmxjeUJtYjNJZ1pXeGxiV1Z1ZEhNZ2RHaGhkQ0JoY21VZ2MyVjBJSFJ2SUdScGMzQnNZWGs2WENKdWIyNWxYQ0l1SUZSb2RYTXNJSGRsSUhSbGJYQnZjbUZ5YVd4NVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOW5aMnhsSUdScGMzQnNZWGtnZEc4Z2RHaGxJR1ZzWlcxbGJuUWdkSGx3WlNkeklHUmxabUYxYkhRZ2RtRnNkV1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnZaMmRzWlVScGMzQnNZWGtnUFNCbVlXeHpaVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNndlhpaDNhV1IwYUh4b1pXbG5hSFFwSkM4dWRHVnpkQ2h3Y205d1pYSjBlU2tnSmlZZ1ExTlRMbWRsZEZCeWIzQmxjblI1Vm1Gc2RXVW9aV3hsYldWdWRDd2dYQ0prYVhOd2JHRjVYQ0lwSUQwOVBTQXdLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdloyZHNaVVJwYzNCc1lYa2dQU0IwY25WbE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkRVMU11YzJWMFVISnZjR1Z5ZEhsV1lXeDFaU2hsYkdWdFpXNTBMQ0JjSW1ScGMzQnNZWGxjSWl3Z1ExTlRMbFpoYkhWbGN5NW5aWFJFYVhOd2JHRjVWSGx3WlNobGJHVnRaVzUwS1NrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnY21WMlpYSjBSR2x6Y0d4aGVTQW9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBiMmRuYkdWRWFYTndiR0Y1S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEVTFNdWMyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCY0ltUnBjM0JzWVhsY0lpd2dYQ0p1YjI1bFhDSXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbWIzSmpaVk4wZVd4bFRHOXZhM1Z3S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3Y205d1pYSjBlU0E5UFQwZ1hDSm9aV2xuYUhSY0lpQW1KaUJEVTFNdVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCY0ltSnZlRk5wZW1sdVoxd2lLUzUwYjFOMGNtbHVaeWdwTG5SdlRHOTNaWEpEWVhObEtDa2dJVDA5SUZ3aVltOXlaR1Z5TFdKdmVGd2lLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5dWRHVnVkRUp2ZUVobGFXZG9kQ0E5SUdWc1pXMWxiblF1YjJabWMyVjBTR1ZwWjJoMElDMGdLSEJoY25ObFJteHZZWFFvUTFOVExtZGxkRkJ5YjNCbGNuUjVWbUZzZFdVb1pXeGxiV1Z1ZEN3Z1hDSmliM0prWlhKVWIzQlhhV1IwYUZ3aUtTa2dmSHdnTUNrZ0xTQW9jR0Z5YzJWR2JHOWhkQ2hEVTFNdVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCY0ltSnZjbVJsY2tKdmRIUnZiVmRwWkhSb1hDSXBLU0I4ZkNBd0tTQXRJQ2h3WVhKelpVWnNiMkYwS0VOVFV5NW5aWFJRY205d1pYSjBlVlpoYkhWbEtHVnNaVzFsYm5Rc0lGd2ljR0ZrWkdsdVoxUnZjRndpS1NrZ2ZId2dNQ2tnTFNBb2NHRnljMlZHYkc5aGRDaERVMU11WjJWMFVISnZjR1Z5ZEhsV1lXeDFaU2hsYkdWdFpXNTBMQ0JjSW5CaFpHUnBibWRDYjNSMGIyMWNJaWtwSUh4OElEQXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjJaWEowUkdsemNHeGhlU2dwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1ZEdWdWRFSnZlRWhsYVdkb2REdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h3Y205d1pYSjBlU0E5UFQwZ1hDSjNhV1IwYUZ3aUlDWW1JRU5UVXk1blpYUlFjbTl3WlhKMGVWWmhiSFZsS0dWc1pXMWxiblFzSUZ3aVltOTRVMmw2YVc1blhDSXBMblJ2VTNSeWFXNW5LQ2t1ZEc5TWIzZGxja05oYzJVb0tTQWhQVDBnWENKaWIzSmtaWEl0WW05NFhDSXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjI1MFpXNTBRbTk0VjJsa2RHZ2dQU0JsYkdWdFpXNTBMbTltWm5ObGRGZHBaSFJvSUMwZ0tIQmhjbk5sUm14dllYUW9RMU5UTG1kbGRGQnliM0JsY25SNVZtRnNkV1VvWld4bGJXVnVkQ3dnWENKaWIzSmtaWEpNWldaMFYybGtkR2hjSWlrcElIeDhJREFwSUMwZ0tIQmhjbk5sUm14dllYUW9RMU5UTG1kbGRGQnliM0JsY25SNVZtRnNkV1VvWld4bGJXVnVkQ3dnWENKaWIzSmtaWEpTYVdkb2RGZHBaSFJvWENJcEtTQjhmQ0F3S1NBdElDaHdZWEp6WlVac2IyRjBLRU5UVXk1blpYUlFjbTl3WlhKMGVWWmhiSFZsS0dWc1pXMWxiblFzSUZ3aWNHRmtaR2x1WjB4bFpuUmNJaWtwSUh4OElEQXBJQzBnS0hCaGNuTmxSbXh2WVhRb1ExTlRMbWRsZEZCeWIzQmxjblI1Vm1Gc2RXVW9aV3hsYldWdWRDd2dYQ0p3WVdSa2FXNW5VbWxuYUhSY0lpa3BJSHg4SURBcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMlpYSjBSR2x6Y0d4aGVTZ3BPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOXVkR1Z1ZEVKdmVGZHBaSFJvTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZiWEIxZEdWa1UzUjViR1U3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCR2IzSWdaV3hsYldWdWRITWdkR2hoZENCV1pXeHZZMmwwZVNCb1lYTnVKM1FnWW1WbGJpQmpZV3hzWldRZ2IyNGdaR2x5WldOMGJIa2dLR1V1Wnk0Z2QyaGxiaUJXWld4dlkybDBlU0J4ZFdWeWFXVnpJSFJvWlNCRVQwMGdiMjRnWW1Wb1lXeG1YRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMllnWVNCd1lYSmxiblFnYjJZZ1lXNGdaV3hsYldWdWRDQnBkSE1nWVc1cGJXRjBhVzVuS1N3Z2NHVnlabTl5YlNCaElHUnBjbVZqZENCblpYUkRiMjF3ZFhSbFpGTjBlV3hsSUd4dmIydDFjQ0J6YVc1alpTQjBhR1VnYjJKcVpXTjBJR2x6YmlkMElHTmhZMmhsWkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9SR0YwWVNobGJHVnRaVzUwS1NBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJYQjFkR1ZrVTNSNWJHVWdQU0IzYVc1a2IzY3VaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGxiR1Z0Wlc1MExDQnVkV3hzS1RzZ0x5b2dSMFZVSUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdkR2hsSUdOdmJYQjFkR1ZrVTNSNWJHVWdiMkpxWldOMElHaGhjeUI1WlhRZ2RHOGdZbVVnWTJGamFHVmtMQ0JrYnlCemJ5QnViM2N1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaFJHRjBZU2hsYkdWdFpXNTBLUzVqYjIxd2RYUmxaRk4wZVd4bEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YlhCMWRHVmtVM1I1YkdVZ1BTQkVZWFJoS0dWc1pXMWxiblFwTG1OdmJYQjFkR1ZrVTNSNWJHVWdQU0IzYVc1a2IzY3VaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGxiR1Z0Wlc1MExDQnVkV3hzS1RzZ0x5b2dSMFZVSUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdZMjl0Y0hWMFpXUlRkSGxzWlNCcGN5QmpZV05vWldRc0lIVnpaU0JwZEM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdkWFJsWkZOMGVXeGxJRDBnUkdGMFlTaGxiR1Z0Wlc1MEtTNWpiMjF3ZFhSbFpGTjBlV3hsTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsRklHRnVaQ0JHYVhKbFptOTRJR1J2SUc1dmRDQnlaWFIxY200Z1lTQjJZV3gxWlNCbWIzSWdkR2hsSUdkbGJtVnlhV01nWW05eVpHVnlRMjlzYjNJZ0xTMGdkR2hsZVNCdmJteDVJSEpsZEhWeWJpQnBibVJwZG1sa2RXRnNJSFpoYkhWbGN5Qm1iM0lnWldGamFDQmliM0prWlhJZ2MybGtaU2R6SUdOdmJHOXlMbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUZzYzI4c0lHbHVJR0ZzYkNCaWNtOTNjMlZ5Y3l3Z2QyaGxiaUJpYjNKa1pYSWdZMjlzYjNKeklHRnlaVzRuZENCaGJHd2dkR2hsSUhOaGJXVXNJR0VnWTI5dGNHOTFibVFnZG1Gc2RXVWdhWE1nY21WMGRYSnVaV1FnZEdoaGRDQldaV3h2WTJsMGVTQnBjMjRuZENCelpYUjFjQ0IwYnlCd1lYSnpaUzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JUYnl3Z1lYTWdZU0J3YjJ4NVptbHNiQ0JtYjNJZ2NYVmxjbmxwYm1jZ2FXNWthWFpwWkhWaGJDQmliM0prWlhJZ2MybGtaU0JqYjJ4dmNuTXNJSGRsSUdwMWMzUWdjbVYwZFhKdUlIUm9aU0IwYjNBZ1ltOXlaR1Z5SjNNZ1kyOXNiM0lnWVc1a0lHRnVhVzFoZEdVZ1lXeHNJR0p2Y21SbGNuTWdabkp2YlNCMGFHRjBJSFpoYkhWbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3Y205d1pYSjBlU0E5UFQwZ1hDSmliM0prWlhKRGIyeHZjbHdpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNUlEMGdYQ0ppYjNKa1pYSlViM0JEYjJ4dmNsd2lPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxGT1NCb1lYTWdZU0JpZFdjZ2FXNGdkMmhwWTJnZ2RHaGxJRndpWm1sc2RHVnlYQ0lnY0hKdmNHVnlkSGtnYlhWemRDQmlaU0JoWTJObGMzTmxaQ0JtY205dElHTnZiWEIxZEdWa1UzUjViR1VnZFhOcGJtY2dkR2hsSUdkbGRGQnliM0JsY25SNVZtRnNkV1VnYldWMGFHOWtYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdWaFpDQnZaaUJoSUdScGNtVmpkQ0J3Y205d1pYSjBlU0JzYjI5cmRYQXVJRlJvWlNCblpYUlFjbTl3WlhKMGVWWmhiSFZsSUcxbGRHaHZaQ0JwY3lCemJHOTNaWElnZEdoaGJpQmhJR1JwY21WamRDQnNiMjlyZFhBc0lIZG9hV05vSUdseklIZG9lU0IzWlNCaGRtOXBaQ0JwZENCaWVTQmtaV1poZFd4MExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hKUlNBOVBUMGdPU0FtSmlCd2NtOXdaWEowZVNBOVBUMGdYQ0ptYVd4MFpYSmNJaWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdkWFJsWkZaaGJIVmxJRDBnWTI5dGNIVjBaV1JUZEhsc1pTNW5aWFJRY205d1pYSjBlVlpoYkhWbEtIQnliM0JsY25SNUtUc2dMeW9nUjBWVUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXRjSFYwWldSV1lXeDFaU0E5SUdOdmJYQjFkR1ZrVTNSNWJHVmJjSEp2Y0dWeWRIbGRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVpoYkd3Z1ltRmpheUIwYnlCMGFHVWdjSEp2Y0dWeWRIa25jeUJ6ZEhsc1pTQjJZV3gxWlNBb2FXWWdaR1ZtYVc1bFpDa2dkMmhsYmlCamIyMXdkWFJsWkZaaGJIVmxJSEpsZEhWeWJuTWdibTkwYUdsdVp5eGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xqYUNCallXNGdhR0Z3Y0dWdUlIZG9aVzRnZEdobElHVnNaVzFsYm5RZ2FHRnpiaWQwSUdKbFpXNGdjR0ZwYm5SbFpDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dGNIVjBaV1JXWVd4MVpTQTlQVDBnWENKY0lpQjhmQ0JqYjIxd2RYUmxaRlpoYkhWbElEMDlQU0J1ZFd4c0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YlhCMWRHVmtWbUZzZFdVZ1BTQmxiR1Z0Wlc1MExuTjBlV3hsVzNCeWIzQmxjblI1WFR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhabGNuUkVhWE53YkdGNUtDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVp2Y2lCMGIzQXNJSEpwWjJoMExDQmliM1IwYjIwc0lHRnVaQ0JzWldaMElDaFVVa0pNS1NCMllXeDFaWE1nZEdoaGRDQmhjbVVnYzJWMElIUnZJRndpWVhWMGIxd2lJRzl1SUdWc1pXMWxiblJ6SUc5bUlGd2labWw0WldSY0lpQnZjaUJjSW1GaWMyOXNkWFJsWENJZ2NHOXphWFJwYjI0c1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldabGNpQjBieUJxVVhWbGNua2dabTl5SUdOdmJuWmxjblJwYm1jZ1hDSmhkWFJ2WENJZ2RHOGdZU0J1ZFcxbGNtbGpJSFpoYkhWbExpQW9SbTl5SUdWc1pXMWxiblJ6SUhkcGRHZ2dZU0JjSW5OMFlYUnBZMXdpSUc5eUlGd2ljbVZzWVhScGRtVmNJaUJ3YjNOcGRHbHZiaXdnWENKaGRYUnZYQ0lnYUdGeklIUm9aU0J6WVcxbFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsWm1abFkzUWdZWE1nWW1WcGJtY2djMlYwSUhSdklEQXNJSE52SUc1dklHTnZiblpsY25OcGIyNGdhWE1nYm1WalpYTnpZWEo1TGlrZ0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVGdUlHVjRZVzF3YkdVZ2IyWWdkMmg1SUc1MWJXVnlhV01nWTI5dWRtVnljMmx2YmlCcGN5QnVaV05sYzNOaGNuazZJRmRvWlc0Z1lXNGdaV3hsYldWdWRDQjNhWFJvSUZ3aWNHOXphWFJwYjI0NllXSnpiMngxZEdWY0lpQm9ZWE1nWVc0Z2RXNTBiM1ZqYUdWa0lGd2liR1ZtZEZ3aVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBlU3dnZDJocFkyZ2djbVYyWlhKMGN5QjBieUJjSW1GMWRHOWNJaXdnYkdWbWRDZHpJSFpoYkhWbElHbHpJREFnY21Wc1lYUnBkbVVnZEc4Z2FYUnpJSEJoY21WdWRDQmxiR1Z0Wlc1MExDQmlkWFFnYVhNZ2IyWjBaVzRnYm05dUxYcGxjbThnY21Wc1lYUnBkbVZjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZJR2wwY3lBcVkyOXVkR0ZwYm1sdVp5b2dLRzV2ZENCd1lYSmxiblFwSUdWc1pXMWxiblFzSUhkb2FXTm9JR2x6SUhSb1pTQnVaV0Z5WlhOMElGd2ljRzl6YVhScGIyNDZjbVZzWVhScGRtVmNJaUJoYm1ObGMzUnZjaUJ2Y2lCMGFHVWdkbWxsZDNCdmNuUWdLR0Z1WkNCaGJIZGhlWE1nZEdobElIWnBaWGR3YjNKMElHbHVJSFJvWlNCallYTmxJRzltSUZ3aWNHOXphWFJwYjI0NlptbDRaV1JjSWlrdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyOXRjSFYwWldSV1lXeDFaU0E5UFQwZ1hDSmhkWFJ2WENJZ0ppWWdMMTRvZEc5d2ZISnBaMmgwZkdKdmRIUnZiWHhzWldaMEtTUXZhUzUwWlhOMEtIQnliM0JsY25SNUtTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3YjNOcGRHbHZiaUE5SUdOdmJYQjFkR1ZRY205d1pYSjBlVlpoYkhWbEtHVnNaVzFsYm5Rc0lGd2ljRzl6YVhScGIyNWNJaWs3SUM4cUlFZEZWQ0FxTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1JtOXlJR0ZpYzI5c2RYUmxJSEJ2YzJsMGFXOXVhVzVuTENCcVVYVmxjbmtuY3lBa0xuQnZjMmwwYVc5dUtDa2diMjVzZVNCeVpYUjFjbTV6SUhaaGJIVmxjeUJtYjNJZ2RHOXdJR0Z1WkNCc1pXWjBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpwWjJoMElHRnVaQ0JpYjNSMGIyMGdkMmxzYkNCb1lYWmxJSFJvWldseUlGd2lZWFYwYjF3aUlIWmhiSFZsSUhKbGRtVnlkR1ZrSUhSdklEQXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dRU0JxVVhWbGNua2diMkpxWldOMElHMTFjM1FnWW1VZ1kzSmxZWFJsWkNCb1pYSmxJSE5wYm1ObElHcFJkV1Z5ZVNCa2IyVnpiaWQwSUdoaGRtVWdZU0JzYjNjdGJHVjJaV3dnWVd4cFlYTWdabTl5SUNRdWNHOXphWFJwYjI0b0tTNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk9iM1FnWVNCaWFXY2daR1ZoYkNCemFXNWpaU0IzWlNkeVpTQmpkWEp5Wlc1MGJIa2dhVzRnWVNCSFJWUWdZbUYwWTJnZ1lXNTVkMkY1TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdiM05wZEdsdmJpQTlQVDBnWENKbWFYaGxaRndpSUh4OElDaHdiM05wZEdsdmJpQTlQVDBnWENKaFluTnZiSFYwWlZ3aUlDWW1JQzkwYjNCOGJHVm1kQzlwTG5SbGMzUW9jSEp2Y0dWeWRIa3BLU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQk9iM1JsT2lCcVVYVmxjbmtnYzNSeWFYQnpJSFJvWlNCd2FYaGxiQ0IxYm1sMElHWnliMjBnYVhSeklISmxkSFZ5Ym1Wa0lIWmhiSFZsY3pzZ2QyVWdjbVV0WVdSa0lHbDBJR2hsY21VZ2RHOGdZMjl1Wm05eWJTQjNhWFJvSUdOdmJYQjFkR1ZRY205d1pYSjBlVlpoYkhWbEozTWdZbVZvWVhacGIzSXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJYQjFkR1ZrVm1Gc2RXVWdQU0FrS0dWc1pXMWxiblFwTG5CdmMybDBhVzl1S0NsYmNISnZjR1Z5ZEhsZElDc2dYQ0p3ZUZ3aU95QXZLaUJIUlZRZ0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjIxd2RYUmxaRlpoYkhWbE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YjNCbGNuUjVWbUZzZFdVN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnZEdocGN5QnBjeUJoSUdodmIydGxaQ0J3Y205d1pYSjBlU0FvWlM1bkxpQmNJbU5zYVhCTVpXWjBYQ0lnYVc1emRHVmhaQ0J2WmlCMGFHVWdjbTl2ZENCd2NtOXdaWEowZVNCdlppQmNJbU5zYVhCY0lpa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEhKaFkzUWdkR2hsSUdodmIyc25jeUIyWVd4MVpTQm1jbTl0SUdFZ2JtOXliV0ZzYVhwbFpDQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTQjFjMmx1WnlCRFUxTXVTRzl2YTNNdVpYaDBjbUZqZEZaaGJIVmxLQ2t1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaERVMU11U0c5dmEzTXVjbVZuYVhOMFpYSmxaRnR3Y205d1pYSjBlVjBwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJvYjI5cklEMGdjSEp2Y0dWeWRIa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHOXZhMUp2YjNRZ1BTQkRVMU11U0c5dmEzTXVaMlYwVW05dmRDaG9iMjlyS1R0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1dZZ1lTQmpZV05vWldRZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdVZ2QyRnpiaWQwSUhCaGMzTmxaQ0JwYmlBb2QyaHBZMmdnVm1Wc2IyTnBkSGtnWVd4M1lYbHpJR0YwZEdWdGNIUnpJSFJ2SUdSdklHbHVJRzl5WkdWeUlIUnZJR0YyYjJsa0lISmxjWFZsY25scGJtY2dkR2hsSUVSUFRTa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeGRXVnllU0IwYUdVZ1JFOU5JR1p2Y2lCMGFHVWdjbTl2ZENCd2NtOXdaWEowZVNkeklIWmhiSFZsTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKdmIzUlFjbTl3WlhKMGVWWmhiSFZsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJUYVc1alpTQjBhR1VnWW5KdmQzTmxjaUJwY3lCdWIzY2dZbVZwYm1jZ1pHbHlaV04wYkhrZ2NYVmxjbWxsWkN3Z2RYTmxJSFJvWlNCdlptWnBZMmxoYkNCd2IzTjBMWEJ5WldacGVHbHVaeUJ3Y205d1pYSjBlU0J1WVcxbElHWnZjaUIwYUdseklHeHZiMnQxY0M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlNBOUlFTlRVeTVuWlhSUWNtOXdaWEowZVZaaGJIVmxLR1ZzWlcxbGJuUXNJRU5UVXk1T1lXMWxjeTV3Y21WbWFYaERhR1ZqYXlob2IyOXJVbTl2ZENsYk1GMHBPeUF2S2lCSFJWUWdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1dZZ2RHaHBjeUJ5YjI5MElHaGhjeUJoSUc1dmNtMWhiR2w2WVhScGIyNGdjbVZuYVhOMFpYSmxaQ3dnY0dWbWIzSnRJSFJvWlNCaGMzTnZZMmxoZEdWa0lHNXZjbTFoYkdsNllYUnBiMjRnWlhoMGNtRmpkR2x2Ymk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRFUxTXVUbTl5YldGc2FYcGhkR2x2Ym5NdWNtVm5hWE4wWlhKbFpGdG9iMjlyVW05dmRGMHBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTQTlJRU5UVXk1T2IzSnRZV3hwZW1GMGFXOXVjeTV5WldkcGMzUmxjbVZrVzJodmIydFNiMjkwWFNoY0ltVjRkSEpoWTNSY0lpd2daV3hsYldWdWRDd2djbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJGZUhSeVlXTjBJSFJvWlNCb2IyOXJKM01nZG1Gc2RXVXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowZVZaaGJIVmxJRDBnUTFOVExraHZiMnR6TG1WNGRISmhZM1JXWVd4MVpTaG9iMjlyTENCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlNrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnZEdocGN5QnBjeUJoSUc1dmNtMWhiR2w2WldRZ2NISnZjR1Z5ZEhrZ0tHVXVaeTRnWENKdmNHRmphWFI1WENJZ1ltVmpiMjFsY3lCY0ltWnBiSFJsY2x3aUlHbHVJRHc5U1VVNEtTQnZjaUJjSW5SeVlXNXpiR0YwWlZoY0lpQmlaV052YldWeklGd2lkSEpoYm5ObWIzSnRYQ0lwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3hwZW1VZ2RHaGxJSEJ5YjNCbGNuUjVKM01nYm1GdFpTQmhibVFnZG1Gc2RXVXNJR0Z1WkNCb1lXNWtiR1VnZEdobElITndaV05wWVd3Z1kyRnpaU0J2WmlCMGNtRnVjMlp2Y20xekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJPYjNSbE9pQk9iM0p0WVd4cGVtbHVaeUJoSUhCeWIzQmxjblI1SUdseklHMTFkSFZoYkd4NUlHVjRZMngxYzJsMlpTQm1jbTl0SUdodmIydHBibWNnWVNCd2NtOXdaWEowZVNCemFXNWpaU0JvYjI5ckxXVjRkSEpoWTNSbFpDQjJZV3gxWlhNZ1lYSmxJSE4wY21samRHeDVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYldWeWFXTmhiQ0JoYm1RZ2RHaGxjbVZtYjNKbElHUnZJRzV2ZENCeVpYRjFhWEpsSUc1dmNtMWhiR2w2WVhScGIyNGdaWGgwY21GamRHbHZiaTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoRFUxTXVUbTl5YldGc2FYcGhkR2x2Ym5NdWNtVm5hWE4wWlhKbFpGdHdjbTl3WlhKMGVWMHBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnViM0p0WVd4cGVtVmtVSEp2Y0dWeWRIbE9ZVzFsTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1JRY205d1pYSjBlVlpoYkhWbE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZrVUhKdmNHVnlkSGxPWVcxbElEMGdRMU5UTGs1dmNtMWhiR2w2WVhScGIyNXpMbkpsWjJsemRHVnlaV1JiY0hKdmNHVnlkSGxkS0Z3aWJtRnRaVndpTENCbGJHVnRaVzUwS1R0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVkhKaGJuTm1iM0p0SUhaaGJIVmxjeUJoY21VZ1kyRnNZM1ZzWVhSbFpDQjJhV0VnYm05eWJXRnNhWHBoZEdsdmJpQmxlSFJ5WVdOMGFXOXVJQ2h6WldVZ1ltVnNiM2NwTENCM2FHbGphQ0JqYUdWamEzTWdZV2RoYVc1emRDQjBhR1VnWld4bGJXVnVkQ2R6SUhSeVlXNXpabTl5YlVOaFkyaGxMbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FYUWdibThnY0c5cGJuUWdaRzhnZEhKaGJuTm1iM0p0SUVkRlZITWdaWFpsY2lCaFkzUjFZV3hzZVNCeGRXVnllU0IwYUdVZ1JFOU5PeUJwYm1sMGFXRnNJSE4wZVd4bGMyaGxaWFFnZG1Gc2RXVnpJR0Z5WlNCdVpYWmxjaUJ3Y205alpYTnpaV1F1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVhR2x6SUdseklHSmxZMkYxYzJVZ2NHRnljMmx1WnlBelJDQjBjbUZ1YzJadmNtMGdiV0YwY21salpYTWdhWE1nYm05MElHRnNkMkY1Y3lCaFkyTjFjbUYwWlNCaGJtUWdkMjkxYkdRZ1lteHZZWFFnYjNWeUlHTnZaR1ZpWVhObE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoMWN5d2dibTl5YldGc2FYcGhkR2x2YmlCbGVIUnlZV04wYVc5dUlHUmxabUYxYkhSeklHbHVhWFJwWVd3Z2RISmhibk5tYjNKdElIWmhiSFZsY3lCMGJ5QjBhR1ZwY2lCNlpYSnZMWFpoYkhWbGN5QW9aUzVuTGlBeElHWnZjaUJ6WTJGc1pWZ2dZVzVrSURBZ1ptOXlJSFJ5WVc1emJHRjBaVmdwTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c1dmNtMWhiR2w2WldSUWNtOXdaWEowZVU1aGJXVWdJVDA5SUZ3aWRISmhibk5tYjNKdFhDSXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtVSEp2Y0dWeWRIbFdZV3gxWlNBOUlHTnZiWEIxZEdWUWNtOXdaWEowZVZaaGJIVmxLR1ZzWlcxbGJuUXNJRU5UVXk1T1lXMWxjeTV3Y21WbWFYaERhR1ZqYXlodWIzSnRZV3hwZW1Wa1VISnZjR1Z5ZEhsT1lXMWxLVnN3WFNrN0lDOHFJRWRGVkNBcUwxeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnZEdobElIWmhiSFZsSUdseklHRWdRMU5USUc1MWJHd3RkbUZzZFdVZ1lXNWtJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2FHRnpJR0VnYUc5dmF5QjBaVzF3YkdGMFpTd2dkWE5sSUhSb1lYUWdlbVZ5YnkxMllXeDFaU0IwWlcxd2JHRjBaU0J6YnlCMGFHRjBJR2h2YjJ0eklHTmhiaUJpWlNCbGVIUnlZV04wWldRZ1puSnZiU0JwZEM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RMU5UTGxaaGJIVmxjeTVwYzBOVFUwNTFiR3hXWVd4MVpTaHViM0p0WVd4cGVtVmtVSEp2Y0dWeWRIbFdZV3gxWlNrZ0ppWWdRMU5UTGtodmIydHpMblJsYlhCc1lYUmxjMXR3Y205d1pYSjBlVjBwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpGQnliM0JsY25SNVZtRnNkV1VnUFNCRFUxTXVTRzl2YTNNdWRHVnRjR3hoZEdWelczQnliM0JsY25SNVhWc3hYVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNVZtRnNkV1VnUFNCRFUxTXVUbTl5YldGc2FYcGhkR2x2Ym5NdWNtVm5hWE4wWlhKbFpGdHdjbTl3WlhKMGVWMG9YQ0psZUhSeVlXTjBYQ0lzSUdWc1pXMWxiblFzSUc1dmNtMWhiR2w2WldSUWNtOXdaWEowZVZaaGJIVmxLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsbUlHRWdLRzUxYldWeWFXTXBJSFpoYkhWbElIZGhjMjRuZENCd2NtOWtkV05sWkNCMmFXRWdhRzl2YXlCbGVIUnlZV04wYVc5dUlHOXlJRzV2Y20xaGJHbDZZWFJwYjI0c0lIRjFaWEo1SUhSb1pTQkVUMDB1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hMMTViWEZ4a0xWMHZMblJsYzNRb2NISnZjR1Z5ZEhsV1lXeDFaU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVp2Y2lCVFZrY2daV3hsYldWdWRITXNJR1JwYldWdWMybHZibUZzSUhCeWIzQmxjblJwWlhNZ0tIZG9hV05vSUZOV1IwRjBkSEpwWW5WMFpTZ3BJR1JsZEdWamRITXBJR0Z5WlNCMGQyVmxibVZrSUhacFlWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdobGFYSWdTRlJOVENCaGRIUnlhV0oxZEdVZ2RtRnNkV1Z6SUdsdWMzUmxZV1FnYjJZZ2RHaGxhWElnUTFOVElITjBlV3hsSUhaaGJIVmxjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hFWVhSaEtHVnNaVzFsYm5RcElDWW1JRVJoZEdFb1pXeGxiV1Z1ZENrdWFYTlRWa2NnSmlZZ1ExTlRMazVoYldWekxsTldSMEYwZEhKcFluVjBaU2h3Y205d1pYSjBlU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVGFXNWpaU0IwYUdVZ2FHVnBaMmgwTDNkcFpIUm9JR0YwZEhKcFluVjBaU0IyWVd4MVpYTWdiWFZ6ZENCaVpTQnpaWFFnYldGdWRXRnNiSGtzSUhSb1pYa2daRzl1SjNRZ2NtVm1iR1ZqZENCamIyMXdkWFJsWkNCMllXeDFaWE11WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVkdoMWN5d2dkMlVnZFhObElIVnpaU0JuWlhSQ1FtOTRLQ2tnZEc4Z1pXNXpkWEpsSUhkbElHRnNkMkY1Y3lCblpYUWdkbUZzZFdWeklHWnZjaUJsYkdWdFpXNTBjeUIzYVhSb0lIVnVaR1ZtYVc1bFpDQm9aV2xuYUhRdmQybGtkR2dnWVhSMGNtbGlkWFJsY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9MMTRvYUdWcFoyaDBmSGRwWkhSb0tTUXZhUzUwWlhOMEtIQnliM0JsY25SNUtTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCR2FYSmxabTk0SUhSb2NtOTNjeUJoYmlCbGNuSnZjaUJwWmlBdVoyVjBRa0p2ZUNncElHbHpJR05oYkd4bFpDQnZiaUJoYmlCVFZrY2dkR2hoZENCcGMyNG5kQ0JoZEhSaFkyaGxaQ0IwYnlCMGFHVWdSRTlOTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRIbFdZV3gxWlNBOUlHVnNaVzFsYm5RdVoyVjBRa0p2ZUNncFczQnliM0JsY25SNVhUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblI1Vm1Gc2RXVWdQU0F3TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1QzUm9aWEozYVhObExDQmhZMk5sYzNNZ2RHaGxJR0YwZEhKcFluVjBaU0IyWVd4MVpTQmthWEpsWTNSc2VTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGVWWmhiSFZsSUQwZ1pXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVW9jSEp2Y0dWeWRIa3BPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEhsV1lXeDFaU0E5SUdOdmJYQjFkR1ZRY205d1pYSjBlVlpoYkhWbEtHVnNaVzFsYm5Rc0lFTlRVeTVPWVcxbGN5NXdjbVZtYVhoRGFHVmpheWh3Y205d1pYSjBlU2xiTUYwcE95QXZLaUJIUlZRZ0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZOcGJtTmxJSEJ5YjNCbGNuUjVJR3h2YjJ0MWNITWdZWEpsSUdadmNpQmhibWx0WVhScGIyNGdjSFZ5Y0c5elpYTWdLSGRvYVdOb0lHVnVkR0ZwYkhNZ1kyOXRjSFYwYVc1bklIUm9aU0J1ZFcxbGNtbGpJR1JsYkhSaElHSmxkSGRsWlc0Z2MzUmhjblFnWVc1a0lHVnVaQ0IyWVd4MVpYTXBMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MlpYSjBJRU5UVXlCdWRXeHNMWFpoYkhWbGN5QjBieUJoYmlCcGJuUmxaMlZ5SUc5bUlIWmhiSFZsSURBdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hEVTFNdVZtRnNkV1Z6TG1selExTlRUblZzYkZaaGJIVmxLSEJ5YjNCbGNuUjVWbUZzZFdVcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBlVlpoYkhWbElEMGdNRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoV1pXeHZZMmwwZVM1a1pXSjFaeUErUFNBeUtTQmpiMjV6YjJ4bExteHZaeWhjSWtkbGRDQmNJaUFySUhCeWIzQmxjblI1SUNzZ1hDSTZJRndpSUNzZ2NISnZjR1Z5ZEhsV1lXeDFaU2s3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ5YjNCbGNuUjVWbUZzZFdVN1hHNWNkQ0FnSUNBZ0lDQWdmU3hjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRlJvWlNCemFXNW5kV3hoY2lCelpYUlFjbTl3WlhKMGVWWmhiSFZsTENCM2FHbGphQ0J5YjNWMFpYTWdkR2hsSUd4dloybGpJR1p2Y2lCaGJHd2dibTl5YldGc2FYcGhkR2x2Ym5Nc0lHaHZiMnR6TENCaGJtUWdjM1JoYm1SaGNtUWdRMU5USUhCeWIzQmxjblJwWlhNdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnYzJWMFVISnZjR1Z5ZEhsV1lXeDFaVG9nWm5WdVkzUnBiMjRvWld4bGJXVnVkQ3dnY0hKdmNHVnlkSGtzSUhCeWIzQmxjblI1Vm1Gc2RXVXNJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxMQ0J6WTNKdmJHeEVZWFJoS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQndjbTl3WlhKMGVVNWhiV1VnUFNCd2NtOXdaWEowZVR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQkpiaUJ2Y21SbGNpQjBieUJpWlNCemRXSnFaV04wWldRZ2RHOGdZMkZzYkNCdmNIUnBiMjV6SUdGdVpDQmxiR1Z0Wlc1MElIRjFaWFZsYVc1bkxDQnpZM0p2Ykd3Z1lXNXBiV0YwYVc5dUlHbHpJSEp2ZFhSbFpDQjBhSEp2ZFdkb0lGWmxiRzlqYVhSNUlHRnpJR2xtSUdsMElIZGxjbVVnWVNCemRHRnVaR0Z5WkNCRFUxTWdjSEp2Y0dWeWRIa3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtOXdaWEowZVNBOVBUMGdYQ0p6WTNKdmJHeGNJaWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnWVNCamIyNTBZV2x1WlhJZ2IzQjBhVzl1SUdseklIQnlaWE5sYm5Rc0lITmpjbTlzYkNCMGFHVWdZMjl1ZEdGcGJtVnlJR2x1YzNSbFlXUWdiMllnZEdobElHSnliM2R6WlhJZ2QybHVaRzkzTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamNtOXNiRVJoZEdFdVkyOXVkR0ZwYm1WeUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnliMnhzUkdGMFlTNWpiMjUwWVdsdVpYSmJYQ0p6WTNKdmJHeGNJaUFySUhOamNtOXNiRVJoZEdFdVpHbHlaV04wYVc5dVhTQTlJSEJ5YjNCbGNuUjVWbUZzZFdVN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJQZEdobGNuZHBjMlVzSUZabGJHOWphWFI1SUdSbFptRjFiSFJ6SUhSdklITmpjbTlzYkdsdVp5QjBhR1VnWW5KdmQzTmxjaUIzYVc1a2IzY3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoelkzSnZiR3hFWVhSaExtUnBjbVZqZEdsdmJpQTlQVDBnWENKTVpXWjBYQ0lwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG5OamNtOXNiRlJ2S0hCeWIzQmxjblI1Vm1Gc2RXVXNJSE5qY205c2JFUmhkR0V1WVd4MFpYSnVZWFJsVm1Gc2RXVXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1elkzSnZiR3hVYnloelkzSnZiR3hFWVhSaExtRnNkR1Z5Ym1GMFpWWmhiSFZsTENCd2NtOXdaWEowZVZaaGJIVmxLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWNtRnVjMlp2Y20xeklDaDBjbUZ1YzJ4aGRHVllMQ0J5YjNSaGRHVmFMQ0JsZEdNdUtTQmhjbVVnWVhCd2JHbGxaQ0IwYnlCaElIQmxjaTFsYkdWdFpXNTBJSFJ5WVc1elptOXliVU5oWTJobElHOWlhbVZqZEN3Z2QyaHBZMmdnYVhNZ2JXRnVkV0ZzYkhrZ1pteDFjMmhsWkNCMmFXRWdabXgxYzJoVWNtRnVjMlp2Y20xRFlXTm9aU2dwTGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWR2gxY3l3Z1ptOXlJRzV2ZHl3Z2QyVWdiV1Z5Wld4NUlHTmhZMmhsSUhSeVlXNXpabTl5YlhNZ1ltVnBibWNnVTBWVUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTlRVeTVPYjNKdFlXeHBlbUYwYVc5dWN5NXlaV2RwYzNSbGNtVmtXM0J5YjNCbGNuUjVYU0FtSmlCRFUxTXVUbTl5YldGc2FYcGhkR2x2Ym5NdWNtVm5hWE4wWlhKbFpGdHdjbTl3WlhKMGVWMG9YQ0p1WVcxbFhDSXNJR1ZzWlcxbGJuUXBJRDA5UFNCY0luUnlZVzV6Wm05eWJWd2lLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVUdWeVptOXliU0JoSUc1dmNtMWhiR2w2WVhScGIyNGdhVzVxWldOMGFXOXVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRlJvWlNCdWIzSnRZV3hwZW1GMGFXOXVJR3h2WjJsaklHaGhibVJzWlhNZ2RHaGxJSFJ5WVc1elptOXliVU5oWTJobElIVndaR0YwYVc1bkxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTlRVeTVPYjNKdFlXeHBlbUYwYVc5dWN5NXlaV2RwYzNSbGNtVmtXM0J5YjNCbGNuUjVYU2hjSW1sdWFtVmpkRndpTENCbGJHVnRaVzUwTENCd2NtOXdaWEowZVZaaGJIVmxLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUjVUbUZ0WlNBOUlGd2lkSEpoYm5ObWIzSnRYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRIbFdZV3gxWlNBOUlFUmhkR0VvWld4bGJXVnVkQ2t1ZEhKaGJuTm1iM0p0UTJGamFHVmJjSEp2Y0dWeWRIbGRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKYm1wbFkzUWdhRzl2YTNNdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRU5UVXk1SWIyOXJjeTV5WldkcGMzUmxjbVZrVzNCeWIzQmxjblI1WFNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYUc5dmEwNWhiV1VnUFNCd2NtOXdaWEowZVN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2h2YjJ0U2IyOTBJRDBnUTFOVExraHZiMnR6TG1kbGRGSnZiM1FvY0hKdmNHVnlkSGtwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUdFZ1kyRmphR1ZrSUhKdmIzUlFjbTl3WlhKMGVWWmhiSFZsSUhkaGN5QnViM1FnY0hKdmRtbGtaV1FzSUhGMVpYSjVJSFJvWlNCRVQwMGdabTl5SUhSb1pTQm9iMjlyVW05dmRDZHpJR04xY25KbGJuUWdkbUZzZFdVdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxJRDBnY205dmRGQnliM0JsY25SNVZtRnNkV1VnZkh3Z1ExTlRMbWRsZEZCeWIzQmxjblI1Vm1Gc2RXVW9aV3hsYldWdWRDd2dhRzl2YTFKdmIzUXBPeUF2S2lCSFJWUWdLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowZVZaaGJIVmxJRDBnUTFOVExraHZiMnR6TG1sdWFtVmpkRlpoYkhWbEtHaHZiMnRPWVcxbExDQndjbTl3WlhKMGVWWmhiSFZsTENCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNUlEMGdhRzl2YTFKdmIzUTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTl5YldGc2FYcGxJRzVoYldWeklHRnVaQ0IyWVd4MVpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VOVFV5NU9iM0p0WVd4cGVtRjBhVzl1Y3k1eVpXZHBjM1JsY21Wa1czQnliM0JsY25SNVhTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBlVlpoYkhWbElEMGdRMU5UTGs1dmNtMWhiR2w2WVhScGIyNXpMbkpsWjJsemRHVnlaV1JiY0hKdmNHVnlkSGxkS0Z3aWFXNXFaV04wWENJc0lHVnNaVzFsYm5Rc0lIQnliM0JsY25SNVZtRnNkV1VwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowZVNBOUlFTlRVeTVPYjNKdFlXeHBlbUYwYVc5dWN5NXlaV2RwYzNSbGNtVmtXM0J5YjNCbGNuUjVYU2hjSW01aGJXVmNJaXdnWld4bGJXVnVkQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUVhOemFXZHVJSFJvWlNCaGNIQnliM0J5YVdGMFpTQjJaVzVrYjNJZ2NISmxabWw0SUdKbFptOXlaU0J3WlhKbWIzSnRhVzVuSUdGdUlHOW1abWxqYVdGc0lITjBlV3hsSUhWd1pHRjBaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBlVTVoYldVZ1BTQkRVMU11VG1GdFpYTXVjSEpsWm1sNFEyaGxZMnNvY0hKdmNHVnlkSGtwV3pCZE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRU0IwY25rdlkyRjBZMmdnYVhNZ2RYTmxaQ0JtYjNJZ1NVVThQVGdzSUhkb2FXTm9JSFJvY205M2N5QmhiaUJsY25KdmNpQjNhR1Z1SUZ3aWFXNTJZV3hwWkZ3aUlFTlRVeUIyWVd4MVpYTWdZWEpsSUhObGRDd2daUzVuTGlCaElHNWxaMkYwYVhabElIZHBaSFJvTGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZSeWVTOWpZWFJqYUNCcGN5QmhkbTlwWkdWa0lHWnZjaUJ2ZEdobGNpQmljbTkzYzJWeWN5QnphVzVqWlNCcGRDQnBibU4xY25NZ1lTQndaWEptYjNKdFlXNWpaU0J2ZG1WeWFHVmhaQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1NVVWdQRDBnT0NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDNXpkSGxzWlZ0d2NtOXdaWEowZVU1aGJXVmRJRDBnY0hKdmNHVnlkSGxXWVd4MVpUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIc2dhV1lnS0ZabGJHOWphWFI1TG1SbFluVm5LU0JqYjI1emIyeGxMbXh2WnloY0lrSnliM2R6WlhJZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCYlhDSWdLeUJ3Y205d1pYSjBlVlpoYkhWbElDc2dYQ0pkSUdadmNpQmJYQ0lnS3lCd2NtOXdaWEowZVU1aGJXVWdLeUJjSWwxY0lpazdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJUVmtjZ1pXeGxiV1Z1ZEhNZ2FHRjJaU0IwYUdWcGNpQmthVzFsYm5OcGIyNWhiQ0J3Y205d1pYSjBhV1Z6SUNoM2FXUjBhQ3dnYUdWcFoyaDBMQ0I0TENCNUxDQmplQ3dnWlhSakxpa2dZWEJ3YkdsbFpDQmthWEpsWTNSc2VTQmhjeUJoZEhSeWFXSjFkR1Z6SUdsdWMzUmxZV1FnYjJZZ1lYTWdjM1I1YkdWekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTV2ZEdVNklFbEZPQ0JrYjJWeklHNXZkQ0J6ZFhCd2IzSjBJRk5XUnlCbGJHVnRaVzUwY3l3Z2MyOGdhWFFuY3lCdmEyRjVJSFJvWVhRZ2QyVWdjMnRwY0NCcGRDQm1iM0lnVTFaSElHRnVhVzFoZEdsdmJpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRVJoZEdFb1pXeGxiV1Z1ZENrZ0ppWWdSR0YwWVNobGJHVnRaVzUwS1M1cGMxTldSeUFtSmlCRFUxTXVUbUZ0WlhNdVUxWkhRWFIwY21saWRYUmxLSEJ5YjNCbGNuUjVLU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQk9iM1JsT2lCR2IzSWdVMVpISUdGMGRISnBZblYwWlhNc0lIWmxibVJ2Y2kxd2NtVm1hWGhsWkNCd2NtOXdaWEowZVNCdVlXMWxjeUJoY21VZ2JtVjJaWElnZFhObFpDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nVG05MElHRnNiQ0JEVTFNZ2NISnZjR1Z5ZEdsbGN5QmpZVzRnWW1VZ1lXNXBiV0YwWldRZ2RtbGhJR0YwZEhKcFluVjBaWE1zSUdKMWRDQjBhR1VnWW5KdmQzTmxjaUIzYjI0bmRDQjBhSEp2ZHlCaGJpQmxjbkp2Y2lCbWIzSWdkVzV6ZFhCd2IzSjBaV1FnY0hKdmNHVnlkR2xsY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDNXpaWFJCZEhSeWFXSjFkR1VvY0hKdmNHVnlkSGtzSUhCeWIzQmxjblI1Vm1Gc2RXVXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RdWMzUjViR1ZiY0hKdmNHVnlkSGxPWVcxbFhTQTlJSEJ5YjNCbGNuUjVWbUZzZFdVN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGWmxiRzlqYVhSNUxtUmxZblZuSUQ0OUlESXBJR052Ym5OdmJHVXViRzluS0Z3aVUyVjBJRndpSUNzZ2NISnZjR1Z5ZEhrZ0t5QmNJaUFvWENJZ0t5QndjbTl3WlhKMGVVNWhiV1VnS3lCY0lpazZJRndpSUNzZ2NISnZjR1Z5ZEhsV1lXeDFaU2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQlNaWFIxY200Z2RHaGxJRzV2Y20xaGJHbDZaV1FnY0hKdmNHVnlkSGtnYm1GdFpTQmhibVFnZG1Gc2RXVWdhVzRnWTJGelpTQjBhR1VnWTJGc2JHVnlJSGRoYm5SeklIUnZJR3R1YjNjZ2FHOTNJSFJvWlhObElIWmhiSFZsY3lCM1pYSmxJRzF2WkdsbWFXVmtJR0psWm05eVpTQmlaV2x1WnlCaGNIQnNhV1ZrSUhSdklIUm9aU0JFVDAwdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYklIQnliM0JsY25SNVRtRnRaU3dnY0hKdmNHVnlkSGxXWVd4MVpTQmRPMXh1WEhRZ0lDQWdJQ0FnSUgwc1hHNWNibHgwSUNBZ0lDQWdJQ0F2S2lCVWJ5QnBibU55WldGelpTQndaWEptYjNKdFlXNWpaU0JpZVNCaVlYUmphR2x1WnlCMGNtRnVjMlp2Y20wZ2RYQmtZWFJsY3lCcGJuUnZJR0VnYzJsdVoyeGxJRk5GVkN3Z2RISmhibk5tYjNKdGN5QmhjbVVnYm05MElHUnBjbVZqZEd4NUlHRndjR3hwWldRZ2RHOGdZVzRnWld4bGJXVnVkQ0IxYm5ScGJDQm1iSFZ6YUZSeVlXNXpabTl5YlVOaFkyaGxLQ2tnYVhNZ1kyRnNiR1ZrTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRlpsYkc5amFYUjVJR0Z3Y0d4cFpYTWdkSEpoYm5ObWIzSnRJSEJ5YjNCbGNuUnBaWE1nYVc0Z2RHaGxJSE5oYldVZ2IzSmtaWElnZEdoaGRDQjBhR1Y1SUdGeVpTQmphSEp2Ym05bmFXTmhiR3g1SUdsdWRISnZaSFZqWldRZ2RHOGdkR2hsSUdWc1pXMWxiblFuY3lCRFUxTWdjM1I1YkdWekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUdac2RYTm9WSEpoYm5ObWIzSnRRMkZqYUdVNklHWjFibU4wYVc5dUtHVnNaVzFsYm5RcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJ5WVc1elptOXliVk4wY21sdVp5QTlJRndpWENJN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRMlZ5ZEdGcGJpQmljbTkzYzJWeWN5QnlaWEYxYVhKbElIUm9ZWFFnVTFaSElIUnlZVzV6Wm05eWJYTWdZbVVnWVhCd2JHbGxaQ0JoY3lCaGJpQmhkSFJ5YVdKMWRHVXVJRWh2ZDJWMlpYSXNJSFJvWlNCVFZrY2dkSEpoYm5ObWIzSnRJR0YwZEhKcFluVjBaU0IwWVd0bGN5QmhJRzF2WkdsbWFXVmtJSFpsY25OcGIyNGdiMllnUTFOVEozTWdkSEpoYm5ObWIzSnRJSE4wY21sdVoxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9kVzVwZEhNZ1lYSmxJR1J5YjNCd1pXUWdZVzVrTENCbGVHTmxjSFFnWm05eUlITnJaWGRZTDFrc0lITjFZbkJ5YjNCbGNuUnBaWE1nWVhKbElHMWxjbWRsWkNCcGJuUnZJSFJvWldseUlHMWhjM1JsY2lCd2NtOXdaWEowZVNBdExTQmxMbWN1SUhOallXeGxXQ0JoYm1RZ2MyTmhiR1ZaSUdGeVpTQnRaWEpuWldRZ2FXNTBieUJ6WTJGc1pTaFlJRmtwTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCcFppQW9LRWxGSUh4OElDaFdaV3h2WTJsMGVTNVRkR0YwWlM1cGMwRnVaSEp2YVdRZ0ppWWdJVlpsYkc5amFYUjVMbE4wWVhSbExtbHpRMmh5YjIxbEtTa2dKaVlnUkdGMFlTaGxiR1Z0Wlc1MEtTNXBjMU5XUnlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVTJsdVkyVWdkSEpoYm5ObWIzSnRJSFpoYkhWbGN5QmhjbVVnYzNSdmNtVmtJR2x1SUhSb1pXbHlJSEJoY21WdWRHaGxjMlZ6TFhkeVlYQndaV1FnWm05eWJTd2dkMlVnZFhObElHRWdhR1ZzY0dWeUlHWjFibU4wYVc5dUlIUnZJSE4wY21sd0lHOTFkQ0IwYUdWcGNpQnVkVzFsY21saklIWmhiSFZsY3k1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVoxY25Sb1pYSXNJRk5XUnlCMGNtRnVjMlp2Y20wZ2NISnZjR1Z5ZEdsbGN5QnZibXg1SUhSaGEyVWdkVzVwZEd4bGMzTWdLSEpsY0hKbGMyVnVkR2x1WnlCd2FYaGxiSE1wSUhaaGJIVmxjeXdnYzI4Z2FYUW5jeUJ2YTJGNUlIUm9ZWFFnY0dGeWMyVkdiRzloZENncElITjBjbWx3Y3lCMGFHVWdkVzVwZENCemRXWm1hWGhsWkNCMGJ5QjBhR1VnWm14dllYUWdkbUZzZFdVdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJuWlhSVWNtRnVjMlp2Y20xR2JHOWhkQ0FvZEhKaGJuTm1iM0p0VUhKdmNHVnlkSGtwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR0Z5YzJWR2JHOWhkQ2hEVTFNdVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCMGNtRnVjMlp2Y20xUWNtOXdaWEowZVNrcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkRjbVZoZEdVZ1lXNGdiMkpxWldOMElIUnZJRzl5WjJGdWFYcGxJR0ZzYkNCMGFHVWdkSEpoYm5ObWIzSnRjeUIwYUdGMElIZGxKMnhzSUdGd2NHeDVJSFJ2SUhSb1pTQlRWa2NnWld4bGJXVnVkQzRnVkc4Z2EyVmxjQ0IwYUdVZ2JHOW5hV01nYzJsdGNHeGxMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVWdjSEp2WTJWemN5QXFZV3hzS2lCMGNtRnVjMlp2Y20wZ2NISnZjR1Z5ZEdsbGN5QXRMU0JsZG1WdUlIUm9iM05sSUhSb1lYUWdiV0Y1SUc1dmRDQmlaU0JsZUhCc2FXTnBkR3g1SUdGd2NHeHBaV1FnS0hOcGJtTmxJSFJvWlhrZ1pHVm1ZWFZzZENCMGJ5QjBhR1ZwY2lCNlpYSnZMWFpoYkhWbGN5QmhibmwzWVhrcExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGTldSMVJ5WVc1elptOXliWE1nUFNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTnNZWFJsT2lCYklHZGxkRlJ5WVc1elptOXliVVpzYjJGMEtGd2lkSEpoYm5Oc1lYUmxXRndpS1N3Z1oyVjBWSEpoYm5ObWIzSnRSbXh2WVhRb1hDSjBjbUZ1YzJ4aGRHVlpYQ0lwSUYwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ0bGQxZzZJRnNnWjJWMFZISmhibk5tYjNKdFJteHZZWFFvWENKemEyVjNXRndpS1NCZExDQnphMlYzV1RvZ1d5Qm5aWFJVY21GdWMyWnZjbTFHYkc5aGRDaGNJbk5yWlhkWlhDSXBJRjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1dZZ2RHaGxJSE5qWVd4bElIQnliM0JsY25SNUlHbHpJSE5sZENBb2JtOXVMVEVwTENCMWMyVWdkR2hoZENCMllXeDFaU0JtYjNJZ2RHaGxJSE5qWVd4bFdDQmhibVFnYzJOaGJHVlpJSFpoYkhWbGMxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6SUdKbGFHRjJhVzl5SUcxcGJXbGpjeUIwYUdVZ2NtVnpkV3gwSUc5bUlHRnVhVzFoZEdsdVp5QmhiR3dnZEdobGMyVWdjSEp2Y0dWeWRHbGxjeUJoZENCdmJtTmxJRzl1SUVoVVRVd2daV3hsYldWdWRITXBMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bE9pQm5aWFJVY21GdWMyWnZjbTFHYkc5aGRDaGNJbk5qWVd4bFhDSXBJQ0U5UFNBeElEOGdXeUJuWlhSVWNtRnVjMlp2Y20xR2JHOWhkQ2hjSW5OallXeGxYQ0lwTENCblpYUlVjbUZ1YzJadmNtMUdiRzloZENoY0luTmpZV3hsWENJcElGMGdPaUJiSUdkbGRGUnlZVzV6Wm05eWJVWnNiMkYwS0Z3aWMyTmhiR1ZZWENJcExDQm5aWFJVY21GdWMyWnZjbTFHYkc5aGRDaGNJbk5qWVd4bFdWd2lLU0JkTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRk5XUnlkeklISnZkR0YwWlNCMGNtRnVjMlp2Y20wZ2RHRnJaWE1nZEdoeVpXVWdkbUZzZFdWek9pQnliM1JoZEdsdmJpQmtaV2R5WldWeklHWnZiR3h2ZDJWa0lHSjVJSFJvWlNCWUlHRnVaQ0JaSUhaaGJIVmxjMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1sdWFXNW5JSFJvWlNCeWIzUmhkR2x2YmlkeklHOXlhV2RwYmlCd2IybHVkQzRnVjJVZ2FXZHViM0psSUhSb1pTQnZjbWxuYVc0Z2RtRnNkV1Z6SUNoa1pXWmhkV3gwSUhSb1pXMGdkRzhnTUNrdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOTBZWFJsT2lCYklHZGxkRlJ5WVc1elptOXliVVpzYjJGMEtGd2ljbTkwWVhSbFdsd2lLU3dnTUN3Z01DQmRYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKZEdWeVlYUmxJSFJvY205MVoyZ2dkR2hsSUhSeVlXNXpabTl5YlNCd2NtOXdaWEowYVdWeklHbHVJSFJvWlNCMWMyVnlMV1JsWm1sdVpXUWdjSEp2Y0dWeWRIa2diV0Z3SUc5eVpHVnlMbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tGUm9hWE1nYldsdGFXTnpJSFJvWlNCaVpXaGhkbWx2Y2lCdlppQnViMjR0VTFaSElIUnlZVzV6Wm05eWJTQmhibWx0WVhScGIyNHVLU0FxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDNWxZV05vS0VSaGRHRW9aV3hsYldWdWRDa3VkSEpoYm5ObWIzSnRRMkZqYUdVc0lHWjFibU4wYVc5dUtIUnlZVzV6Wm05eWJVNWhiV1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRmVHTmxjSFFnWm05eUlIZHBkR2dnYzJ0bGQxZ3ZXU3dnY21WMlpYSjBJSFJvWlNCaGVHbHpMWE53WldOcFptbGpJSFJ5WVc1elptOXliU0J6ZFdKd2NtOXdaWEowYVdWeklIUnZJSFJvWldseUlHRjRhWE10Wm5KbFpTQnRZWE4wWlhKY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWeklITnZJSFJvWVhRZ2RHaGxlU0J0WVhSamFDQjFjQ0IzYVhSb0lGTldSeWR6SUdGalkyVndkR1ZrSUhSeVlXNXpabTl5YlNCd2NtOXdaWEowYVdWekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2d2WG5SeVlXNXpiR0YwWlM5cExuUmxjM1FvZEhKaGJuTm1iM0p0VG1GdFpTa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0VG1GdFpTQTlJRndpZEhKaGJuTnNZWFJsWENJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNndlhuTmpZV3hsTDJrdWRHVnpkQ2gwY21GdWMyWnZjbTFPWVcxbEtTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTFPWVcxbElEMGdYQ0p6WTJGc1pWd2lPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9MMTV5YjNSaGRHVXZhUzUwWlhOMEtIUnlZVzV6Wm05eWJVNWhiV1VwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJVNWhiV1VnUFNCY0luSnZkR0YwWlZ3aU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFTm9aV05ySUhSb1lYUWdkMlVnYUdGMlpXNG5kQ0I1WlhRZ1pHVnNaWFJsWkNCMGFHVWdjSEp2Y0dWeWRIa2dabkp2YlNCMGFHVWdVMVpIVkhKaGJuTm1iM0p0Y3lCamIyNTBZV2x1WlhJdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRk5XUjFSeVlXNXpabTl5YlhOYmRISmhibk5tYjNKdFRtRnRaVjBwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRWEJ3Wlc1a0lIUm9aU0IwY21GdWMyWnZjbTBnY0hKdmNHVnlkSGtnYVc0Z2RHaGxJRk5XUnkxemRYQndiM0owWldRZ2RISmhibk5tYjNKdElHWnZjbTFoZEM0Z1FYTWdjR1Z5SUhSb1pTQnpjR1ZqTENCemRYSnliM1Z1WkNCMGFHVWdjM0JoWTJVdFpHVnNhVzFwZEdWa0lIWmhiSFZsY3lCcGJpQndZWEpsYm5Sb1pYTmxjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdFUzUnlhVzVuSUNzOUlIUnlZVzV6Wm05eWJVNWhiV1VnS3lCY0lpaGNJaUFySUZOV1IxUnlZVzV6Wm05eWJYTmJkSEpoYm5ObWIzSnRUbUZ0WlYwdWFtOXBiaWhjSWlCY0lpa2dLeUJjSWlsY0lpQXJJRndpSUZ3aU8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVGbWRHVnlJSEJ5YjJObGMzTnBibWNnWVc0Z1UxWkhJSFJ5WVc1elptOXliU0J3Y205d1pYSjBlU3dnWkdWc1pYUmxJR2wwSUdaeWIyMGdkR2hsSUZOV1IxUnlZVzV6Wm05eWJYTWdZMjl1ZEdGcGJtVnlJSE52SUhkbElHUnZiaWQwWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxMV2x1YzJWeWRDQjBhR1VnYzJGdFpTQnRZWE4wWlhJZ2NISnZjR1Z5ZEhrZ2FXWWdkMlVnWlc1amIzVnVkR1Z5SUdGdWIzUm9aWElnYjI1bElHOW1JR2wwY3lCaGVHbHpMWE53WldOcFptbGpJSEJ5YjNCbGNuUnBaWE11SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCVFZrZFVjbUZ1YzJadmNtMXpXM1J5WVc1elptOXliVTVoYldWZE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSeVlXNXpabTl5YlZaaGJIVmxMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmxjbk53WldOMGFYWmxPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlVjbUZ1YzJadmNtMGdjSEp2Y0dWeWRHbGxjeUJoY21VZ2MzUnZjbVZrSUdGeklHMWxiV0psY25NZ2IyWWdkR2hsSUhSeVlXNXpabTl5YlVOaFkyaGxJRzlpYW1WamRDNGdRMjl1WTJGMFpXNWhkR1VnWVd4c0lIUm9aU0J0WlcxaVpYSnpJR2x1ZEc4Z1lTQnpkSEpwYm1jdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrTG1WaFkyZ29SR0YwWVNobGJHVnRaVzUwS1M1MGNtRnVjMlp2Y20xRFlXTm9aU3dnWm5WdVkzUnBiMjRvZEhKaGJuTm1iM0p0VG1GdFpTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJWWmhiSFZsSUQwZ1JHRjBZU2hsYkdWdFpXNTBLUzUwY21GdWMyWnZjbTFEWVdOb1pWdDBjbUZ1YzJadmNtMU9ZVzFsWFR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGUnlZVzV6Wm05eWJTZHpJSEJsY25Od1pXTjBhWFpsSUhOMVluQnliM0JsY25SNUlHMTFjM1FnWW1VZ2MyVjBJR1pwY25OMElHbHVJRzl5WkdWeUlIUnZJSFJoYTJVZ1pXWm1aV04wTGlCVGRHOXlaU0JwZENCMFpXMXdiM0poY21sc2VTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhKaGJuTm1iM0p0VG1GdFpTQTlQVDBnWENKMGNtRnVjMlp2Y20xUVpYSnpjR1ZqZEdsMlpWd2lLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCbGNuTndaV04wYVhabElEMGdkSEpoYm5ObWIzSnRWbUZzZFdVN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxGT1NCdmJteDVJSE4xY0hCdmNuUnpJRzl1WlNCeWIzUmhkR2x2YmlCMGVYQmxMQ0J5YjNSaGRHVmFMQ0IzYUdsamFDQnBkQ0J5WldabGNuTWdkRzhnWVhNZ1hDSnliM1JoZEdWY0lpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvU1VVZ1BUMDlJRGtnSmlZZ2RISmhibk5tYjNKdFRtRnRaU0E5UFQwZ1hDSnliM1JoZEdWYVhDSXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0VG1GdFpTQTlJRndpY205MFlYUmxYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRVM1J5YVc1bklDczlJSFJ5WVc1elptOXliVTVoYldVZ0t5QjBjbUZ1YzJadmNtMVdZV3gxWlNBcklGd2lJRndpTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbG1JSEJ5WlhObGJuUXNJSE5sZENCMGFHVWdjR1Z5YzNCbFkzUnBkbVVnYzNWaWNISnZjR1Z5ZEhrZ1ptbHljM1F1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dWeWMzQmxZM1JwZG1VcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20xVGRISnBibWNnUFNCY0luQmxjbk53WldOMGFYWmxYQ0lnS3lCd1pYSnpjR1ZqZEdsMlpTQXJJRndpSUZ3aUlDc2dkSEpoYm5ObWIzSnRVM1J5YVc1bk8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdRMU5UTG5ObGRGQnliM0JsY25SNVZtRnNkV1VvWld4bGJXVnVkQ3dnWENKMGNtRnVjMlp2Y20xY0lpd2dkSEpoYm5ObWIzSnRVM1J5YVc1bktUdGNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0I5TzF4dVhHNWNkQ0FnSUNBdktpQlNaV2RwYzNSbGNpQm9iMjlyY3lCaGJtUWdibTl5YldGc2FYcGhkR2x2Ym5NdUlDb3ZYRzVjZENBZ0lDQkRVMU11U0c5dmEzTXVjbVZuYVhOMFpYSW9LVHRjYmx4MElDQWdJRU5UVXk1T2IzSnRZV3hwZW1GMGFXOXVjeTV5WldkcGMzUmxjaWdwTzF4dVhHNWNkQ0FnSUNBdktpQkJiR3h2ZHlCb2IyOXJJSE5sZEhScGJtY2dhVzRnZEdobElITmhiV1VnWm1GemFHbHZiaUJoY3lCcVVYVmxjbmtuY3lBa0xtTnpjeWdwTGlBcUwxeHVYSFFnSUNBZ1ZtVnNiMk5wZEhrdWFHOXZheUE5SUdaMWJtTjBhVzl1SUNobGJHVnRaVzUwY3l3Z1lYSm5NaXdnWVhKbk15a2dlMXh1WEhRZ0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlIVnVaR1ZtYVc1bFpEdGNibHh1WEhRZ0lDQWdJQ0FnSUdWc1pXMWxiblJ6SUQwZ2MyRnVhWFJwZW1WRmJHVnRaVzUwY3lobGJHVnRaVzUwY3lrN1hHNWNibHgwSUNBZ0lDQWdJQ0FrTG1WaFkyZ29aV3hsYldWdWRITXNJR1oxYm1OMGFXOXVLR2tzSUdWc1pXMWxiblFwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXNXBkR2xoYkdsNlpTQldaV3h2WTJsMGVTZHpJSEJsY2kxbGJHVnRaVzUwSUdSaGRHRWdZMkZqYUdVZ2FXWWdkR2hwY3lCbGJHVnRaVzUwSUdoaGMyNG5kQ0J3Y21WMmFXOTFjMng1SUdKbFpXNGdZVzVwYldGMFpXUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRVlYUmhLR1ZzWlcxbGJuUXBJRDA5UFNCMWJtUmxabWx1WldRcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlpsYkc5amFYUjVMbWx1YVhRb1pXeGxiV1Z1ZENrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQkhaWFFnY0hKdmNHVnlkSGtnZG1Gc2RXVXVJRWxtSUdGdUlHVnNaVzFsYm5RZ2MyVjBJSGRoY3lCd1lYTnpaV1FnYVc0c0lHOXViSGtnY21WMGRYSnVJSFJvWlNCMllXeDFaU0JtYjNJZ2RHaGxJR1pwY25OMElHVnNaVzFsYm5RdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoY21jeklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0JXWld4dlkybDBlUzVEVTFNdVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCaGNtY3lLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1UyVjBJSEJ5YjNCbGNuUjVJSFpoYkhWbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nYzFCV0lISmxkSFZ5Ym5NZ1lXNGdZWEp5WVhrZ2IyWWdkR2hsSUc1dmNtMWhiR2w2WldRZ2NISnZjR1Z5ZEhsT1lXMWxMM0J5YjNCbGNuUjVWbUZzZFdVZ2NHRnBjaUIxYzJWa0lIUnZJSFZ3WkdGMFpTQjBhR1VnUkU5TkxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRmthblZ6ZEdWa1UyVjBJRDBnVm1Wc2IyTnBkSGt1UTFOVExuTmxkRkJ5YjNCbGNuUjVWbUZzZFdVb1pXeGxiV1Z1ZEN3Z1lYSm5NaXdnWVhKbk15azdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGUnlZVzV6Wm05eWJTQndjbTl3WlhKMGFXVnpJR1J2YmlkMElHRjFkRzl0WVhScFkyRnNiSGtnYzJWMExpQlVhR1Y1SUdoaGRtVWdkRzhnWW1VZ1pteDFjMmhsWkNCMGJ5QjBhR1VnUkU5TkxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRmthblZ6ZEdWa1UyVjBXekJkSUQwOVBTQmNJblJ5WVc1elptOXliVndpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVm1Wc2IyTnBkSGt1UTFOVExtWnNkWE5vVkhKaGJuTm1iM0p0UTJGamFHVW9aV3hsYldWdWRDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ1lXUnFkWE4wWldSVFpYUTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0I5S1R0Y2JseHVYSFFnSUNBZ0lDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JseDBJQ0FnSUgwN1hHNWNibHgwSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJRUZ1YVcxaGRHbHZibHh1WEhRZ0lDQWdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmx4MElDQWdJSFpoY2lCaGJtbHRZWFJsSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzVjYmx4MElDQWdJQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUVOaGJHd2dRMmhoYVc1Y2JseDBJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmx4MElDQWdJQ0FnSUNBdktpQk1iMmRwWXlCbWIzSWdaR1YwWlhKdGFXNXBibWNnZDJoaGRDQjBieUJ5WlhSMWNtNGdkRzhnZEdobElHTmhiR3dnYzNSaFkyc2dkMmhsYmlCbGVHbDBhVzVuSUc5MWRDQnZaaUJXWld4dlkybDBlUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQm5aWFJEYUdGcGJpQW9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsbUlIZGxJR0Z5WlNCMWMybHVaeUIwYUdVZ2RYUnBiR2wwZVNCbWRXNWpkR2x2Yml3Z1lYUjBaVzF3ZENCMGJ5QnlaWFIxY200Z2RHaHBjeUJqWVd4c0ozTWdjSEp2YldselpTNGdTV1lnYm04Z2NISnZiV2x6WlNCc2FXSnlZWEo1SUhkaGN5QmtaWFJsWTNSbFpDeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2RDQjBieUJ1ZFd4c0lHbHVjM1JsWVdRZ2IyWWdjbVYwZFhKdWFXNW5JSFJvWlNCMFlYSm5aWFJsWkNCbGJHVnRaVzUwY3lCemJ5QjBhR0YwSUhWMGFXeHBkSGtnWm5WdVkzUnBiMjRuY3lCeVpYUjFjbTRnZG1Gc2RXVWdhWE1nYzNSaGJtUmhjbVJwZW1Wa0xpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOVmRHbHNhWFI1S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISnZiV2x6WlVSaGRHRXVjSEp2YldselpTQjhmQ0J1ZFd4c08xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQlBkR2hsY25kcGMyVXNJR2xtSUhkbEozSmxJSFZ6YVc1bklDUXVabTRzSUhKbGRIVnliaUIwYUdVZ2FsRjFaWEo1TFM5YVpYQjBieTEzY21Gd2NHVmtJR1ZzWlcxbGJuUWdjMlYwTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWc1pXMWxiblJ6VjNKaGNIQmxaRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ1FYSm5kVzFsYm5SeklFRnpjMmxuYm0xbGJuUmNibHgwSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0FnSUNBZ0x5b2dWRzhnWVd4c2IzY2dabTl5SUdWNGNISmxjM05wZG1VZ1EyOW1abVZsVTJOeWFYQjBJR052WkdVc0lGWmxiRzlqYVhSNUlITjFjSEJ2Y25SeklHRnVJR0ZzZEdWeWJtRjBhWFpsSUhONWJuUmhlQ0JwYmlCM2FHbGphQ0JjSW1Wc1pXMWxiblJ6WENJZ0tHOXlJRndpWlZ3aUtTd2dYQ0p3Y205d1pYSjBhV1Z6WENJZ0tHOXlJRndpY0Z3aUtTd2dZVzVrSUZ3aWIzQjBhVzl1YzF3aUlDaHZjaUJjSW05Y0lpbGNibHgwSUNBZ0lDQWdJQ0FnSUNCdlltcGxZM1J6SUdGeVpTQmtaV1pwYm1Wa0lHOXVJR0VnWTI5dWRHRnBibVZ5SUc5aWFtVmpkQ0IwYUdGMEozTWdjR0Z6YzJWa0lHbHVJR0Z6SUZabGJHOWphWFI1SjNNZ2MyOXNaU0JoY21kMWJXVnVkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQXZLaUJPYjNSbE9pQlRiMjFsSUdKeWIzZHpaWEp6SUdGMWRHOXRZWFJwWTJGc2JIa2djRzl3ZFd4aGRHVWdZWEpuZFcxbGJuUnpJSGRwZEdnZ1lTQmNJbkJ5YjNCbGNuUnBaWE5jSWlCdlltcGxZM1F1SUZkbElHUmxkR1ZqZENCcGRDQmllU0JqYUdWamEybHVaeUJtYjNJZ2FYUnpJR1JsWm1GMWJIUWdYQ0p1WVcxbGMxd2lJSEJ5YjNCbGNuUjVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJ6ZVc1MFlXTjBhV05UZFdkaGNpQTlJQ2hoY21kMWJXVnVkSE5iTUYwZ0ppWWdLR0Z5WjNWdFpXNTBjMXN3WFM1d0lIeDhJQ2dvSkM1cGMxQnNZV2x1VDJKcVpXTjBLR0Z5WjNWdFpXNTBjMXN3WFM1d2NtOXdaWEowYVdWektTQW1KaUFoWVhKbmRXMWxiblJ6V3pCZExuQnliM0JsY25ScFpYTXVibUZ0WlhNcElIeDhJRlI1Y0dVdWFYTlRkSEpwYm1jb1lYSm5kVzFsYm5Seld6QmRMbkJ5YjNCbGNuUnBaWE1wS1NrcExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQlhhR1YwYUdWeUlGWmxiRzlqYVhSNUlIZGhjeUJqWVd4c1pXUWdkbWxoSUhSb1pTQjFkR2xzYVhSNUlHWjFibU4wYVc5dUlDaGhjeUJ2Y0hCdmMyVmtJSFJ2SUc5dUlHRWdhbEYxWlhKNUwxcGxjSFJ2SUc5aWFtVmpkQ2t1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdselZYUnBiR2wwZVN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1YyaGxiaUJXWld4dlkybDBlU0JwY3lCallXeHNaV1FnZG1saElIUm9aU0IxZEdsc2FYUjVJR1oxYm1OMGFXOXVJQ2drTGxabGJHOWphWFI1S0NrdlZtVnNiMk5wZEhrb0tTa3NJR1ZzWlcxbGJuUnpJR0Z5WlNCbGVIQnNhV05wZEd4NVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhjM05sWkNCcGJpQmhjeUIwYUdVZ1ptbHljM1FnY0dGeVlXMWxkR1Z5TGlCVWFIVnpMQ0JoY21kMWJXVnVkQ0J3YjNOcGRHbHZibWx1WnlCMllYSnBaWE11SUZkbElHNXZjbTFoYkdsNlpTQjBhR1Z0SUdobGNtVXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUnpWM0poY0hCbFpDeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5kVzFsYm5SSmJtUmxlRHRjYmx4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJsYkdWdFpXNTBjeXhjYmx4MElDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjMDFoY0N4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjenRjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRVJsZEdWamRDQnFVWFZsY25rdldtVndkRzhnWld4bGJXVnVkSE1nWW1WcGJtY2dZVzVwYldGMFpXUWdkbWxoSUhSb1pTQWtMbVp1SUcxbGRHaHZaQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQnBaaUFvVkhsd1pTNXBjMWR5WVhCd1pXUW9kR2hwY3lrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2FYTlZkR2xzYVhSNUlEMGdabUZzYzJVN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5kVzFsYm5SSmJtUmxlQ0E5SURBN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblJ6SUQwZ2RHaHBjenRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRITlhjbUZ3Y0dWa0lEMGdkR2hwY3p0Y2JseDBJQ0FnSUNBZ0lDQXZLaUJQZEdobGNuZHBjMlVzSUhKaGR5QmxiR1Z0Wlc1MGN5QmhjbVVnWW1WcGJtY2dZVzVwYldGMFpXUWdkbWxoSUhSb1pTQjFkR2xzYVhSNUlHWjFibU4wYVc5dUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2x6VlhScGJHbDBlU0E5SUhSeWRXVTdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdZWEpuZFcxbGJuUkpibVJsZUNBOUlERTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5SeklEMGdjM2x1ZEdGamRHbGpVM1ZuWVhJZ1B5QW9ZWEpuZFcxbGJuUnpXekJkTG1Wc1pXMWxiblJ6SUh4OElHRnlaM1Z0Wlc1MGMxc3dYUzVsS1NBNklHRnlaM1Z0Wlc1MGMxc3dYVHRjYmx4MElDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0JsYkdWdFpXNTBjeUE5SUhOaGJtbDBhWHBsUld4bGJXVnVkSE1vWld4bGJXVnVkSE1wTzF4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0NGbGJHVnRaVzUwY3lrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tITjViblJoWTNScFkxTjFaMkZ5S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhOTllYQWdQU0JoY21kMWJXVnVkSE5iTUYwdWNISnZjR1Z5ZEdsbGN5QjhmQ0JoY21kMWJXVnVkSE5iTUYwdWNEdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHRnlaM1Z0Wlc1MGMxc3dYUzV2Y0hScGIyNXpJSHg4SUdGeVozVnRaVzUwYzFzd1hTNXZPMXh1WEhRZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE5OWVhBZ1BTQmhjbWQxYldWdWRITmJZWEpuZFcxbGJuUkpibVJsZUYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk1nUFNCaGNtZDFiV1Z1ZEhOYllYSm5kVzFsYm5SSmJtUmxlQ0FySURGZE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRlJvWlNCc1pXNW5kR2dnYjJZZ2RHaGxJR1ZzWlcxbGJuUWdjMlYwSUNocGJpQjBhR1VnWm05eWJTQnZaaUJoSUc1dlpHVk1hWE4wSUc5eUlHRnVJR0Z5Y21GNUlHOW1JR1ZzWlcxbGJuUnpLU0JwY3lCa1pXWmhkV3gwWldRZ2RHOGdNU0JwYmlCallYTmxJR0ZjYmx4MElDQWdJQ0FnSUNBZ0lDQnphVzVuYkdVZ2NtRjNJRVJQVFNCbGJHVnRaVzUwSUdseklIQmhjM05sWkNCcGJpQW9kMmhwWTJnZ1pHOWxjMjRuZENCamIyNTBZV2x1SUdFZ2JHVnVaM1JvSUhCeWIzQmxjblI1S1M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0IyWVhJZ1pXeGxiV1Z1ZEhOTVpXNW5kR2dnUFNCbGJHVnRaVzUwY3k1c1pXNW5kR2dzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUnpTVzVrWlhnZ1BTQXdPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCQmNtZDFiV1Z1ZENCUGRtVnliRzloWkdsdVoxeHVYSFFnSUNBZ0lDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRk4xY0hCdmNuUWdhWE1nYVc1amJIVmtaV1FnWm05eUlHcFJkV1Z5ZVNkeklHRnlaM1Z0Wlc1MElHOTJaWEpzYjJGa2FXNW5PaUFrTG1GdWFXMWhkR1VvY0hKdmNHVnlkSGxOWVhBZ1d5d2daSFZ5WVhScGIyNWRJRnNzSUdWaGMybHVaMTBnV3l3Z1kyOXRjR3hsZEdWZEtTNWNibHgwSUNBZ0lDQWdJQ0FnSUNCUGRtVnliRzloWkdsdVp5QnBjeUJrWlhSbFkzUmxaQ0JpZVNCamFHVmphMmx1WnlCbWIzSWdkR2hsSUdGaWMyVnVZMlVnYjJZZ1lXNGdiMkpxWldOMElHSmxhVzVuSUhCaGMzTmxaQ0JwYm5SdklHOXdkR2x2Ym5NdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nVkdobElITjBiM0FnWVc1a0lHWnBibWx6YUNCaFkzUnBiMjV6SUdSdklHNXZkQ0JoWTJObGNIUWdZVzVwYldGMGFXOXVJRzl3ZEdsdmJuTXNJR0Z1WkNCaGNtVWdkR2hsY21WbWIzSmxJR1Y0WTJ4MVpHVmtJR1p5YjIwZ2RHaHBjeUJqYUdWamF5NGdLaTljYmx4MElDQWdJQ0FnSUNCcFppQW9JUzllS0hOMGIzQjhabWx1YVhOb2ZHWnBibWx6YUVGc2JDa2tMMmt1ZEdWemRDaHdjbTl3WlhKMGFXVnpUV0Z3S1NBbUppQWhKQzVwYzFCc1lXbHVUMkpxWldOMEtHOXdkR2x2Ym5NcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRlJvWlNCMWRHbHNhWFI1SUdaMWJtTjBhVzl1SUhOb2FXWjBjeUJoYkd3Z1lYSm5kVzFsYm5SeklHOXVaU0J3YjNOcGRHbHZiaUIwYnlCMGFHVWdjbWxuYUhRc0lITnZJSGRsSUdGa2FuVnpkQ0JtYjNJZ2RHaGhkQ0J2Wm1aelpYUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemRHRnlkR2x1WjBGeVozVnRaVzUwVUc5emFYUnBiMjRnUFNCaGNtZDFiV1Z1ZEVsdVpHVjRJQ3NnTVR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6SUQwZ2UzMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nU1hSbGNtRjBaU0IwYUhKdmRXZG9JR0ZzYkNCdmNIUnBiMjV6SUdGeVozVnRaVzUwY3lBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdjM1JoY25ScGJtZEJjbWQxYldWdWRGQnZjMmwwYVc5dU95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWNtVmhkQ0JoSUc1MWJXSmxjaUJoY3lCaElHUjFjbUYwYVc5dUxpQlFZWEp6WlNCcGRDQnZkWFF1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJPYjNSbE9pQlVhR1VnWm05c2JHOTNhVzVuSUZKbFowVjRJSGRwYkd3Z2NtVjBkWEp1SUhSeWRXVWdhV1lnY0dGemMyVmtJR0Z1SUdGeWNtRjVJSGRwZEdnZ1lTQnVkVzFpWlhJZ1lYTWdhWFJ6SUdacGNuTjBJR2wwWlcwdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVYUhWekxDQmhjbkpoZVhNZ1lYSmxJSE5yYVhCd1pXUWdabkp2YlNCMGFHbHpJR05vWldOckxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRlVlWEJsTG1selFYSnlZWGtvWVhKbmRXMWxiblJ6VzJsZEtTQW1KaUFvTDE0b1ptRnpkSHh1YjNKdFlXeDhjMnh2ZHlra0wya3VkR1Z6ZENoaGNtZDFiV1Z1ZEhOYmFWMHBJSHg4SUM5ZVhGeGtMeTUwWlhOMEtHRnlaM1Z0Wlc1MGMxdHBYU2twS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVjeTVrZFhKaGRHbHZiaUE5SUdGeVozVnRaVzUwYzF0cFhUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZSeVpXRjBJSE4wY21sdVozTWdZVzVrSUdGeWNtRjVjeUJoY3lCbFlYTnBibWR6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hVZVhCbExtbHpVM1J5YVc1bktHRnlaM1Z0Wlc1MGMxdHBYU2tnZkh3Z1ZIbHdaUzVwYzBGeWNtRjVLR0Z5WjNWdFpXNTBjMXRwWFNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG1WaGMybHVaeUE5SUdGeVozVnRaVzUwYzF0cFhUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZSeVpXRjBJR0VnWm5WdVkzUnBiMjRnWVhNZ1lTQmpiMjF3YkdWMFpTQmpZV3hzWW1GamF5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1ZIbHdaUzVwYzBaMWJtTjBhVzl1S0dGeVozVnRaVzUwYzF0cFhTa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ekxtTnZiWEJzWlhSbElEMGdZWEpuZFcxbGJuUnpXMmxkTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JRY205dGFYTmxjMXh1WEhRZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJ3Y205dGFYTmxSR0YwWVNBOUlIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjIxcGMyVTZJRzUxYkd3c1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabGNqb2diblZzYkN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZEdWeU9pQnVkV3hzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JseDBJQ0FnSUNBZ0lDQXZLaUJKWmlCMGFHbHpJR05oYkd3Z2QyRnpJRzFoWkdVZ2RtbGhJSFJvWlNCMWRHbHNhWFI1SUdaMWJtTjBhVzl1SUNoM2FHbGphQ0JwY3lCMGFHVWdaR1ZtWVhWc2RDQnRaWFJvYjJRZ2IyWWdhVzUyYjJOaGRHbHZiaUIzYUdWdUlHcFJkV1Z5ZVM5YVpYQjBieUJoY21VZ2JtOTBJR0psYVc1bklIVnpaV1FwTENCaGJtUWdhV1pjYmx4MElDQWdJQ0FnSUNBZ0lDQndjbTl0YVhObElITjFjSEJ2Y25RZ2QyRnpJR1JsZEdWamRHVmtMQ0JqY21WaGRHVWdZU0J3Y205dGFYTmxJRzlpYW1WamRDQm1iM0lnZEdocGN5QmpZV3hzSUdGdVpDQnpkRzl5WlNCeVpXWmxjbVZ1WTJWeklIUnZJR2wwY3lCeVpYTnZiSFpsY2lCaGJtUWdjbVZxWldOMFpYSWdiV1YwYUc5a2N5NGdWR2hsSUhKbGMyOXNkbVZjYmx4MElDQWdJQ0FnSUNBZ0lDQnRaWFJvYjJRZ2FYTWdkWE5sWkNCM2FHVnVJR0VnWTJGc2JDQmpiMjF3YkdWMFpYTWdibUYwZFhKaGJHeDVJRzl5SUdseklIQnlaVzFoZEhWeVpXeDVJSE4wYjNCd1pXUWdZbmtnZEdobElIVnpaWEl1SUVsdUlHSnZkR2dnWTJGelpYTXNJR052YlhCc1pYUmxRMkZzYkNncElHaGhibVJzWlhNZ2RHaGxJR0Z6YzI5amFXRjBaV1JjYmx4MElDQWdJQ0FnSUNBZ0lDQmpZV3hzSUdOc1pXRnVkWEFnWVc1a0lIQnliMjFwYzJVZ2NtVnpiMngyYVc1bklHeHZaMmxqTGlCVWFHVWdjbVZxWldOMElHMWxkR2h2WkNCcGN5QjFjMlZrSUhkb1pXNGdZVzRnYVc1MllXeHBaQ0J6WlhRZ2IyWWdZWEpuZFcxbGJuUnpJR2x6SUhCaGMzTmxaQ0JwYm5SdklHRWdWbVZzYjJOcGRIa2dZMkZzYkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0F2S2lCT2IzUmxPaUJXWld4dlkybDBlU0JsYlhCc2IzbHpJR0VnWTJGc2JDMWlZWE5sWkNCeGRXVjFaV2x1WnlCaGNtTm9hWFJsWTNSMWNtVXNJSGRvYVdOb0lHMWxZVzV6SUhSb1lYUWdjM1J2Y0hCcGJtY2dZVzRnWVc1cGJXRjBhVzVuSUdWc1pXMWxiblFnWVdOMGRXRnNiSGtnYzNSdmNITWdkR2hsSUdaMWJHd2dZMkZzYkNCMGFHRjBYRzVjZENBZ0lDQWdJQ0FnSUNBZ2RISnBaMmRsY21Wa0lHbDBJQzB0SUc1dmRDQjBhR0YwSUc5dVpTQmxiR1Z0Wlc1MElHVjRZMngxYzJsMlpXeDVMaUJUYVcxcGJHRnliSGtzSUhSb1pYSmxJR2x6SUc5dVpTQndjbTl0YVhObElIQmxjaUJqWVd4c0xDQmhibVFnWVd4c0lHVnNaVzFsYm5SeklIUmhjbWRsZEdWa0lHSjVJR0VnVm1Wc2IyTnBkSGtnWTJGc2JDQmhjbVZjYmx4MElDQWdJQ0FnSUNBZ0lDQm5jbTkxY0dWa0lIUnZaMlYwYUdWeUlHWnZjaUIwYUdVZ2NIVnljRzl6WlhNZ2IyWWdjbVZ6YjJ4MmFXNW5JR0Z1WkNCeVpXcGxZM1JwYm1jZ1lTQndjbTl0YVhObExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUdsbUlDaHBjMVYwYVd4cGRIa2dKaVlnVm1Wc2IyTnBkSGt1VUhKdmJXbHpaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J3Y205dGFYTmxSR0YwWVM1d2NtOXRhWE5sSUQwZ2JtVjNJRlpsYkc5amFYUjVMbEJ5YjIxcGMyVW9ablZ1WTNScGIyNGdLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaVVJoZEdFdWNtVnpiMngyWlhJZ1BTQnlaWE52YkhabE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2YldselpVUmhkR0V1Y21WcVpXTjBaWElnUFNCeVpXcGxZM1E3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUM4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNCQlkzUnBiMjRnUkdWMFpXTjBhVzl1WEc1Y2RDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0FnSUNBZ0x5b2dWbVZzYjJOcGRIa25jeUJpWldoaGRtbHZjaUJwY3lCallYUmxaMjl5YVhwbFpDQnBiblJ2SUZ3aVlXTjBhVzl1YzF3aU9pQkZiR1Z0Wlc1MGN5QmpZVzRnWldsMGFHVnlJR0psSUhOd1pXTnBZV3hzZVNCelkzSnZiR3hsWkNCcGJuUnZJSFpwWlhjc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnYjNJZ2RHaGxlU0JqWVc0Z1ltVWdjM1JoY25SbFpDd2djM1J2Y0hCbFpDd2diM0lnY21WMlpYSnpaV1F1SUVsbUlHRWdiR2wwWlhKaGJDQnZjaUJ5WldabGNtVnVZMlZrSUhCeWIzQmxjblJwWlhNZ2JXRndJR2x6SUhCaGMzTmxaQ0JwYmlCaGN5QldaV3h2WTJsMGVTZHpYRzVjZENBZ0lDQWdJQ0FnSUNBZ1ptbHljM1FnWVhKbmRXMWxiblFzSUhSb1pTQmhjM052WTJsaGRHVmtJR0ZqZEdsdmJpQnBjeUJjSW5OMFlYSjBYQ0l1SUVGc2RHVnlibUYwYVhabGJIa3NJRndpYzJOeWIyeHNYQ0lzSUZ3aWNtVjJaWEp6WlZ3aUxDQnZjaUJjSW5OMGIzQmNJaUJqWVc0Z1ltVWdjR0Z6YzJWa0lHbHVJR2x1YzNSbFlXUWdiMllnWVNCd2NtOXdaWEowYVdWeklHMWhjQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQjJZWElnWVdOMGFXOXVPMXh1WEc1Y2RDQWdJQ0FnSUNBZ2MzZHBkR05vSUNod2NtOXdaWEowYVdWelRXRndLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSnpZM0p2Ykd4Y0lqcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqZEdsdmJpQTlJRndpYzJOeWIyeHNYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2ljbVYyWlhKelpWd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVJRDBnWENKeVpYWmxjbk5sWENJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpWm1sdWFYTm9YQ0k2WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSm1hVzVwYzJoQmJHeGNJanBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luTjBiM0JjSWpwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FXTjBhVzl1T2lCVGRHOXdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEYkdWaGNpQjBhR1VnWTNWeWNtVnVkR3g1TFdGamRHbDJaU0JrWld4aGVTQnZiaUJsWVdOb0lIUmhjbWRsZEdWa0lHVnNaVzFsYm5RdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrTG1WaFkyZ29aV3hsYldWdWRITXNJR1oxYm1OMGFXOXVLR2tzSUdWc1pXMWxiblFwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JHRjBZU2hsYkdWdFpXNTBLU0FtSmlCRVlYUmhLR1ZzWlcxbGJuUXBMbVJsYkdGNVZHbHRaWElwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVM1J2Y0NCMGFHVWdkR2x0WlhJZ1puSnZiU0IwY21sbloyVnlhVzVuSUdsMGN5QmpZV05vWldRZ2JtVjRkQ2dwSUdaMWJtTjBhVzl1TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvUkdGMFlTaGxiR1Z0Wlc1MEtTNWtaV3hoZVZScGJXVnlMbk5sZEZScGJXVnZkWFFwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTFoYm5WaGJHeDVJR05oYkd3Z2RHaGxJRzVsZUhRb0tTQm1kVzVqZEdsdmJpQnpieUIwYUdGMElIUm9aU0J6ZFdKelpYRjFaVzUwSUhGMVpYVmxJR2wwWlcxeklHTmhiaUJ3Y205bmNtVnpjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRVJoZEdFb1pXeGxiV1Z1ZENrdVpHVnNZWGxVYVcxbGNpNXVaWGgwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JFWVhSaEtHVnNaVzFsYm5RcExtUmxiR0Y1VkdsdFpYSXVibVY0ZENncE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRVJoZEdFb1pXeGxiV1Z1ZENrdVpHVnNZWGxVYVcxbGNqdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUIzWlNCM1lXNTBJSFJ2SUdacGJtbHphQ0JsZG1WeWVYUm9hVzVuSUdsdUlIUm9aU0J4ZFdWMVpTd2dkMlVnYUdGMlpTQjBieUJwZEdWeVlYUmxJSFJvY205MVoyZ2dhWFJjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYm1RZ1kyRnNiQ0JsWVdOb0lHWjFibU4wYVc5dUxpQlVhR2x6SUhkcGJHd2diV0ZyWlNCMGFHVnRJR0ZqZEdsMlpTQmpZV3hzY3lCaVpXeHZkeXdnZDJocFkyZ2dkMmxzYkZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGRYTmxJSFJvWlcwZ2RHOGdZbVVnWVhCd2JHbGxaQ0IyYVdFZ2RHaGxJR1IxY21GMGFXOXVJSE5sZEhScGJtY3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCeWIzQmxjblJwWlhOTllYQWdQVDA5SUZ3aVptbHVhWE5vUVd4c1hDSWdKaVlnS0c5d2RHbHZibk1nUFQwOUlIUnlkV1VnZkh3Z1ZIbHdaUzVwYzFOMGNtbHVaeWh2Y0hScGIyNXpLU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTWFJsY21GMFpTQjBhSEp2ZFdkb0lIUm9aU0JwZEdWdGN5QnBiaUIwYUdVZ1pXeGxiV1Z1ZENkeklIRjFaWFZsTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtMbVZoWTJnb0pDNXhkV1YxWlNobGJHVnRaVzUwTENCVWVYQmxMbWx6VTNSeWFXNW5LRzl3ZEdsdmJuTXBJRDhnYjNCMGFXOXVjeUE2SUZ3aVhDSXBMQ0JtZFc1amRHbHZiaWhmTENCcGRHVnRLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJVYUdVZ2NYVmxkV1VnWVhKeVlYa2dZMkZ1SUdOdmJuUmhhVzRnWVc0Z1hDSnBibkJ5YjJkeVpYTnpYQ0lnYzNSeWFXNW5MQ0IzYUdsamFDQjNaU0J6YTJsd0xpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRlI1Y0dVdWFYTkdkVzVqZEdsdmJpaHBkR1Z0S1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzBvS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUTJ4bFlYSnBibWNnZEdobElDUXVjWFZsZFdVb0tTQmhjbkpoZVNCcGN5QmhZMmhwWlhabFpDQmllU0J5WlhObGRIUnBibWNnYVhRZ2RHOGdXMTB1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUXVjWFZsZFdVb1pXeGxiV1Z1ZEN3Z1ZIbHdaUzVwYzFOMGNtbHVaeWh2Y0hScGIyNXpLU0EvSUc5d2RHbHZibk1nT2lCY0lsd2lMQ0JiWFNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpZV3hzYzFSdlUzUnZjQ0E5SUZ0ZE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCWGFHVnVJSFJvWlNCemRHOXdJR0ZqZEdsdmJpQnBjeUIwY21sbloyVnlaV1FzSUhSb1pTQmxiR1Z0Wlc1MGN5Y2dZM1Z5Y21WdWRHeDVJR0ZqZEdsMlpTQmpZV3hzSUdseklHbHRiV1ZrYVdGMFpXeDVJSE4wYjNCd1pXUXVJRlJvWlNCaFkzUnBkbVVnWTJGc2JDQnRhV2RvZENCb1lYWmxYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVpXVnVJR0Z3Y0d4cFpXUWdkRzhnYlhWc2RHbHdiR1VnWld4bGJXVnVkSE1zSUdsdUlIZG9hV05vSUdOaGMyVWdZV3hzSUc5bUlIUm9aU0JqWVd4c0ozTWdaV3hsYldWdWRITWdkMmxzYkNCaVpTQnpkRzl3Y0dWa0xpQlhhR1Z1SUdGdUlHVnNaVzFsYm5SY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6SUhOMGIzQndaV1FzSUhSb1pTQnVaWGgwSUdsMFpXMGdhVzRnYVhSeklHRnVhVzFoZEdsdmJpQnhkV1YxWlNCcGN5QnBiVzFsWkdsaGRHVnNlU0IwY21sbloyVnlaV1F1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJCYmlCaFpHUnBkR2x2Ym1Gc0lHRnlaM1Z0Wlc1MElHMWhlU0JpWlNCd1lYTnpaV1FnYVc0Z2RHOGdZMnhsWVhJZ1lXNGdaV3hsYldWdWRDZHpJSEpsYldGcGJtbHVaeUJ4ZFdWMVpXUWdZMkZzYkhNdUlFVnBkR2hsY2lCMGNuVmxJQ2gzYUdsamFDQmtaV1poZFd4MGN5QjBieUIwYUdVZ1hDSm1lRndpSUhGMVpYVmxLVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzSWdZU0JqZFhOMGIyMGdjWFZsZFdVZ2MzUnlhVzVuSUdOaGJpQmlaU0J3WVhOelpXUWdhVzR1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJPYjNSbE9pQlVhR1VnYzNSdmNDQmpiMjF0WVc1a0lISjFibk1nY0hKcGIzSWdkRzhnVm1Wc2IyTnBkSGtuY3lCUmRXVjFaV2x1WnlCd2FHRnpaU0J6YVc1alpTQnBkSE1nWW1Wb1lYWnBiM0lnYVhNZ2FXNTBaVzVrWldRZ2RHOGdkR0ZyWlNCbFptWmxZM1FnS21sdGJXVmthV0YwWld4NUtpeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFoyRnlaR3hsYzNNZ2IyWWdkR2hsSUdWc1pXMWxiblFuY3lCamRYSnlaVzUwSUhGMVpYVmxJSE4wWVhSbExpQXFMMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpkR1Z5WVhSbElIUm9jbTkxWjJnZ1pYWmxjbmtnWVdOMGFYWmxJR05oYkd3dUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrTG1WaFkyZ29WbVZzYjJOcGRIa3VVM1JoZEdVdVkyRnNiSE1zSUdaMWJtTjBhVzl1S0drc0lHRmpkR2wyWlVOaGJHd3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKYm1GamRHbDJaU0JqWVd4c2N5QmhjbVVnYzJWMElIUnZJR1poYkhObElHSjVJSFJvWlNCc2IyZHBZeUJwYm5OcFpHVWdZMjl0Y0d4bGRHVkRZV3hzS0NrdUlGTnJhWEFnZEdobGJTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVdOMGFYWmxRMkZzYkNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKZEdWeVlYUmxJSFJvY205MVoyZ2dkR2hsSUdGamRHbDJaU0JqWVd4c0ozTWdkR0Z5WjJWMFpXUWdaV3hsYldWdWRITXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRdVpXRmphQ2hoWTNScGRtVkRZV3hzV3pGZExDQm1kVzVqZEdsdmJpaHJMQ0JoWTNScGRtVkZiR1Z0Wlc1MEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUIwY25WbElIZGhjeUJ3WVhOelpXUWdhVzRnWVhNZ1lTQnpaV052Ym1SaGNua2dZWEpuZFcxbGJuUXNJR05zWldGeUlHRmljMjlzZFhSbGJIa2dZV3hzSUdOaGJHeHpJRzl1SUhSb2FYTWdaV3hsYldWdWRDNGdUM1JvWlhKM2FYTmxMQ0J2Ym14NVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHVmhjaUJqWVd4c2N5QmhjM052WTJsaGRHVmtJSGRwZEdnZ2RHaGxJSEpsYkdWMllXNTBJSEYxWlhWbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRMkZzYkNCemRHOXdjR2x1WnlCc2IyZHBZeUIzYjNKcmN5QmhjeUJtYjJ4c2IzZHpPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMU0J2Y0hScGIyNXpJRDA5UFNCMGNuVmxJQzB0UGlCemRHOXdJR04xY25KbGJuUWdaR1ZtWVhWc2RDQnhkV1YxWlNCallXeHNjeUFvWVc1a0lIRjFaWFZsT21aaGJITmxJR05oYkd4ektTd2dhVzVqYkhWa2FXNW5JSEpsYldGcGJtbHVaeUJ4ZFdWMVpXUWdiMjVsY3k1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUMwZ2IzQjBhVzl1Y3lBOVBUMGdkVzVrWldacGJtVmtJQzB0UGlCemRHOXdJR04xY25KbGJuUWdjWFZsZFdVNlhDSmNJaUJqWVd4c0lHRnVaQ0JoYkd3Z2NYVmxkV1U2Wm1Gc2MyVWdZMkZzYkhNdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdElHOXdkR2x2Ym5NZ1BUMDlJR1poYkhObElDMHRQaUJ6ZEc5d0lHOXViSGtnY1hWbGRXVTZabUZzYzJVZ1kyRnNiSE11WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F0SUc5d2RHbHZibk1nUFQwOUlGd2lZM1Z6ZEc5dFhDSWdMUzArSUhOMGIzQWdZM1Z5Y21WdWRDQnhkV1YxWlRwY0ltTjFjM1J2YlZ3aUlHTmhiR3dzSUdsdVkyeDFaR2x1WnlCeVpXMWhhVzVwYm1jZ2NYVmxkV1ZrSUc5dVpYTWdLSFJvWlhKbElHbHpJRzV2SUdaMWJtTjBhVzl1WVd4cGRIa2dkRzhnYjI1c2VTQmpiR1ZoY2lCMGFHVWdZM1Z5Y21WdWRHeDVMWEoxYm01cGJtY2djWFZsZFdVNlhDSmpkWE4wYjIxY0lpQmpZV3hzS1M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnhkV1YxWlU1aGJXVWdQU0FvYjNCMGFXOXVjeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQS9JRndpWENJZ09pQnZjSFJwYjI1ek8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jWFZsZFdWT1lXMWxJQ0U5UFNCMGNuVmxJQ1ltSUNoaFkzUnBkbVZEWVd4c1d6SmRMbkYxWlhWbElDRTlQU0J4ZFdWMVpVNWhiV1VwSUNZbUlDRW9iM0IwYVc5dWN5QTlQVDBnZFc1a1pXWnBibVZrSUNZbUlHRmpkR2wyWlVOaGJHeGJNbDB1Y1hWbGRXVWdQVDA5SUdaaGJITmxLU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCSmRHVnlZWFJsSUhSb2NtOTFaMmdnZEdobElHTmhiR3h6SUhSaGNtZGxkR1ZrSUdKNUlIUm9aU0J6ZEc5d0lHTnZiVzFoYm1RdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0xtVmhZMmdvWld4bGJXVnVkSE1zSUdaMWJtTjBhVzl1S0d3c0lHVnNaVzFsYm5RcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEYUdWamF5QjBhR0YwSUhSb2FYTWdZMkZzYkNCM1lYTWdZWEJ3YkdsbFpDQjBieUIwYUdVZ2RHRnlaMlYwSUdWc1pXMWxiblF1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUWdQVDA5SUdGamRHbDJaVVZzWlcxbGJuUXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUM0IwYVc5dVlXeHNlU0JqYkdWaGNpQjBhR1VnY21WdFlXbHVhVzVuSUhGMVpYVmxaQ0JqWVd4c2N5NGdTV1lnZDJVbmNtVWdaRzlwYm1jZ1hDSm1hVzVwYzJoQmJHeGNJaUIwYUdseklIZHZiaWQwSUdacGJtUWdZVzU1ZEdocGJtY3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUjFaU0IwYnlCMGFHVWdjWFZsZFdVdFkyeGxZWEpwYm1jZ1lXSnZkbVV1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnBiMjV6SUQwOVBTQjBjblZsSUh4OElGUjVjR1V1YVhOVGRISnBibWNvYjNCMGFXOXVjeWtwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbDBaWEpoZEdVZ2RHaHliM1ZuYUNCMGFHVWdhWFJsYlhNZ2FXNGdkR2hsSUdWc1pXMWxiblFuY3lCeGRXVjFaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRdVpXRmphQ2drTG5GMVpYVmxLR1ZzWlcxbGJuUXNJRlI1Y0dVdWFYTlRkSEpwYm1jb2IzQjBhVzl1Y3lrZ1B5QnZjSFJwYjI1eklEb2dYQ0pjSWlrc0lHWjFibU4wYVc5dUtGOHNJR2wwWlcwcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWFHVWdjWFZsZFdVZ1lYSnlZWGtnWTJGdUlHTnZiblJoYVc0Z1lXNGdYQ0pwYm5CeWIyZHlaWE56WENJZ2MzUnlhVzVuTENCM2FHbGphQ0IzWlNCemEybHdMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hVZVhCbExtbHpSblZ1WTNScGIyNG9hWFJsYlNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVR0Z6Y3lCMGFHVWdhWFJsYlNkeklHTmhiR3hpWVdOcklHRWdabXhoWnlCcGJtUnBZMkYwYVc1bklIUm9ZWFFnZDJVZ2QyRnVkQ0IwYnlCaFltOXlkQ0JtY205dElIUm9aU0J4ZFdWMVpTQmpZV3hzTGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1UzQmxZMmxtYVdOaGJHeDVMQ0IwYUdVZ2NYVmxkV1VnZDJsc2JDQnlaWE52YkhabElIUm9aU0JqWVd4c0ozTWdZWE56YjJOcFlYUmxaQ0J3Y205dGFYTmxJSFJvWlc0Z1lXSnZjblF1S1NBZ0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYUmxiU2h1ZFd4c0xDQjBjblZsS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1EyeGxZWEpwYm1jZ2RHaGxJQ1F1Y1hWbGRXVW9LU0JoY25KaGVTQnBjeUJoWTJocFpYWmxaQ0JpZVNCeVpYTmxkSFJwYm1jZ2FYUWdkRzhnVzEwdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtMbkYxWlhWbEtHVnNaVzFsYm5Rc0lGUjVjR1V1YVhOVGRISnBibWNvYjNCMGFXOXVjeWtnUHlCdmNIUnBiMjV6SURvZ1hDSmNJaXdnVzEwcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCeWIzQmxjblJwWlhOTllYQWdQVDA5SUZ3aWMzUnZjRndpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlRhVzVqWlNCY0luSmxkbVZ5YzJWY0lpQjFjMlZ6SUdOaFkyaGxaQ0J6ZEdGeWRDQjJZV3gxWlhNZ0tIUm9aU0J3Y21WMmFXOTFjeUJqWVd4c0ozTWdaVzVrVm1Gc2RXVnpLU3dnZEdobGMyVWdkbUZzZFdWeklHMTFjM1FnWW1WY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9ZVzVuWldRZ2RHOGdjbVZtYkdWamRDQjBhR1VnWm1sdVlXd2dkbUZzZFdVZ2RHaGhkQ0IwYUdVZ1pXeGxiV1Z1ZEhNZ2QyVnlaU0JoWTNSMVlXeHNlU0IwZDJWbGJtVmtJSFJ2TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1NXWWdiMjVzZVNCeGRXVjFaVHBtWVd4elpTQmhibWx0WVhScGIyNXpJR0Z5WlNCamRYSnlaVzUwYkhrZ2NuVnVibWx1WnlCdmJpQmhiaUJsYkdWdFpXNTBMQ0JwZENCM2IyNG5kQ0JvWVhabElHRWdkSGRsWlc1elEyOXVkR0ZwYm1WeVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbXBsWTNRdUlFRnNjMjhzSUhGMVpYVmxPbVpoYkhObElHRnVhVzFoZEdsdmJuTWdZMkZ1SjNRZ1ltVWdjbVYyWlhKelpXUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JHRjBZU2hsYkdWdFpXNTBLU0FtSmlCRVlYUmhLR1ZzWlcxbGJuUXBMblIzWldWdWMwTnZiblJoYVc1bGNpQW1KaUJ4ZFdWMVpVNWhiV1VnSVQwOUlHWmhiSE5sS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQzVsWVdOb0tFUmhkR0VvWld4bGJXVnVkQ2t1ZEhkbFpXNXpRMjl1ZEdGcGJtVnlMQ0JtZFc1amRHbHZiaWh0TENCaFkzUnBkbVZVZDJWbGJpa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhZM1JwZG1WVWQyVmxiaTVsYm1SV1lXeDFaU0E5SUdGamRHbDJaVlIzWldWdUxtTjFjbkpsYm5SV1lXeDFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZzYkhOVWIxTjBiM0F1Y0hWemFDaHBLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbTl3WlhKMGFXVnpUV0Z3SUQwOVBTQmNJbVpwYm1semFGd2lJSHg4SUhCeWIzQmxjblJwWlhOTllYQWdQVDA5SUZ3aVptbHVhWE5vUVd4c1hDSXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZSdklHZGxkQ0JoWTNScGRtVWdkSGRsWlc1eklIUnZJR1pwYm1semFDQnBiVzFsWkdsaGRHVnNlU3dnZDJVZ1ptOXlZMlZtZFd4c2VTQnphRzl5ZEdWdUlIUm9aV2x5SUdSMWNtRjBhVzl1Y3lCMGJ5QXhiWE1nYzI4Z2RHaGhkRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hsZVNCbWFXNXBjMmdnZFhCdmJpQjBhR1VnYm1WNGRDQnlRV1lnZEdsamF5QjBhR1Z1SUhCeWIyTmxaV1FnZDJsMGFDQnViM0p0WVd3Z1kyRnNiQ0JqYjIxd2JHVjBhVzl1SUd4dloybGpMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdOMGFYWmxRMkZzYkZzeVhTNWtkWEpoZEdsdmJpQTlJREU3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZCeVpXMWhkSFZ5Wld4NUlHTmhiR3dnWTI5dGNHeGxkR1ZEWVd4c0tDa2diMjRnWldGamFDQnRZWFJqYUdWa0lHRmpkR2wyWlNCallXeHNMaUJRWVhOeklHRnVJR0ZrWkdsMGFXOXVZV3dnWm14aFp5Qm1iM0lnWENKemRHOXdYQ0lnZEc4Z2FXNWthV05oZEdWY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvWVhRZ2RHaGxJR052YlhCc1pYUmxJR05oYkd4aVlXTnJJR0Z1WkNCa2FYTndiR0Y1T201dmJtVWdjMlYwZEdsdVp5QnphRzkxYkdRZ1ltVWdjMnRwY0hCbFpDQnphVzVqWlNCM1pTZHlaU0JqYjIxd2JHVjBhVzVuSUhCeVpXMWhkSFZ5Wld4NUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnliM0JsY25ScFpYTk5ZWEFnUFQwOUlGd2ljM1J2Y0Z3aUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDNWxZV05vS0dOaGJHeHpWRzlUZEc5d0xDQm1kVzVqZEdsdmJpaHBMQ0JxS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiWEJzWlhSbFEyRnNiQ2hxTENCMGNuVmxLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtOXRhWE5sUkdGMFlTNXdjbTl0YVhObEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsdGJXVmthV0YwWld4NUlISmxjMjlzZG1VZ2RHaGxJSEJ5YjIxcGMyVWdZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9hWE1nYzNSdmNDQmpZV3hzSUhOcGJtTmxJSE4wYjNBZ2NuVnVjeUJ6ZVc1amFISnZibTkxYzJ4NUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205dGFYTmxSR0YwWVM1eVpYTnZiSFpsY2lobGJHVnRaVzUwY3lrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVGFXNWpaU0IzWlNkeVpTQnpkRzl3Y0dsdVp5d2dZVzVrSUc1dmRDQndjbTlqWldWa2FXNW5JSGRwZEdnZ2NYVmxkV1ZwYm1jc0lHVjRhWFFnYjNWMElHOW1JRlpsYkc5amFYUjVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdkbGRFTm9ZV2x1S0NrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRlJ5WldGMElHRWdibTl1TFdWdGNIUjVJSEJzWVdsdUlHOWlhbVZqZENCaGN5QmhJR3hwZEdWeVlXd2djSEp2Y0dWeWRHbGxjeUJ0WVhBdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0pDNXBjMUJzWVdsdVQySnFaV04wS0hCeWIzQmxjblJwWlhOTllYQXBJQ1ltSUNGVWVYQmxMbWx6Ulcxd2RIbFBZbXBsWTNRb2NISnZjR1Z5ZEdsbGMwMWhjQ2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWTNScGIyNGdQU0JjSW5OMFlYSjBYQ0k3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVW1Wa2FYSmxZM1J6WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEYUdWamF5QnBaaUJoSUhOMGNtbHVaeUJ0WVhSamFHVnpJR0VnY21WbmFYTjBaWEpsWkNCeVpXUnBjbVZqZENBb2MyVmxJRkpsWkdseVpXTjBjeUJoWW05MlpTa3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGUjVjR1V1YVhOVGRISnBibWNvY0hKdmNHVnlkR2xsYzAxaGNDa2dKaVlnVm1Wc2IyTnBkSGt1VW1Wa2FYSmxZM1J6VzNCeWIzQmxjblJwWlhOTllYQmRLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc5d2RITWdQU0FrTG1WNGRHVnVaQ2g3ZlN3Z2IzQjBhVzl1Y3lrc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUjFjbUYwYVc5dVQzSnBaMmx1WVd3Z1BTQnZjSFJ6TG1SMWNtRjBhVzl1TEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGhlVTl5YVdkcGJtRnNJRDBnYjNCMGN5NWtaV3hoZVNCOGZDQXdPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1dZZ2RHaGxJR0poWTJ0M1lYSmtjeUJ2Y0hScGIyNGdkMkZ6SUhCaGMzTmxaQ0JwYml3Z2NtVjJaWEp6WlNCMGFHVWdaV3hsYldWdWRDQnpaWFFnYzI4Z2RHaGhkQ0JsYkdWdFpXNTBjeUJoYm1sdFlYUmxJR1p5YjIwZ2RHaGxJR3hoYzNRZ2RHOGdkR2hsSUdacGNuTjBMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnpMbUpoWTJ0M1lYSmtjeUE5UFQwZ2RISjFaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwY3lBOUlDUXVaWGgwWlc1a0tIUnlkV1VzSUZ0ZExDQmxiR1Z0Wlc1MGN5a3VjbVYyWlhKelpTZ3BPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWx1WkdsMmFXUjFZV3hzZVNCMGNtbG5aMlZ5SUhSb1pTQnlaV1JwY21WamRDQm1iM0lnWldGamFDQmxiR1Z0Wlc1MElHbHVJSFJvWlNCelpYUWdkRzhnY0hKbGRtVnVkQ0IxYzJWeWN5Qm1jbTl0SUdoaGRtbHVaeUIwYnlCb1lXNWtiR1VnYVhSbGNtRjBhVzl1SUd4dloybGpJR2x1SUhSb1pXbHlJSEpsWkdseVpXTjBMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1F1WldGamFDaGxiR1Z0Wlc1MGN5d2dablZ1WTNScGIyNG9aV3hsYldWdWRFbHVaR1Y0TENCbGJHVnRaVzUwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUhSb1pTQnpkR0ZuWjJWeUlHOXdkR2x2YmlCM1lYTWdjR0Z6YzJWa0lHbHVMQ0J6ZFdOalpYTnphWFpsYkhrZ1pHVnNZWGtnWldGamFDQmxiR1Z0Wlc1MElHSjVJSFJvWlNCemRHRm5aMlZ5SUhaaGJIVmxJQ2hwYmlCdGN5a3VJRkpsZEdGcGJpQjBhR1VnYjNKcFoybHVZV3dnWkdWc1lYa2dkbUZzZFdVdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNod1lYSnpaVVpzYjJGMEtHOXdkSE11YzNSaFoyZGxjaWtwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEhNdVpHVnNZWGtnUFNCa1pXeGhlVTl5YVdkcGJtRnNJQ3NnS0hCaGNuTmxSbXh2WVhRb2IzQjBjeTV6ZEdGbloyVnlLU0FxSUdWc1pXMWxiblJKYm1SbGVDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvVkhsd1pTNXBjMFoxYm1OMGFXOXVLRzl3ZEhNdWMzUmhaMmRsY2lrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVaR1ZzWVhrZ1BTQmtaV3hoZVU5eWFXZHBibUZzSUNzZ2IzQjBjeTV6ZEdGbloyVnlMbU5oYkd3b1pXeGxiV1Z1ZEN3Z1pXeGxiV1Z1ZEVsdVpHVjRMQ0JsYkdWdFpXNTBjMHhsYm1kMGFDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUIwYUdVZ1pISmhaeUJ2Y0hScGIyNGdkMkZ6SUhCaGMzTmxaQ0JwYml3Z2MzVmpZMlZ6YzJsMlpXeDVJR2x1WTNKbFlYTmxMMlJsWTNKbFlYTmxJQ2hrWlhCbGJtUnBibWNnYjI0Z2RHaGxJSEJ5WlhObGJuTmxJRzltSUc5d2RITXVZbUZqYTNkaGNtUnpLVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHVWdaSFZ5WVhScGIyNGdiMllnWldGamFDQmxiR1Z0Wlc1MEozTWdZVzVwYldGMGFXOXVMQ0IxYzJsdVp5Qm1iRzl2Y25NZ2RHOGdjSEpsZG1WdWRDQndjbTlrZFdOcGJtY2dkbVZ5ZVNCemFHOXlkQ0JrZFhKaGRHbHZibk11SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hSekxtUnlZV2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVSbFptRjFiSFFnZEdobElHUjFjbUYwYVc5dUlHOW1JRlZKSUhCaFkyc2daV1ptWldOMGN5QW9ZMkZzYkc5MWRITWdZVzVrSUhSeVlXNXphWFJwYjI1ektTQjBieUF4TURBd2JYTWdhVzV6ZEdWaFpDQnZaaUIwYUdVZ2RYTjFZV3dnWkdWbVlYVnNkQ0JrZFhKaGRHbHZiaUJ2WmlBME1EQnRjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEhNdVpIVnlZWFJwYjI0Z1BTQndZWEp6WlVac2IyRjBLR1IxY21GMGFXOXVUM0pwWjJsdVlXd3BJSHg4SUNndlhpaGpZV3hzYjNWMGZIUnlZVzV6YVhScGIyNHBMeTUwWlhOMEtIQnliM0JsY25ScFpYTk5ZWEFwSUQ4Z01UQXdNQ0E2SUVSVlVrRlVTVTlPWDBSRlJrRlZURlFwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCR2IzSWdaV0ZqYUNCbGJHVnRaVzUwTENCMFlXdGxJSFJvWlNCbmNtVmhkR1Z5SUdSMWNtRjBhVzl1SUc5bU9pQkJLU0JoYm1sdFlYUnBiMjRnWTI5dGNHeGxkR2x2YmlCd1pYSmpaVzUwWVdkbElISmxiR0YwYVhabElIUnZJSFJvWlNCdmNtbG5hVzVoYkNCa2RYSmhkR2x2Yml4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVJcElEYzFKU0J2WmlCMGFHVWdiM0pwWjJsdVlXd2daSFZ5WVhScGIyNHNJRzl5SUVNcElHRWdNakF3YlhNZ1ptRnNiR0poWTJzZ0tHbHVJR05oYzJVZ1pIVnlZWFJwYjI0Z2FYTWdZV3h5WldGa2VTQnpaWFFnZEc4Z1lTQnNiM2NnZG1Gc2RXVXBMbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWR2hsSUdWdVpDQnlaWE4xYkhRZ2FYTWdZU0JpWVhObGJHbHVaU0J2WmlBM05TVWdiMllnZEdobElISmxaR2x5WldOMEozTWdaSFZ5WVhScGIyNGdkR2hoZENCcGJtTnlaV0Z6WlhNdlpHVmpjbVZoYzJWeklHRnpJSFJvWlNCbGJtUWdiMllnZEdobElHVnNaVzFsYm5RZ2MyVjBJR2x6SUdGd2NISnZZV05vWldRdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnpMbVIxY21GMGFXOXVJRDBnVFdGMGFDNXRZWGdvYjNCMGN5NWtkWEpoZEdsdmJpQXFJQ2h2Y0hSekxtSmhZMnQzWVhKa2N5QS9JREVnTFNCbGJHVnRaVzUwU1c1a1pYZ3ZaV3hsYldWdWRITk1aVzVuZEdnZ09pQW9aV3hsYldWdWRFbHVaR1Y0SUNzZ01Ta2dMeUJsYkdWdFpXNTBjMHhsYm1kMGFDa3NJRzl3ZEhNdVpIVnlZWFJwYjI0Z0tpQXdMamMxTENBeU1EQXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVR0Z6Y3lCcGJpQjBhR1VnWTJGc2JDZHpJRzl3ZEhNZ2IySnFaV04wSUhOdklIUm9ZWFFnZEdobElISmxaR2x5WldOMElHTmhiaUJ2Y0hScGIyNWhiR3g1SUdWNGRHVnVaQ0JwZEM0Z1NYUWdaR1ZtWVhWc2RITWdkRzhnWVc0Z1pXMXdkSGtnYjJKcVpXTjBJR2x1YzNSbFlXUWdiMllnYm5Wc2JDQjBiMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXUjFZMlVnZEdobElHOXdkSE1nWTJobFkydHBibWNnYkc5bmFXTWdjbVZ4ZFdseVpXUWdhVzV6YVdSbElIUm9aU0J5WldScGNtVmpkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZtVnNiMk5wZEhrdVVtVmthWEpsWTNSelczQnliM0JsY25ScFpYTk5ZWEJkTG1OaGJHd29aV3hsYldWdWRDd2daV3hsYldWdWRDd2diM0IwY3lCOGZDQjdmU3dnWld4bGJXVnVkRWx1WkdWNExDQmxiR1Z0Wlc1MGMweGxibWQwYUN3Z1pXeGxiV1Z1ZEhNc0lIQnliMjFwYzJWRVlYUmhMbkJ5YjIxcGMyVWdQeUJ3Y205dGFYTmxSR0YwWVNBNklIVnVaR1ZtYVc1bFpDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJUYVc1alpTQjBhR1VnWVc1cGJXRjBhVzl1SUd4dloybGpJSEpsYzJsa1pYTWdkMmwwYUdsdUlIUm9aU0J5WldScGNtVmpkQ2R6SUc5M2JpQmpiMlJsTENCaFltOXlkQ0IwYUdVZ2NtVnRZV2x1WkdWeUlHOW1JSFJvYVhNZ1kyRnNiQzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvVkdobElIQmxjbVp2Y20xaGJtTmxJRzkyWlhKb1pXRmtJSFZ3SUhSdklIUm9hWE1nY0c5cGJuUWdhWE1nZG1seWRIVmhiR3g1SUc1dmJpMWxlR2x6ZEdGdWRDNHBJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dWR2hsSUdwUmRXVnllU0JqWVd4c0lHTm9ZV2x1SUdseklHdGxjSFFnYVc1MFlXTjBJR0o1SUhKbGRIVnlibWx1WnlCMGFHVWdZMjl0Y0d4bGRHVWdaV3hsYldWdWRDQnpaWFF1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RsZEVOb1lXbHVLQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaFltOXlkRVZ5Y205eUlEMGdYQ0pXWld4dlkybDBlVG9nUm1seWMzUWdZWEpuZFcxbGJuUWdLRndpSUNzZ2NISnZjR1Z5ZEdsbGMwMWhjQ0FySUZ3aUtTQjNZWE1nYm05MElHRWdjSEp2Y0dWeWRIa2diV0Z3TENCaElHdHViM2R1SUdGamRHbHZiaXdnYjNJZ1lTQnlaV2RwYzNSbGNtVmtJSEpsWkdseVpXTjBMaUJCWW05eWRHbHVaeTVjSWp0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTl0YVhObFJHRjBZUzV3Y205dGFYTmxLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIyMXBjMlZFWVhSaExuSmxhbVZqZEdWeUtHNWxkeUJGY25KdmNpaGhZbTl5ZEVWeWNtOXlLU2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWVdKdmNuUkZjbkp2Y2lrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RsZEVOb1lXbHVLQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUVOaGJHd3RWMmxrWlNCV1lYSnBZV0pzWlhOY2JseDBJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdJQ0FnSUM4cUlFRWdZMjl1ZEdGcGJtVnlJR1p2Y2lCRFUxTWdkVzVwZENCamIyNTJaWEp6YVc5dUlISmhkR2x2Y3lBb1pTNW5MaUFsTENCeVpXMHNJR0Z1WkNCbGJTQTlQVDRnY0hncElIUm9ZWFFnYVhNZ2RYTmxaQ0IwYnlCallXTm9aU0J5WVhScGIzTWdZV055YjNOeklHRnNiQ0JsYkdWdFpXNTBjMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lHSmxhVzVuSUdGdWFXMWhkR1ZrSUdsdUlHRWdjMmx1WjJ4bElGWmxiRzlqYVhSNUlHTmhiR3d1SUVOaGJHTjFiR0YwYVc1bklIVnVhWFFnY21GMGFXOXpJRzVsWTJWemMybDBZWFJsY3lCRVQwMGdjWFZsY25scGJtY2dZVzVrSUhWd1pHRjBhVzVuTENCaGJtUWdhWE1nZEdobGNtVm1iM0psWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdZWFp2YVdSbFpDQW9kbWxoSUdOaFkyaHBibWNwSUhkb1pYSmxkbVZ5SUhCdmMzTnBZbXhsTGlCVWFHbHpJR052Ym5SaGFXNWxjaUJwY3lCallXeHNMWGRwWkdVZ2FXNXpkR1ZoWkNCdlppQndZV2RsTFhkcFpHVWdkRzhnWVhadmFXUWdkR2hsSUhKcGMyc2diMllnZFhOcGJtY2djM1JoYkdWY2JseDBJQ0FnSUNBZ0lDQWdJQ0JqYjI1MlpYSnphVzl1SUcxbGRISnBZM01nWVdOeWIzTnpJRlpsYkc5amFYUjVJR0Z1YVcxaGRHbHZibk1nZEdoaGRDQmhjbVVnYm05MElHbHRiV1ZrYVdGMFpXeDVJR052Ym5ObFkzVjBhWFpsYkhrZ1kyaGhhVzVsWkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0IyWVhJZ1kyRnNiRlZ1YVhSRGIyNTJaWEp6YVc5dVJHRjBZU0E5SUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JRWVhKbGJuUTZJRzUxYkd3c1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNZWE4wVUc5emFYUnBiMjQ2SUc1MWJHd3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVhOMFJtOXVkRk5wZW1VNklHNTFiR3dzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBVR1Z5WTJWdWRGUnZVSGhYYVdSMGFEb2diblZzYkN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JRWlhKalpXNTBWRzlRZUVobGFXZG9kRG9nYm5Wc2JDeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSRmJWUnZVSGc2SUc1MWJHd3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlcxVWIxQjRPaUJ1ZFd4c0xGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbmRVYjFCNE9pQnVkV3hzTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtaFViMUI0T2lCdWRXeHNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzVjYmx4MElDQWdJQ0FnSUNBdktpQkJJR052Ym5SaGFXNWxjaUJtYjNJZ1lXeHNJSFJvWlNCbGJuTjFhVzVuSUhSM1pXVnVJR1JoZEdFZ1lXNWtJRzFsZEdGa1lYUmhJR0Z6YzI5amFXRjBaV1FnZDJsMGFDQjBhR2x6SUdOaGJHd3VJRlJvYVhNZ1kyOXVkR0ZwYm1WeUlHZGxkSE1nY0hWemFHVmtJSFJ2SUhSb1pTQndZV2RsTFhkcFpHVmNibHgwSUNBZ0lDQWdJQ0FnSUNCV1pXeHZZMmwwZVM1VGRHRjBaUzVqWVd4c2N5QmhjbkpoZVNCMGFHRjBJR2x6SUhCeWIyTmxjM05sWkNCa2RYSnBibWNnWVc1cGJXRjBhVzl1SUhScFkydHBibWN1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdkbUZ5SUdOaGJHd2dQU0JiWFR0Y2JseHVYSFFnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNCRmJHVnRaVzUwSUZCeWIyTmxjM05wYm1kY2JseDBJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0F2S2lCRmJHVnRaVzUwSUhCeWIyTmxjM05wYm1jZ1kyOXVjMmx6ZEhNZ2IyWWdkR2h5WldVZ2NHRnlkSE1nTFMwZ1pHRjBZU0J3Y205alpYTnphVzVuSUhSb1lYUWdZMkZ1Ym05MElHZHZJSE4wWVd4bElHRnVaQ0JrWVhSaElIQnliMk5sYzNOcGJtY2dkR2hoZENBcVkyRnVLaUJuYnlCemRHRnNaU0FvYVM1bExpQjBhR2x5WkMxd1lYSjBlU0J6ZEhsc1pTQnRiMlJwWm1sallYUnBiMjV6S1RwY2JseDBJQ0FnSUNBZ0lDQWdJQ0F4S1NCUWNtVXRVWFZsZFdWcGJtYzZJRVZzWlcxbGJuUXRkMmxrWlNCMllYSnBZV0pzWlhNc0lHbHVZMngxWkdsdVp5QjBhR1VnWld4bGJXVnVkQ2R6SUdSaGRHRWdjM1J2Y21GblpTd2dZWEpsSUdsdWMzUmhiblJwWVhSbFpDNGdRMkZzYkNCdmNIUnBiMjV6SUdGeVpTQndjbVZ3WVhKbFpDNGdTV1lnZEhKcFoyZGxjbVZrTENCMGFHVWdVM1J2Y0NCaFkzUnBiMjRnYVhNZ1pYaGxZM1YwWldRdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnTWlrZ1VYVmxkV1ZwYm1jNklGUm9aU0JzYjJkcFl5QjBhR0YwSUhKMWJuTWdiMjVqWlNCMGFHbHpJR05oYkd3Z2FHRnpJSEpsWVdOb1pXUWdhWFJ6SUhCdmFXNTBJRzltSUdWNFpXTjFkR2x2YmlCcGJpQjBhR1VnWld4bGJXVnVkQ2R6SUNRdWNYVmxkV1VvS1NCemRHRmpheTRnVFc5emRDQnNiMmRwWXlCcGN5QndiR0ZqWldRZ2FHVnlaU0IwYnlCaGRtOXBaQ0J5YVhOcmFXNW5JR2wwSUdKbFkyOXRhVzVuSUhOMFlXeGxMbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lETXBJRkIxYzJocGJtYzZJRU52Ym5OdmJHbGtZWFJwYjI0Z2IyWWdkR2hsSUhSM1pXVnVJR1JoZEdFZ1ptOXNiRzkzWldRZ1lua2dhWFJ6SUhCMWMyZ2diMjUwYnlCMGFHVWdaMnh2WW1Gc0lHbHVMWEJ5YjJkeVpYTnpJR05oYkd4eklHTnZiblJoYVc1bGNpNWNibHgwSUNBZ0lDQWdJQ0FxTDF4dVhHNWNkQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdjSEp2WTJWemMwVnNaVzFsYm5RZ0tDa2dlMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkJoY25RZ1NUb2dVSEpsTFZGMVpYVmxhVzVuWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JGYkdWdFpXNTBMVmRwWkdVZ1ZtRnlhV0ZpYkdWelhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaV3hsYldWdWRDQTlJSFJvYVhNc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJVYUdVZ2NuVnVkR2x0WlNCdmNIUnpJRzlpYW1WamRDQnBjeUIwYUdVZ1pYaDBaVzV6YVc5dUlHOW1JSFJvWlNCamRYSnlaVzUwSUdOaGJHd25jeUJ2Y0hScGIyNXpJR0Z1WkNCV1pXeHZZMmwwZVNkeklIQmhaMlV0ZDJsa1pTQnZjSFJwYjI0Z1pHVm1ZWFZzZEhNdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0hSeklEMGdKQzVsZUhSbGJtUW9lMzBzSUZabGJHOWphWFI1TG1SbFptRjFiSFJ6TENCdmNIUnBiMjV6S1N4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRUVnWTI5dWRHRnBibVZ5SUdadmNpQjBhR1VnY0hKdlkyVnpjMlZrSUdSaGRHRWdZWE56YjJOcFlYUmxaQ0IzYVhSb0lHVmhZMmdnY0hKdmNHVnlkSGtnYVc0Z2RHaGxJSEJ5YjNCbGNuUjVUV0Z3TGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLRVZoWTJnZ2NISnZjR1Z5ZEhrZ2FXNGdkR2hsSUcxaGNDQndjbTlrZFdObGN5QnBkSE1nYjNkdUlGd2lkSGRsWlc1Y0lpNHBJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGQyVmxibk5EYjI1MFlXbHVaWElnUFNCN2ZTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUlZibWwwUTI5dWRtVnljMmx2YmtSaGRHRTdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JGYkdWdFpXNTBJRWx1YVhSY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaEVZWFJoS0dWc1pXMWxiblFwSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZabGJHOWphWFI1TG1sdWFYUW9aV3hsYldWdWRDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJqb2dSR1ZzWVhsY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGTnBibU5sSUhGMVpYVmxPbVpoYkhObElHUnZaWE51SjNRZ2NtVnpjR1ZqZENCMGFHVWdhWFJsYlNkeklHVjRhWE4wYVc1bklIRjFaWFZsTENCM1pTQmhkbTlwWkNCcGJtcGxZM1JwYm1jZ2FYUnpJR1JsYkdGNUlHaGxjbVVnS0dsMEozTWdjMlYwSUd4aGRHVnlJRzl1S1M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1ZtVnNiMk5wZEhrZ2NtOXNiSE1nYVhSeklHOTNiaUJrWld4aGVTQm1kVzVqZEdsdmJpQnphVzVqWlNCcVVYVmxjbmtnWkc5bGMyNG5kQ0JvWVhabElHRWdkWFJwYkdsMGVTQmhiR2xoY3lCbWIzSWdKQzVtYmk1a1pXeGhlU2dwWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoaGJtUWdkR2gxY3lCeVpYRjFhWEpsY3lCcVVYVmxjbmtnWld4bGJXVnVkQ0JqY21WaGRHbHZiaXdnZDJocFkyZ2dkMlVnWVhadmFXUWdjMmx1WTJVZ2FYUnpJRzkyWlhKb1pXRmtJR2x1WTJ4MVpHVnpJRVJQVFNCeGRXVnllV2x1WnlrdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3WVhKelpVWnNiMkYwS0c5d2RITXVaR1ZzWVhrcElDWW1JRzl3ZEhNdWNYVmxkV1VnSVQwOUlHWmhiSE5sS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtMbkYxWlhWbEtHVnNaVzFsYm5Rc0lHOXdkSE11Y1hWbGRXVXNJR1oxYm1OMGFXOXVLRzVsZUhRcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlVhR2x6SUdseklHRWdabXhoWnlCMWMyVmtJSFJ2SUdsdVpHbGpZWFJsSUhSdklIUm9aU0IxY0dOdmJXbHVaeUJqYjIxd2JHVjBaVU5oYkd3b0tTQm1kVzVqZEdsdmJpQjBhR0YwSUhSb2FYTWdjWFZsZFdVZ1pXNTBjbmtnZDJGeklHbHVhWFJwWVhSbFpDQmllU0JXWld4dlkybDBlUzRnVTJWbElHTnZiWEJzWlhSbFEyRnNiQ2dwSUdadmNpQm1kWEowYUdWeUlHUmxkR0ZwYkhNdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZtVnNiMk5wZEhrdWRtVnNiMk5wZEhsUmRXVjFaVVZ1ZEhKNVJteGhaeUE5SUhSeWRXVTdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJVYUdVZ1pXNXpkV2x1WnlCeGRXVjFaU0JwZEdWdElDaDNhR2xqYUNCcGN5QmhjM05wWjI1bFpDQjBieUIwYUdVZ1hDSnVaWGgwWENJZ1lYSm5kVzFsYm5RZ2RHaGhkQ0FrTG5GMVpYVmxLQ2tnWVhWMGIyMWhkR2xqWVd4c2VTQndZWE56WlhNZ2FXNHBJSGRwYkd3Z1ltVWdkSEpwWjJkbGNtVmtJR0ZtZEdWeUlHRWdjMlYwVkdsdFpXOTFkQ0JrWld4aGVTNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVhR1VnYzJWMFZHbHRaVzkxZENCcGN5QnpkRzl5WldRZ2MyOGdkR2hoZENCcGRDQmpZVzRnWW1VZ2MzVmlhbVZqZEdWa0lIUnZJR05zWldGeVZHbHRaVzkxZENncElHbG1JSFJvYVhNZ1lXNXBiV0YwYVc5dUlHbHpJSEJ5WlcxaGRIVnlaV3g1SUhOMGIzQndaV1FnZG1saElGWmxiRzlqYVhSNUozTWdYQ0p6ZEc5d1hDSWdZMjl0YldGdVpDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVZWFJoS0dWc1pXMWxiblFwTG1SbGJHRjVWR2x0WlhJZ1BTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFE2SUhObGRGUnBiV1Z2ZFhRb2JtVjRkQ3dnY0dGeWMyVkdiRzloZENodmNIUnpMbVJsYkdGNUtTa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZUhRNklHNWxlSFJjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJqb2dSSFZ5WVhScGIyNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZOMWNIQnZjblFnWm05eUlHcFJkV1Z5ZVNkeklHNWhiV1ZrSUdSMWNtRjBhVzl1Y3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNodmNIUnpMbVIxY21GMGFXOXVMblJ2VTNSeWFXNW5LQ2t1ZEc5TWIzZGxja05oYzJVb0tTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQmNJbVpoYzNSY0lqcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnpMbVIxY21GMGFXOXVJRDBnTWpBd08xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpYm05eWJXRnNYQ0k2WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0IwY3k1a2RYSmhkR2x2YmlBOUlFUlZVa0ZVU1U5T1gwUkZSa0ZWVEZRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0p6Ykc5M1hDSTZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQjBjeTVrZFhKaGRHbHZiaUE5SURZd01EdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCU1pXMXZkbVVnZEdobElIQnZkR1Z1ZEdsaGJDQmNJbTF6WENJZ2MzVm1abWw0SUdGdVpDQmtaV1poZFd4MElIUnZJREVnYVdZZ2RHaGxJSFZ6WlhJZ2FYTWdZWFIwWlcxd2RHbHVaeUIwYnlCelpYUWdZU0JrZFhKaGRHbHZiaUJ2WmlBd0lDaHBiaUJ2Y21SbGNpQjBieUJ3Y205a2RXTmxJR0Z1SUdsdGJXVmthV0YwWlNCemRIbHNaU0JqYUdGdVoyVXBMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEhNdVpIVnlZWFJwYjI0Z1BTQndZWEp6WlVac2IyRjBLRzl3ZEhNdVpIVnlZWFJwYjI0cElIeDhJREU3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWRzYjJKaGJDQlBjSFJwYjI0NklFMXZZMnRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hXWld4dlkybDBlUzV0YjJOcklDRTlQU0JtWVd4elpTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXNGdiVzlqYXlCdGIyUmxMQ0JoYkd3Z1lXNXBiV0YwYVc5dWN5QmhjbVVnWm05eVkyVmtJSFJ2SURGdGN5QnpieUIwYUdGMElIUm9aWGtnYjJOamRYSWdhVzF0WldScFlYUmxiSGtnZFhCdmJpQjBhR1VnYm1WNGRDQnlRVVlnZEdsamF5NWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVGc2RHVnlibUYwYVhabGJIa3NJR0VnYlhWc2RHbHdiR2xsY2lCallXNGdZbVVnY0dGemMyVmtJR2x1SUhSdklIUnBiV1VnY21WdFlYQWdZV3hzSUdSbGJHRjVjeUJoYm1RZ1pIVnlZWFJwYjI1ekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGWmxiRzlqYVhSNUxtMXZZMnNnUFQwOUlIUnlkV1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0hSekxtUjFjbUYwYVc5dUlEMGdiM0IwY3k1a1pXeGhlU0E5SURFN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVaSFZ5WVhScGIyNGdLajBnY0dGeWMyVkdiRzloZENoV1pXeHZZMmwwZVM1dGIyTnJLU0I4ZkNBeE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVaR1ZzWVhrZ0tqMGdjR0Z5YzJWR2JHOWhkQ2hXWld4dlkybDBlUzV0YjJOcktTQjhmQ0F4TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUM0IwYVc5dU9pQkZZWE5wYm1kY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCdmNIUnpMbVZoYzJsdVp5QTlJR2RsZEVWaGMybHVaeWh2Y0hSekxtVmhjMmx1Wnl3Z2IzQjBjeTVrZFhKaGRHbHZiaWs3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUM0IwYVc5dU9pQkRZV3hzWW1GamEzTmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRFlXeHNZbUZqYTNNZ2JYVnpkQ0JtZFc1amRHbHZibk11SUU5MGFHVnlkMmx6WlN3Z1pHVm1ZWFZzZENCMGJ5QnVkV3hzTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwY3k1aVpXZHBiaUFtSmlBaFZIbHdaUzVwYzBaMWJtTjBhVzl1S0c5d2RITXVZbVZuYVc0cEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Y0hSekxtSmxaMmx1SUQwZ2JuVnNiRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnpMbkJ5YjJkeVpYTnpJQ1ltSUNGVWVYQmxMbWx6Um5WdVkzUnBiMjRvYjNCMGN5NXdjbTluY21WemN5a3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVjSEp2WjNKbGMzTWdQU0J1ZFd4c08xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzl3ZEhNdVkyOXRjR3hsZEdVZ0ppWWdJVlI1Y0dVdWFYTkdkVzVqZEdsdmJpaHZjSFJ6TG1OdmJYQnNaWFJsS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0IwY3k1amIyMXdiR1YwWlNBOUlHNTFiR3c3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJqb2dSR2x6Y0d4aGVTQW1JRlpwYzJsaWFXeHBkSGxjYmx4MElDQWdJQ0FnSUNBZ0lDQWdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRkpsWm1WeUlIUnZJRlpsYkc5amFYUjVKM01nWkc5amRXMWxiblJoZEdsdmJpQW9WbVZzYjJOcGRIbEtVeTV2Y21jdkkyUnBjM0JzWVhsQmJtUldhWE5wWW1sc2FYUjVLU0JtYjNJZ1lTQmtaWE5qY21sd2RHbHZiaUJ2WmlCMGFHVWdaR2x6Y0d4aGVTQmhibVFnZG1semFXSnBiR2wwZVNCdmNIUnBiMjV6SnlCaVpXaGhkbWx2Y2k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1YyVWdjM1J5YVdOMGJIa2dZMmhsWTJzZ1ptOXlJSFZ1WkdWbWFXNWxaQ0JwYm5OMFpXRmtJRzltSUdaaGJITnBibVZ6Y3lCaVpXTmhkWE5sSUdScGMzQnNZWGtnWVdOalpYQjBjeUJoYmlCbGJYQjBlU0J6ZEhKcGJtY2dkbUZzZFdVdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hSekxtUnBjM0JzWVhrZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCdmNIUnpMbVJwYzNCc1lYa2dJVDA5SUc1MWJHd3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVaR2x6Y0d4aGVTQTlJRzl3ZEhNdVpHbHpjR3hoZVM1MGIxTjBjbWx1WnlncExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRlZ6WlhKeklHTmhiaUJ3WVhOeklHbHVJR0VnYzNCbFkybGhiQ0JjSW1GMWRHOWNJaUIyWVd4MVpTQjBieUJwYm5OMGNuVmpkQ0JXWld4dlkybDBlU0IwYnlCelpYUWdkR2hsSUdWc1pXMWxiblFnZEc4Z2FYUnpJR1JsWm1GMWJIUWdaR2x6Y0d4aGVTQjJZV3gxWlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnpMbVJwYzNCc1lYa2dQVDA5SUZ3aVlYVjBiMXdpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGN5NWthWE53YkdGNUlEMGdWbVZzYjJOcGRIa3VRMU5UTGxaaGJIVmxjeTVuWlhSRWFYTndiR0Y1Vkhsd1pTaGxiR1Z0Wlc1MEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodmNIUnpMblpwYzJsaWFXeHBkSGtnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ2Y0hSekxuWnBjMmxpYVd4cGRIa2dJVDA5SUc1MWJHd3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVkbWx6YVdKcGJHbDBlU0E5SUc5d2RITXVkbWx6YVdKcGJHbDBlUzUwYjFOMGNtbHVaeWdwTG5SdlRHOTNaWEpEWVhObEtDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUGNIUnBiMjQ2SUcxdlltbHNaVWhCWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dWMmhsYmlCelpYUWdkRzhnZEhKMVpTd2dZVzVrSUdsbUlIUm9hWE1nYVhNZ1lTQnRiMkpwYkdVZ1pHVjJhV05sTENCdGIySnBiR1ZJUVNCaGRYUnZiV0YwYVdOaGJHeDVJR1Z1WVdKc1pYTWdhR0Z5WkhkaGNtVWdZV05qWld4bGNtRjBhVzl1SUNoMmFXRWdZU0J1ZFd4c0lIUnlZVzV6Wm05eWJTQm9ZV05yS1Z4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJpQmhibWx0WVhScGJtY2daV3hsYldWdWRITXVJRWhCSUdseklISmxiVzkyWldRZ1puSnZiU0IwYUdVZ1pXeGxiV1Z1ZENCaGRDQjBhR1VnWTI5dGNHeGxkR2x2YmlCdlppQnBkSE1nWVc1cGJXRjBhVzl1TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQk9iM1JsT2lCQmJtUnliMmxrSUVkcGJtZGxjbUp5WldGa0lHUnZaWE51SjNRZ2MzVndjRzl5ZENCSVFTNGdTV1lnWVNCdWRXeHNJSFJ5WVc1elptOXliU0JvWVdOcklDaHRiMkpwYkdWSVFTa2dhWE1nYVc0Z1ptRmpkQ0J6WlhRc0lHbDBJSGRwYkd3Z2NISmxkbVZ1ZENCdmRHaGxjaUIwY21GdVptOXliU0J6ZFdKd2NtOXdaWEowYVdWeklHWnliMjBnZEdGcmFXNW5JR1ZtWm1WamRDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dXVzkxSUdOaGJpQnlaV0ZrSUcxdmNtVWdZV0p2ZFhRZ2RHaGxJSFZ6WlNCdlppQnRiMkpwYkdWSVFTQnBiaUJXWld4dlkybDBlU2R6SUdSdlkzVnRaVzUwWVhScGIyNDZJRlpsYkc5amFYUjVTbE11YjNKbkx5TnRiMkpwYkdWSVFTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdiM0IwY3k1dGIySnBiR1ZJUVNBOUlDaHZjSFJ6TG0xdlltbHNaVWhCSUNZbUlGWmxiRzlqYVhSNUxsTjBZWFJsTG1selRXOWlhV3hsSUNZbUlDRldaV3h2WTJsMGVTNVRkR0YwWlM1cGMwZHBibWRsY21KeVpXRmtLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVR0Z5ZENCSlNUb2dVWFZsZFdWcGJtZGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1YyaGxiaUJoSUhObGRDQnZaaUJsYkdWdFpXNTBjeUJwY3lCMFlYSm5aWFJsWkNCaWVTQmhJRlpsYkc5amFYUjVJR05oYkd3c0lIUm9aU0J6WlhRZ2FYTWdZbkp2YTJWdUlIVndJR0Z1WkNCbFlXTm9JR1ZzWlcxbGJuUWdhR0Z6SUhSb1pTQmpkWEp5Wlc1MElGWmxiRzlqYVhSNUlHTmhiR3dnYVc1a2FYWnBaSFZoYkd4NUlIRjFaWFZsWkNCdmJuUnZJR2wwTGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCSmJpQjBhR2x6SUhkaGVTd2daV0ZqYUNCbGJHVnRaVzUwSjNNZ1pYaHBjM1JwYm1jZ2NYVmxkV1VnYVhNZ2NtVnpjR1ZqZEdWa095QnpiMjFsSUdWc1pXMWxiblJ6SUcxaGVTQmhiSEpsWVdSNUlHSmxJR0Z1YVcxaGRHbHVaeUJoYm1RZ1lXTmpiM0prYVc1bmJIa2djMmh2ZFd4a0lHNXZkQ0JvWVhabElIUm9hWE1nWTNWeWNtVnVkQ0JXWld4dlkybDBlU0JqWVd4c0lIUnlhV2RuWlhKbFpDQnBiVzFsWkdsaGRHVnNlUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXNGdaV0ZqYUNCeGRXVjFaU3dnZEhkbFpXNGdaR0YwWVNCcGN5QndjbTlqWlhOelpXUWdabTl5SUdWaFkyZ2dZVzVwYldGMGFXNW5JSEJ5YjNCbGNuUjVJSFJvWlc0Z2NIVnphR1ZrSUc5dWRHOGdkR2hsSUdOaGJHd3RkMmxrWlNCallXeHNjeUJoY25KaGVTNGdWMmhsYmlCMGFHVWdiR0Z6ZENCbGJHVnRaVzUwSUdsdUlIUm9aU0J6WlhRZ2FHRnpJR2hoWkNCcGRITWdkSGRsWlc1eklIQnliMk5sYzNObFpDeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hsSUdOaGJHd2dZWEp5WVhrZ2FYTWdjSFZ6YUdWa0lIUnZJRlpsYkc5amFYUjVMbE4wWVhSbExtTmhiR3h6SUdadmNpQnNhWFpsSUhCeWIyTmxjM05wYm1jZ1lua2dkR2hsSUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTQjBhV05yTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCaWRXbHNaRkYxWlhWbElDaHVaWGgwS1NCN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlBjSFJwYjI0NklFSmxaMmx1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWFHVWdZbVZuYVc0Z1kyRnNiR0poWTJzZ2FYTWdabWx5WldRZ2IyNWpaU0J3WlhJZ1kyRnNiQ0F0TFNCdWIzUWdiMjVqWlNCd1pYSWdaV3hsYldWdVpYUWdMUzBnWVc1a0lHbHpJSEJoYzNObFpDQjBhR1VnWm5Wc2JDQnlZWGNnUkU5TklHVnNaVzFsYm5RZ2MyVjBJR0Z6SUdKdmRHZ2dhWFJ6SUdOdmJuUmxlSFFnWVc1a0lHbDBjeUJtYVhKemRDQmhjbWQxYldWdWRDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjSFJ6TG1KbFoybHVJQ1ltSUdWc1pXMWxiblJ6U1c1a1pYZ2dQVDA5SURBcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlhaU0IwYUhKdmR5QmpZV3hzWW1GamEzTWdhVzRnWVNCelpYUlVhVzFsYjNWMElITnZJSFJvWVhRZ2RHaHliM2R1SUdWeWNtOXljeUJrYjI0bmRDQm9ZV3gwSUhSb1pTQmxlR1ZqZFhScGIyNGdiMllnVm1Wc2IyTnBkSGtnYVhSelpXeG1MaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkSE11WW1WbmFXNHVZMkZzYkNobGJHVnRaVzUwY3l3Z1pXeGxiV1Z1ZEhNcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tTQjdJSFJvY205M0lHVnljbTl5T3lCOUxDQXhLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWSGRsWlc0Z1JHRjBZU0JEYjI1emRISjFZM1JwYjI0Z0tHWnZjaUJUWTNKdmJHd3BYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nU1c0Z2IzSmtaWElnZEc4Z1ltVWdjM1ZpYW1WamRHVmtJSFJ2SUdOb1lXbHVhVzVuSUdGdVpDQmhibWx0WVhScGIyNGdiM0IwYVc5dWN5d2djMk55YjJ4c0ozTWdkSGRsWlc1cGJtY2dhWE1nY205MWRHVmtJSFJvY205MVoyZ2dWbVZzYjJOcGRIa2dZWE1nYVdZZ2FYUWdkMlZ5WlNCaElITjBZVzVrWVhKa0lFTlRVeUJ3Y205d1pYSjBlU0JoYm1sdFlYUnBiMjR1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVdOMGFXOXVJRDA5UFNCY0luTmpjbTlzYkZ3aUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dWR2hsSUhOamNtOXNiQ0JoWTNScGIyNGdkVzVwY1hWbGJIa2dkR0ZyWlhNZ1lXNGdiM0IwYVc5dVlXd2dYQ0p2Wm1aelpYUmNJaUJ2Y0hScGIyNGdMUzBnYzNCbFkybG1hV1ZrSUdsdUlIQnBlR1ZzY3lBdExTQjBhR0YwSUc5bVpuTmxkSE1nZEdobElIUmhjbWRsZEdWa0lITmpjbTlzYkNCd2IzTnBkR2x2Ymk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjMk55YjJ4c1JHbHlaV04wYVc5dUlEMGdLQzllZUNRdmFTNTBaWE4wS0c5d2RITXVZWGhwY3lrZ1B5QmNJa3hsWm5SY0lpQTZJRndpVkc5d1hDSXBMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTNKdmJHeFBabVp6WlhRZ1BTQndZWEp6WlVac2IyRjBLRzl3ZEhNdWIyWm1jMlYwS1NCOGZDQXdMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTNKdmJHeFFiM05wZEdsdmJrTjFjbkpsYm5Rc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpjbTlzYkZCdmMybDBhVzl1UTNWeWNtVnVkRUZzZEdWeWJtRjBaU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNVRzl6YVhScGIyNUZibVE3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVFkzSnZiR3dnWVd4emJ5QjFibWx4ZFdWc2VTQjBZV3RsY3lCaGJpQnZjSFJwYjI1aGJDQmNJbU52Ym5SaGFXNWxjbHdpSUc5d2RHbHZiaXdnZDJocFkyZ2dhVzVrYVdOaGRHVnpJSFJvWlNCd1lYSmxiblFnWld4bGJXVnVkQ0IwYUdGMElITm9iM1ZzWkNCaVpTQnpZM0p2Ykd4bFpDQXRMVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z6SUc5d2NHOXpaV1FnZEc4Z2RHaGxJR0p5YjNkelpYSWdkMmx1Wkc5M0lHbDBjMlZzWmk0Z1ZHaHBjeUJwY3lCMWMyVm1kV3dnWm05eUlITmpjbTlzYkdsdVp5QjBiM2RoY21RZ1lXNGdaV3hsYldWdWRDQjBhR0YwSjNNZ2FXNXphV1JsSUdGdUlHOTJaWEptYkc5M2FXNW5JSEJoY21WdWRDQmxiR1Z0Wlc1MExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hSekxtTnZiblJoYVc1bGNpa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRmJuTjFjbVVnZEdoaGRDQmxhWFJvWlhJZ1lTQnFVWFZsY25rZ2IySnFaV04wSUc5eUlHRWdjbUYzSUVSUFRTQmxiR1Z0Wlc1MElIZGhjeUJ3WVhOelpXUWdhVzR1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hVZVhCbExtbHpWM0poY0hCbFpDaHZjSFJ6TG1OdmJuUmhhVzVsY2lrZ2ZId2dWSGx3WlM1cGMwNXZaR1VvYjNCMGN5NWpiMjUwWVdsdVpYSXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJGZUhSeVlXTjBJSFJvWlNCeVlYY2dSRTlOSUdWc1pXMWxiblFnWm5KdmJTQjBhR1VnYWxGMVpYSjVJSGR5WVhCd1pYSXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJ6TG1OdmJuUmhhVzVsY2lBOUlHOXdkSE11WTI5dWRHRnBibVZ5V3pCZElIeDhJRzl3ZEhNdVkyOXVkR0ZwYm1WeU8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nVlc1c2FXdGxJRzkwYUdWeUlIQnliM0JsY25ScFpYTWdhVzRnVm1Wc2IyTnBkSGtzSUhSb1pTQmljbTkzYzJWeUozTWdjMk55YjJ4c0lIQnZjMmwwYVc5dUlHbHpJRzVsZG1WeUlHTmhZMmhsWkNCemFXNWpaU0JwZENCemJ5Qm1jbVZ4ZFdWdWRHeDVJR05vWVc1blpYTmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaGtkV1VnZEc4Z2RHaGxJSFZ6WlhJbmN5QnVZWFIxY21Gc0lHbHVkR1Z5WVdOMGFXOXVJSGRwZEdnZ2RHaGxJSEJoWjJVcExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnliMnhzVUc5emFYUnBiMjVEZFhKeVpXNTBJRDBnYjNCMGN5NWpiMjUwWVdsdVpYSmJYQ0p6WTNKdmJHeGNJaUFySUhOamNtOXNiRVJwY21WamRHbHZibDA3SUM4cUlFZEZWQ0FxTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lBa0xuQnZjMmwwYVc5dUtDa2dkbUZzZFdWeklHRnlaU0J5Wld4aGRHbDJaU0IwYnlCMGFHVWdZMjl1ZEdGcGJtVnlKM01nWTNWeWNtVnVkR3g1SUhacFpYZGhZbXhsSUdGeVpXRWdLSGRwZEdodmRYUWdkR0ZyYVc1bklHbHVkRzhnWVdOamIzVnVkQ0IwYUdVZ1kyOXVkR0ZwYm1WeUozTWdkSEoxWlNCa2FXMWxibk5wYjI1elhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdExTQnpZWGtzSUdadmNpQmxlR0Z0Y0d4bExDQnBaaUIwYUdVZ1kyOXVkR0ZwYm1WeUlIZGhjeUJ1YjNRZ2IzWmxjbVpzYjNkcGJtY3BMaUJVYUhWekxDQjBhR1VnYzJOeWIyeHNJR1Z1WkNCMllXeDFaU0JwY3lCMGFHVWdjM1Z0SUc5bUlIUm9aU0JqYUdsc1pDQmxiR1Z0Wlc1MEozTWdjRzl6YVhScGIyNGdLbUZ1WkNwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1pTQnpZM0p2Ykd3Z1kyOXVkR0ZwYm1WeUozTWdZM1Z5Y21WdWRDQnpZM0p2Ykd3Z2NHOXphWFJwYjI0dUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkzSnZiR3hRYjNOcGRHbHZia1Z1WkNBOUlDaHpZM0p2Ykd4UWIzTnBkR2x2YmtOMWNuSmxiblFnS3lBa0tHVnNaVzFsYm5RcExuQnZjMmwwYVc5dUtDbGJjMk55YjJ4c1JHbHlaV04wYVc5dUxuUnZURzkzWlhKRFlYTmxLQ2xkS1NBcklITmpjbTlzYkU5bVpuTmxkRHNnTHlvZ1IwVlVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbG1JR0VnZG1Gc2RXVWdiM1JvWlhJZ2RHaGhiaUJoSUdwUmRXVnllU0J2WW1wbFkzUWdiM0lnWVNCeVlYY2dSRTlOSUdWc1pXMWxiblFnZDJGeklIQmhjM05sWkNCcGJpd2daR1ZtWVhWc2RDQjBieUJ1ZFd4c0lITnZJSFJvWVhRZ2RHaHBjeUJ2Y0hScGIyNGdhWE1nYVdkdWIzSmxaQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEhNdVkyOXVkR0ZwYm1WeUlEMGdiblZzYkR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbG1JSFJvWlNCM2FXNWtiM2NnYVhSelpXeG1JR2x6SUdKbGFXNW5JSE5qY205c2JHVmtJQzB0SUc1dmRDQmhJR052Ym5SaGFXNXBibWNnWld4bGJXVnVkQ0F0TFNCd1pYSm1iM0p0SUdFZ2JHbDJaU0J6WTNKdmJHd2djRzl6YVhScGIyNGdiRzl2YTNWd0lIVnphVzVuWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9aU0JoY0hCeWIzQnlhV0YwWlNCallXTm9aV1FnY0hKdmNHVnlkSGtnYm1GdFpYTWdLSGRvYVdOb0lHUnBabVpsY2lCaVlYTmxaQ0J2YmlCaWNtOTNjMlZ5SUhSNWNHVXBMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkzSnZiR3hRYjNOcGRHbHZia04xY25KbGJuUWdQU0JXWld4dlkybDBlUzVUZEdGMFpTNXpZM0p2Ykd4QmJtTm9iM0piVm1Wc2IyTnBkSGt1VTNSaGRHVmJYQ0p6WTNKdmJHeFFjbTl3WlhKMGVWd2lJQ3NnYzJOeWIyeHNSR2x5WldOMGFXOXVYVjA3SUM4cUlFZEZWQ0FxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlhhR1Z1SUhOamNtOXNiR2x1WnlCMGFHVWdZbkp2ZDNObGNpQjNhVzVrYjNjc0lHTmhZMmhsSUhSb1pTQmhiSFJsY201aGRHVWdZWGhwY3lkeklHTjFjbkpsYm5RZ2RtRnNkV1VnYzJsdVkyVWdkMmx1Wkc5M0xuTmpjbTlzYkZSdktDa2daRzlsYzI0bmRDQnNaWFFnZFhNZ1kyaGhibWRsSUc5dWJIa2diMjVsSUhaaGJIVmxJR0YwSUdFZ2RHbHRaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTnliMnhzVUc5emFYUnBiMjVEZFhKeVpXNTBRV3gwWlhKdVlYUmxJRDBnVm1Wc2IyTnBkSGt1VTNSaGRHVXVjMk55YjJ4c1FXNWphRzl5VzFabGJHOWphWFI1TGxOMFlYUmxXMXdpYzJOeWIyeHNVSEp2Y0dWeWRIbGNJaUFySUNoelkzSnZiR3hFYVhKbFkzUnBiMjRnUFQwOUlGd2lUR1ZtZEZ3aUlEOGdYQ0pVYjNCY0lpQTZJRndpVEdWbWRGd2lLVjFkT3lBdktpQkhSVlFnS2k5Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJWYm14cGEyVWdKQzV3YjNOcGRHbHZiaWdwTENBa0xtOW1abk5sZENncElIWmhiSFZsY3lCaGNtVWdjbVZzWVhScGRtVWdkRzhnZEdobElHSnliM2R6WlhJZ2QybHVaRzkzSjNNZ2RISjFaU0JrYVcxbGJuTnBiMjV6SUMwdElHNXZkQ0J0WlhKbGJIa2dhWFJ6SUdOMWNuSmxiblJzZVNCMmFXVjNZV0pzWlNCaGNtVmhJQzB0WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnVaQ0IwYUdWeVpXWnZjbVVnWlc1a0lIWmhiSFZsY3lCa2J5QnViM1FnYm1WbFpDQjBieUJpWlNCamIyMXdiM1Z1WkdWa0lHOXVkRzhnWTNWeWNtVnVkQ0IyWVd4MVpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamNtOXNiRkJ2YzJsMGFXOXVSVzVrSUQwZ0pDaGxiR1Z0Wlc1MEtTNXZabVp6WlhRb0tWdHpZM0p2Ykd4RWFYSmxZM1JwYjI0dWRHOU1iM2RsY2tOaGMyVW9LVjBnS3lCelkzSnZiR3hQWm1aelpYUTdJQzhxSUVkRlZDQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRk5wYm1ObElIUm9aWEpsSjNNZ2IyNXNlU0J2Ym1VZ1ptOXliV0YwSUhSb1lYUWdjMk55YjJ4c0ozTWdZWE56YjJOcFlYUmxaQ0IwZDJWbGJuTkRiMjUwWVdsdVpYSWdZMkZ1SUhSaGEyVXNJSGRsSUdOeVpXRjBaU0JwZENCdFlXNTFZV3hzZVM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGQyVmxibk5EYjI1MFlXbHVaWElnUFNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpjbTlzYkRvZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205dmRGQnliM0JsY25SNVZtRnNkV1U2SUdaaGJITmxMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblJXWVd4MVpUb2djMk55YjJ4c1VHOXphWFJwYjI1RGRYSnlaVzUwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGWmhiSFZsT2lCelkzSnZiR3hRYjNOcGRHbHZia04xY25KbGJuUXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlRvZ2MyTnliMnhzVUc5emFYUnBiMjVGYm1Rc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYm1sMFZIbHdaVG9nWENKY0lpeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWaGMybHVaem9nYjNCMGN5NWxZWE5wYm1jc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTNKdmJHeEVZWFJoT2lCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeU9pQnZjSFJ6TG1OdmJuUmhhVzVsY2l4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0NklITmpjbTlzYkVScGNtVmpkR2x2Yml4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJIUmxjbTVoZEdWV1lXeDFaVG9nYzJOeWIyeHNVRzl6YVhScGIyNURkWEp5Wlc1MFFXeDBaWEp1WVhSbFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RNklHVnNaVzFsYm5SY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGWmxiRzlqYVhSNUxtUmxZblZuS1NCamIyNXpiMnhsTG14dlp5aGNJblIzWldWdWMwTnZiblJoYVc1bGNpQW9jMk55YjJ4c0tUb2dYQ0lzSUhSM1pXVnVjME52Ym5SaGFXNWxjaTV6WTNKdmJHd3NJR1ZzWlcxbGJuUXBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVkMlZsYmlCRVlYUmhJRU52Ym5OMGNuVmpkR2x2YmlBb1ptOXlJRkpsZG1WeWMyVXBYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGSmxkbVZ5YzJVZ1lXTjBjeUJzYVd0bElHRWdYQ0p6ZEdGeWRGd2lJR0ZqZEdsdmJpQnBiaUIwYUdGMElHRWdjSEp2Y0dWeWRIa2diV0Z3SUdseklHRnVhVzFoZEdWa0lIUnZkMkZ5WkM0Z1ZHaGxJRzl1YkhrZ1pHbG1abVZ5Wlc1alpTQnBjMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaGhkQ0IwYUdVZ2NISnZjR1Z5ZEhrZ2JXRndJSFZ6WldRZ1ptOXlJSEpsZG1WeWMyVWdhWE1nZEdobElHbHVkbVZ5YzJVZ2IyWWdkR2hsSUcxaGNDQjFjMlZrSUdsdUlIUm9aU0J3Y21WMmFXOTFjeUJqWVd4c0xpQlVhSFZ6TENCM1pTQnRZVzVwY0hWc1lYUmxYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHVWdjSEpsZG1sdmRYTWdZMkZzYkNCMGJ5QmpiMjV6ZEhKMVkzUWdiM1Z5SUc1bGR5QnRZWEE2SUhWelpTQjBhR1VnY0hKbGRtbHZkWE1nYldGd0ozTWdaVzVrSUhaaGJIVmxjeUJoY3lCdmRYSWdibVYzSUcxaGNDZHpJSE4wWVhKMElIWmhiSFZsY3k0Z1EyOXdlU0J2ZG1WeUlHRnNiQ0J2ZEdobGNpQmtZWFJoTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dVbVYyWlhKelpTQmpZVzRnWW1VZ1pHbHlaV04wYkhrZ1kyRnNiR1ZrSUhacFlTQjBhR1VnWENKeVpYWmxjbk5sWENJZ2NHRnlZVzFsZEdWeUxDQnZjaUJwZENCallXNGdZbVVnYVc1a2FYSmxZM1JzZVNCMGNtbG5aMlZ5WldRZ2RtbGhJSFJvWlNCc2IyOXdJRzl3ZEdsdmJpNGdLRXh2YjNCeklHRnlaU0JqYjIxd2IzTmxaQ0J2WmlCdGRXeDBhWEJzWlNCeVpYWmxjbk5sY3k0cElDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCT2IzUmxPaUJTWlhabGNuTmxJR05oYkd4eklHUnZJRzV2ZENCdVpXVmtJSFJ2SUdKbElHTnZibk5sWTNWMGFYWmxiSGtnWTJoaGFXNWxaQ0J2Ym5SdklHRWdZM1Z5Y21WdWRHeDVMV0Z1YVcxaGRHbHVaeUJsYkdWdFpXNTBJR2x1SUc5eVpHVnlJSFJ2SUc5d1pYSmhkR1VnYjI0Z1kyRmphR1ZrSUhaaGJIVmxjenRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9aWEpsSUdseklHNXZJR2hoY20wZ2RHOGdjbVYyWlhKelpTQmlaV2x1WnlCallXeHNaV1FnYjI0Z1lTQndiM1JsYm5ScFlXeHNlU0J6ZEdGc1pTQmtZWFJoSUdOaFkyaGxJSE5wYm1ObElISmxkbVZ5YzJVbmN5QmlaV2hoZG1sdmNpQnBjeUJ6YVcxd2JIa2daR1ZtYVc1bFpGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhNZ2NtVjJaWEowYVc1bklIUnZJSFJvWlNCbGJHVnRaVzUwSjNNZ2RtRnNkV1Z6SUdGeklIUm9aWGtnZDJWeVpTQndjbWx2Y2lCMGJ5QjBhR1VnY0hKbGRtbHZkWE1nS2xabGJHOWphWFI1S2lCallXeHNMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhZM1JwYjI0Z1BUMDlJRndpY21WMlpYSnpaVndpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1FXSnZjblFnYVdZZ2RHaGxjbVVnYVhNZ2JtOGdjSEpwYjNJZ1lXNXBiV0YwYVc5dUlHUmhkR0VnZEc4Z2NtVjJaWEp6WlNCMGJ5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVVSaGRHRW9aV3hsYldWdWRDa3VkSGRsWlc1elEyOXVkR0ZwYm1WeUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVSbGNYVmxkV1VnZEdobElHVnNaVzFsYm5RZ2MyOGdkR2hoZENCMGFHbHpJSEYxWlhWbElHVnVkSEo1SUhKbGJHVmhjMlZ6SUdsMGMyVnNaaUJwYlcxbFpHbGhkR1ZzZVN3Z1lXeHNiM2RwYm1jZ2MzVmljMlZ4ZFdWdWRDQnhkV1YxWlNCbGJuUnlhV1Z6SUhSdklISjFiaTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDNWtaWEYxWlhWbEtHVnNaVzFsYm5Rc0lHOXdkSE11Y1hWbGRXVXBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2Ym5NZ1VHRnljMmx1WjF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdkR2hsSUdWc1pXMWxiblFnZDJGeklHaHBaR1JsYmlCMmFXRWdkR2hsSUdScGMzQnNZWGtnYjNCMGFXOXVJR2x1SUhSb1pTQndjbVYyYVc5MWN5QmpZV3hzTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFpsY25RZ1pHbHpjR3hoZVNCMGJ5QmNJbUYxZEc5Y0lpQndjbWx2Y2lCMGJ5QnlaWFpsY25OaGJDQnpieUIwYUdGMElIUm9aU0JsYkdWdFpXNTBJR2x6SUhacGMybGliR1VnWVdkaGFXNHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaEVZWFJoS0dWc1pXMWxiblFwTG05d2RITXVaR2x6Y0d4aGVTQTlQVDBnWENKdWIyNWxYQ0lwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVJoZEdFb1pXeGxiV1Z1ZENrdWIzQjBjeTVrYVhOd2JHRjVJRDBnWENKaGRYUnZYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUkdGMFlTaGxiR1Z0Wlc1MEtTNXZjSFJ6TG5acGMybGlhV3hwZEhrZ1BUMDlJRndpYUdsa1pHVnVYQ0lwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVJoZEdFb1pXeGxiV1Z1ZENrdWIzQjBjeTUyYVhOcFltbHNhWFI1SUQwZ1hDSjJhWE5wWW14bFhDSTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUIwYUdVZ2JHOXZjQ0J2Y0hScGIyNGdkMkZ6SUhObGRDQnBiaUIwYUdVZ2NISmxkbWx2ZFhNZ1kyRnNiQ3dnWkdsellXSnNaU0JwZENCemJ5QjBhR0YwSUZ3aWNtVjJaWEp6WlZ3aUlHTmhiR3h6SUdGeVpXNG5kQ0J5WldOMWNuTnBkbVZzZVNCblpXNWxjbUYwWldRdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVoxY25Sb1pYSXNJSEpsYlc5MlpTQjBhR1VnY0hKbGRtbHZkWE1nWTJGc2JDZHpJR05oYkd4aVlXTnJJRzl3ZEdsdmJuTTdJSFI1Y0dsallXeHNlU3dnZFhObGNuTWdaRzhnYm05MElIZGhiblFnZEdobGMyVWdkRzhnWW1VZ2NtVm1hWEpsWkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSR0YwWVNobGJHVnRaVzUwS1M1dmNIUnpMbXh2YjNBZ1BTQm1ZV3h6WlR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JHRjBZU2hsYkdWdFpXNTBLUzV2Y0hSekxtSmxaMmx1SUQwZ2JuVnNiRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUkdGMFlTaGxiR1Z0Wlc1MEtTNXZjSFJ6TG1OdmJYQnNaWFJsSUQwZ2JuVnNiRHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlRhVzVqWlNCM1pTZHlaU0JsZUhSbGJtUnBibWNnWVc0Z2IzQjBjeUJ2WW1wbFkzUWdkR2hoZENCb1lYTWdZV3h5WldGa2VTQmlaV1Z1SUdWNGRHVnVaR1ZrSUhkcGRHZ2dkR2hsSUdSbFptRjFiSFJ6SUc5d2RHbHZibk1nYjJKcVpXTjBMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1pTQnlaVzF2ZG1VZ2JtOXVMV1Y0Y0d4cFkybDBiSGt0WkdWbWFXNWxaQ0J3Y205d1pYSjBhV1Z6SUhSb1lYUWdZWEpsSUdGMWRHOHRZWE56YVdkdVpXUWdkbUZzZFdWekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdVpXRnphVzVuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdiM0IwY3k1bFlYTnBibWM3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5d2RHbHZibk11WkhWeVlYUnBiMjRwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnZjSFJ6TG1SMWNtRjBhVzl1TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVkdobElHOXdkSE1nYjJKcVpXTjBJSFZ6WldRZ1ptOXlJSEpsZG1WeWMyRnNJR2x6SUdGdUlHVjRkR1Z1YzJsdmJpQnZaaUIwYUdVZ2IzQjBhVzl1Y3lCdlltcGxZM1FnYjNCMGFXOXVZV3hzZVNCd1lYTnpaV1FnYVc1MGJ5QjBhR2x6WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkbVZ5YzJVZ1kyRnNiQ0J3YkhWeklIUm9aU0J2Y0hScGIyNXpJSFZ6WldRZ2FXNGdkR2hsSUhCeVpYWnBiM1Z6SUZabGJHOWphWFI1SUdOaGJHd3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITWdQU0FrTG1WNGRHVnVaQ2g3ZlN3Z1JHRjBZU2hsYkdWdFpXNTBLUzV2Y0hSekxDQnZjSFJ6S1R0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVWQyVmxibk1nUTI5dWRHRnBibVZ5SUZKbFkyOXVjM1J5ZFdOMGFXOXVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRM0psWVhSbElHRWdaR1ZsY0hrZ1kyOXdlU0FvYVc1a2FXTmhkR1ZrSUhacFlTQjBhR1VnZEhKMVpTQm1iR0ZuS1NCdlppQjBhR1VnY0hKbGRtbHZkWE1nWTJGc2JDZHpJSFIzWldWdWMwTnZiblJoYVc1bGNpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHeGhjM1JVZDJWbGJuTkRiMjUwWVdsdVpYSWdQU0FrTG1WNGRHVnVaQ2gwY25WbExDQjdmU3dnUkdGMFlTaGxiR1Z0Wlc1MEtTNTBkMlZsYm5ORGIyNTBZV2x1WlhJcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUUxaGJtbHdkV3hoZEdVZ2RHaGxJSEJ5WlhacGIzVnpJSFIzWldWdWMwTnZiblJoYVc1bGNpQmllU0J5WlhCc1lXTnBibWNnYVhSeklHVnVaQ0IyWVd4MVpYTWdZVzVrSUdOMWNuSmxiblJXWVd4MVpYTWdkMmwwYUNCcGRITWdjM1JoY25RZ2RtRnNkV1Z6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnNZWE4wVkhkbFpXNGdhVzRnYkdGemRGUjNaV1Z1YzBOdmJuUmhhVzVsY2lrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXNGdZV1JrYVhScGIyNGdkRzhnZEhkbFpXNGdaR0YwWVN3Z2RIZGxaVzV6UTI5dWRHRnBibVZ5Y3lCamIyNTBZV2x1SUdGdUlHVnNaVzFsYm5RZ2NISnZjR1Z5ZEhrZ2RHaGhkQ0IzWlNCcFoyNXZjbVVnYUdWeVpTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVhOMFZIZGxaVzRnSVQwOUlGd2laV3hsYldWdWRGd2lLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHeGhjM1JUZEdGeWRGWmhiSFZsSUQwZ2JHRnpkRlIzWldWdWMwTnZiblJoYVc1bGNsdHNZWE4wVkhkbFpXNWRMbk4wWVhKMFZtRnNkV1U3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBWSGRsWlc1elEyOXVkR0ZwYm1WeVcyeGhjM1JVZDJWbGJsMHVjM1JoY25SV1lXeDFaU0E5SUd4aGMzUlVkMlZsYm5ORGIyNTBZV2x1WlhKYmJHRnpkRlIzWldWdVhTNWpkWEp5Wlc1MFZtRnNkV1VnUFNCc1lYTjBWSGRsWlc1elEyOXVkR0ZwYm1WeVcyeGhjM1JVZDJWbGJsMHVaVzVrVm1Gc2RXVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z6ZEZSM1pXVnVjME52Ym5SaGFXNWxjbHRzWVhOMFZIZGxaVzVkTG1WdVpGWmhiSFZsSUQwZ2JHRnpkRk4wWVhKMFZtRnNkV1U3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkZZWE5wYm1jZ2FYTWdkR2hsSUc5dWJIa2diM0IwYVc5dUlIUm9ZWFFnWlcxaVpXUnpJR2x1ZEc4Z2RHaGxJR2x1WkdsMmFXUjFZV3dnZEhkbFpXNGdaR0YwWVNBb2MybHVZMlVnYVhRZ1kyRnVJR0psSUdSbFptbHVaV1FnYjI0Z1lTQndaWEl0Y0hKdmNHVnlkSGtnWW1GemFYTXBMbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVGalkyOXlaR2x1WjJ4NUxDQmxkbVZ5ZVNCd2NtOXdaWEowZVNkeklHVmhjMmx1WnlCMllXeDFaU0J0ZFhOMElHSmxJSFZ3WkdGMFpXUWdkMmhsYmlCaGJpQnZjSFJwYjI1eklHOWlhbVZqZENCcGN5QndZWE56WldRZ2FXNGdkMmwwYUNCaElISmxkbVZ5YzJVZ1kyRnNiQzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVWFHVWdjMmxrWlNCbFptWmxZM1FnYjJZZ2RHaHBjeUJsZUhSbGJuTnBZbWxzYVhSNUlHbHpJSFJvWVhRZ1lXeHNJSEJsY2kxd2NtOXdaWEowZVNCbFlYTnBibWNnZG1Gc2RXVnpJR0Z5WlNCbWIzSmpaV1oxYkd4NUlISmxjMlYwSUhSdklIUm9aU0J1WlhjZ2RtRnNkV1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZVZVhCbExtbHpSVzF3ZEhsUFltcGxZM1FvYjNCMGFXOXVjeWtwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z6ZEZSM1pXVnVjME52Ym5SaGFXNWxjbHRzWVhOMFZIZGxaVzVkTG1WaGMybHVaeUE5SUc5d2RITXVaV0Z6YVc1bk8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoV1pXeHZZMmwwZVM1a1pXSjFaeWtnWTI5dWMyOXNaUzVzYjJjb1hDSnlaWFpsY25ObElIUjNaV1Z1YzBOdmJuUmhhVzVsY2lBb1hDSWdLeUJzWVhOMFZIZGxaVzRnS3lCY0lpazZJRndpSUNzZ1NsTlBUaTV6ZEhKcGJtZHBabmtvYkdGemRGUjNaV1Z1YzBOdmJuUmhhVzVsY2x0c1lYTjBWSGRsWlc1ZEtTd2daV3hsYldWdWRDazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZDJWbGJuTkRiMjUwWVdsdVpYSWdQU0JzWVhOMFZIZGxaVzV6UTI5dWRHRnBibVZ5TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVkMlZsYmlCRVlYUmhJRU52Ym5OMGNuVmpkR2x2YmlBb1ptOXlJRk4wWVhKMEtWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWVdOMGFXOXVJRDA5UFNCY0luTjBZWEowWENJcElIdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGWmhiSFZsSUZSeVlXNXpabVZ5Y21sdVoxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCSlppQjBhR2x6SUhGMVpYVmxJR1Z1ZEhKNUlHWnZiR3h2ZDNNZ1lTQndjbVYyYVc5MWN5QldaV3h2WTJsMGVTMXBibWwwYVdGMFpXUWdjWFZsZFdVZ1pXNTBjbmtnS21GdVpDb2dhV1lnZEdocGN5QmxiblJ5ZVNCM1lYTWdZM0psWVhSbFpGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUhSb1pTQmxiR1Z0Wlc1MElIZGhjeUJwYmlCMGFHVWdjSEp2WTJWemN5QnZaaUJpWldsdVp5QmhibWx0WVhSbFpDQmllU0JXWld4dlkybDBlU3dnZEdobGJpQjBhR2x6SUdOMWNuSmxiblFnWTJGc2JDQnBjeUJ6WVdabElIUnZJSFZ6WlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1pTQmxibVFnZG1Gc2RXVnpJR1p5YjIwZ2RHaGxJSEJ5YVc5eUlHTmhiR3dnWVhNZ2FYUnpJSE4wWVhKMElIWmhiSFZsY3k0Z1ZtVnNiMk5wZEhrZ1lYUjBaVzF3ZEhNZ2RHOGdjR1Z5Wm05eWJTQjBhR2x6SUhaaGJIVmxJSFJ5WVc1elptVnlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2WTJWemN5QjNhR1Z1WlhabGNpQndiM056YVdKc1pTQnBiaUJ2Y21SbGNpQjBieUJoZG05cFpDQnlaWEYxWlhKNWFXNW5JSFJvWlNCRVQwMHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1dZZ2RtRnNkV1Z6SUdGeVpXNG5kQ0IwY21GdWMyWmxjbkpsWkNCbWNtOXRJR0VnY0hKcGIzSWdZMkZzYkNCaGJtUWdjM1JoY25RZ2RtRnNkV1Z6SUhkbGNtVWdibTkwSUdadmNtTmxabVZrSUdKNUlIUm9aU0IxYzJWeUlDaHRiM0psSUc5dUlIUm9hWE1nWW1Wc2IzY3BMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvWlc0Z2RHaGxJRVJQVFNCcGN5QnhkV1Z5YVdWa0lHWnZjaUIwYUdVZ1pXeGxiV1Z1ZENkeklHTjFjbkpsYm5RZ2RtRnNkV1Z6SUdGeklHRWdiR0Z6ZENCeVpYTnZjblF1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nUTI5dWRtVnljMlZzZVN3Z1lXNXBiV0YwYVc5dUlISmxkbVZ5YzJGc0lDaGhibVFnYkc5dmNHbHVaeWtnS21Gc2QyRjVjeW9nY0dWeVptOXliU0JwYm5SbGNpMWpZV3hzSUhaaGJIVmxJSFJ5WVc1elptVnljenNnZEdobGVTQnVaWFpsY2lCeVpYRjFaWEo1SUhSb1pTQkVUMDB1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHeGhjM1JVZDJWbGJuTkRiMjUwWVdsdVpYSTdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJVYUdVZ2NHVnlMV1ZzWlcxbGJuUWdhWE5CYm1sdFlYUnBibWNnWm14aFp5QnBjeUIxYzJWa0lIUnZJR2x1WkdsallYUmxJSGRvWlhSb1pYSWdhWFFuY3lCellXWmxJQ2hwTG1VdUlIUm9aU0JrWVhSaElHbHpiaWQwSUhOMFlXeGxLVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2SUhSeVlXNXpabVZ5SUc5MlpYSWdaVzVrSUhaaGJIVmxjeUIwYnlCMWMyVWdZWE1nYzNSaGNuUWdkbUZzZFdWekxpQkpaaUJwZENkeklITmxkQ0IwYnlCMGNuVmxJR0Z1WkNCMGFHVnlaU0JwY3lCaElIQnlaWFpwYjNWelhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZtVnNiMk5wZEhrZ1kyRnNiQ0IwYnlCd2RXeHNJSFpoYkhWbGN5Qm1jbTl0TENCa2J5QnpieTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JHRjBZU2hsYkdWdFpXNTBLUzUwZDJWbGJuTkRiMjUwWVdsdVpYSWdKaVlnUkdGMFlTaGxiR1Z0Wlc1MEtTNXBjMEZ1YVcxaGRHbHVaeUE5UFQwZ2RISjFaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lYTjBWSGRsWlc1elEyOXVkR0ZwYm1WeUlEMGdSR0YwWVNobGJHVnRaVzUwS1M1MGQyVmxibk5EYjI1MFlXbHVaWEk3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlIzWldWdUlFUmhkR0VnUTJGc1kzVnNZWFJwYjI1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWFHbHpJR1oxYm1OMGFXOXVJSEJoY25ObGN5QndjbTl3WlhKMGVTQmtZWFJoSUdGdVpDQmtaV1poZFd4MGN5QmxibVJXWVd4MVpTd2daV0Z6YVc1bkxDQmhibVFnYzNSaGNuUldZV3gxWlNCaGN5QmhjSEJ5YjNCeWFXRjBaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCUWNtOXdaWEowZVNCdFlYQWdkbUZzZFdWeklHTmhiaUJsYVhSb1pYSWdkR0ZyWlNCMGFHVWdabTl5YlNCdlppQXhLU0JoSUhOcGJtZHNaU0IyWVd4MVpTQnlaWEJ5WlhObGJuUnBibWNnZEdobElHVnVaQ0IyWVd4MVpTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjaUF5S1NCaGJpQmhjbkpoZVNCcGJpQjBhR1VnWm05eWJTQnZaaUJiSUdWdVpGWmhiSFZsTENCYkxDQmxZWE5wYm1kZElGc3NJSE4wWVhKMFZtRnNkV1ZkSUYwdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZHaGxJRzl3ZEdsdmJtRnNJSFJvYVhKa0lIQmhjbUZ0WlhSbGNpQnBjeUJoSUdadmNtTmxabVZrSUhOMFlYSjBWbUZzZFdVZ2RHOGdZbVVnZFhObFpDQnBibk4wWldGa0lHOW1JSEYxWlhKNWFXNW5JSFJvWlNCRVQwMGdabTl5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdobElHVnNaVzFsYm5RbmN5QmpkWEp5Wlc1MElIWmhiSFZsTGlCU1pXRmtJRlpsYkc5amFYUjVKM01nWkc5amJXVnVkR0YwYVc5dUlIUnZJR3hsWVhKdUlHMXZjbVVnWVdKdmRYUWdabTl5WTJWbVpXVmthVzVuT2lCV1pXeHZZMmwwZVVwVExtOXlaeThqWm05eVkyVm1aV1ZrYVc1bklDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2NHRnljMlZRY205d1pYSjBlVlpoYkhWbElDaDJZV3gxWlVSaGRHRXNJSE5yYVhCU1pYTnZiSFpwYm1kRllYTnBibWNwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z1WkZaaGJIVmxJRDBnZFc1a1pXWnBibVZrTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV0Z6YVc1bklEMGdkVzVrWldacGJtVmtMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblJXWVd4MVpTQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQklZVzVrYkdVZ2RHaGxJR0Z5Y21GNUlHWnZjbTFoZEN3Z2QyaHBZMmdnWTJGdUlHSmxJSE4wY25WamRIVnlaV1FnWVhNZ2IyNWxJRzltSUhSb2NtVmxJSEJ2ZEdWdWRHbGhiQ0J2ZG1WeWJHOWhaSE02WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFRXBJRnNnWlc1a1ZtRnNkV1VzSUdWaGMybHVaeXdnYzNSaGNuUldZV3gxWlNCZExDQkNLU0JiSUdWdVpGWmhiSFZsTENCbFlYTnBibWNnWFN3Z2IzSWdReWtnV3lCbGJtUldZV3gxWlN3Z2MzUmhjblJXWVd4MVpTQmRJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFVlWEJsTG1selFYSnlZWGtvZG1Gc2RXVkVZWFJoS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1pXNWtWbUZzZFdVZ2FYTWdZV3gzWVhseklIUm9aU0JtYVhKemRDQnBkR1Z0SUdsdUlIUm9aU0JoY25KaGVTNGdSRzl1SjNRZ1ltOTBhR1Z5SUhaaGJHbGtZWFJwYm1jZ1pXNWtWbUZzZFdVbmN5QjJZV3gxWlNCdWIzZGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnBibU5sSUhSb1pTQmxibk4xYVc1bklIQnliM0JsY25SNUlHTjVZMnhwYm1jZ2JHOW5hV01nWkc5bGN5QjBhR0YwTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1VnUFNCMllXeDFaVVJoZEdGYk1GMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRlIzYnkxcGRHVnRJR0Z5Y21GNUlHWnZjbTFoZERvZ1NXWWdkR2hsSUhObFkyOXVaQ0JwZEdWdElHbHpJR0VnYm5WdFltVnlMQ0JtZFc1amRHbHZiaXdnYjNJZ2FHVjRJSE4wY21sdVp5d2dkSEpsWVhRZ2FYUWdZWE1nWVZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGNuUWdkbUZzZFdVZ2MybHVZMlVnWldGemFXNW5jeUJqWVc0Z2IyNXNlU0JpWlNCdWIyNHRhR1Y0SUhOMGNtbHVaM01nYjNJZ1lYSnlZWGx6TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDZ2hWSGx3WlM1cGMwRnljbUY1S0haaGJIVmxSR0YwWVZzeFhTa2dKaVlnTDE1YlhGeGtMVjB2TG5SbGMzUW9kbUZzZFdWRVlYUmhXekZkS1NrZ2ZId2dWSGx3WlM1cGMwWjFibU4wYVc5dUtIWmhiSFZsUkdGMFlWc3hYU2tnZkh3Z1ExTlRMbEpsWjBWNExtbHpTR1Y0TG5SbGMzUW9kbUZzZFdWRVlYUmhXekZkS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowVm1Gc2RXVWdQU0IyWVd4MVpVUmhkR0ZiTVYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWQyOGdiM0lnZEdoeVpXVXRhWFJsYlNCaGNuSmhlVG9nU1dZZ2RHaGxJSE5sWTI5dVpDQnBkR1Z0SUdseklHRWdibTl1TFdobGVDQnpkSEpwYm1jZ2IzSWdZVzRnWVhKeVlYa3NJSFJ5WldGMElHbDBJR0Z6SUdGdUlHVmhjMmx1Wnk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0tGUjVjR1V1YVhOVGRISnBibWNvZG1Gc2RXVkVZWFJoV3pGZEtTQW1KaUFoUTFOVExsSmxaMFY0TG1selNHVjRMblJsYzNRb2RtRnNkV1ZFWVhSaFd6RmRLU2tnZkh3Z1ZIbHdaUzVwYzBGeWNtRjVLSFpoYkhWbFJHRjBZVnN4WFNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxZWE5wYm1jZ1BTQnphMmx3VW1WemIyeDJhVzVuUldGemFXNW5JRDhnZG1Gc2RXVkVZWFJoV3pGZElEb2daMlYwUldGemFXNW5LSFpoYkhWbFJHRjBZVnN4WFN3Z2IzQjBjeTVrZFhKaGRHbHZiaWs3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkViMjRuZENCaWIzUm9aWElnZG1Gc2FXUmhkR2x1WnlCemRHRnlkRlpoYkhWbEozTWdkbUZzZFdVZ2JtOTNJSE5wYm1ObElIUm9aU0JsYm5OMWFXNW5JSEJ5YjNCbGNuUjVJR041WTJ4cGJtY2diRzluYVdNZ2FXNW9aWEpsYm5Sc2VTQmtiMlZ6SUhSb1lYUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsUkdGMFlWc3lYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBWbUZzZFdVZ1BTQjJZV3gxWlVSaGRHRmJNbDA3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCSVlXNWtiR1VnZEdobElITnBibWRzWlMxMllXeDFaU0JtYjNKdFlYUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibVJXWVd4MVpTQTlJSFpoYkhWbFJHRjBZVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVJsWm1GMWJIUWdkRzhnZEdobElHTmhiR3duY3lCbFlYTnBibWNnYVdZZ1lTQndaWEl0Y0hKdmNHVnlkSGtnWldGemFXNW5JSFI1Y0dVZ2QyRnpJRzV2ZENCa1pXWnBibVZrTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhOcmFYQlNaWE52YkhacGJtZEZZWE5wYm1jcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWaGMybHVaeUE5SUdWaGMybHVaeUI4ZkNCdmNIUnpMbVZoYzJsdVp6dGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbG1JR1oxYm1OMGFXOXVjeUIzWlhKbElIQmhjM05sWkNCcGJpQmhjeUIyWVd4MVpYTXNJSEJoYzNNZ2RHaGxJR1oxYm1OMGFXOXVJSFJvWlNCamRYSnlaVzUwSUdWc1pXMWxiblFnWVhNZ2FYUnpJR052Ym5SbGVIUXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCc2RYTWdkR2hsSUdWc1pXMWxiblFuY3lCcGJtUmxlQ0JoYm1RZ2RHaGxJR1ZzWlcxbGJuUWdjMlYwSjNNZ2MybDZaU0JoY3lCaGNtZDFiV1Z1ZEhNdUlGUm9aVzRzSUdGemMybG5iaUIwYUdVZ2NtVjBkWEp1WldRZ2RtRnNkV1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hVZVhCbExtbHpSblZ1WTNScGIyNG9aVzVrVm1Gc2RXVXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibVJXWVd4MVpTQTlJR1Z1WkZaaGJIVmxMbU5oYkd3b1pXeGxiV1Z1ZEN3Z1pXeGxiV1Z1ZEhOSmJtUmxlQ3dnWld4bGJXVnVkSE5NWlc1bmRHZ3BPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRlI1Y0dVdWFYTkdkVzVqZEdsdmJpaHpkR0Z5ZEZaaGJIVmxLU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25SV1lXeDFaU0E5SUhOMFlYSjBWbUZzZFdVdVkyRnNiQ2hsYkdWdFpXNTBMQ0JsYkdWdFpXNTBjMGx1WkdWNExDQmxiR1Z0Wlc1MGMweGxibWQwYUNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCQmJHeHZkeUJ6ZEdGeWRGWmhiSFZsSUhSdklHSmxJR3hsWm5RZ1lYTWdkVzVrWldacGJtVmtJSFJ2SUdsdVpHbGpZWFJsSUhSdklIUm9aU0JsYm5OMWFXNW5JR052WkdVZ2RHaGhkQ0JwZEhNZ2RtRnNkV1VnZDJGeklHNXZkQ0JtYjNKalpXWmxaQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZzZ1pXNWtWbUZzZFdVZ2ZId2dNQ3dnWldGemFXNW5MQ0J6ZEdGeWRGWmhiSFZsSUYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1EzbGpiR1VnZEdoeWIzVm5hQ0JsWVdOb0lIQnliM0JsY25SNUlHbHVJSFJvWlNCdFlYQXNJR3h2YjJ0cGJtY2dabTl5SUhOb2IzSjBhR0Z1WkNCamIyeHZjaUJ3Y205d1pYSjBhV1Z6SUNobExtY3VJRndpWTI5c2IzSmNJaUJoY3lCdmNIQnZjMlZrSUhSdklGd2lZMjlzYjNKU1pXUmNJaWt1SUVsdWFtVmpkQ0IwYUdVZ1kyOXljbVZ6Y0c5dVpHbHVaMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eVVtVmtMQ0JqYjJ4dmNrZHlaV1Z1TENCaGJtUWdZMjlzYjNKQ2JIVmxJRkpIUWlCamIyMXdiMjVsYm5RZ2RIZGxaVzV6SUdsdWRHOGdkR2hsSUhCeWIzQmxjblJwWlhOTllYQWdLSGRvYVdOb0lGWmxiRzlqYVhSNUlIVnVaR1Z5YzNSaGJtUnpLU0JoYm1RZ2NtVnRiM1psSUhSb1pTQnphRzl5ZEdoaGJtUWdjSEp2Y0dWeWRIa3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQzVsWVdOb0tIQnliM0JsY25ScFpYTk5ZWEFzSUdaMWJtTjBhVzl1S0hCeWIzQmxjblI1TENCMllXeDFaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkdhVzVrSUhOb2IzSjBhR0Z1WkNCamIyeHZjaUJ3Y205d1pYSjBhV1Z6SUhSb1lYUWdhR0YyWlNCaVpXVnVJSEJoYzNObFpDQmhJR2hsZUNCemRISnBibWN1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hTWldkRmVIQW9YQ0plWENJZ0t5QkRVMU11VEdsemRITXVZMjlzYjNKekxtcHZhVzRvWENJa2ZGNWNJaWtnS3lCY0lpUmNJaWt1ZEdWemRDaHdjbTl3WlhKMGVTa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRkJoY25ObElIUm9aU0IyWVd4MVpTQmtZWFJoSUdadmNpQmxZV05vSUhOb2IzSjBhR0Z1WkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlVSaGRHRWdQU0J3WVhKelpWQnliM0JsY25SNVZtRnNkV1VvZG1Gc2RXVXNJSFJ5ZFdVcExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVaRlpoYkhWbElEMGdkbUZzZFdWRVlYUmhXekJkTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWaGMybHVaeUE5SUhaaGJIVmxSR0YwWVZzeFhTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEZaaGJIVmxJRDBnZG1Gc2RXVkVZWFJoV3pKZE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RMU5UTGxKbFowVjRMbWx6U0dWNExuUmxjM1FvWlc1a1ZtRnNkV1VwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRMjl1ZG1WeWRDQjBhR1VnYUdWNElITjBjbWx1WjNNZ2FXNTBieUIwYUdWcGNpQlNSMElnWTI5dGNHOXVaVzUwSUdGeWNtRjVjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMjlzYjNKRGIyMXdiMjVsYm5SeklEMGdXeUJjSWxKbFpGd2lMQ0JjSWtkeVpXVnVYQ0lzSUZ3aVFteDFaVndpSUYwc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WkZaaGJIVmxVa2RDSUQwZ1ExTlRMbFpoYkhWbGN5NW9aWGhVYjFKbllpaGxibVJXWVd4MVpTa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBWbUZzZFdWU1IwSWdQU0J6ZEdGeWRGWmhiSFZsSUQ4Z1ExTlRMbFpoYkhWbGN5NW9aWGhVYjFKbllpaHpkR0Z5ZEZaaGJIVmxLU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWx1YW1WamRDQjBhR1VnVWtkQ0lHTnZiWEJ2Ym1WdWRDQjBkMlZsYm5NZ2FXNTBieUJ3Y205d1pYSjBhV1Z6VFdGd0xpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTI5c2IzSkRiMjF3YjI1bGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1lYUmhRWEp5WVhrZ1BTQmJJR1Z1WkZaaGJIVmxVa2RDVzJsZElGMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZoYzJsdVp5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVVGeWNtRjVMbkIxYzJnb1pXRnphVzVuS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGeWRGWmhiSFZsVWtkQ0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRkJjbkpoZVM1d2RYTm9LSE4wWVhKMFZtRnNkV1ZTUjBKYmFWMHBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsYzAxaGNGdHdjbTl3WlhKMGVTQXJJR052Ykc5eVEyOXRjRzl1Wlc1MGMxdHBYVjBnUFNCa1lYUmhRWEp5WVhrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVW1WdGIzWmxJSFJvWlNCcGJuUmxjbTFsWkdsaGNua2djMmh2Y25Sb1lXNWtJSEJ5YjNCbGNuUjVJR1Z1ZEhKNUlHNXZkeUIwYUdGMElIZGxKM1psSUhCeWIyTmxjM05sWkNCcGRDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdjSEp2Y0dWeWRHbGxjMDFoY0Z0d2NtOXdaWEowZVYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFTnlaV0YwWlNCaElIUjNaV1Z1SUc5MWRDQnZaaUJsWVdOb0lIQnliM0JsY25SNUxDQmhibVFnWVhCd1pXNWtJR2wwY3lCaGMzTnZZMmxoZEdWa0lHUmhkR0VnZEc4Z2RIZGxaVzV6UTI5dWRHRnBibVZ5TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhCeWIzQmxjblI1SUdsdUlIQnliM0JsY25ScFpYTk5ZWEFwSUh0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVTNSaGNuUWdWbUZzZFdVZ1UyOTFjbU5wYm1kY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVUdGeWMyVWdiM1YwSUdWdVpGWmhiSFZsTENCbFlYTnBibWNzSUdGdVpDQnpkR0Z5ZEZaaGJIVmxJR1p5YjIwZ2RHaGxJSEJ5YjNCbGNuUjVKM01nWkdGMFlTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsUkdGMFlTQTlJSEJoY25ObFVISnZjR1Z5ZEhsV1lXeDFaU2h3Y205d1pYSjBhV1Z6VFdGd1czQnliM0JsY25SNVhTa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlNBOUlIWmhiSFZsUkdGMFlWc3dYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVmhjMmx1WnlBOUlIWmhiSFZsUkdGMFlWc3hYU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowVm1Gc2RXVWdQU0IyWVd4MVpVUmhkR0ZiTWwwN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05M0lIUm9ZWFFnZEdobElHOXlhV2RwYm1Gc0lIQnliM0JsY25SNUlHNWhiV1VuY3lCbWIzSnRZWFFnYUdGeklHSmxaVzRnZFhObFpDQm1iM0lnZEdobElIQmhjbk5sVUhKdmNHVnlkSGxXWVd4MVpTZ3BJR3h2YjJ0MWNDQmhZbTkyWlN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlVnWm05eVkyVWdkR2hsSUhCeWIzQmxjblI1SUhSdklHbDBjeUJqWVcxbGJFTmhjMlVnYzNSNWJHbHVaeUIwYnlCdWIzSnRZV3hwZW1VZ2FYUWdabTl5SUcxaGJtbHdkV3hoZEdsdmJpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkSGtnUFNCRFUxTXVUbUZ0WlhNdVkyRnRaV3hEWVhObEtIQnliM0JsY25SNUtUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCSmJpQmpZWE5sSUhSb2FYTWdjSEp2Y0dWeWRIa2dhWE1nWVNCb2IyOXJMQ0IwYUdWeVpTQmhjbVVnWTJseVkzVnRjM1JoYm1ObGN5QjNhR1Z5WlNCM1pTQjNhV3hzSUdsdWRHVnVaQ0IwYnlCM2IzSnJJRzl1SUhSb1pTQm9iMjlySjNNZ2NtOXZkQ0J3Y205d1pYSjBlU0JoYm1RZ2JtOTBJSFJvWlNCb2IyOXJaV1FnYzNWaWNISnZjR1Z5ZEhrdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeWIyOTBVSEp2Y0dWeWRIa2dQU0JEVTFNdVNHOXZhM011WjJWMFVtOXZkQ2h3Y205d1pYSjBlU2tzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTQTlJR1poYkhObE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU5MGFHVnlJSFJvWVc0Z1ptOXlJSFJvWlNCa2RXMXRlU0IwZDJWbGJpQndjbTl3WlhKMGVTd2djSEp2Y0dWeWRHbGxjeUIwYUdGMElHRnlaU0J1YjNRZ2MzVndjRzl5ZEdWa0lHSjVJSFJvWlNCaWNtOTNjMlZ5SUNoaGJtUWdaRzhnYm05MElHaGhkbVVnWVc0Z1lYTnpiMk5wWVhSbFpDQnViM0p0WVd4cGVtRjBhVzl1S1NCM2FXeHNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWFHVnlaVzUwYkhrZ2NISnZaSFZqWlNCdWJ5QnpkSGxzWlNCamFHRnVaMlZ6SUhkb1pXNGdjMlYwTENCemJ5QjBhR1Y1SUdGeVpTQnphMmx3Y0dWa0lHbHVJRzl5WkdWeUlIUnZJR1JsWTNKbFlYTmxJR0Z1YVcxaGRHbHZiaUIwYVdOcklHOTJaWEpvWldGa0xseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JRY205d1pYSjBlU0J6ZFhCd2IzSjBJR2x6SUdSbGRHVnliV2x1WldRZ2RtbGhJSEJ5WldacGVFTm9aV05yS0Nrc0lIZG9hV05vSUhKbGRIVnlibk1nWVNCbVlXeHpaU0JtYkdGbklIZG9aVzRnYm04Z2MzVndjRzl5ZEdWa0lHbHpJR1JsZEdWamRHVmtMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQk9iM1JsT2lCVGFXNWpaU0JUVmtjZ1pXeGxiV1Z1ZEhNZ2FHRjJaU0J6YjIxbElHOW1JSFJvWldseUlIQnliM0JsY25ScFpYTWdaR2x5WldOMGJIa2dZWEJ3YkdsbFpDQmhjeUJJVkUxTUlHRjBkSEpwWW5WMFpYTXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1pYSmxJR2x6SUc1dklIZGhlU0IwYnlCamFHVmpheUJtYjNJZ2RHaGxhWElnWlhod2JHbGphWFFnWW5KdmQzTmxjaUJ6ZFhCd2IzSjBMQ0JoYm1RZ2MyOGdkMlVnYzJ0cGNDQnphMmx3SUhSb2FYTWdZMmhsWTJzZ1ptOXlJSFJvWlcwdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFJHRjBZU2hsYkdWdFpXNTBLUzVwYzFOV1J5QW1KaUJ5YjI5MFVISnZjR1Z5ZEhrZ0lUMDlJRndpZEhkbFpXNWNJaUFtSmlCRFUxTXVUbUZ0WlhNdWNISmxabWw0UTJobFkyc29jbTl2ZEZCeWIzQmxjblI1S1ZzeFhTQTlQVDBnWm1Gc2MyVWdKaVlnUTFOVExrNXZjbTFoYkdsNllYUnBiMjV6TG5KbFoybHpkR1Z5WldSYmNtOXZkRkJ5YjNCbGNuUjVYU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9WbVZzYjJOcGRIa3VaR1ZpZFdjcElHTnZibk52YkdVdWJHOW5LRndpVTJ0cGNIQnBibWNnVzF3aUlDc2djbTl2ZEZCeWIzQmxjblI1SUNzZ1hDSmRJR1IxWlNCMGJ5QmhJR3hoWTJzZ2IyWWdZbkp2ZDNObGNpQnpkWEJ3YjNKMExsd2lLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUIwYUdVZ1pHbHpjR3hoZVNCdmNIUnBiMjRnYVhNZ1ltVnBibWNnYzJWMElIUnZJR0VnYm05dUxWd2libTl1WlZ3aUlDaGxMbWN1SUZ3aVlteHZZMnRjSWlrZ1lXNWtJRzl3WVdOcGRIa2dLR1pwYkhSbGNpQnZiaUJKUlR3OU9Da2dhWE1nWW1WcGJtZGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVc1cGJXRjBaV1FnZEc4Z1lXNGdaVzVrVm1Gc2RXVWdiMllnYm05dUxYcGxjbThzSUhSb1pTQjFjMlZ5SjNNZ2FXNTBaVzUwYVc5dUlHbHpJSFJ2SUdaaFpHVWdhVzRnWm5KdmJTQnBiblpwYzJsaWJHVXNJSFJvZFhNZ2QyVWdabTl5WTJWbVpXVmtJRzl3WVdOcGRIbGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVNCemRHRnlkRlpoYkhWbElHOW1JREFnYVdZZ2FYUnpJSE4wWVhKMFZtRnNkV1VnYUdGemJpZDBJR0ZzY21WaFpIa2dZbVZsYmlCemIzVnlZMlZrSUdKNUlIWmhiSFZsSUhSeVlXNXpabVZ5Y21sdVp5QnZjaUJ3Y21sdmNpQm1iM0pqWldabFpXUnBibWN1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvS0c5d2RITXVaR2x6Y0d4aGVTQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHOXdkSE11WkdsemNHeGhlU0FoUFQwZ2JuVnNiQ0FtSmlCdmNIUnpMbVJwYzNCc1lYa2dJVDA5SUZ3aWJtOXVaVndpS1NCOGZDQW9iM0IwY3k1MmFYTnBZbWxzYVhSNUlDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IzQjBjeTUyYVhOcFltbHNhWFI1SUNFOVBTQmNJbWhwWkdSbGJsd2lLU2tnSmlZZ0wyOXdZV05wZEhsOFptbHNkR1Z5THk1MFpYTjBLSEJ5YjNCbGNuUjVLU0FtSmlBaGMzUmhjblJXWVd4MVpTQW1KaUJsYm1SV1lXeDFaU0FoUFQwZ01Da2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblJXWVd4MVpTQTlJREE3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKWmlCMllXeDFaWE1nYUdGMlpTQmlaV1Z1SUhSeVlXNXpabVZ5Y21Wa0lHWnliMjBnZEdobElIQnlaWFpwYjNWeklGWmxiRzlqYVhSNUlHTmhiR3dzSUdWNGRISmhZM1FnZEdobElHVnVaRlpoYkhWbElHRnVaQ0J5YjI5MFVISnZjR1Z5ZEhsV1lXeDFaVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdZV3hzSUc5bUlIUm9aU0JqZFhKeVpXNTBJR05oYkd3bmN5QndjbTl3WlhKMGFXVnpJSFJvWVhRZ2QyVnlaU0FxWVd4emJ5b2dZVzVwYldGMFpXUWdhVzRnZEdobElIQnlaWFpwYjNWeklHTmhiR3d1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTV2ZEdVNklGWmhiSFZsSUhSeVlXNXpabVZ5Y21sdVp5QmpZVzRnYjNCMGFXOXVZV3hzZVNCaVpTQmthWE5oWW14bFpDQmllU0IwYUdVZ2RYTmxjaUIyYVdFZ2RHaGxJRjlqWVdOb1pWWmhiSFZsY3lCdmNIUnBiMjR1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hSekxsOWpZV05vWlZaaGJIVmxjeUFtSmlCc1lYTjBWSGRsWlc1elEyOXVkR0ZwYm1WeUlDWW1JR3hoYzNSVWQyVmxibk5EYjI1MFlXbHVaWEpiY0hKdmNHVnlkSGxkS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzUmhjblJXWVd4MVpTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblJXWVd4MVpTQTlJR3hoYzNSVWQyVmxibk5EYjI1MFlXbHVaWEpiY0hKdmNHVnlkSGxkTG1WdVpGWmhiSFZsSUNzZ2JHRnpkRlIzWldWdWMwTnZiblJoYVc1bGNsdHdjbTl3WlhKMGVWMHVkVzVwZEZSNWNHVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGUm9aU0J3Y21WMmFXOTFjeUJqWVd4c0ozTWdjbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVWdhWE1nWlhoMGNtRmpkR1ZrSUdaeWIyMGdkR2hsSUdWc1pXMWxiblFuY3lCa1lYUmhJR05oWTJobElITnBibU5sSUhSb1lYUW5jeUIwYUdWY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWMzUmhibU5sSUc5bUlISnZiM1JRY205d1pYSjBlVlpoYkhWbElIUm9ZWFFnWjJWMGN5Qm1jbVZ6YUd4NUlIVndaR0YwWldRZ1lua2dkR2hsSUhSM1pXVnVhVzVuSUhCeWIyTmxjM01zSUhkb1pYSmxZWE1nZEdobElISnZiM1JRY205d1pYSjBlVlpoYkhWbFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUmhZMmhsWkNCMGJ5QjBhR1VnYVc1amIyMXBibWNnYkdGemRGUjNaV1Z1YzBOdmJuUmhhVzVsY2lCcGN5QmxjWFZoYkNCMGJ5QjBhR1VnY205dmRDQndjbTl3WlhKMGVTZHpJSFpoYkhWbElIQnlhVzl5SUhSdklHRnVlU0IwZDJWbGJtbHVaeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxJRDBnUkdGMFlTaGxiR1Z0Wlc1MEtTNXliMjkwVUhKdmNHVnlkSGxXWVd4MVpVTmhZMmhsVzNKdmIzUlFjbTl3WlhKMGVWMDdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsbUlIWmhiSFZsY3lCM1pYSmxJRzV2ZENCMGNtRnVjMlpsY25KbFpDQm1jbTl0SUdFZ2NISmxkbWx2ZFhNZ1ZtVnNiMk5wZEhrZ1kyRnNiQ3dnY1hWbGNua2dkR2hsSUVSUFRTQmhjeUJ1WldWa1pXUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJJWVc1a2JHVWdhRzl2YTJWa0lIQnliM0JsY25ScFpYTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUTFOVExraHZiMnR6TG5KbFoybHpkR1Z5WldSYmNISnZjR1Z5ZEhsZEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzNSaGNuUldZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiM1JRY205d1pYSjBlVlpoYkhWbElEMGdRMU5UTG1kbGRGQnliM0JsY25SNVZtRnNkV1VvWld4bGJXVnVkQ3dnY205dmRGQnliM0JsY25SNUtUc2dMeW9nUjBWVUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFNXZkR1U2SUZSb1pTQm1iMnhzYjNkcGJtY2daMlYwVUhKdmNHVnlkSGxXWVd4MVpTZ3BJR05oYkd3Z1pHOWxjeUJ1YjNRZ1lXTjBkV0ZzYkhrZ2RISnBaMmRsY2lCaElFUlBUU0J4ZFdWeWVUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyVjBVSEp2Y0dWeWRIbFdZV3gxWlNncElIZHBiR3dnWlhoMGNtRmpkQ0IwYUdVZ2FHOXZheUJtY205dElISnZiM1JRY205d1pYSjBlVlpoYkhWbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbElEMGdRMU5UTG1kbGRGQnliM0JsY25SNVZtRnNkV1VvWld4bGJXVnVkQ3dnY0hKdmNHVnlkSGtzSUhKdmIzUlFjbTl3WlhKMGVWWmhiSFZsS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUJ6ZEdGeWRGWmhiSFZsSUdseklHRnNjbVZoWkhrZ1pHVm1hVzVsWkNCMmFXRWdabTl5WTJWbVpXVmthVzVuTENCa2J5QnViM1FnY1hWbGNua2dkR2hsSUVSUFRTQm1iM0lnZEdobElISnZiM1FnY0hKdmNHVnlkSGtuY3lCMllXeDFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcWRYTjBJR2R5WVdJZ2NtOXZkRkJ5YjNCbGNuUjVKM01nZW1WeWJ5MTJZV3gxWlNCMFpXMXdiR0YwWlNCbWNtOXRJRU5UVXk1SWIyOXJjeTRnVkdocGN5QnZkbVZ5ZDNKcGRHVnpJSFJvWlNCbGJHVnRaVzUwSjNNZ1lXTjBkV0ZzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOXZkQ0J3Y205d1pYSjBlU0IyWVd4MVpTQW9hV1lnYjI1bElHbHpJSE5sZENrc0lHSjFkQ0IwYUdseklHbHpJR0ZqWTJWd2RHRmliR1VnYzJsdVkyVWdkR2hsSUhCeWFXMWhjbmtnY21WaGMyOXVJSFZ6WlhKeklHWnZjbU5sWm1WbFpDQnBjMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdklHRjJiMmxrSUVSUFRTQnhkV1Z5YVdWekxDQmhibVFnZEdoMWN5QjNaU0JzYVd0bGQybHpaU0JoZG05cFpDQnhkV1Z5ZVdsdVp5QjBhR1VnUkU5TklHWnZjaUIwYUdVZ2NtOXZkQ0J3Y205d1pYSjBlU2R6SUhaaGJIVmxMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWR5WVdJZ2RHaHBjeUJvYjI5ckozTWdlbVZ5YnkxMllXeDFaU0IwWlcxd2JHRjBaU3dnWlM1bkxpQmNJakJ3ZUNBd2NIZ2dNSEI0SUdKc1lXTnJYQ0l1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxJRDBnUTFOVExraHZiMnR6TG5SbGJYQnNZWFJsYzF0eWIyOTBVSEp2Y0dWeWRIbGRXekZkTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVoaGJtUnNaU0J1YjI0dGFHOXZhMlZrSUhCeWIzQmxjblJwWlhNZ2RHaGhkQ0JvWVhabGJpZDBJR0ZzY21WaFpIa2dZbVZsYmlCa1pXWnBibVZrSUhacFlTQm1iM0pqWldabFpXUnBibWN1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMFlYSjBWbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBWbUZzZFdVZ1BTQkRVMU11WjJWMFVISnZjR1Z5ZEhsV1lXeDFaU2hsYkdWdFpXNTBMQ0J3Y205d1pYSjBlU2s3SUM4cUlFZEZWQ0FxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlpoYkhWbElFUmhkR0VnUlhoMGNtRmpkR2x2Ymx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJWd1lYSmhkR1ZrVm1Gc2RXVXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlZWdWFYUlVlWEJsTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25SV1lXeDFaVlZ1YVhSVWVYQmxMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQmxjbUYwYjNJZ1BTQm1ZV3h6WlR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJUWlhCaGNtRjBaWE1nWVNCd2NtOXdaWEowZVNCMllXeDFaU0JwYm5SdklHbDBjeUJ1ZFcxbGNtbGpJSFpoYkhWbElHRnVaQ0JwZEhNZ2RXNXBkQ0IwZVhCbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ6WlhCaGNtRjBaVlpoYkhWbElDaHdjbTl3WlhKMGVTd2dkbUZzZFdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjFibWwwVkhsd1pTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVkVzFsY21salZtRnNkV1U3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYldWeWFXTldZV3gxWlNBOUlDaDJZV3gxWlNCOGZDQmNJakJjSWlsY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWRHOVRkSEpwYm1jb0tWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTBiMHh2ZDJWeVEyRnpaU2dwWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RXRjBZMmdnZEdobElIVnVhWFFnZEhsd1pTQmhkQ0IwYUdVZ1pXNWtJRzltSUhSb1pTQjJZV3gxWlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZXeVZCTFhwZEt5UXZMQ0JtZFc1amRHbHZiaWh0WVhSamFDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkhjbUZpSUhSb1pTQjFibWwwSUhSNWNHVXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnVhWFJVZVhCbElEMGdiV0YwWTJnN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1UzUnlhWEFnZEdobElIVnVhWFFnZEhsd1pTQnZabVlnYjJZZ2RtRnNkV1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmNJbHdpTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUJ1YnlCMWJtbDBJSFI1Y0dVZ2QyRnpJSE4xY0hCc2FXVmtMQ0JoYzNOcFoyNGdiMjVsSUhSb1lYUWdhWE1nWVhCd2NtOXdjbWxoZEdVZ1ptOXlJSFJvYVhNZ2NISnZjR1Z5ZEhrZ0tHVXVaeTRnWENKa1pXZGNJaUJtYjNJZ2NtOTBZWFJsV2lCdmNpQmNJbkI0WENJZ1ptOXlJSGRwWkhSb0tTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZFc1cGRGUjVjR1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtbDBWSGx3WlNBOUlFTlRVeTVXWVd4MVpYTXVaMlYwVlc1cGRGUjVjR1VvY0hKdmNHVnlkSGtwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1d5QnVkVzFsY21salZtRnNkV1VzSUhWdWFYUlVlWEJsSUYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVFpYQmhjbUYwWlNCemRHRnlkRlpoYkhWbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhCaGNtRjBaV1JXWVd4MVpTQTlJSE5sY0dGeVlYUmxWbUZzZFdVb2NISnZjR1Z5ZEhrc0lITjBZWEowVm1Gc2RXVXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWRGWmhiSFZsSUQwZ2MyVndZWEpoZEdWa1ZtRnNkV1ZiTUYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowVm1Gc2RXVlZibWwwVkhsd1pTQTlJSE5sY0dGeVlYUmxaRlpoYkhWbFd6RmRPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGTmxjR0Z5WVhSbElHVnVaRlpoYkhWbExDQmhibVFnWlhoMGNtRmpkQ0JoSUhaaGJIVmxJRzl3WlhKaGRHOXlJQ2hsTG1jdUlGd2lLejFjSWl3Z1hDSXRQVndpS1NCcFppQnZibVVnWlhocGMzUnpMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYQmhjbUYwWldSV1lXeDFaU0E5SUhObGNHRnlZWFJsVm1Gc2RXVW9jSEp2Y0dWeWRIa3NJR1Z1WkZaaGJIVmxLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1VnUFNCelpYQmhjbUYwWldSV1lXeDFaVnN3WFM1eVpYQnNZV05sS0M5ZUtGc3JMVnhjTHlwZEtUMHZMQ0JtZFc1amRHbHZiaWh0WVhSamFDd2djM1ZpVFdGMFkyZ3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdaWEpoZEc5eUlEMGdjM1ZpVFdGMFkyZzdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRk4wY21sd0lIUm9aU0J2Y0dWeVlYUnZjaUJ2Wm1ZZ2IyWWdkR2hsSUhaaGJIVmxMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGd2lYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibVJXWVd4MVpWVnVhWFJVZVhCbElEMGdjMlZ3WVhKaGRHVmtWbUZzZFdWYk1WMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1VHRnljMlVnWm14dllYUWdkbUZzZFdWeklHWnliMjBnWlc1a1ZtRnNkV1VnWVc1a0lITjBZWEowVm1Gc2RXVXVJRVJsWm1GMWJIUWdkRzhnTUNCcFppQk9ZVTRnYVhNZ2NtVjBkWEp1WldRdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhKMFZtRnNkV1VnUFNCd1lYSnpaVVpzYjJGMEtITjBZWEowVm1Gc2RXVXBJSHg4SURBN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVaRlpoYkhWbElEMGdjR0Z5YzJWR2JHOWhkQ2hsYm1SV1lXeDFaU2tnZkh3Z01EdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkJ5YjNCbGNuUjVMVk53WldOcFptbGpJRlpoYkhWbElFTnZiblpsY25OcGIyNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRU4xYzNSdmJTQnpkWEJ3YjNKMElHWnZjaUJ3Y205d1pYSjBhV1Z6SUhSb1lYUWdaRzl1SjNRZ1lXTjBkV0ZzYkhrZ1lXTmpaWEIwSUhSb1pTQWxJSFZ1YVhRZ2RIbHdaU3dnWW5WMElIZG9aWEpsSUhCdmJHeDVabWxzYkdsdVp5QnBjeUIwY21sMmFXRnNJR0Z1WkNCeVpXeGhkR2wyWld4NUlHWnZiMnh3Y205dlppNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnVaRlpoYkhWbFZXNXBkRlI1Y0dVZ1BUMDlJRndpSlZ3aUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkJJQ1V0ZG1Gc2RXVWdabTl1ZEZOcGVtVXZiR2x1WlVobGFXZG9kQ0JwY3lCeVpXeGhkR2wyWlNCMGJ5QjBhR1VnY0dGeVpXNTBKM01nWm05dWRGTnBlbVVnS0dGeklHOXdjRzl6WldRZ2RHOGdkR2hsSUhCaGNtVnVkQ2R6SUdScGJXVnVjMmx2Ym5NcExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyaHBZMmdnYVhNZ2FXUmxiblJwWTJGc0lIUnZJSFJvWlNCbGJTQjFibWwwSjNNZ1ltVm9ZWFpwYjNJc0lITnZJSGRsSUhCcFoyZDVZbUZqYXlCdlptWWdiMllnZEdoaGRDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2d2WGlobWIyNTBVMmw2Wlh4c2FXNWxTR1ZwWjJoMEtTUXZMblJsYzNRb2NISnZjR1Z5ZEhrcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUTI5dWRtVnlkQ0FsSUdsdWRHOGdZVzRnWlcwZ1pHVmphVzFoYkNCMllXeDFaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlNBOUlHVnVaRlpoYkhWbElDOGdNVEF3TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVpGWmhiSFZsVlc1cGRGUjVjR1VnUFNCY0ltVnRYQ0k3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJHYjNJZ2MyTmhiR1ZZSUdGdVpDQnpZMkZzWlZrc0lHTnZiblpsY25RZ2RHaGxJSFpoYkhWbElHbHVkRzhnYVhSeklHUmxZMmx0WVd3Z1ptOXliV0YwSUdGdVpDQnpkSEpwY0NCdlptWWdkR2hsSUhWdWFYUWdkSGx3WlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0wxNXpZMkZzWlM4dWRHVnpkQ2h3Y205d1pYSjBlU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlNBOUlHVnVaRlpoYkhWbElDOGdNVEF3TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVpGWmhiSFZsVlc1cGRGUjVjR1VnUFNCY0lsd2lPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dSbTl5SUZKSFFpQmpiMjF3YjI1bGJuUnpMQ0IwWVd0bElIUm9aU0JrWldacGJtVmtJSEJsY21ObGJuUmhaMlVnYjJZZ01qVTFJR0Z1WkNCemRISnBjQ0J2Wm1ZZ2RHaGxJSFZ1YVhRZ2RIbHdaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvTHloU1pXUjhSM0psWlc1OFFteDFaU2trTDJrdWRHVnpkQ2h3Y205d1pYSjBlU2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlNBOUlDaGxibVJXWVd4MVpTQXZJREV3TUNrZ0tpQXlOVFU3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1ZWYm1sMFZIbHdaU0E5SUZ3aVhDSTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGVnVhWFFnVW1GMGFXOGdRMkZzWTNWc1lYUnBiMjVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRmRvWlc0Z2NYVmxjbWxsWkN3Z2RHaGxJR0p5YjNkelpYSWdjbVYwZFhKdWN5QW9iVzl6ZENrZ1ExTlRJSEJ5YjNCbGNuUjVJSFpoYkhWbGN5QnBiaUJ3YVhobGJITXVJRlJvWlhKbFptOXlaU3dnYVdZZ1lXNGdaVzVrVm1Gc2RXVWdkMmwwYUNCaElIVnVhWFFnZEhsd1pTQnZabHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbExDQmxiU3dnYjNJZ2NtVnRJR2x6SUdGdWFXMWhkR1ZrSUhSdmQyRnlaQ3dnYzNSaGNuUldZV3gxWlNCdGRYTjBJR0psSUdOdmJuWmxjblJsWkNCbWNtOXRJSEJwZUdWc2N5QnBiblJ2SUhSb1pTQnpZVzFsSUhWdWFYUWdkSGx3WlNCaGN5QmxibVJXWVd4MVpTQnBiaUJ2Y21SbGNseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ2RtRnNkV1VnYldGdWFYQjFiR0YwYVc5dUlHeHZaMmxqSUNocGJtTnlaVzFsYm5RdlpHVmpjbVZ0Wlc1MEtTQjBieUJ3Y205alpXVmtMaUJHZFhKMGFHVnlMQ0JwWmlCMGFHVWdjM1JoY25SV1lXeDFaU0IzWVhNZ1ptOXlZMlZtWldRZ2IzSWdkSEpoYm5ObVpYSnlaV1JjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiU0JoSUhCeVpYWnBiM1Z6SUdOaGJHd3NJSE4wWVhKMFZtRnNkV1VnYldGNUlHRnNjMjhnYm05MElHSmxJR2x1SUhCcGVHVnNjeTRnVlc1cGRDQmpiMjUyWlhKemFXOXVJR3h2WjJsaklIUm9aWEpsWm05eVpTQmpiMjV6YVhOMGN5QnZaaUIwZDI4Z2MzUmxjSE02WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lERXBJRU5oYkdOMWJHRjBhVzVuSUhSb1pTQnlZWFJwYnlCdlppQWxMMlZ0TDNKbGJTOTJhQzkyZHlCeVpXeGhkR2wyWlNCMGJ5QndhWGhsYkhOY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNaWtnUTI5dWRtVnlkR2x1WnlCemRHRnlkRlpoYkhWbElHbHVkRzhnZEdobElITmhiV1VnZFc1cGRDQnZaaUJ0WldGemRYSmxiV1Z1ZENCaGN5QmxibVJXWVd4MVpTQmlZWE5sWkNCdmJpQjBhR1Z6WlNCeVlYUnBiM011SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRlZ1YVhRZ1kyOXVkbVZ5YzJsdmJpQnlZWFJwYjNNZ1lYSmxJR05oYkdOMWJHRjBaV1FnWW5rZ2FXNXpaWEowYVc1bklHRWdjMmxpYkdsdVp5QnViMlJsSUc1bGVIUWdkRzhnZEdobElIUmhjbWRsZENCdWIyUmxMQ0JqYjNCNWFXNW5JRzkyWlhJZ2FYUnpJSEJ2YzJsMGFXOXVJSEJ5YjNCbGNuUjVMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuSUhaaGJIVmxjeUIzYVhSb0lIUm9aU0IwWVhKblpYUWdkVzVwZENCMGVYQmxJSFJvWlc0Z1kyOXRjR0Z5YVc1bklIUm9aU0J5WlhSMWNtNWxaQ0J3YVhobGJDQjJZV3gxWlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dSWFpsYmlCcFppQnZibXg1SUc5dVpTQnZaaUIwYUdWelpTQjFibWwwSUhSNWNHVnpJR2x6SUdKbGFXNW5JR0Z1YVcxaGRHVmtMQ0JoYkd3Z2RXNXBkQ0J5WVhScGIzTWdZWEpsSUdOaGJHTjFiR0YwWldRZ1lYUWdiMjVqWlNCemFXNWpaU0IwYUdVZ2IzWmxjbWhsWVdSY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMllnWW1GMFkyaHBibWNnZEdobElGTkZWSE1nWVc1a0lFZEZWSE1nZEc5blpYUm9aWElnZFhCbWNtOXVkQ0J2ZFhSM1pXbG5hSFJ6SUhSb1pTQndiM1JsYm5ScFlXd2diM1psY21obFlXUmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJZZ2JHRjViM1YwSUhSb2NtRnphR2x1WnlCallYVnpaV1FnWW5rZ2NtVXRjWFZsY25scGJtY2dabTl5SUhWdVkyRnNZM1ZzWVhSbFpDQnlZWFJwYjNNZ1ptOXlJSE4xWW5ObGNYVmxiblJzZVMxd2NtOWpaWE56WldRZ2NISnZjR1Z5ZEdsbGN5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1ZHOWtiem9nVTJocFpuUWdkR2hwY3lCc2IyZHBZeUJwYm5SdklIUm9aU0JqWVd4c2N5Y2dabWx5YzNRZ2RHbGpheUJwYm5OMFlXNWpaU0J6YnlCMGFHRjBJR2wwSjNNZ2MzbHVZMlZrSUhkcGRHZ2dVa0ZHTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQmpZV3hqZFd4aGRHVlZibWwwVW1GMGFXOXpJQ2dwSUh0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRk5oYldVZ1VtRjBhVzhnUTJobFkydHpYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZSb1pTQndjbTl3WlhKMGFXVnpJR0psYkc5M0lHRnlaU0IxYzJWa0lIUnZJR1JsZEdWeWJXbHVaU0IzYUdWMGFHVnlJSFJvWlNCbGJHVnRaVzUwSUdScFptWmxjbk1nYzNWbVptbGphV1Z1ZEd4NUlHWnliMjBnZEdocGN5QmpZV3hzSjNOY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYWnBiM1Z6YkhrZ2FYUmxjbUYwWldRZ1pXeGxiV1Z1ZENCMGJ5QmhiSE52SUdScFptWmxjaUJwYmlCcGRITWdkVzVwZENCamIyNTJaWEp6YVc5dUlISmhkR2x2Y3k0Z1NXWWdkR2hsSUhCeWIzQmxjblJwWlhNZ2JXRjBZMmdnZFhBZ2QybDBhQ0IwYUc5elpWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyWWdkR2hsSUhCeWFXOXlJR1ZzWlcxbGJuUXNJSFJvWlNCd2NtbHZjaUJsYkdWdFpXNTBKM01nWTI5dWRtVnljMmx2YmlCeVlYUnBiM01nWVhKbElIVnpaV1F1SUV4cGEyVWdiVzl6ZENCdmNIUnBiV2w2WVhScGIyNXpJR2x1SUZabGJHOWphWFI1TEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5QnBjeUJrYjI1bElIUnZJRzFwYm1sdGFYcGxJRVJQVFNCeGRXVnllV2x1Wnk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpZVzFsVW1GMGFXOUpibVJwWTJGMGIzSnpJRDBnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRlVkJoY21WdWREb2daV3hsYldWdWRDNXdZWEpsYm5ST2IyUmxJSHg4SUdSdlkzVnRaVzUwTG1KdlpIa3NJQzhxSUVkRlZDQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmpvZ1ExTlRMbWRsZEZCeWIzQmxjblI1Vm1Gc2RXVW9aV3hsYldWdWRDd2dYQ0p3YjNOcGRHbHZibHdpS1N3Z0x5b2dSMFZVSUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Ym5SVGFYcGxPaUJEVTFNdVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCY0ltWnZiblJUYVhwbFhDSXBJQzhxSUVkRlZDQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1JHVjBaWEp0YVc1bElHbG1JSFJvWlNCellXMWxJQ1VnY21GMGFXOGdZMkZ1SUdKbElIVnpaV1F1SUNVZ2FYTWdZbUZ6WldRZ2IyNGdkR2hsSUdWc1pXMWxiblFuY3lCd2IzTnBkR2x2YmlCMllXeDFaU0JoYm1RZ2FYUnpJSEJoY21WdWRDZHpJSGRwWkhSb0lHRnVaQ0JvWldsbmFIUWdaR2x0Wlc1emFXOXVjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCellXMWxVR1Z5WTJWdWRGSmhkR2x2SUQwZ0tDaHpZVzFsVW1GMGFXOUpibVJwWTJGMGIzSnpMbkJ2YzJsMGFXOXVJRDA5UFNCallXeHNWVzVwZEVOdmJuWmxjbk5wYjI1RVlYUmhMbXhoYzNSUWIzTnBkR2x2YmlrZ0ppWWdLSE5oYldWU1lYUnBiMGx1WkdsallYUnZjbk11YlhsUVlYSmxiblFnUFQwOUlHTmhiR3hWYm1sMFEyOXVkbVZ5YzJsdmJrUmhkR0V1YkdGemRGQmhjbVZ1ZENrcExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVJsZEdWeWJXbHVaU0JwWmlCMGFHVWdjMkZ0WlNCbGJTQnlZWFJwYnlCallXNGdZbVVnZFhObFpDNGdaVzBnYVhNZ2NtVnNZWFJwZG1VZ2RHOGdkR2hsSUdWc1pXMWxiblFuY3lCbWIyNTBVMmw2WlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZVzFsUlcxU1lYUnBieUE5SUNoellXMWxVbUYwYVc5SmJtUnBZMkYwYjNKekxtWnZiblJUYVhwbElEMDlQU0JqWVd4c1ZXNXBkRU52Ym5abGNuTnBiMjVFWVhSaExteGhjM1JHYjI1MFUybDZaU2s3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZOMGIzSmxJSFJvWlhObElISmhkR2x2SUdsdVpHbGpZWFJ2Y25NZ1kyRnNiQzEzYVdSbElHWnZjaUIwYUdVZ2JtVjRkQ0JsYkdWdFpXNTBJSFJ2SUdOdmJYQmhjbVVnWVdkaGFXNXpkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYkd4VmJtbDBRMjl1ZG1WeWMybHZia1JoZEdFdWJHRnpkRkJoY21WdWRDQTlJSE5oYldWU1lYUnBiMGx1WkdsallYUnZjbk11YlhsUVlYSmxiblE3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZV3hzVlc1cGRFTnZiblpsY25OcGIyNUVZWFJoTG14aGMzUlFiM05wZEdsdmJpQTlJSE5oYldWU1lYUnBiMGx1WkdsallYUnZjbk11Y0c5emFYUnBiMjQ3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZV3hzVlc1cGRFTnZiblpsY25OcGIyNUVZWFJoTG14aGMzUkdiMjUwVTJsNlpTQTlJSE5oYldWU1lYUnBiMGx1WkdsallYUnZjbk11Wm05dWRGTnBlbVU3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVZzWlcxbGJuUXRVM0JsWTJsbWFXTWdWVzVwZEhOY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dTVVU0SUhKdmRXNWtjeUIwYnlCMGFHVWdibVZoY21WemRDQndhWGhsYkNCM2FHVnVJSEpsZEhWeWJtbHVaeUJEVTFNZ2RtRnNkV1Z6TENCMGFIVnpJSGRsSUhCbGNtWnZjbTBnWTI5dWRtVnljMmx2Ym5NZ2RYTnBibWNnWVNCdFpXRnpkWEpsYldWdWRGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyWWdNVEF3SUNocGJuTjBaV0ZrSUc5bUlERXBJSFJ2SUdkcGRtVWdiM1Z5SUhKaGRHbHZjeUJoSUhCeVpXTnBjMmx2YmlCdlppQmhkQ0JzWldGemRDQXlJR1JsWTJsdFlXd2dkbUZzZFdWekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzFsWVhOMWNtVnRaVzUwSUQwZ01UQXdMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1YVhSU1lYUnBiM01nUFNCN2ZUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z6WVcxbFJXMVNZWFJwYnlCOGZDQWhjMkZ0WlZCbGNtTmxiblJTWVhScGJ5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa2RXMXRlU0E5SUVSaGRHRW9aV3hsYldWdWRDa3VhWE5UVmtjZ1B5QmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwVGxNb1hDSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3TDNOMloxd2lMQ0JjSW5KbFkzUmNJaWtnT2lCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLRndpWkdsMlhDSXBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVm1Wc2IyTnBkSGt1YVc1cGRDaGtkVzF0ZVNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyRnRaVkpoZEdsdlNXNWthV05oZEc5eWN5NXRlVkJoY21WdWRDNWhjSEJsYm1SRGFHbHNaQ2hrZFcxdGVTazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWJ5QmhZMk4xY21GMFpXeDVJR0Z1WkNCamIyNXphWE4wWlc1MGJIa2dZMkZzWTNWc1lYUmxJR052Ym5abGNuTnBiMjRnY21GMGFXOXpMQ0IwYUdVZ1pXeGxiV1Z1ZENkeklHTmhjMk5oWkdWa0lHOTJaWEptYkc5M0lHRnVaQ0JpYjNndGMybDZhVzVuSUdGeVpTQnpkSEpwY0hCbFpDNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JUYVcxcGJHRnliSGtzSUhOcGJtTmxJSGRwWkhSb0wyaGxhV2RvZENCallXNGdZbVVnWVhKMGFXWnBZMmxoYkd4NUlHTnZibk4wY21GcGJtVmtJR0o1SUhSb1pXbHlJRzFwYmkwdmJXRjRMU0JsY1hWcGRtRnNaVzUwY3l3Z2RHaGxjMlVnWVhKbElHTnZiblJ5YjJ4c1pXUWdabTl5SUdGeklIZGxiR3d1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1QzWmxjbVpzYjNjZ2JYVnpkQ0JpWlNCaGJITnZJR0psSUdOdmJuUnliMnhzWldRZ1ptOXlJSEJsY2kxaGVHbHpJSE5wYm1ObElIUm9aU0J2ZG1WeVpteHZkeUJ3Y205d1pYSjBlU0J2ZG1WeWQzSnBkR1Z6SUdsMGN5QndaWEl0WVhocGN5QjJZV3gxWlhNdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQzVsWVdOb0tGc2dYQ0p2ZG1WeVpteHZkMXdpTENCY0ltOTJaWEptYkc5M1dGd2lMQ0JjSW05MlpYSm1iRzkzV1Z3aUlGMHNJR1oxYm1OMGFXOXVLR2tzSUhCeWIzQmxjblI1S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlpsYkc5amFYUjVMa05UVXk1elpYUlFjbTl3WlhKMGVWWmhiSFZsS0dSMWJXMTVMQ0J3Y205d1pYSjBlU3dnWENKb2FXUmtaVzVjSWlrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWbVZzYjJOcGRIa3VRMU5UTG5ObGRGQnliM0JsY25SNVZtRnNkV1VvWkhWdGJYa3NJRndpY0c5emFYUnBiMjVjSWl3Z2MyRnRaVkpoZEdsdlNXNWthV05oZEc5eWN5NXdiM05wZEdsdmJpazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWbVZzYjJOcGRIa3VRMU5UTG5ObGRGQnliM0JsY25SNVZtRnNkV1VvWkhWdGJYa3NJRndpWm05dWRGTnBlbVZjSWl3Z2MyRnRaVkpoZEdsdlNXNWthV05oZEc5eWN5NW1iMjUwVTJsNlpTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWbVZzYjJOcGRIa3VRMU5UTG5ObGRGQnliM0JsY25SNVZtRnNkV1VvWkhWdGJYa3NJRndpWW05NFUybDZhVzVuWENJc0lGd2lZMjl1ZEdWdWRDMWliM2hjSWlrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUIzYVdSMGFDQmhibVFnYUdWcFoyaDBJR0ZqZENCaGN5QnZkWElnY0hKdmVIa2djSEp2Y0dWeWRHbGxjeUJtYjNJZ2JXVmhjM1Z5YVc1bklIUm9aU0JvYjNKcGVtOXVkR0ZzSUdGdVpDQjJaWEowYVdOaGJDQWxJSEpoZEdsdmN5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrTG1WaFkyZ29XeUJjSW0xcGJsZHBaSFJvWENJc0lGd2liV0Y0VjJsa2RHaGNJaXdnWENKM2FXUjBhRndpTENCY0ltMXBia2hsYVdkb2RGd2lMQ0JjSW0xaGVFaGxhV2RvZEZ3aUxDQmNJbWhsYVdkb2RGd2lJRjBzSUdaMWJtTjBhVzl1S0drc0lIQnliM0JsY25SNUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZabGJHOWphWFI1TGtOVFV5NXpaWFJRY205d1pYSjBlVlpoYkhWbEtHUjFiVzE1TENCd2NtOXdaWEowZVN3Z2JXVmhjM1Z5WlcxbGJuUWdLeUJjSWlWY0lpazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ2NHRmtaR2x1WjB4bFpuUWdZWEppYVhSeVlYSnBiSGtnWVdOMGN5QmhjeUJ2ZFhJZ2NISnZlSGtnY0hKdmNHVnlkSGtnWm05eUlIUm9aU0JsYlNCeVlYUnBieTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCV1pXeHZZMmwwZVM1RFUxTXVjMlYwVUhKdmNHVnlkSGxXWVd4MVpTaGtkVzF0ZVN3Z1hDSndZV1JrYVc1blRHVm1kRndpTENCdFpXRnpkWEpsYldWdWRDQXJJRndpWlcxY0lpazdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRWFYWnBaR1VnZEdobElISmxkSFZ5Ym1Wa0lIWmhiSFZsSUdKNUlIUm9aU0J0WldGemRYSmxiV1Z1ZENCMGJ5Qm5aWFFnZEdobElISmhkR2x2SUdKbGRIZGxaVzRnTVNVZ1lXNWtJREZ3ZUM0Z1JHVm1ZWFZzZENCMGJ5QXhJSE5wYm1ObElIZHZjbXRwYm1jZ2QybDBhQ0F3SUdOaGJpQndjbTlrZFdObElFbHVabWx1YVhSbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1YVhSU1lYUnBiM011Y0dWeVkyVnVkRlJ2VUhoWGFXUjBhQ0E5SUdOaGJHeFZibWwwUTI5dWRtVnljMmx2YmtSaGRHRXViR0Z6ZEZCbGNtTmxiblJVYjFCNFYybGtkR2dnUFNBb2NHRnljMlZHYkc5aGRDaERVMU11WjJWMFVISnZjR1Z5ZEhsV1lXeDFaU2hrZFcxdGVTd2dYQ0ozYVdSMGFGd2lMQ0J1ZFd4c0xDQjBjblZsS1NrZ2ZId2dNU2tnTHlCdFpXRnpkWEpsYldWdWREc2dMeW9nUjBWVUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkVzVwZEZKaGRHbHZjeTV3WlhKalpXNTBWRzlRZUVobGFXZG9kQ0E5SUdOaGJHeFZibWwwUTI5dWRtVnljMmx2YmtSaGRHRXViR0Z6ZEZCbGNtTmxiblJVYjFCNFNHVnBaMmgwSUQwZ0tIQmhjbk5sUm14dllYUW9RMU5UTG1kbGRGQnliM0JsY25SNVZtRnNkV1VvWkhWdGJYa3NJRndpYUdWcFoyaDBYQ0lzSUc1MWJHd3NJSFJ5ZFdVcEtTQjhmQ0F4S1NBdklHMWxZWE4xY21WdFpXNTBPeUF2S2lCSFJWUWdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYm1sMFVtRjBhVzl6TG1WdFZHOVFlQ0E5SUdOaGJHeFZibWwwUTI5dWRtVnljMmx2YmtSaGRHRXViR0Z6ZEVWdFZHOVFlQ0E5SUNod1lYSnpaVVpzYjJGMEtFTlRVeTVuWlhSUWNtOXdaWEowZVZaaGJIVmxLR1IxYlcxNUxDQmNJbkJoWkdScGJtZE1aV1owWENJcEtTQjhmQ0F4S1NBdklHMWxZWE4xY21WdFpXNTBPeUF2S2lCSFJWUWdLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOaGJXVlNZWFJwYjBsdVpHbGpZWFJ2Y25NdWJYbFFZWEpsYm5RdWNtVnRiM1psUTJocGJHUW9aSFZ0YlhrcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYm1sMFVtRjBhVzl6TG1WdFZHOVFlQ0E5SUdOaGJHeFZibWwwUTI5dWRtVnljMmx2YmtSaGRHRXViR0Z6ZEVWdFZHOVFlRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYm1sMFVtRjBhVzl6TG5CbGNtTmxiblJVYjFCNFYybGtkR2dnUFNCallXeHNWVzVwZEVOdmJuWmxjbk5wYjI1RVlYUmhMbXhoYzNSUVpYSmpaVzUwVkc5UWVGZHBaSFJvTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWdWFYUlNZWFJwYjNNdWNHVnlZMlZ1ZEZSdlVIaElaV2xuYUhRZ1BTQmpZV3hzVlc1cGRFTnZiblpsY25OcGIyNUVZWFJoTG14aGMzUlFaWEpqWlc1MFZHOVFlRWhsYVdkb2REdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUld4bGJXVnVkQzFCWjI1dmMzUnBZeUJWYm1sMGMxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCWGFHVnlaV0Z6SUNVZ1lXNWtJR1Z0SUhKaGRHbHZjeUJoY21VZ1pHVjBaWEp0YVc1bFpDQnZiaUJoSUhCbGNpMWxiR1Z0Wlc1MElHSmhjMmx6TENCMGFHVWdjbVZ0SUhWdWFYUWdiMjVzZVNCdVpXVmtjeUIwYnlCaVpTQmphR1ZqYTJWa1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJtTmxJSEJsY2lCallXeHNJSE5wYm1ObElHbDBKM01nWlhoamJIVnphWFpsYkhrZ1pHVndaVzVrWVc1MElIVndiMjRnWkc5amRXMWxiblF1WW05a2VTZHpJR1p2Ym5SVGFYcGxMaUJKWmlCMGFHbHpJR2x6SUhSb1pTQm1hWEp6ZENCMGFXMWxYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR0YwSUdOaGJHTjFiR0YwWlZWdWFYUlNZWFJwYjNNb0tTQnBjeUJpWldsdVp5QnlkVzRnWkhWeWFXNW5JSFJvYVhNZ1kyRnNiQ3dnY21WdFZHOVFlQ0IzYVd4c0lITjBhV3hzSUdKbElITmxkQ0IwYnlCcGRITWdaR1ZtWVhWc2RDQjJZV3gxWlNCdlppQnVkV3hzTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI4Z2QyVWdZMkZzWTNWc1lYUmxJR2wwSUc1dmR5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVd4c1ZXNXBkRU52Ym5abGNuTnBiMjVFWVhSaExuSmxiVlJ2VUhnZ1BUMDlJRzUxYkd3cElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJFWldaaGRXeDBJSFJ2SUdKeWIzZHpaWEp6SnlCa1pXWmhkV3gwSUdadmJuUlRhWHBsSUc5bUlERTJjSGdnYVc0Z2RHaGxJR05oYzJVZ2IyWWdNQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallXeHNWVzVwZEVOdmJuWmxjbk5wYjI1RVlYUmhMbkpsYlZSdlVIZ2dQU0J3WVhKelpVWnNiMkYwS0VOVFV5NW5aWFJRY205d1pYSjBlVlpoYkhWbEtHUnZZM1Z0Wlc1MExtSnZaSGtzSUZ3aVptOXVkRk5wZW1WY0lpa3BJSHg4SURFMk95QXZLaUJIUlZRZ0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1UybHRhV3hoY214NUxDQjJhV1YzY0c5eWRDQjFibWwwY3lCaGNtVWdKUzF5Wld4aGRHbDJaU0IwYnlCMGFHVWdkMmx1Wkc5M0ozTWdhVzV1WlhJZ1pHbHRaVzV6YVc5dWN5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVd4c1ZXNXBkRU52Ym5abGNuTnBiMjVFWVhSaExuWjNWRzlRZUNBOVBUMGdiblZzYkNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hWYm1sMFEyOXVkbVZ5YzJsdmJrUmhkR0V1ZG5kVWIxQjRJRDBnY0dGeWMyVkdiRzloZENoM2FXNWtiM2N1YVc1dVpYSlhhV1IwYUNrZ0x5QXhNREE3SUM4cUlFZEZWQ0FxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJHeFZibWwwUTI5dWRtVnljMmx2YmtSaGRHRXVkbWhVYjFCNElEMGdjR0Z5YzJWR2JHOWhkQ2gzYVc1a2IzY3VhVzV1WlhKSVpXbG5hSFFwSUM4Z01UQXdPeUF2S2lCSFJWUWdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RXNXBkRkpoZEdsdmN5NXlaVzFVYjFCNElEMGdZMkZzYkZWdWFYUkRiMjUyWlhKemFXOXVSR0YwWVM1eVpXMVViMUI0TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkVzVwZEZKaGRHbHZjeTUyZDFSdlVIZ2dQU0JqWVd4c1ZXNXBkRU52Ym5abGNuTnBiMjVFWVhSaExuWjNWRzlRZUR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ1YVhSU1lYUnBiM011ZG1oVWIxQjRJRDBnWTJGc2JGVnVhWFJEYjI1MlpYSnphVzl1UkdGMFlTNTJhRlJ2VUhnN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaFdaV3h2WTJsMGVTNWtaV0oxWnlBK1BTQXhLU0JqYjI1emIyeGxMbXh2WnloY0lsVnVhWFFnY21GMGFXOXpPaUJjSWlBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0hWdWFYUlNZWFJwYjNNcExDQmxiR1Z0Wlc1MEtUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdWFYUlNZWFJwYjNNN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWVzVwZENCRGIyNTJaWEp6YVc5dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlGUm9aU0FxSUdGdVpDQXZJRzl3WlhKaGRHOXljeXdnZDJocFkyZ2dZWEpsSUc1dmRDQndZWE56WldRZ2FXNGdkMmwwYUNCaGJpQmhjM052WTJsaGRHVmtJSFZ1YVhRc0lHbHVhR1Z5Wlc1MGJIa2dkWE5sSUhOMFlYSjBWbUZzZFdVbmN5QjFibWwwTGlCVGEybHdJSFpoYkhWbElHRnVaQ0IxYm1sMElHTnZiblpsY25OcGIyNHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ3ZXMXhjTHlwZEx5NTBaWE4wS0c5d1pYSmhkRzl5S1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1ZWYm1sMFZIbHdaU0E5SUhOMFlYSjBWbUZzZFdWVmJtbDBWSGx3WlR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnYzNSaGNuUldZV3gxWlNCaGJtUWdaVzVrVm1Gc2RXVWdaR2xtWm1WeUlHbHVJSFZ1YVhRZ2RIbHdaU3dnWTI5dWRtVnlkQ0J6ZEdGeWRGWmhiSFZsSUdsdWRHOGdkR2hsSUhOaGJXVWdkVzVwZENCMGVYQmxJR0Z6SUdWdVpGWmhiSFZsSUhOdklIUm9ZWFFnYVdZZ1pXNWtWbUZzZFdWVmJtbDBWSGx3WlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjeUJoSUhKbGJHRjBhWFpsSUhWdWFYUWdLQ1VzSUdWdExDQnlaVzBwTENCMGFHVWdkbUZzZFdWeklITmxkQ0JrZFhKcGJtY2dkSGRsWlc1cGJtY2dkMmxzYkNCamIyNTBhVzUxWlNCMGJ5QmlaU0JoWTJOMWNtRjBaV3g1SUhKbGJHRjBhWFpsSUdWMlpXNGdhV1lnZEdobElHMWxkSEpwWTNNZ2RHaGxlU0JrWlhCbGJtUmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI0Z1lYSmxJR1I1Ym1GdGFXTmhiR3g1SUdOb1lXNW5hVzVuSUdSMWNtbHVaeUIwYUdVZ1kyOTFjbk5sSUc5bUlIUm9aU0JoYm1sdFlYUnBiMjR1SUVOdmJuWmxjbk5sYkhrc0lHbG1JSGRsSUdGc2QyRjVjeUJ1YjNKdFlXeHBlbVZrSUdsdWRHOGdjSGdnWVc1a0lIVnpaV1FnY0hnZ1ptOXlJSE5sZEhScGJtY2dkbUZzZFdWekxDQjBhR1VnY0hnZ2NtRjBhVzljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyOTFiR1FnWW1WamIyMWxJSE4wWVd4bElHbG1JSFJvWlNCdmNtbG5hVzVoYkNCMWJtbDBJR0psYVc1bklHRnVhVzFoZEdWa0lIUnZkMkZ5WkNCM1lYTWdjbVZzWVhScGRtVWdZVzVrSUhSb1pTQjFibVJsY214NWFXNW5JRzFsZEhKcFkzTWdZMmhoYm1kbElHUjFjbWx1WnlCMGFHVWdZVzVwYldGMGFXOXVMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlRhVzVqWlNBd0lHbHpJREFnYVc0Z1lXNTVJSFZ1YVhRZ2RIbHdaU3dnYm04Z1kyOXVkbVZ5YzJsdmJpQnBjeUJ1WldObGMzTmhjbmtnZDJobGJpQnpkR0Z5ZEZaaGJIVmxJR2x6SURBZ0xTMGdkMlVnYW5WemRDQnpkR0Z5ZENCaGRDQXdJSGRwZEdnZ1pXNWtWbUZzZFdWVmJtbDBWSGx3WlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2dvYzNSaGNuUldZV3gxWlZWdWFYUlVlWEJsSUNFOVBTQmxibVJXWVd4MVpWVnVhWFJVZVhCbEtTQW1KaUJ6ZEdGeWRGWmhiSFZsSUNFOVBTQXdLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJWYm1sMElHTnZiblpsY25OcGIyNGdhWE1nWVd4emJ5QnphMmx3Y0dWa0lIZG9aVzRnWlc1a1ZtRnNkV1VnYVhNZ01Dd2dZblYwSUNwemRHRnlkRlpoYkhWbFZXNXBkRlI1Y0dVcUlHMTFjM1FnWW1VZ2RYTmxaQ0JtYjNJZ2RIZGxaVzRnZG1Gc2RXVnpJSFJ2SUhKbGJXRnBiaUJoWTJOMWNtRjBaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRk5yYVhCd2FXNW5JSFZ1YVhRZ1kyOXVkbVZ5YzJsdmJpQm9aWEpsSUcxbFlXNXpJSFJvWVhRZ2FXWWdaVzVrVm1Gc2RXVlZibWwwVkhsd1pTQjNZWE1nYjNKcFoybHVZV3hzZVNCaElISmxiR0YwYVhabElIVnVhWFFzSUhSb1pTQmhibWx0WVhScGIyNGdkMjl1SjNRZ2NtVnNZWFJwZG1Wc2VWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMmdnZEdobElIVnVaR1Z5YkhscGJtY2diV1YwY21samN5QnBaaUIwYUdWNUlHTm9ZVzVuWlN3Z1luVjBJSFJvYVhNZ2FYTWdZV05qWlhCMFlXSnNaU0J6YVc1alpTQjNaU2R5WlNCaGJtbHRZWFJwYm1jZ2RHOTNZWEprSUdsdWRtbHphV0pwYkdsMGVTQnBibk4wWldGa0lHOW1JSFJ2ZDJGeVpDQjJhWE5wWW1sc2FYUjVMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmhwWTJnZ2NtVnRZV2x1Y3lCd1lYTjBJSFJvWlNCd2IybHVkQ0J2WmlCMGFHVWdZVzVwYldGMGFXOXVKM01nWTI5dGNHeGxkR2x2Ymk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxibVJXWVd4MVpTQTlQVDBnTUNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVaRlpoYkhWbFZXNXBkRlI1Y0dVZ1BTQnpkR0Z5ZEZaaGJIVmxWVzVwZEZSNWNHVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFSjVJSFJvYVhNZ2NHOXBiblFzSUhkbElHTmhibTV2ZENCaGRtOXBaQ0IxYm1sMElHTnZiblpsY25OcGIyNGdLR2wwSjNNZ2RXNWtaWE5wY21GaWJHVWdjMmx1WTJVZ2FYUWdZMkYxYzJWeklHeGhlVzkxZENCMGFISmhjMmhwYm1jcExseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWxtSUhkbElHaGhkbVZ1SjNRZ1lXeHlaV0ZrZVN3Z2QyVWdkSEpwWjJkbGNpQmpZV3hqZFd4aGRHVlZibWwwVW1GMGFXOXpLQ2tzSUhkb2FXTm9JSEoxYm5NZ2IyNWpaU0J3WlhJZ1pXeGxiV1Z1ZENCd1pYSWdZMkZzYkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MFZXNXBkRU52Ym5abGNuTnBiMjVFWVhSaElEMGdaV3hsYldWdWRGVnVhWFJEYjI1MlpYSnphVzl1UkdGMFlTQjhmQ0JqWVd4amRXeGhkR1ZWYm1sMFVtRjBhVzl6S0NrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJVYUdVZ1ptOXNiRzkzYVc1bklGSmxaMFY0SUcxaGRHTm9aWE1nUTFOVElIQnliM0JsY25ScFpYTWdkR2hoZENCb1lYWmxJSFJvWldseUlDVWdkbUZzZFdWeklHMWxZWE4xY21Wa0lISmxiR0YwYVhabElIUnZJSFJvWlNCNExXRjRhWE11SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1Z6TkRJSE53WldNZ2JXRnVaR0YwWlhNZ2RHaGhkQ0JoYkd3Z2IyWWdiV0Z5WjJsdUlHRnVaQ0J3WVdSa2FXNW5KM01nY0hKdmNHVnlkR2xsY3lBb1pYWmxiaUIwYjNBZ1lXNWtJR0p2ZEhSdmJTa2dZWEpsSUNVdGNtVnNZWFJwZG1VZ2RHOGdkR2hsSUNwM2FXUjBhQ29nYjJZZ2RHaGxJSEJoY21WdWRDQmxiR1Z0Wlc1MExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaGVHbHpJRDBnS0M5dFlYSm5hVzU4Y0dGa1pHbHVaM3hzWldaMGZISnBaMmgwZkhkcFpIUm9mSFJsZUhSOGQyOXlaSHhzWlhSMFpYSXZhUzUwWlhOMEtIQnliM0JsY25SNUtTQjhmQ0F2V0NRdkxuUmxjM1FvY0hKdmNHVnlkSGtwSUh4OElIQnliM0JsY25SNUlEMDlQU0JjSW5oY0lpa2dQeUJjSW5oY0lpQTZJRndpZVZ3aU8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nU1c0Z2IzSmtaWElnZEc4Z1lYWnZhV1FnWjJWdVpYSmhkR2x1WnlCdVhqSWdZbVZ6Y0c5clpTQmpiMjUyWlhKemFXOXVJR1oxYm1OMGFXOXVjeXdnZFc1cGRDQmpiMjUyWlhKemFXOXVJR2x6SUdFZ2RIZHZMWE4wWlhBZ2NISnZZMlZ6Y3pwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXhLU0JEYjI1MlpYSjBJSE4wWVhKMFZtRnNkV1VnYVc1MGJ5QndhWGhsYkhNdUlESXBJRU52Ym5abGNuUWdkR2hwY3lCdVpYY2djR2w0Wld3Z2RtRnNkV1VnYVc1MGJ5QmxibVJXWVd4MVpTZHpJSFZ1YVhRZ2RIbHdaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0hOMFlYSjBWbUZzZFdWVmJtbDBWSGx3WlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lKVndpT2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nZEhKaGJuTnNZWFJsV0NCaGJtUWdkSEpoYm5Oc1lYUmxXU0JoY21VZ2RHaGxJRzl1YkhrZ2NISnZjR1Z5ZEdsbGN5QjBhR0YwSUdGeVpTQWxMWEpsYkdGMGFYWmxJSFJ2SUdGdUlHVnNaVzFsYm5RbmN5QnZkMjRnWkdsdFpXNXphVzl1Y3lBdExTQnViM1FnYVhSeklIQmhjbVZ1ZENkeklHUnBiV1Z1YzJsdmJuTXVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JXWld4dlkybDBlU0JrYjJWeklHNXZkQ0JwYm1Oc2RXUmxJR0VnYzNCbFkybGhiQ0JqYjI1MlpYSnphVzl1SUhCeWIyTmxjM01nZEc4Z1lXTmpiM1Z1ZENCbWIzSWdkR2hwY3lCaVpXaGhkbWx2Y2k0Z1ZHaGxjbVZtYjNKbExDQmhibWx0WVhScGJtY2dkSEpoYm5Oc1lYUmxXQzlaSUdaeWIyMGdZU0FsSUhaaGJIVmxYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnlCaElHNXZiaTBsSUhaaGJIVmxJSGRwYkd3Z2NISnZaSFZqWlNCaGJpQnBibU52Y25KbFkzUWdjM1JoY25RZ2RtRnNkV1V1SUVadmNuUjFibUYwWld4NUxDQjBhR2x6SUhOdmNuUWdiMllnWTNKdmMzTXRkVzVwZENCamIyNTJaWEp6YVc5dUlHbHpJSEpoY21Wc2VTQmtiMjVsSUdKNUlIVnpaWEp6SUdsdUlIQnlZV04wYVdObExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25SV1lXeDFaU0FxUFNBb1lYaHBjeUE5UFQwZ1hDSjRYQ0lnUHlCbGJHVnRaVzUwVlc1cGRFTnZiblpsY25OcGIyNUVZWFJoTG5CbGNtTmxiblJVYjFCNFYybGtkR2dnT2lCbGJHVnRaVzUwVlc1cGRFTnZiblpsY25OcGIyNUVZWFJoTG5CbGNtTmxiblJVYjFCNFNHVnBaMmgwS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKd2VGd2lPbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nY0hnZ1lXTjBjeUJoY3lCdmRYSWdiV2xrY0c5cGJuUWdhVzRnZEdobElIVnVhWFFnWTI5dWRtVnljMmx2YmlCd2NtOWpaWE56T3lCa2J5QnViM1JvYVc1bkxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhKMFZtRnNkV1VnS2owZ1pXeGxiV1Z1ZEZWdWFYUkRiMjUyWlhKemFXOXVSR0YwWVZ0emRHRnlkRlpoYkhWbFZXNXBkRlI1Y0dVZ0t5QmNJbFJ2VUhoY0lsMDdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXNTJaWEowSUhSb1pTQndlQ0J5WVhScGIzTWdkRzhnWTI5dWRtVnlkQ0JwYm5SdklIUnZJSFJvWlNCMFlYSm5aWFFnZFc1cGRDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR1Z1WkZaaGJIVmxWVzVwZEZSNWNHVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWlWY0lqcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWEowVm1Gc2RXVWdLajBnTVNBdklDaGhlR2x6SUQwOVBTQmNJbmhjSWlBL0lHVnNaVzFsYm5SVmJtbDBRMjl1ZG1WeWMybHZia1JoZEdFdWNHVnlZMlZ1ZEZSdlVIaFhhV1IwYUNBNklHVnNaVzFsYm5SVmJtbDBRMjl1ZG1WeWMybHZia1JoZEdFdWNHVnlZMlZ1ZEZSdlVIaElaV2xuYUhRcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0luQjRYQ0k2WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCemRHRnlkRlpoYkhWbElHbHpJR0ZzY21WaFpIa2dhVzRnY0hnc0lHUnZJRzV2ZEdocGJtYzdJSGRsSjNKbElHUnZibVV1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblJXWVd4MVpTQXFQU0F4SUM4Z1pXeGxiV1Z1ZEZWdWFYUkRiMjUyWlhKemFXOXVSR0YwWVZ0bGJtUldZV3gxWlZWdWFYUlVlWEJsSUNzZ1hDSlViMUI0WENKZE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVbVZzWVhScGRtVWdWbUZzZFdWelhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlBjR1Z5WVhSdmNpQnNiMmRwWXlCdGRYTjBJR0psSUhCbGNtWnZjbTFsWkNCc1lYTjBJSE5wYm1ObElHbDBJSEpsY1hWcGNtVnpJSFZ1YVhRdGJtOXliV0ZzYVhwbFpDQnpkR0Z5ZENCaGJtUWdaVzVrSUhaaGJIVmxjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1VtVnNZWFJwZG1VZ0tuQmxjbU5sYm5RZ2RtRnNkV1Z6S2lCa2J5QnViM1FnWW1Wb1lYWmxJR2h2ZHlCdGIzTjBJSEJsYjNCc1pTQjBhR2x1YXpzZ2QyaHBiR1VnYjI1bElIZHZkV3hrSUdWNGNHVmpkQ0JjSWlzOU5UQWxYQ0pjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOGdhVzVqY21WaGMyVWdkR2hsSUhCeWIzQmxjblI1SURFdU5YZ2dhWFJ6SUdOMWNuSmxiblFnZG1Gc2RXVXNJR2wwSUdsdUlHWmhZM1FnYVc1amNtVmhjMlZ6SUhSb1pTQndaWEpqWlc1MElIVnVhWFJ6SUdsdUlHRmljMjlzZFhSbElIUmxjbTF6T2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTFNQ0J3YjJsdWRITWdhWE1nWVdSa1pXUWdiMjRnZEc5d0lHOW1JSFJvWlNCamRYSnlaVzUwSUNVZ2RtRnNkV1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2IzQmxjbUYwYjNJcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0lyWENJNlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWtWbUZzZFdVZ1BTQnpkR0Z5ZEZaaGJIVmxJQ3NnWlc1a1ZtRnNkV1U3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENJdFhDSTZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaVzVrVm1Gc2RXVWdQU0J6ZEdGeWRGWmhiSFZsSUMwZ1pXNWtWbUZzZFdVN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSXFYQ0k2WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1VnUFNCemRHRnlkRlpoYkhWbElDb2daVzVrVm1Gc2RXVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0l2WENJNlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNWtWbUZzZFdVZ1BTQnpkR0Z5ZEZaaGJIVmxJQzhnWlc1a1ZtRnNkV1U3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGRsWlc1elEyOXVkR0ZwYm1WeUlGQjFjMmhjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dRMjl1YzNSeWRXTjBJSFJvWlNCd1pYSXRjSEp2Y0dWeWRIa2dkSGRsWlc0Z2IySnFaV04wTENCaGJtUWdjSFZ6YUNCcGRDQjBieUIwYUdVZ1pXeGxiV1Z1ZENkeklIUjNaV1Z1YzBOdmJuUmhhVzVsY2k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGRsWlc1elEyOXVkR0ZwYm1WeVczQnliM0JsY25SNVhTQTlJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiM1JRY205d1pYSjBlVlpoYkhWbE9pQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBWbUZzZFdVNklITjBZWEowVm1Gc2RXVXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVm1Gc2RXVTZJSE4wWVhKMFZtRnNkV1VzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibVJXWVd4MVpUb2daVzVrVm1Gc2RXVXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtbDBWSGx3WlRvZ1pXNWtWbUZzZFdWVmJtbDBWSGx3WlN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZoYzJsdVp6b2daV0Z6YVc1blhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGWmxiRzlqYVhSNUxtUmxZblZuS1NCamIyNXpiMnhsTG14dlp5aGNJblIzWldWdWMwTnZiblJoYVc1bGNpQW9YQ0lnS3lCd2NtOXdaWEowZVNBcklGd2lLVG9nWENJZ0t5QktVMDlPTG5OMGNtbHVaMmxtZVNoMGQyVmxibk5EYjI1MFlXbHVaWEpiY0hKdmNHVnlkSGxkS1N3Z1pXeGxiV1Z1ZENrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1FXeHZibWNnZDJsMGFDQnBkSE1nY0hKdmNHVnlkSGtnWkdGMFlTd2djM1J2Y21VZ1lTQnlaV1psY21WdVkyVWdkRzhnZEdobElHVnNaVzFsYm5RZ2FYUnpaV3htSUc5dWRHOGdkSGRsWlc1elEyOXVkR0ZwYm1WeUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjNaV1Z1YzBOdmJuUmhhVzVsY2k1bGJHVnRaVzUwSUQwZ1pXeGxiV1Z1ZER0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRMkZzYkNCUWRYTm9YRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ2RIZGxaVzV6UTI5dWRHRnBibVZ5SUdOaGJpQmlaU0JsYlhCMGVTQnBaaUJoYkd3Z2IyWWdkR2hsSUhCeWIzQmxjblJwWlhNZ2FXNGdkR2hwY3lCallXeHNKM01nY0hKdmNHVnlkSGtnYldGd0lIZGxjbVVnYzJ0cGNIQmxaQ0JrZFdVZ2RHOGdibTkwWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlaV2x1WnlCemRYQndiM0owWldRZ1lua2dkR2hsSUdKeWIzZHpaWEl1SUZSb1pTQmxiR1Z0Wlc1MElIQnliM0JsY25SNUlHbHpJSFZ6WldRZ1ptOXlJR05vWldOcmFXNW5JSFJvWVhRZ2RHaGxJSFIzWldWdWMwTnZiblJoYVc1bGNpQm9ZWE1nWW1WbGJpQmhjSEJsYm1SbFpDQjBieTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZDJWbGJuTkRiMjUwWVdsdVpYSXVaV3hsYldWdWRDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRUZ3Y0d4NUlIUm9aU0JjSW5abGJHOWphWFI1TFdGdWFXMWhkR2x1WjF3aUlHbHVaR2xqWVhSdmNpQmpiR0Z6Y3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRFUxTXVWbUZzZFdWekxtRmtaRU5zWVhOektHVnNaVzFsYm5Rc0lGd2lkbVZzYjJOcGRIa3RZVzVwYldGMGFXNW5YQ0lwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1ZHaGxJR05oYkd3Z1lYSnlZWGtnYUc5MWMyVnpJSFJvWlNCMGQyVmxibk5EYjI1MFlXbHVaWEp6SUdadmNpQmxZV05vSUdWc1pXMWxiblFnWW1WcGJtY2dZVzVwYldGMFpXUWdhVzRnZEdobElHTjFjbkpsYm5RZ1kyRnNiQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c0xuQjFjMmdvZEhkbFpXNXpRMjl1ZEdGcGJtVnlLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZOMGIzSmxJSFJvWlNCMGQyVmxibk5EYjI1MFlXbHVaWElnWVc1a0lHOXdkR2x2Ym5NZ2FXWWdkMlVuY21VZ2QyOXlhMmx1WnlCdmJpQjBhR1VnWkdWbVlYVnNkQ0JsWm1abFkzUnpJSEYxWlhWbExDQnpieUIwYUdGMElIUm9aWGtnWTJGdUlHSmxJSFZ6WldRZ1lua2dkR2hsSUhKbGRtVnljMlVnWTI5dGJXRnVaQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzQjBjeTV4ZFdWMVpTQTlQVDBnWENKY0lpa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JFWVhSaEtHVnNaVzFsYm5RcExuUjNaV1Z1YzBOdmJuUmhhVzVsY2lBOUlIUjNaV1Z1YzBOdmJuUmhhVzVsY2p0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JHRjBZU2hsYkdWdFpXNTBLUzV2Y0hSeklEMGdiM0IwY3p0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVGQybDBZMmdnYjI0Z2RHaGxJR1ZzWlcxbGJuUW5jeUJoYm1sdFlYUnBibWNnWm14aFp5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVZWFJoS0dWc1pXMWxiblFwTG1selFXNXBiV0YwYVc1bklEMGdkSEoxWlR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFOXVZMlVnZEdobElHWnBibUZzSUdWc1pXMWxiblFnYVc0Z2RHaHBjeUJqWVd4c0ozTWdaV3hsYldWdWRDQnpaWFFnYUdGeklHSmxaVzRnY0hKdlkyVnpjMlZrTENCd2RYTm9JSFJvWlNCallXeHNJR0Z5Y21GNUlHOXVkRzljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JXWld4dlkybDBlUzVUZEdGMFpTNWpZV3hzY3lCbWIzSWdkR2hsSUdGdWFXMWhkR2x2YmlCMGFXTnJJSFJ2SUdsdGJXVmthV0YwWld4NUlHSmxaMmx1SUhCeWIyTmxjM05wYm1jdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUnpTVzVrWlhnZ1BUMDlJR1ZzWlcxbGJuUnpUR1Z1WjNSb0lDMGdNU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkJaR1FnZEdobElHTjFjbkpsYm5RZ1kyRnNiQ0J3YkhWeklHbDBjeUJoYzNOdlkybGhkR1ZrSUcxbGRHRmtZWFJoSUNoMGFHVWdaV3hsYldWdWRDQnpaWFFnWVc1a0lIUm9aU0JqWVd4c0ozTWdiM0IwYVc5dWN5a2diMjUwYnlCMGFHVWdaMnh2WW1Gc0lHTmhiR3dnWTI5dWRHRnBibVZ5TGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkJibmwwYUdsdVp5QnZiaUIwYUdseklHTmhiR3dnWTI5dWRHRnBibVZ5SUdseklITjFZbXBsWTNSbFpDQjBieUIwYVdOcktDa2djSEp2WTJWemMybHVaeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZtVnNiMk5wZEhrdVUzUmhkR1V1WTJGc2JITXVjSFZ6YUNoYklHTmhiR3dzSUdWc1pXMWxiblJ6TENCdmNIUnpMQ0J1ZFd4c0xDQndjbTl0YVhObFJHRjBZUzV5WlhOdmJIWmxjaUJkS1R0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKWmlCMGFHVWdZVzVwYldGMGFXOXVJSFJwWTJzZ2FYTnVKM1FnY25WdWJtbHVaeXdnYzNSaGNuUWdhWFF1SUNoV1pXeHZZMmwwZVNCemFIVjBjeUJwZENCdlptWWdkMmhsYmlCMGFHVnlaU0JoY21VZ2JtOGdZV04wYVhabElHTmhiR3h6SUhSdklIQnliMk5sYzNNdUtTQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ZtVnNiMk5wZEhrdVUzUmhkR1V1YVhOVWFXTnJhVzVuSUQwOVBTQm1ZV3h6WlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVm1Wc2IyTnBkSGt1VTNSaGRHVXVhWE5VYVdOcmFXNW5JRDBnZEhKMVpUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVM1JoY25RZ2RHaGxJSFJwWTJzZ2JHOXZjQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJwWTJzb0tUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5SelNXNWtaWGdyS3p0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBdktpQlhhR1Z1SUhSb1pTQnhkV1YxWlNCdmNIUnBiMjRnYVhNZ2MyVjBJSFJ2SUdaaGJITmxMQ0IwYUdVZ1kyRnNiQ0J6YTJsd2N5QjBhR1VnWld4bGJXVnVkQ2R6SUhGMVpYVmxJR0Z1WkNCbWFYSmxjeUJwYlcxbFpHbGhkR1ZzZVM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzl3ZEhNdWNYVmxkV1VnUFQwOUlHWmhiSE5sS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJUYVc1alpTQjBhR2x6SUdKMWFXeGtVWFZsZFdVZ1kyRnNiQ0JrYjJWemJpZDBJSEpsYzNCbFkzUWdkR2hsSUdWc1pXMWxiblFuY3lCbGVHbHpkR2x1WnlCeGRXVjFaU0FvZDJocFkyZ2dhWE1nZDJobGNtVWdZU0JrWld4aGVTQnZjSFJwYjI0Z2QyOTFiR1FnYUdGMlpTQmlaV1Z1SUdGd2NHVnVaR1ZrS1N4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRsSUcxaGJuVmhiR3g1SUdsdWFtVmpkQ0IwYUdVZ1pHVnNZWGtnY0hKdmNHVnlkSGtnYUdWeVpTQjNhWFJvSUdGdUlHVjRjR3hwWTJsMElITmxkRlJwYldWdmRYUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwY3k1a1pXeGhlU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWW5WcGJHUlJkV1YxWlN3Z2IzQjBjeTVrWld4aGVTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSjFhV3hrVVhWbGRXVW9LVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1QzUm9aWEozYVhObExDQjBhR1VnWTJGc2JDQjFibVJsY21kdlpYTWdaV3hsYldWdWRDQnhkV1YxWldsdVp5QmhjeUJ1YjNKdFlXd3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJRlJ2SUdsdWRHVnliM0JsY21GMFpTQjNhWFJvSUdwUmRXVnllU3dnVm1Wc2IyTnBkSGtnZFhObGN5QnFVWFZsY25rbmN5QnZkMjRnSkM1eGRXVjFaU2dwSUhOMFlXTnJJR1p2Y2lCeGRXVjFhVzVuSUd4dloybGpMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkM1eGRXVjFaU2hsYkdWdFpXNTBMQ0J2Y0hSekxuRjFaWFZsTENCbWRXNWpkR2x2YmlodVpYaDBMQ0JqYkdWaGNsRjFaWFZsS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdkR2hsSUdOc1pXRnlVWFZsZFdVZ1pteGhaeUIzWVhNZ2NHRnpjMlZrSUdsdUlHSjVJSFJvWlNCemRHOXdJR052YlcxaGJtUXNJSEpsYzI5c2RtVWdkR2hwY3lCallXeHNKM01nY0hKdmJXbHpaUzRnS0ZCeWIyMXBjMlZ6SUdOaGJpQnZibXg1SUdKbElISmxjMjlzZG1Wa0lHOXVZMlVzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI4Z2FYUW5jeUJtYVc1bElHbG1JSFJvYVhNZ2FYTWdjbVZ3WldGMFpXUnNlU0IwY21sbloyVnlaV1FnWm05eUlHVmhZMmdnWld4bGJXVnVkQ0JwYmlCMGFHVWdZWE56YjJOcFlYUmxaQ0JqWVd4c0xpa2dLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJ4bFlYSlJkV1YxWlNBOVBUMGdkSEoxWlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKdmJXbHpaVVJoZEdFdWNISnZiV2x6WlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaVVJoZEdFdWNtVnpiMngyWlhJb1pXeGxiV1Z1ZEhNcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1JHOGdibTkwSUdOdmJuUnBiblZsSUhkcGRHZ2dZVzVwYldGMGFXOXVJSEYxWlhWbGFXNW5MaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlVhR2x6SUdac1lXY2dhVzVrYVdOaGRHVnpJSFJ2SUhSb1pTQjFjR052YldsdVp5QmpiMjF3YkdWMFpVTmhiR3dvS1NCbWRXNWpkR2x2YmlCMGFHRjBJSFJvYVhNZ2NYVmxkV1VnWlc1MGNua2dkMkZ6SUdsdWFYUnBZWFJsWkNCaWVTQldaV3h2WTJsMGVTNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRaV1VnWTI5dGNHeGxkR1ZEWVd4c0tDa2dabTl5SUdaMWNuUm9aWElnWkdWMFlXbHNjeTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JXWld4dlkybDBlUzUyWld4dlkybDBlVkYxWlhWbFJXNTBjbmxHYkdGbklEMGdkSEoxWlR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMWFXeGtVWFZsZFdVb2JtVjRkQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVGMWRHOHRSR1Z4ZFdWMWFXNW5YRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCQmN5QndaWElnYWxGMVpYSjVKM01nSkM1eGRXVjFaU2dwSUdKbGFHRjJhVzl5TENCMGJ5Qm1hWEpsSUhSb1pTQm1hWEp6ZENCdWIyNHRZM1Z6ZEc5dExYRjFaWFZsSUdWdWRISjVJRzl1SUdGdUlHVnNaVzFsYm5Rc0lIUm9aU0JsYkdWdFpXNTBYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzExYzNRZ1ltVWdaR1Z4ZFdWMVpXUWdhV1lnYVhSeklIRjFaWFZsSUhOMFlXTnJJR052Ym5OcGMzUnpJQ3B6YjJ4bGJIa3FJRzltSUhSb1pTQmpkWEp5Wlc1MElHTmhiR3d1SUNoVWFHbHpJR05oYmlCaVpTQmtaWFJsY20xcGJtVmtJR0o1SUdOb1pXTnJhVzVuWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQjBhR1VnWENKcGJuQnliMmR5WlhOelhDSWdhWFJsYlNCMGFHRjBJR3BSZFdWeWVTQndjbVZ3Wlc1a2N5QjBieUJoWTNScGRtVWdjWFZsZFdVZ2MzUmhZMnNnWVhKeVlYbHpMaWtnVW1WbllYSmtiR1Z6Y3l3Z2QyaGxibVYyWlhJZ2RHaGxJR1ZzWlcxbGJuUW5jMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J4ZFdWMVpTQnBjeUJtZFhKMGFHVnlJR0Z3Y0dWdVpHVmtJSGRwZEdnZ1lXUmthWFJwYjI1aGJDQnBkR1Z0Y3lBdExTQnBibU5zZFdScGJtY2dKQzVrWld4aGVTZ3BKM01nYjNJZ1pYWmxiaUFrTG1GdWFXMWhkR1VvS1NCallXeHNjeXdnZEdobElIRjFaWFZsSjNOY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHljM1FnWlc1MGNua2dhWE1nWVhWMGIyMWhkR2xqWVd4c2VTQm1hWEpsWkM0Z1ZHaHBjeUJpWldoaGRtbHZjaUJqYjI1MGNtRnpkSE1nZEdoaGRDQnZaaUJqZFhOMGIyMGdjWFZsZFdWekxDQjNhR2xqYUNCdVpYWmxjaUJoZFhSdkxXWnBjbVV1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFNXZkR1U2SUZkb1pXNGdZVzRnWld4bGJXVnVkQ0J6WlhRZ2FYTWdZbVZwYm1jZ2MzVmlhbVZqZEdWa0lIUnZJR0VnYm05dUxYQmhjbUZzYkdWc0lGWmxiRzlqYVhSNUlHTmhiR3dzSUhSb1pTQmhibWx0WVhScGIyNGdkMmxzYkNCdWIzUWdZbVZuYVc0Z2RXNTBhV3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnWldGamFDQnZibVVnYjJZZ2RHaGxJR1ZzWlcxbGJuUnpJR2x1SUhSb1pTQnpaWFFnYUdGeklISmxZV05vWldRZ2RHaGxJR1Z1WkNCdlppQnBkSE1nYVc1a2FYWnBaSFZoYkd4NUlIQnlaUzFsZUdsemRHbHVaeUJ4ZFdWMVpTQmphR0ZwYmk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1ZXNW1iM0owZFc1aGRHVnNlU3dnYlc5emRDQndaVzl3YkdVZ1pHOXVKM1FnWm5Wc2JIa2daM0poYzNBZ2FsRjFaWEo1SjNNZ2NHOTNaWEptZFd3c0lIbGxkQ0J4ZFdseWEza3NJQ1F1Y1hWbGRXVW9LU0JtZFc1amRHbHZiaTVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEdWaGJpQnRiM0psSUdobGNtVTZJR2gwZEhBNkx5OXpkR0ZqYTI5MlpYSm1iRzkzTG1OdmJTOXhkV1Z6ZEdsdmJuTXZNVEExT0RFMU9DOWpZVzR0YzI5dFpXSnZaSGt0Wlhod2JHRnBiaTFxY1hWbGNua3RjWFZsZFdVdGRHOHRiV1VnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDaHZjSFJ6TG5GMVpYVmxJRDA5UFNCY0lsd2lJSHg4SUc5d2RITXVjWFZsZFdVZ1BUMDlJRndpWm5oY0lpa2dKaVlnSkM1eGRXVjFaU2hsYkdWdFpXNTBLVnN3WFNBaFBUMGdYQ0pwYm5CeWIyZHlaWE56WENJcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1F1WkdWeGRXVjFaU2hsYkdWdFpXNTBLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lFVnNaVzFsYm5RZ1UyVjBJRWwwWlhKaGRHbHZibHh1WEhRZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdMeW9nU1dZZ2RHaGxJRndpYm05a1pWUjVjR1ZjSWlCd2NtOXdaWEowZVNCbGVHbHpkSE1nYjI0Z2RHaGxJR1ZzWlcxbGJuUnpJSFpoY21saFlteGxMQ0IzWlNkeVpTQmhibWx0WVhScGJtY2dZU0J6YVc1bmJHVWdaV3hsYldWdWRDNWNibHgwSUNBZ0lDQWdJQ0FnSUNCUWJHRmpaU0JwZENCcGJpQmhiaUJoY25KaGVTQnpieUIwYUdGMElDUXVaV0ZqYUNncElHTmhiaUJwZEdWeVlYUmxJRzkyWlhJZ2FYUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0pDNWxZV05vS0dWc1pXMWxiblJ6TENCbWRXNWpkR2x2YmlocExDQmxiR1Z0Wlc1MEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVZ1YzNWeVpTQmxZV05vSUdWc1pXMWxiblFnYVc0Z1lTQnpaWFFnYUdGeklHRWdibTlrWlZSNWNHVWdLR2x6SUdFZ2NtVmhiQ0JsYkdWdFpXNTBLU0IwYnlCaGRtOXBaQ0IwYUhKdmQybHVaeUJsY25KdmNuTXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoVWVYQmxMbWx6VG05a1pTaGxiR1Z0Wlc1MEtTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdlkyVnpjMFZzWlcxbGJuUXVZMkZzYkNobGJHVnRaVzUwS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMHBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZiam9nVEc5dmNGeHVYSFFnSUNBZ0lDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRlJvWlNCc2IyOXdJRzl3ZEdsdmJpQmhZMk5sY0hSeklHRnVJR2x1ZEdWblpYSWdhVzVrYVdOaGRHbHVaeUJvYjNjZ2JXRnVlU0IwYVcxbGN5QjBhR1VnWld4bGJXVnVkQ0J6YUc5MWJHUWdiRzl2Y0NCaVpYUjNaV1Z1SUhSb1pTQjJZV3gxWlhNZ2FXNGdkR2hsWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRDQmpZV3hzSjNNZ2NISnZjR1Z5ZEdsbGN5QnRZWEFnWVc1a0lIUm9aU0JsYkdWdFpXNTBKM01nY0hKdmNHVnlkSGtnZG1Gc2RXVnpJSEJ5YVc5eUlIUnZJSFJvYVhNZ1kyRnNiQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQXZLaUJPYjNSbE9pQlVhR1VnYkc5dmNDQnZjSFJwYjI0bmN5QnNiMmRwWXlCcGN5QndaWEptYjNKdFpXUWdhR1Z5WlNBdExTQmhablJsY2lCbGJHVnRaVzUwSUhCeWIyTmxjM05wYm1jZ0xTMGdZbVZqWVhWelpTQjBhR1VnWTNWeWNtVnVkQ0JqWVd4c0lHNWxaV1J6WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdkRzhnZFc1a1pYSm5ieUJwZEhNZ2NYVmxkV1VnYVc1elpYSjBhVzl1SUhCeWFXOXlJSFJ2SUhSb1pTQnNiMjl3SUc5d2RHbHZiaUJuWlc1bGNtRjBhVzVuSUdsMGN5QnpaWEpwWlhNZ2IyWWdZMjl1YzNScGRIVmxiblFnWENKeVpYWmxjbk5sWENJZ1kyRnNiSE1zWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdkMmhwWTJnZ1kyaGhhVzRnWVdaMFpYSWdkR2hsSUdOMWNuSmxiblFnWTJGc2JDNGdWSGR2SUhKbGRtVnljMlVnWTJGc2JITWdLSFIzYnlCY0ltRnNkR1Z5Ym1GMGFXOXVjMXdpS1NCamIyNXpkR2wwZFhSbElHOXVaU0JzYjI5d0xpQXFMMXh1WEhRZ0lDQWdJQ0FnSUhaaGNpQnZjSFJ6SUQwZ0pDNWxlSFJsYm1Rb2UzMHNJRlpsYkc5amFYUjVMbVJsWm1GMWJIUnpMQ0J2Y0hScGIyNXpLU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdjbVYyWlhKelpVTmhiR3h6UTI5MWJuUTdYRzVjYmx4MElDQWdJQ0FnSUNCdmNIUnpMbXh2YjNBZ1BTQndZWEp6WlVsdWRDaHZjSFJ6TG14dmIzQXBPMXh1WEhRZ0lDQWdJQ0FnSUhKbGRtVnljMlZEWVd4c2MwTnZkVzUwSUQwZ0tHOXdkSE11Ykc5dmNDQXFJRElwSUMwZ01UdGNibHh1WEhRZ0lDQWdJQ0FnSUdsbUlDaHZjSFJ6TG14dmIzQXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nUkc5MVlteGxJSFJvWlNCc2IyOXdJR052ZFc1MElIUnZJR052Ym5abGNuUWdhWFFnYVc1MGJ5QnBkSE1nWVhCd2NtOXdjbWxoZEdVZ2JuVnRZbVZ5SUc5bUlGd2ljbVYyWlhKelpWd2lJR05oYkd4ekxseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlRkV0owY21GamRDQXhJR1p5YjIwZ2RHaGxJSEpsYzNWc2RHbHVaeUIyWVd4MVpTQnphVzVqWlNCMGFHVWdZM1Z5Y21WdWRDQmpZV3hzSUdseklHbHVZMngxWkdWa0lHbHVJSFJvWlNCMGIzUmhiQ0JoYkhSbGNtNWhkR2x2YmlCamIzVnVkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnZUNBOUlEQTdJSGdnUENCeVpYWmxjbk5sUTJGc2JITkRiM1Z1ZERzZ2VDc3JLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlRhVzVqWlNCMGFHVWdiRzluYVdNZ1ptOXlJSFJvWlNCeVpYWmxjbk5sSUdGamRHbHZiaUJ2WTJOMWNuTWdhVzV6YVdSbElGRjFaWFZsYVc1bklHRnVaQ0IwYUdWeVpXWnZjbVVnZEdocGN5QmpZV3hzSjNNZ2IzQjBhVzl1Y3lCdlltcGxZM1JjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpiaWQwSUhCaGNuTmxaQ0IxYm5ScGJDQjBhR1Z1SUdGeklIZGxiR3dzSUhSb1pTQmpkWEp5Wlc1MElHTmhiR3duY3lCa1pXeGhlU0J2Y0hScGIyNGdiWFZ6ZENCaVpTQmxlSEJzYVdOcGRHeDVJSEJoYzNObFpDQnBiblJ2SUhSb1pTQnlaWFpsY25ObFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c0lITnZJSFJvWVhRZ2RHaGxJR1JsYkdGNUlHeHZaMmxqSUhSb1lYUWdiMk5qZFhKeklHbHVjMmxrWlNBcVVISmxMVkYxWlhWbGFXNW5LaUJqWVc0Z2NISnZZMlZ6Y3lCcGRDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWFpsY25ObFQzQjBhVzl1Y3lBOUlIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGhlVG9nYjNCMGN5NWtaV3hoZVN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205bmNtVnpjem9nYjNCMGN5NXdjbTluY21WemMxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnWVNCamIyMXdiR1YwWlNCallXeHNZbUZqYXlCM1lYTWdjR0Z6YzJWa0lHbHVkRzhnZEdocGN5QmpZV3hzTENCMGNtRnVjMlpsY2lCcGRDQjBieUIwYUdVZ2JHOXZjQ0J5WldScGNtVmpkQ2R6SUdacGJtRnNJRndpY21WMlpYSnpaVndpSUdOaGJHeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdklIUm9ZWFFnYVhRbmN5QjBjbWxuWjJWeVpXUWdkMmhsYmlCMGFHVWdaVzUwYVhKbElISmxaR2x5WldOMElHbHpJR052YlhCc1pYUmxJQ2hoYm1RZ2JtOTBJSGRvWlc0Z2RHaGxJSFpsY25rZ1ptbHljM1FnWVc1cGJXRjBhVzl1SUdseklHTnZiWEJzWlhSbEtTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDRJRDA5UFNCeVpYWmxjbk5sUTJGc2JITkRiM1Z1ZENBdElERXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFpsY25ObFQzQjBhVzl1Y3k1a2FYTndiR0Y1SUQwZ2IzQjBjeTVrYVhOd2JHRjVPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkbVZ5YzJWUGNIUnBiMjV6TG5acGMybGlhV3hwZEhrZ1BTQnZjSFJ6TG5acGMybGlhV3hwZEhrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMlpYSnpaVTl3ZEdsdmJuTXVZMjl0Y0d4bGRHVWdQU0J2Y0hSekxtTnZiWEJzWlhSbE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJtbHRZWFJsS0dWc1pXMWxiblJ6TENCY0luSmxkbVZ5YzJWY0lpd2djbVYyWlhKelpVOXdkR2x2Ym5NcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0x5b3FLaW9xS2lvcUtpb3FLaW9xS2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JEYUdGcGJtbHVaMXh1WEhRZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRkpsZEhWeWJpQjBhR1VnWld4bGJXVnVkSE1nWW1GamF5QjBieUIwYUdVZ1kyRnNiQ0JqYUdGcGJpd2dkMmwwYUNCM2NtRndjR1ZrSUdWc1pXMWxiblJ6SUhSaGEybHVaeUJ3Y21WalpXUmxibU5sSUdsdUlHTmhjMlVnVm1Wc2IyTnBkSGtnZDJGeklHTmhiR3hsWkNCMmFXRWdkR2hsSUNRdVptNHVJR1Y0ZEdWdWMybHZiaTRnS2k5Y2JseDBJQ0FnSUNBZ0lDQnlaWFIxY200Z1oyVjBRMmhoYVc0b0tUdGNibHgwSUNBZ0lIMDdYRzVjYmx4MElDQWdJQzhxSUZSMWNtNGdWbVZzYjJOcGRIa2dhVzUwYnlCMGFHVWdZVzVwYldGMGFXOXVJR1oxYm1OMGFXOXVMQ0JsZUhSbGJtUmxaQ0IzYVhSb0lIUm9aU0J3Y21VdFpYaHBjM1JwYm1jZ1ZtVnNiMk5wZEhrZ2IySnFaV04wTGlBcUwxeHVYSFFnSUNBZ1ZtVnNiMk5wZEhrZ1BTQWtMbVY0ZEdWdVpDaGhibWx0WVhSbExDQldaV3h2WTJsMGVTazdYRzVjZENBZ0lDQXZLaUJHYjNJZ2JHVm5ZV041SUhOMWNIQnZjblFzSUdGc2MyOGdaWGh3YjNObElIUm9aU0JzYVhSbGNtRnNJR0Z1YVcxaGRHVWdiV1YwYUc5a0xpQXFMMXh1WEhRZ0lDQWdWbVZzYjJOcGRIa3VZVzVwYldGMFpTQTlJR0Z1YVcxaGRHVTdYRzVjYmx4MElDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJRlJwYldsdVoxeHVYSFFnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUM4cUlGUnBZMnRsY2lCbWRXNWpkR2x2Ymk0Z0tpOWNibHgwSUNBZ0lIWmhjaUIwYVdOclpYSWdQU0IzYVc1a2IzY3VjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsSUh4OElISkJSbE5vYVcwN1hHNWNibHgwSUNBZ0lDOHFJRWx1WVdOMGFYWmxJR0p5YjNkelpYSWdkR0ZpY3lCd1lYVnpaU0J5UVVZc0lIZG9hV05vSUhKbGMzVnNkSE1nYVc0Z1lXeHNJR0ZqZEdsMlpTQmhibWx0WVhScGIyNXpJR2x0YldWa2FXRjBaV3g1SUhOd2NtbHVkR2x1WnlCMGJ5QjBhR1ZwY2lCamIyMXdiR1YwYVc5dUlITjBZWFJsY3lCM2FHVnVJSFJvWlNCMFlXSWdjbVZtYjJOMWMyVnpMbHh1WEhRZ0lDQWdJQ0FnVkc4Z1oyVjBJR0Z5YjNWdVpDQjBhR2x6TENCM1pTQmtlVzVoYldsallXeHNlU0J6ZDJsMFkyZ2dja0ZHSUhSdklITmxkRlJwYldWdmRYUWdLSGRvYVdOb0lIUm9aU0JpY205M2MyVnlJQ3BrYjJWemJpZDBLaUJ3WVhWelpTa2dkMmhsYmlCMGFHVWdkR0ZpSUd4dmMyVnpJR1p2WTNWekxpQlhaU0J6YTJsd0lIUm9hWE1nWm05eUlHMXZZbWxzWlZ4dVhIUWdJQ0FnSUNBZ1pHVjJhV05sY3lCMGJ5QmhkbTlwWkNCM1lYTjBhVzVuSUdKaGRIUmxjbmtnY0c5M1pYSWdiMjRnYVc1aFkzUnBkbVVnZEdGaWN5NGdLaTljYmx4MElDQWdJQzhxSUU1dmRHVTZJRlJoWWlCbWIyTjFjeUJrWlhSbFkzUnBiMjRnWkc5bGMyNG5kQ0IzYjNKcklHOXVJRzlzWkdWeUlIWmxjbk5wYjI1eklHOW1JRWxGTENCaWRYUWdkR2hoZENkeklHOXJZWGtnYzJsdVkyVWdkR2hsZVNCa2IyNG5kQ0J6ZFhCd2IzSjBJSEpCUmlCMGJ5QmlaV2RwYmlCM2FYUm9MaUFxTDF4dVhIUWdJQ0FnYVdZZ0tDRldaV3h2WTJsMGVTNVRkR0YwWlM1cGMwMXZZbWxzWlNBbUppQmtiMk4xYldWdWRDNW9hV1JrWlc0Z0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSjJhWE5wWW1sc2FYUjVZMmhoYm1kbFhDSXNJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCU1pXRnpjMmxuYmlCMGFHVWdja0ZHSUdaMWJtTjBhVzl1SUNoM2FHbGphQ0IwYUdVZ1oyeHZZbUZzSUhScFkyc29LU0JtZFc1amRHbHZiaUIxYzJWektTQmlZWE5sWkNCdmJpQjBhR1VnZEdGaUozTWdabTlqZFhNZ2MzUmhkR1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtiMk4xYldWdWRDNW9hV1JrWlc0cElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJwWTJ0bGNpQTlJR1oxYm1OMGFXOXVLR05oYkd4aVlXTnJLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVkdobElIUnBZMnNnWm5WdVkzUnBiMjRnYm1WbFpITWdZU0IwY25WMGFIa2dabWx5YzNRZ1lYSm5kVzFsYm5RZ2FXNGdiM0prWlhJZ2RHOGdjR0Z6Y3lCcGRITWdhVzUwWlhKdVlXd2dkR2x0WlhOMFlXMXdJR05vWldOckxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDa2dleUJqWVd4c1ltRmpheWgwY25WbEtTQjlMQ0F4TmlrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQlVhR1VnY2tGR0lHeHZiM0FnYUdGeklHSmxaVzRnY0dGMWMyVmtJR0o1SUhSb1pTQmljbTkzYzJWeUxDQnpieUIzWlNCdFlXNTFZV3hzZVNCeVpYTjBZWEowSUhSb1pTQjBhV05yTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2xqYXlncE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbGphMlZ5SUQwZ2QybHVaRzkzTG5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTQjhmQ0J5UVVaVGFHbHRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlNrN1hHNWNkQ0FnSUNCOVhHNWNibHgwSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaXBjYmx4MElDQWdJQ0FnSUNCVWFXTnJYRzVjZENBZ0lDQXFLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUM4cUlFNXZkR1U2SUVGc2JDQmpZV3hzY3lCMGJ5QldaV3h2WTJsMGVTQmhjbVVnY0hWemFHVmtJSFJ2SUhSb1pTQldaV3h2WTJsMGVTNVRkR0YwWlM1allXeHNjeUJoY25KaGVTd2dkMmhwWTJnZ2FYTWdablZzYkhrZ2FYUmxjbUYwWldRZ2RHaHliM1ZuYUNCMWNHOXVJR1ZoWTJnZ2RHbGpheTRnS2k5Y2JseDBJQ0FnSUdaMWJtTjBhVzl1SUhScFkyc2dLSFJwYldWemRHRnRjQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDOHFJRUZ1SUdWdGNIUjVJSFJwYldWemRHRnRjQ0JoY21kMWJXVnVkQ0JwYm1ScFkyRjBaWE1nZEdoaGRDQjBhR2x6SUdseklIUm9aU0JtYVhKemRDQjBhV05ySUc5alkzVnlaVzVqWlNCemFXNWpaU0IwYVdOcmFXNW5JSGRoY3lCMGRYSnVaV1FnYjI0dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnVjJVZ2JHVjJaWEpoWjJVZ2RHaHBjeUJ0WlhSaFpHRjBZU0IwYnlCbWRXeHNlU0JwWjI1dmNtVWdkR2hsSUdacGNuTjBJSFJwWTJzZ2NHRnpjeUJ6YVc1alpTQlNRVVluY3lCcGJtbDBhV0ZzSUhCaGMzTWdhWE1nWm1seVpXUWdkMmhsYm1WMlpYSmNibHgwSUNBZ0lDQWdJQ0FnSUNCMGFHVWdZbkp2ZDNObGNpZHpJRzVsZUhRZ2RHbGpheUJ6ZVc1aklIUnBiV1VnYjJOamRYSnpMQ0IzYUdsamFDQnlaWE4xYkhSeklHbHVJSFJvWlNCbWFYSnpkQ0JsYkdWdFpXNTBjeUJ6ZFdKcVpXTjBaV1FnZEc4Z1ZtVnNiMk5wZEhsY2JseDBJQ0FnSUNBZ0lDQWdJQ0JqWVd4c2N5QmlaV2x1WnlCaGJtbHRZWFJsWkNCdmRYUWdiMllnYzNsdVl5QjNhWFJvSUdGdWVTQmxiR1Z0Wlc1MGN5QmhibWx0WVhSbFpDQnBiVzFsWkdsaGRHVnNlU0IwYUdWeVpXRm1kR1Z5TGlCSmJpQnphRzl5ZEN3Z2QyVWdhV2R1YjNKbFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnZEdobElHWnBjbk4wSUZKQlJpQjBhV05ySUhCaGMzTWdjMjhnZEdoaGRDQmxiR1Z0Wlc1MGN5QmlaV2x1WnlCcGJXMWxaR2xoZEdWc2VTQmpiMjV6WldOMWRHbDJaV3g1SUdGdWFXMWhkR1ZrSUMwdElHbHVjM1JsWVdRZ2IyWWdjMmx0ZFd4MFlXNWxiM1Z6YkhrZ1lXNXBiV0YwWldSY2JseDBJQ0FnSUNBZ0lDQWdJQ0JpZVNCMGFHVWdjMkZ0WlNCV1pXeHZZMmwwZVNCallXeHNJQzB0SUdGeVpTQndjbTl3WlhKc2VTQmlZWFJqYUdWa0lHbHVkRzhnZEdobElITmhiV1VnYVc1cGRHbGhiQ0JTUVVZZ2RHbGpheUJoYm1RZ1kyOXVjMlZ4ZFdWdWRHeDVJSEpsYldGcGJpQnBiaUJ6ZVc1aklIUm9aWEpsWVdaMFpYSXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ2FXWWdLSFJwYldWemRHRnRjQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCWFpTQnBaMjV2Y21VZ1VrRkdKM01nYUdsbmFDQnlaWE52YkhWMGFXOXVJSFJwYldWemRHRnRjQ0J6YVc1alpTQnBkQ0JqWVc0Z1ltVWdjMmxuYm1sbWFXTmhiblJzZVNCdlptWnpaWFFnZDJobGJpQjBhR1VnWW5KdmQzTmxjaUJwYzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtUmxjaUJvYVdkb0lITjBjbVZ6Y3pzZ2QyVWdiM0IwSUdadmNpQmphRzl3Y0dsdVpYTnpJRzkyWlhJZ1lXeHNiM2RwYm1jZ2RHaGxJR0p5YjNkelpYSWdkRzhnWkhKdmNDQm9kV2RsSUdOb2RXNXJjeUJ2WmlCbWNtRnRaWE11SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBhVzFsUTNWeWNtVnVkQ0E5SUNodVpYY2dSR0YwWlNrdVoyVjBWR2x0WlNncE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEWVd4c0lFbDBaWEpoZEdsdmJseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJGc2JITk1aVzVuZEdnZ1BTQldaV3h2WTJsMGVTNVRkR0YwWlM1allXeHNjeTVzWlc1bmRHZzdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nVkc4Z2MzQmxaV1FnZFhBZ2FYUmxjbUYwYVc1bklHOTJaWElnZEdocGN5QmhjbkpoZVN3Z2FYUWdhWE1nWTI5dGNHRmpkR1ZrSUNobVlXeHpaWGtnYVhSbGJYTWdMUzBnWTJGc2JITWdkR2hoZENCb1lYWmxJR052YlhCc1pYUmxaQ0F0TFNCaGNtVWdjbVZ0YjNabFpDbGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmhsYmlCcGRITWdiR1Z1WjNSb0lHaGhjeUJpWVd4c2IyOXVaV1FnZEc4Z1lTQndiMmx1ZENCMGFHRjBJR05oYmlCcGJYQmhZM1FnZEdsamF5QndaWEptYjNKdFlXNWpaUzRnVkdocGN5QnZibXg1SUdKbFkyOXRaWE1nYm1WalpYTnpZWEo1SUhkb1pXNGdZVzVwYldGMGFXOXVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoY3lCaVpXVnVJR052Ym5ScGJuVnZkWE1nZDJsMGFDQnRZVzU1SUdWc1pXMWxiblJ6SUc5MlpYSWdZU0JzYjI1bklIQmxjbWx2WkNCdlppQjBhVzFsT3lCM2FHVnVaWFpsY2lCaGJHd2dZV04wYVhabElHTmhiR3h6SUdGeVpTQmpiMjF3YkdWMFpXUXNJR052YlhCc1pYUmxRMkZzYkNncElHTnNaV0Z5Y3lCV1pXeHZZMmwwZVM1VGRHRjBaUzVqWVd4c2N5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaGJHeHpUR1Z1WjNSb0lENGdNVEF3TURBcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlpsYkc5amFYUjVMbE4wWVhSbExtTmhiR3h6SUQwZ1kyOXRjR0ZqZEZOd1lYSnpaVUZ5Y21GNUtGWmxiRzlqYVhSNUxsTjBZWFJsTG1OaGJHeHpLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsMFpYSmhkR1VnZEdoeWIzVm5hQ0JsWVdOb0lHRmpkR2wyWlNCallXeHNMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdOaGJHeHpUR1Z1WjNSb095QnBLeXNwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRmRvWlc0Z1lTQldaV3h2WTJsMGVTQmpZV3hzSUdseklHTnZiWEJzWlhSbFpDd2dhWFJ6SUZabGJHOWphWFI1TGxOMFlYUmxMbU5oYkd4eklHVnVkSEo1SUdseklITmxkQ0IwYnlCbVlXeHpaUzRnUTI5dWRHbHVkV1VnYjI0Z2RHOGdkR2hsSUc1bGVIUWdZMkZzYkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFZtVnNiMk5wZEhrdVUzUmhkR1V1WTJGc2JITmJhVjBwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUTJGc2JDMVhhV1JsSUZaaGNtbGhZbXhsYzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJGc2JFTnZiblJoYVc1bGNpQTlJRlpsYkc5amFYUjVMbE4wWVhSbExtTmhiR3h6VzJsZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJHd2dQU0JqWVd4c1EyOXVkR0ZwYm1WeVd6QmRMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkSE1nUFNCallXeHNRMjl1ZEdGcGJtVnlXekpkTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJwYldWVGRHRnlkQ0E5SUdOaGJHeERiMjUwWVdsdVpYSmJNMTBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWx5YzNSVWFXTnJJRDBnSVNGMGFXMWxVM1JoY25Rc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhkbFpXNUVkVzF0ZVZaaGJIVmxJRDBnYm5Wc2JEdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdkR2x0WlZOMFlYSjBJR2x6SUhWdVpHVm1hVzVsWkN3Z2RHaGxiaUIwYUdseklHbHpJSFJvWlNCbWFYSnpkQ0IwYVcxbElIUm9ZWFFnZEdocGN5QmpZV3hzSUdoaGN5QmlaV1Z1SUhCeWIyTmxjM05sWkNCaWVTQjBhV05yS0NrdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JYWlNCaGMzTnBaMjRnZEdsdFpWTjBZWEowSUc1dmR5QnpieUIwYUdGMElHbDBjeUIyWVd4MVpTQnBjeUJoY3lCamJHOXpaU0IwYnlCMGFHVWdjbVZoYkNCaGJtbHRZWFJwYjI0Z2MzUmhjblFnZEdsdFpTQmhjeUJ3YjNOemFXSnNaUzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaERiMjUyWlhKelpXeDVMQ0JvWVdRZ2RHbHRaVk4wWVhKMElHSmxaVzRnWkdWbWFXNWxaQ0IzYUdWdUlIUm9hWE1nWTJGc2JDQjNZWE1nWVdSa1pXUWdkRzhnVm1Wc2IyTnBkSGt1VTNSaGRHVXVZMkZzYkhNc0lIUm9aU0JrWld4aGVWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1WMGQyVmxiaUIwYUdGMElIUnBiV1VnWVc1a0lHNXZkeUIzYjNWc1pDQmpZWFZ6WlNCMGFHVWdabWx5YzNRZ1ptVjNJR1p5WVcxbGN5QnZaaUIwYUdVZ2RIZGxaVzRnZEc4Z1ltVWdjMnRwY0hCbFpDQnphVzVqWlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR1Z5WTJWdWRFTnZiWEJzWlhSbElHbHpJR05oYkdOMWJHRjBaV1FnY21Wc1lYUnBkbVVnZEc4Z2RHbHRaVk4wWVhKMExpa2dLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFWjFjblJvWlhJc0lITjFZblJ5WVdOMElERTJiWE1nS0hSb1pTQmhjSEJ5YjNocGJXRjBaU0J5WlhOdmJIVjBhVzl1SUc5bUlGSkJSaWtnWm5KdmJTQjBhR1VnWTNWeWNtVnVkQ0IwYVcxbElIWmhiSFZsSUhOdklIUm9ZWFFnZEdobFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYVhKemRDQjBhV05ySUdsMFpYSmhkR2x2YmlCcGMyNG5kQ0IzWVhOMFpXUWdZbmtnWVc1cGJXRjBhVzVuSUdGMElEQWxJSFIzWldWdUlHTnZiWEJzWlhScGIyNHNJSGRvYVdOb0lIZHZkV3hrSUhCeWIyUjFZMlVnZEdobFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WVcxbElITjBlV3hsSUhaaGJIVmxJR0Z6SUhSb1pTQmxiR1Z0Wlc1MEozTWdZM1Z5Y21WdWRDQjJZV3gxWlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHbHRaVk4wWVhKMEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaVk4wWVhKMElEMGdWbVZzYjJOcGRIa3VVM1JoZEdVdVkyRnNiSE5iYVYxYk0xMGdQU0IwYVcxbFEzVnljbVZ1ZENBdElERTJPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJVYUdVZ2RIZGxaVzRuY3lCamIyMXdiR1YwYVc5dUlIQmxjbU5sYm5SaFoyVWdhWE1nY21Wc1lYUnBkbVVnZEc4Z2RHaGxJSFIzWldWdUozTWdjM1JoY25RZ2RHbHRaU3dnYm05MElIUm9aU0IwZDJWbGJpZHpJSE4wWVhKMElIWmhiSFZsWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9kMmhwWTJnZ2QyOTFiR1FnY21WemRXeDBJR2x1SUhWdWNISmxaR2xqZEdGaWJHVWdkSGRsWlc0Z1pIVnlZWFJwYjI1eklITnBibU5sSUVwaGRtRlRZM0pwY0hRbmN5QjBhVzFsY25NZ1lYSmxJRzV2ZENCd1lYSjBhV04xYkdGeWJIa2dZV05qZFhKaGRHVXBMbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1FXTmpiM0prYVc1bmJIa3NJSGRsSUdWdWMzVnlaU0IwYUdGMElIQmxjbU5sYm5SRGIyMXdiR1YwWlNCa2IyVnpJRzV2ZENCbGVHTmxaV1FnTVM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd1pYSmpaVzUwUTI5dGNHeGxkR1VnUFNCTllYUm9MbTFwYmlnb2RHbHRaVU4xY25KbGJuUWdMU0IwYVcxbFUzUmhjblFwSUM4Z2IzQjBjeTVrZFhKaGRHbHZiaXdnTVNrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JGYkdWdFpXNTBJRWwwWlhKaGRHbHZibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1JtOXlJR1YyWlhKNUlHTmhiR3dzSUdsMFpYSmhkR1VnZEdoeWIzVm5hQ0JsWVdOb0lHOW1JSFJvWlNCbGJHVnRaVzUwY3lCcGJpQnBkSE1nYzJWMExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlEQXNJR05oYkd4TVpXNW5kR2dnUFNCallXeHNMbXhsYm1kMGFEc2dhaUE4SUdOaGJHeE1aVzVuZEdnN0lHb3JLeWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGQyVmxibk5EYjI1MFlXbHVaWElnUFNCallXeHNXMnBkTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwSUQwZ2RIZGxaVzV6UTI5dWRHRnBibVZ5TG1Wc1pXMWxiblE3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRGFHVmpheUIwYnlCelpXVWdhV1lnZEdocGN5QmxiR1Z0Wlc1MElHaGhjeUJpWldWdUlHUmxiR1YwWldRZ2JXbGtkMkY1SUhSb2NtOTFaMmdnZEdobElHRnVhVzFoZEdsdmJpQmllU0JqYUdWamEybHVaeUJtYjNJZ2RHaGxYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVmtJR1Y0YVhOMFpXNWpaU0J2WmlCcGRITWdaR0YwWVNCallXTm9aUzRnU1dZZ2FYUW5jeUJuYjI1bExDQnphMmx3SUdGdWFXMWhkR2x1WnlCMGFHbHpJR1ZzWlcxbGJuUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGRVlYUmhLR1ZzWlcxbGJuUXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGNtRnVjMlp2Y20xUWNtOXdaWEowZVVWNGFYTjBjeUE5SUdaaGJITmxPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVhWE53YkdGNUlDWWdWbWx6YVdKcGJHbDBlU0JVYjJkbmJHbHVaMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUIwYUdVZ1pHbHpjR3hoZVNCdmNIUnBiMjRnYVhNZ2MyVjBJSFJ2SUc1dmJpMWNJbTV2Ym1WY0lpd2djMlYwSUdsMElIVndabkp2Ym5RZ2MyOGdkR2hoZENCMGFHVWdaV3hsYldWdWRDQmpZVzRnWW1WamIyMWxJSFpwYzJsaWJHVWdZbVZtYjNKbElIUjNaV1Z1YVc1bklHSmxaMmx1Y3k1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1QzUm9aWEozYVhObExDQmthWE53YkdGNUozTWdYQ0p1YjI1bFhDSWdkbUZzZFdVZ2FYTWdjMlYwSUdsdUlHTnZiWEJzWlhSbFEyRnNiQ2dwSUc5dVkyVWdkR2hsSUdGdWFXMWhkR2x2YmlCb1lYTWdZMjl0Y0d4bGRHVmtMaWtnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzQjBjeTVrYVhOd2JHRjVJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdiM0IwY3k1a2FYTndiR0Y1SUNFOVBTQnVkV3hzSUNZbUlHOXdkSE11WkdsemNHeGhlU0FoUFQwZ1hDSnViMjVsWENJcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d2RITXVaR2x6Y0d4aGVTQTlQVDBnWENKbWJHVjRYQ0lwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWJHVjRWbUZzZFdWeklEMGdXeUJjSWkxM1pXSnJhWFF0WW05NFhDSXNJRndpTFcxdmVpMWliM2hjSWl3Z1hDSXRiWE10Wm14bGVHSnZlRndpTENCY0lpMTNaV0pyYVhRdFpteGxlRndpSUYwN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRdVpXRmphQ2htYkdWNFZtRnNkV1Z6TENCbWRXNWpkR2x2YmlocExDQm1iR1Y0Vm1Gc2RXVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEVTFNdWMyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCY0ltUnBjM0JzWVhsY0lpd2dabXhsZUZaaGJIVmxLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ExTlRMbk5sZEZCeWIzQmxjblI1Vm1Gc2RXVW9aV3hsYldWdWRDd2dYQ0prYVhOd2JHRjVYQ0lzSUc5d2RITXVaR2x6Y0d4aGVTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dVMkZ0WlNCbmIyVnpJSGRwZEdnZ2RHaGxJSFpwYzJsaWFXeHBkSGtnYjNCMGFXOXVMQ0JpZFhRZ2FYUnpJRndpYm05dVpWd2lJR1Z4ZFdsMllXeGxiblFnYVhNZ1hDSm9hV1JrWlc1Y0lpNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCMGN5NTJhWE5wWW1sc2FYUjVJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdiM0IwY3k1MmFYTnBZbWxzYVhSNUlDRTlQU0JjSW1ocFpHUmxibHdpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTlRVeTV6WlhSUWNtOXdaWEowZVZaaGJIVmxLR1ZzWlcxbGJuUXNJRndpZG1semFXSnBiR2wwZVZ3aUxDQnZjSFJ6TG5acGMybGlhV3hwZEhrcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JRY205d1pYSjBlU0JKZEdWeVlYUnBiMjVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkdiM0lnWlhabGNua2daV3hsYldWdWRDd2dhWFJsY21GMFpTQjBhSEp2ZFdkb0lHVmhZMmdnY0hKdmNHVnlkSGt1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY0hKdmNHVnlkSGtnYVc0Z2RIZGxaVzV6UTI5dWRHRnBibVZ5S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTV2ZEdVNklFbHVJR0ZrWkdsMGFXOXVJSFJ2SUhCeWIzQmxjblI1SUhSM1pXVnVJR1JoZEdFc0lIUjNaV1Z1YzBOdmJuUmhhVzVsY2lCamIyNTBZV2x1Y3lCaElISmxabVZ5Wlc1alpTQjBieUJwZEhNZ1lYTnpiMk5wWVhSbFpDQmxiR1Z0Wlc1MExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NISnZjR1Z5ZEhrZ0lUMDlJRndpWld4bGJXVnVkRndpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RIZGxaVzRnUFNCMGQyVmxibk5EYjI1MFlXbHVaWEpiY0hKdmNHVnlkSGxkTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJXWVd4MVpTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJGWVhOcGJtY2dZMkZ1SUdWcGRHaGxjaUJpWlNCaElIQnlaUzFuWlc1bGNtVmhkR1ZrSUdaMWJtTjBhVzl1SUc5eUlHRWdjM1J5YVc1bklIUm9ZWFFnY21WbVpYSmxibU5sY3lCaElIQnlaUzF5WldkcGMzUmxjbVZrSUdWaGMybHVaMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dUlIUm9aU0JXWld4dlkybDBlUzVGWVhOcGJtZHpJRzlpYW1WamRDNGdTVzRnWldsMGFHVnlJR05oYzJVc0lISmxkSFZ5YmlCMGFHVWdZWEJ3Y205d2NtbGhkR1VnWldGemFXNW5JQ3BtZFc1amRHbHZiaW91SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXRnphVzVuSUQwZ1ZIbHdaUzVwYzFOMGNtbHVaeWgwZDJWbGJpNWxZWE5wYm1jcElEOGdWbVZzYjJOcGRIa3VSV0Z6YVc1bmMxdDBkMlZsYmk1bFlYTnBibWRkSURvZ2RIZGxaVzR1WldGemFXNW5PMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JEZFhKeVpXNTBJRlpoYkhWbElFTmhiR04xYkdGMGFXOXVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUhSb2FYTWdhWE1nZEdobElHeGhjM1FnZEdsamF5QndZWE56SUNocFppQjNaU2QyWlNCeVpXRmphR1ZrSURFd01DVWdZMjl0Y0d4bGRHbHZiaUJtYjNJZ2RHaHBjeUIwZDJWbGJpa3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibk4xY21VZ2RHaGhkQ0JqZFhKeVpXNTBWbUZzZFdVZ2FYTWdaWGh3YkdsamFYUnNlU0J6WlhRZ2RHOGdhWFJ6SUhSaGNtZGxkQ0JsYm1SV1lXeDFaU0J6YnlCMGFHRjBJR2wwSjNNZ2JtOTBJSE4xWW1wbFkzUmxaQ0IwYnlCaGJua2djbTkxYm1ScGJtY3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dWeVkyVnVkRU52YlhCc1pYUmxJRDA5UFNBeEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGWmhiSFZsSUQwZ2RIZGxaVzR1Wlc1a1ZtRnNkV1U3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJQZEdobGNuZHBjMlVzSUdOaGJHTjFiR0YwWlNCamRYSnlaVzUwVm1Gc2RXVWdZbUZ6WldRZ2IyNGdkR2hsSUdOMWNuSmxiblFnWkdWc2RHRWdabkp2YlNCemRHRnlkRlpoYkhWbExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkSGRsWlc1RVpXeDBZU0E5SUhSM1pXVnVMbVZ1WkZaaGJIVmxJQzBnZEhkbFpXNHVjM1JoY25SV1lXeDFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBWbUZzZFdVZ1BTQjBkMlZsYmk1emRHRnlkRlpoYkhWbElDc2dLSFIzWldWdVJHVnNkR0VnS2lCbFlYTnBibWNvY0dWeVkyVnVkRU52YlhCc1pYUmxMQ0J2Y0hSekxDQjBkMlZsYmtSbGJIUmhLU2s3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUJ1YnlCMllXeDFaU0JqYUdGdVoyVWdhWE1nYjJOamRYSnlhVzVuTENCa2IyNG5kQ0J3Y205alpXVmtJSGRwZEdnZ1JFOU5JSFZ3WkdGMGFXNW5MaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2habWx5YzNSVWFXTnJJQ1ltSUNoamRYSnlaVzUwVm1Gc2RXVWdQVDA5SUhSM1pXVnVMbU4xY25KbGJuUldZV3gxWlNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBkMlZsYmk1amRYSnlaVzUwVm1Gc2RXVWdQU0JqZFhKeVpXNTBWbUZzZFdVN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFbG1JSGRsSjNKbElIUjNaV1Z1YVc1bklHRWdabUZyWlNBbmRIZGxaVzRuSUhCeWIzQmxjblI1SUdsdUlHOXlaR1Z5SUhSdklHeHZaeUIwY21GdWMybDBhVzl1SUhaaGJIVmxjeXdnZFhCa1lYUmxJSFJvWlNCdmJtVXRjR1Z5TFdOaGJHd2dkbUZ5YVdGaWJHVWdjMjhnZEdoaGRGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYUWdZMkZ1SUdKbElIQmhjM05sWkNCcGJuUnZJSFJvWlNCd2NtOW5jbVZ6Y3lCallXeHNZbUZqYXk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTl3WlhKMGVTQTlQVDBnWENKMGQyVmxibHdpS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIZGxaVzVFZFcxdGVWWmhiSFZsSUQwZ1kzVnljbVZ1ZEZaaGJIVmxPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdTRzl2YTNNNklGQmhjblFnU1Z4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRVp2Y2lCb2IyOXJaV1FnY0hKdmNHVnlkR2xsY3l3Z2RHaGxJRzVsZDJ4NUxYVndaR0YwWldRZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdWRFlXTm9aU0JwY3lCallXTm9aV1FnYjI1MGJ5QjBhR1VnWld4bGJXVnVkQ0J6YnlCMGFHRjBJR2wwSUdOaGJpQmlaU0IxYzJWa1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUhOMVluTmxjWFZsYm5RZ2FHOXZhM01nYVc0Z2RHaHBjeUJqWVd4c0lIUm9ZWFFnWVhKbElHRnpjMjlqYVdGMFpXUWdkMmwwYUNCMGFHVWdjMkZ0WlNCeWIyOTBJSEJ5YjNCbGNuUjVMaUJKWmlCM1pTQmthV1J1SjNRZ1kyRmphR1VnZEdobElIVndaR0YwWldSY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTd2daV0ZqYUNCemRXSnpaWEYxWlc1MElIVndaR0YwWlNCMGJ5QjBhR1VnY205dmRDQndjbTl3WlhKMGVTQnBiaUIwYUdseklIUnBZMnNnY0dGemN5QjNiM1ZzWkNCeVpYTmxkQ0IwYUdVZ2NISmxkbWx2ZFhNZ2FHOXZheWR6WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYQmtZWFJsY3lCMGJ5QnliMjkwVUhKdmNHVnlkSGxXWVd4MVpTQndjbWx2Y2lCMGJ5QnBibXBsWTNScGIyNHVJRUVnYm1salpTQndaWEptYjNKdFlXNWpaU0JpZVhCeWIyUjFZM1FnYjJZZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdVZ1kyRmphR2x1WnlCcGN5QjBhR0YwWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzVmljMlZ4ZFdWdWRHeDVJR05vWVdsdVpXUWdZVzVwYldGMGFXOXVjeUIxYzJsdVp5QjBhR1VnYzJGdFpTQm9iMjlyVW05dmRDQmlkWFFnWVNCa2FXWm1aWEpsYm5RZ2FHOXZheUJqWVc0Z2RYTmxJSFJvYVhNZ1kyRmphR1ZrSUhKdmIzUlFjbTl3WlhKMGVWWmhiSFZsTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hEVTFNdVNHOXZhM011Y21WbmFYTjBaWEpsWkZ0d2NtOXdaWEowZVYwcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHaHZiMnRTYjI5MElEMGdRMU5UTGtodmIydHpMbWRsZEZKdmIzUW9jSEp2Y0dWeWRIa3BMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVkRZV05vWlNBOUlFUmhkR0VvWld4bGJXVnVkQ2t1Y205dmRGQnliM0JsY25SNVZtRnNkV1ZEWVdOb1pWdG9iMjlyVW05dmRGMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEp2YjNSUWNtOXdaWEowZVZaaGJIVmxRMkZqYUdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjNaV1Z1TG5KdmIzUlFjbTl3WlhKMGVWWmhiSFZsSUQwZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdWRFlXTm9aVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRVQwMGdWWEJrWVhSbFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJ6WlhSUWNtOXdaWEowZVZaaGJIVmxLQ2tnY21WMGRYSnVjeUJoYmlCaGNuSmhlU0J2WmlCMGFHVWdjSEp2Y0dWeWRIa2dibUZ0WlNCaGJtUWdjSEp2Y0dWeWRIa2dkbUZzZFdVZ2NHOXpkQ0JoYm5rZ2JtOXliV0ZzYVhwaGRHbHZiaUIwYUdGMElHMWhlU0JvWVhabElHSmxaVzRnY0dWeVptOXliV1ZrTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRTV2ZEdVNklGUnZJSE52YkhabElHRnVJRWxGUEQwNElIQnZjMmwwYVc5dWFXNW5JR0oxWnl3Z2RHaGxJSFZ1YVhRZ2RIbHdaU0JwY3lCa2NtOXdjR1ZrSUhkb1pXNGdjMlYwZEdsdVp5QmhJSEJ5YjNCbGNuUjVJSFpoYkhWbElHOW1JREF1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0ZrYW5WemRHVmtVMlYwUkdGMFlTQTlJRU5UVXk1elpYUlFjbTl3WlhKMGVWWmhiSFZsS0dWc1pXMWxiblFzSUM4cUlGTkZWQ0FxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBlU3hjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGRsWlc0dVkzVnljbVZ1ZEZaaGJIVmxJQ3NnS0hCaGNuTmxSbXh2WVhRb1kzVnljbVZ1ZEZaaGJIVmxLU0E5UFQwZ01DQS9JRndpWENJZ09pQjBkMlZsYmk1MWJtbDBWSGx3WlNrc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSM1pXVnVMbkp2YjNSUWNtOXdaWEowZVZaaGJIVmxMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBkMlZsYmk1elkzSnZiR3hFWVhSaEtUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1NHOXZhM002SUZCaGNuUWdTVWxjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkzSUhSb1lYUWdkMlVnYUdGMlpTQjBhR1VnYUc5dmF5ZHpJSFZ3WkdGMFpXUWdjbTl2ZEZCeWIzQmxjblI1Vm1Gc2RXVWdLSFJvWlNCd2IzTjBMWEJ5YjJObGMzTmxaQ0IyWVd4MVpTQndjbTkyYVdSbFpDQmllU0JoWkdwMWMzUmxaRk5sZEVSaGRHRXBMQ0JqWVdOb1pTQnBkQ0J2Ym5SdklIUm9aU0JsYkdWdFpXNTBMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaERVMU11U0c5dmEzTXVjbVZuYVhOMFpYSmxaRnR3Y205d1pYSjBlVjBwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVTJsdVkyVWdZV1JxZFhOMFpXUlRaWFJFWVhSaElHTnZiblJoYVc1eklHNXZjbTFoYkdsNlpXUWdaR0YwWVNCeVpXRmtlU0JtYjNJZ1JFOU5JSFZ3WkdGMGFXNW5MQ0IwYUdVZ2NtOXZkRkJ5YjNCbGNuUjVWbUZzZFdVZ2JtVmxaSE1nZEc4Z1ltVWdjbVV0WlhoMGNtRmpkR1ZrSUdaeWIyMGdhWFJ6SUc1dmNtMWhiR2w2WldRZ1ptOXliUzRnUHo4Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTlRVeTVPYjNKdFlXeHBlbUYwYVc5dWN5NXlaV2RwYzNSbGNtVmtXMmh2YjJ0U2IyOTBYU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUkdGMFlTaGxiR1Z0Wlc1MEtTNXliMjkwVUhKdmNHVnlkSGxXWVd4MVpVTmhZMmhsVzJodmIydFNiMjkwWFNBOUlFTlRVeTVPYjNKdFlXeHBlbUYwYVc5dWN5NXlaV2RwYzNSbGNtVmtXMmh2YjJ0U2IyOTBYU2hjSW1WNGRISmhZM1JjSWl3Z2JuVnNiQ3dnWVdScWRYTjBaV1JUWlhSRVlYUmhXekZkS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFUmhkR0VvWld4bGJXVnVkQ2t1Y205dmRGQnliM0JsY25SNVZtRnNkV1ZEWVdOb1pWdG9iMjlyVW05dmRGMGdQU0JoWkdwMWMzUmxaRk5sZEVSaGRHRmJNVjA3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVkhKaGJuTm1iM0p0YzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFWnNZV2NnZDJobGRHaGxjaUJoSUhSeVlXNXpabTl5YlNCd2NtOXdaWEowZVNCcGN5QmlaV2x1WnlCaGJtbHRZWFJsWkNCemJ5QjBhR0YwSUdac2RYTm9WSEpoYm5ObWIzSnRRMkZqYUdVb0tTQmpZVzRnWW1VZ2RISnBaMmRsY21Wa0lHOXVZMlVnZEdocGN5QjBhV05ySUhCaGMzTWdhWE1nWTI5dGNHeGxkR1V1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0ZrYW5WemRHVmtVMlYwUkdGMFlWc3dYU0E5UFQwZ1hDSjBjbUZ1YzJadmNtMWNJaWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMVFjbTl3WlhKMGVVVjRhWE4wY3lBOUlIUnlkV1U3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjJKcGJHVklRVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUJ0YjJKcGJHVklRU0JwY3lCbGJtRmliR1ZrTENCelpYUWdkR2hsSUhSeVlXNXpiR0YwWlROa0lIUnlZVzV6Wm05eWJTQjBieUJ1ZFd4c0lIUnZJR1p2Y21ObElHaGhjbVIzWVhKbElHRmpZMlZzWlhKaGRHbHZiaTVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JKZENkeklITmhabVVnZEc4Z2IzWmxjbkpwWkdVZ2RHaHBjeUJ3Y205d1pYSjBlU0J6YVc1alpTQldaV3h2WTJsMGVTQmtiMlZ6YmlkMElHRmpkSFZoYkd4NUlITjFjSEJ2Y25RZ2FYUnpJR0Z1YVcxaGRHbHZiaUFvYUc5dmEzTWdZWEpsSUhWelpXUWdhVzRnYVhSeklIQnNZV05sS1M0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwY3k1dGIySnBiR1ZJUVNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJFYjI0bmRDQnpaWFFnZEdobElHNTFiR3dnZEhKaGJuTm1iM0p0SUdoaFkyc2dhV1lnZDJVbmRtVWdZV3h5WldGa2VTQmtiMjVsSUhOdkxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1JHRjBZU2hsYkdWdFpXNTBLUzUwY21GdWMyWnZjbTFEWVdOb1pTNTBjbUZ1YzJ4aGRHVXpaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkJiR3dnWlc1MGNtbGxjeUJ2YmlCMGFHVWdkSEpoYm5ObWIzSnRRMkZqYUdVZ2IySnFaV04wSUdGeVpTQnNZWFJsY2lCamIyNWpZWFJsYm1GMFpXUWdhVzUwYnlCaElITnBibWRzWlNCMGNtRnVjMlp2Y20wZ2MzUnlhVzVuSUhacFlTQm1iSFZ6YUZSeVlXNXpabTl5YlVOaFkyaGxLQ2t1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JFWVhSaEtHVnNaVzFsYm5RcExuUnlZVzV6Wm05eWJVTmhZMmhsTG5SeVlXNXpiR0YwWlROa0lEMGdYQ0lvTUhCNExDQXdjSGdzSURCd2VDbGNJanRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRVSEp2Y0dWeWRIbEZlR2x6ZEhNZ1BTQjBjblZsTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUnlZVzV6Wm05eWJWQnliM0JsY25SNVJYaHBjM1J6S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTlRVeTVtYkhWemFGUnlZVzV6Wm05eWJVTmhZMmhsS0dWc1pXMWxiblFwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVkdobElHNXZiaTFjSW01dmJtVmNJaUJrYVhOd2JHRjVJSFpoYkhWbElHbHpJRzl1YkhrZ1lYQndiR2xsWkNCMGJ5QmhiaUJsYkdWdFpXNTBJRzl1WTJVZ0xTMGdkMmhsYmlCcGRITWdZWE56YjJOcFlYUmxaQ0JqWVd4c0lHbHpJR1pwY25OMElIUnBZMnRsWkNCMGFISnZkV2RvTGx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRV05qYjNKa2FXNW5iSGtzSUdsMEozTWdjMlYwSUhSdklHWmhiSE5sSUhOdklIUm9ZWFFnYVhRZ2FYTnVKM1FnY21VdGNISnZZMlZ6YzJWa0lHSjVJSFJvYVhNZ1kyRnNiQ0JwYmlCMGFHVWdibVY0ZENCMGFXTnJMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzl3ZEhNdVpHbHpjR3hoZVNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUc5d2RITXVaR2x6Y0d4aGVTQWhQVDBnWENKdWIyNWxYQ0lwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JXWld4dlkybDBlUzVUZEdGMFpTNWpZV3hzYzF0cFhWc3lYUzVrYVhOd2JHRjVJRDBnWm1Gc2MyVTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwY3k1MmFYTnBZbWxzYVhSNUlDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2IzQjBjeTUyYVhOcFltbHNhWFI1SUNFOVBTQmNJbWhwWkdSbGJsd2lLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWbVZzYjJOcGRIa3VVM1JoZEdVdVkyRnNiSE5iYVYxYk1sMHVkbWx6YVdKcGJHbDBlU0E5SUdaaGJITmxPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJRWVhOeklIUm9aU0JsYkdWdFpXNTBjeUJoYm1RZ2RHaGxJSFJwYldsdVp5QmtZWFJoSUNod1pYSmpaVzUwUTI5dGNHeGxkR1VzSUcxelVtVnRZV2x1YVc1bkxDQjBhVzFsVTNSaGNuUXNJSFIzWldWdVJIVnRiWGxXWVd4MVpTa2dhVzUwYnlCMGFHVWdjSEp2WjNKbGMzTWdZMkZzYkdKaFkyc3VJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwY3k1d2NtOW5jbVZ6Y3lrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVjSEp2WjNKbGMzTXVZMkZzYkNoallXeHNRMjl1ZEdGcGJtVnlXekZkTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1EyOXVkR0ZwYm1WeVd6RmRMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndaWEpqWlc1MFEyOXRjR3hsZEdVc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUUxaGRHZ3ViV0Y0S0RBc0lDaDBhVzFsVTNSaGNuUWdLeUJ2Y0hSekxtUjFjbUYwYVc5dUtTQXRJSFJwYldWRGRYSnlaVzUwS1N4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsdFpWTjBZWEowTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZDJWbGJrUjFiVzE1Vm1Gc2RXVXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJKWmlCMGFHbHpJR05oYkd3Z2FHRnpJR1pwYm1semFHVmtJSFIzWldWdWFXNW5MQ0J3WVhOeklHbDBjeUJwYm1SbGVDQjBieUJqYjIxd2JHVjBaVU5oYkd3b0tTQjBieUJvWVc1a2JHVWdZMkZzYkNCamJHVmhiblZ3TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCbGNtTmxiblJEYjIxd2JHVjBaU0E5UFQwZ01Ta2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiWEJzWlhSbFEyRnNiQ2hwS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRTV2ZEdVNklHTnZiWEJzWlhSbFEyRnNiQ2dwSUhObGRITWdkR2hsSUdselZHbGphMmx1WnlCbWJHRm5JSFJ2SUdaaGJITmxJSGRvWlc0Z2RHaGxJR3hoYzNRZ1kyRnNiQ0J2YmlCV1pXeHZZMmwwZVM1VGRHRjBaUzVqWVd4c2N5Qm9ZWE1nWTI5dGNHeGxkR1ZrTGlBcUwxeHVYSFFnSUNBZ0lDQWdJR2xtSUNoV1pXeHZZMmwwZVM1VGRHRjBaUzVwYzFScFkydHBibWNwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEdsamEyVnlLSFJwWTJzcE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4MElDQWdJSDFjYmx4dVhIUWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0JEWVd4c0lFTnZiWEJzWlhScGIyNWNibHgwSUNBZ0lDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUM4cUlFNXZkR1U2SUZWdWJHbHJaU0IwYVdOcktDa3NJSGRvYVdOb0lIQnliMk5sYzNObGN5QmhiR3dnWVdOMGFYWmxJR05oYkd4eklHRjBJRzl1WTJVc0lHTmhiR3dnWTI5dGNHeGxkR2x2YmlCcGN5Qm9ZVzVrYkdWa0lHOXVJR0VnY0dWeUxXTmhiR3dnWW1GemFYTXVJQ292WEc1Y2RDQWdJQ0JtZFc1amRHbHZiaUJqYjIxd2JHVjBaVU5oYkd3Z0tHTmhiR3hKYm1SbGVDd2dhWE5UZEc5d2NHVmtLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0x5b2dSVzV6ZFhKbElIUm9aU0JqWVd4c0lHVjRhWE4wY3k0Z0tpOWNibHgwSUNBZ0lDQWdJQ0JwWmlBb0lWWmxiRzlqYVhSNUxsTjBZWFJsTG1OaGJHeHpXMk5oYkd4SmJtUmxlRjBwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDOHFJRkIxYkd3Z2RHaGxJRzFsZEdGa1lYUmhJR1p5YjIwZ2RHaGxJR05oYkd3dUlDb3ZYRzVjZENBZ0lDQWdJQ0FnZG1GeUlHTmhiR3dnUFNCV1pXeHZZMmwwZVM1VGRHRjBaUzVqWVd4c2MxdGpZV3hzU1c1a1pYaGRXekJkTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JsYkdWdFpXNTBjeUE5SUZabGJHOWphWFI1TGxOMFlYUmxMbU5oYkd4elcyTmhiR3hKYm1SbGVGMWJNVjBzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEhNZ1BTQldaV3h2WTJsMGVTNVRkR0YwWlM1allXeHNjMXRqWVd4c1NXNWtaWGhkV3pKZExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsY2lBOUlGWmxiRzlqYVhSNUxsTjBZWFJsTG1OaGJHeHpXMk5oYkd4SmJtUmxlRjFiTkYwN1hHNWNibHgwSUNBZ0lDQWdJQ0IyWVhJZ2NtVnRZV2x1YVc1blEyRnNiSE5GZUdsemRDQTlJR1poYkhObE8xeHVYRzVjZENBZ0lDQWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmx4MElDQWdJQ0FnSUNBZ0lDQkZiR1Z0Wlc1MElFWnBibUZzYVhwaGRHbHZibHh1WEhRZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z1kyRnNiRXhsYm1kMGFDQTlJR05oYkd3dWJHVnVaM1JvT3lCcElEd2dZMkZzYkV4bGJtZDBhRHNnYVNzcktTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsYkdWdFpXNTBJRDBnWTJGc2JGdHBYUzVsYkdWdFpXNTBPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUVsbUlIUm9aU0IxYzJWeUlITmxkQ0JrYVhOd2JHRjVJSFJ2SUZ3aWJtOXVaVndpSUNocGJuUmxibVJwYm1jZ2RHOGdhR2xrWlNCMGFHVWdaV3hsYldWdWRDa3NJSE5sZENCcGRDQnViM2NnZEdoaGRDQjBhR1VnWVc1cGJXRjBhVzl1SUdoaGN5QmpiMjF3YkdWMFpXUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxSUU1dmRHVTZJR1JwYzNCc1lYazZibTl1WlNCcGMyNG5kQ0J6WlhRZ2QyaGxiaUJqWVd4c2N5QmhjbVVnYldGdWRXRnNiSGtnYzNSdmNIQmxaQ0FvZG1saElGWmxiRzlqYVhSNUtGd2ljM1J2Y0Z3aUtTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dSR2x6Y0d4aGVTQm5aWFJ6SUdsbmJtOXlaV1FnZDJsMGFDQmNJbkpsZG1WeWMyVmNJaUJqWVd4c2N5QmhibVFnYVc1bWFXNXBkR1VnYkc5dmNITXNJSE5wYm1ObElIUm9hWE1nWW1Wb1lYWnBiM0lnZDI5MWJHUWdZbVVnZFc1a1pYTnBjbUZpYkdVdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYVhOVGRHOXdjR1ZrSUNZbUlDRnZjSFJ6TG14dmIzQXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjSFJ6TG1ScGMzQnNZWGtnUFQwOUlGd2libTl1WlZ3aUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ExTlRMbk5sZEZCeWIzQmxjblI1Vm1Gc2RXVW9aV3hsYldWdWRDd2dYQ0prYVhOd2JHRjVYQ0lzSUc5d2RITXVaR2x6Y0d4aGVTazdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hSekxuWnBjMmxpYVd4cGRIa2dQVDA5SUZ3aWFHbGtaR1Z1WENJcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRFUxTXVjMlYwVUhKdmNHVnlkSGxXWVd4MVpTaGxiR1Z0Wlc1MExDQmNJblpwYzJsaWFXeHBkSGxjSWl3Z2IzQjBjeTUyYVhOcFltbHNhWFI1S1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRWxtSUhSb1pTQmxiR1Z0Wlc1MEozTWdjWFZsZFdVZ2FYTWdaVzF3ZEhrZ0tHbG1JRzl1YkhrZ2RHaGxJRndpYVc1d2NtOW5jbVZ6YzF3aUlHbDBaVzBnYVhNZ2JHVm1kQ0JoZENCd2IzTnBkR2x2YmlBd0tTQnZjaUJwWmlCcGRITWdjWFZsZFdVZ2FYTWdZV0p2ZFhRZ2RHOGdjblZ1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdFZ2JtOXVMVlpsYkc5amFYUjVMV2x1YVhScFlYUmxaQ0JsYm5SeWVTd2dkSFZ5YmlCdlptWWdkR2hsSUdselFXNXBiV0YwYVc1bklHWnNZV2N1SUVFZ2JtOXVMVlpsYkc5amFYUjVMV2x1YVhScFlYUnBaV1FnY1hWbGRXVWdaVzUwY25rbmN5QnNiMmRwWXlCdGFXZG9kQ0JoYkhSbGNseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhiaUJsYkdWdFpXNTBKM01nUTFOVElIWmhiSFZsY3lCaGJtUWdkR2hsY21WaWVTQmpZWFZ6WlNCV1pXeHZZMmwwZVNkeklHTmhZMmhsWkNCMllXeDFaU0JrWVhSaElIUnZJR2R2SUhOMFlXeGxMaUJVYnlCa1pYUmxZM1FnYVdZZ1lTQnhkV1YxWlNCbGJuUnllU0IzWVhNZ2FXNXBkR2xoZEdWa0lHSjVJRlpsYkc5amFYUjVMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzWlNCamFHVmpheUJtYjNJZ2RHaGxJR1Y0YVhOMFpXNWpaU0J2WmlCdmRYSWdjM0JsWTJsaGJDQldaV3h2WTJsMGVTNXhkV1YxWlVWdWRISjVSbXhoWnlCa1pXTnNZWEpoZEdsdmJpd2dkMmhwWTJnZ2JXbHVhV1pwWlhKeklIZHZiaWQwSUhKbGJtRnRaU0J6YVc1alpTQjBhR1VnWm14aFoxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjeUJoYzNOcFoyNWxaQ0IwYnlCcVVYVmxjbmtuY3lCbmJHOWlZV3dnSkNCdlltcGxZM1FnWVc1a0lIUm9kWE1nWlhocGMzUnpJRzkxZENCdlppQldaV3h2WTJsMGVTZHpJRzkzYmlCelkyOXdaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXdkSE11Ykc5dmNDQWhQVDBnZEhKMVpTQW1KaUFvSkM1eGRXVjFaU2hsYkdWdFpXNTBLVnN4WFNBOVBUMGdkVzVrWldacGJtVmtJSHg4SUNFdlhGd3VkbVZzYjJOcGRIbFJkV1YxWlVWdWRISjVSbXhoWnk5cExuUmxjM1FvSkM1eGRXVjFaU2hsYkdWdFpXNTBLVnN4WFNrcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCVWFHVWdaV3hsYldWdWRDQnRZWGtnYUdGMlpTQmlaV1Z1SUdSbGJHVjBaV1F1SUVWdWMzVnlaU0IwYUdGMElHbDBjeUJrWVhSaElHTmhZMmhsSUhOMGFXeHNJR1Y0YVhOMGN5QmlaV1p2Y21VZ1lXTjBhVzVuSUc5dUlHbDBMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRVJoZEdFb1pXeGxiV1Z1ZENrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRVlYUmhLR1ZzWlcxbGJuUXBMbWx6UVc1cGJXRjBhVzVuSUQwZ1ptRnNjMlU3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUTJ4bFlYSWdkR2hsSUdWc1pXMWxiblFuY3lCeWIyOTBVSEp2Y0dWeWRIbFdZV3gxWlVOaFkyaGxMQ0IzYUdsamFDQjNhV3hzSUdKbFkyOXRaU0J6ZEdGc1pTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVZWFJoS0dWc1pXMWxiblFwTG5KdmIzUlFjbTl3WlhKMGVWWmhiSFZsUTJGamFHVWdQU0I3ZlR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBjbUZ1YzJadmNtMUlRVkJ5YjNCbGNuUjVSWGhwYzNSeklEMGdabUZzYzJVN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdZVzU1SURORUlIUnlZVzV6Wm05eWJTQnpkV0p3Y205d1pYSjBlU0JwY3lCaGRDQnBkSE1nWkdWbVlYVnNkQ0IyWVd4MVpTQW9jbVZuWVhKa2JHVnpjeUJ2WmlCMWJtbDBJSFI1Y0dVcExDQnlaVzF2ZG1VZ2FYUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQzVsWVdOb0tFTlRVeTVNYVhOMGN5NTBjbUZ1YzJadmNtMXpNMFFzSUdaMWJtTjBhVzl1S0drc0lIUnlZVzV6Wm05eWJVNWhiV1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsWm1GMWJIUldZV3gxWlNBOUlDOWVjMk5oYkdVdkxuUmxjM1FvZEhKaGJuTm1iM0p0VG1GdFpTa2dQeUF4SURvZ01DeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJXWVd4MVpTQTlJRVJoZEdFb1pXeGxiV1Z1ZENrdWRISmhibk5tYjNKdFEyRmphR1ZiZEhKaGJuTm1iM0p0VG1GdFpWMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFUmhkR0VvWld4bGJXVnVkQ2t1ZEhKaGJuTm1iM0p0UTJGamFHVmJkSEpoYm5ObWIzSnRUbUZ0WlYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCdVpYY2dVbVZuUlhod0tGd2lYbHhjWEZ3b1hDSWdLeUJrWldaaGRXeDBWbUZzZFdVZ0t5QmNJbHRlTGwxY0lpa3VkR1Z6ZENoamRYSnlaVzUwVm1Gc2RXVXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMUlRVkJ5YjNCbGNuUjVSWGhwYzNSeklEMGdkSEoxWlR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRVJoZEdFb1pXeGxiV1Z1ZENrdWRISmhibk5tYjNKdFEyRmphR1ZiZEhKaGJuTm1iM0p0VG1GdFpWMDdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUUxdlltbHNaU0JrWlhacFkyVnpJR2hoZG1VZ2FHRnlaSGRoY21VZ1lXTmpaV3hsY21GMGFXOXVJSEpsYlc5MlpXUWdZWFFnZEdobElHVnVaQ0J2WmlCMGFHVWdZVzVwYldGMGFXOXVJR2x1SUc5eVpHVnlJSFJ2SUdGMmIybGtJR2h2WjJkcGJtY2dkR2hsSUVkUVZTZHpJRzFsYlc5eWVTNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYjNCMGN5NXRiMkpwYkdWSVFTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTFJUVZCeWIzQmxjblI1UlhocGMzUnpJRDBnZEhKMVpUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElFUmhkR0VvWld4bGJXVnVkQ2t1ZEhKaGJuTm1iM0p0UTJGamFHVXVkSEpoYm5Oc1lYUmxNMlE3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUm14MWMyZ2dkR2hsSUhOMVluQnliM0JsY25SNUlISmxiVzkyWVd4eklIUnZJSFJvWlNCRVQwMHVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSeVlXNXpabTl5YlVoQlVISnZjR1Z5ZEhsRmVHbHpkSE1wSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ExTlRMbVpzZFhOb1ZISmhibk5tYjNKdFEyRmphR1VvWld4bGJXVnVkQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nVW1WdGIzWmxJSFJvWlNCY0luWmxiRzlqYVhSNUxXRnVhVzFoZEdsdVoxd2lJR2x1WkdsallYUnZjaUJqYkdGemN5NGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkRVMU11Vm1Gc2RXVnpMbkpsYlc5MlpVTnNZWE56S0dWc1pXMWxiblFzSUZ3aWRtVnNiMk5wZEhrdFlXNXBiV0YwYVc1blhDSXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlBjSFJwYjI0NklFTnZiWEJzWlhSbFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEYjIxd2JHVjBaU0JwY3lCbWFYSmxaQ0J2Ym1ObElIQmxjaUJqWVd4c0lDaHViM1FnYjI1alpTQndaWElnWld4bGJXVnVkQ2tnWVc1a0lHbHpJSEJoYzNObFpDQjBhR1VnWm5Wc2JDQnlZWGNnUkU5TklHVnNaVzFsYm5RZ2MyVjBJR0Z6SUdKdmRHZ2dhWFJ6SUdOdmJuUmxlSFFnWVc1a0lHbDBjeUJtYVhKemRDQmhjbWQxYldWdWRDNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeW9nVG05MFpUb2dRMkZzYkdKaFkydHpJR0Z5Wlc0bmRDQm1hWEpsWkNCM2FHVnVJR05oYkd4eklHRnlaU0J0WVc1MVlXeHNlU0J6ZEc5d2NHVmtJQ2gyYVdFZ1ZtVnNiMk5wZEhrb1hDSnpkRzl3WENJcExpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdselUzUnZjSEJsWkNBbUppQnZjSFJ6TG1OdmJYQnNaWFJsSUNZbUlDRnZjSFJ6TG14dmIzQWdKaVlnS0drZ1BUMDlJR05oYkd4TVpXNW5kR2dnTFNBeEtTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1YyVWdkR2h5YjNjZ1kyRnNiR0poWTJ0eklHbHVJR0VnYzJWMFZHbHRaVzkxZENCemJ5QjBhR0YwSUhSb2NtOTNiaUJsY25KdmNuTWdaRzl1SjNRZ2FHRnNkQ0IwYUdVZ1pYaGxZM1YwYVc5dUlHOW1JRlpsYkc5amFYUjVJR2wwYzJWc1ppNGdLaTljYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQjBjeTVqYjIxd2JHVjBaUzVqWVd4c0tHVnNaVzFsYm5SekxDQmxiR1Z0Wlc1MGN5azdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25KdmNpa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LU0I3SUhSb2NtOTNJR1Z5Y205eU95QjlMQ0F4S1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlVnVW1WemIyeDJhVzVuWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1NXNW1hVzVwZEdVZ2JHOXZjSE1nWkc5dUozUWdjbVYwZFhKdUlIQnliMjFwYzJWekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WemIyeDJaWElnSmlZZ2IzQjBjeTVzYjI5d0lDRTlQU0IwY25WbEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxjaWhsYkdWdFpXNTBjeWs3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0F2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUGNIUnBiMjQ2SUV4dmIzQWdLRWx1Wm1sdWFYUmxLVnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRVlYUmhLR1ZzWlcxbGJuUXBJQ1ltSUc5d2RITXViRzl2Y0NBOVBUMGdkSEoxWlNBbUppQWhhWE5UZEc5d2NHVmtLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdktpQkpaaUJoSUhKdmRHRjBaVmd2V1M5YUlIQnliM0JsY25SNUlHbHpJR0psYVc1bklHRnVhVzFoZEdWa0lIUnZJRE0yTUNCa1pXY2dkMmwwYUNCc2IyOXdPblJ5ZFdVc0lITjNZWEFnZEhkbFpXNGdjM1JoY25RdlpXNWtJSFpoYkhWbGN5QjBieUJsYm1GaWJHVmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZ2ZFhNZ2FYUmxjbUYwYVhabElISnZkR0YwYVc5dUlHeHZiM0JwYm1jdUlDaFBkR2hsY21selpTd2dkR2hsSUdWc1pXMWxiblFnZDI5MWJHUWdhblZ6ZENCeWIzUmhkR1VnWW1GamF5QmhibVFnWm05eWRHZ3VLU0FxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDNWxZV05vS0VSaGRHRW9aV3hsYldWdWRDa3VkSGRsWlc1elEyOXVkR0ZwYm1WeUxDQm1kVzVqZEdsdmJpaHdjbTl3WlhKMGVVNWhiV1VzSUhSM1pXVnVRMjl1ZEdGcGJtVnlLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0M5ZWNtOTBZWFJsTHk1MFpYTjBLSEJ5YjNCbGNuUjVUbUZ0WlNrZ0ppWWdjR0Z5YzJWR2JHOWhkQ2gwZDJWbGJrTnZiblJoYVc1bGNpNWxibVJXWVd4MVpTa2dQVDA5SURNMk1Da2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZDJWbGJrTnZiblJoYVc1bGNpNWxibVJXWVd4MVpTQTlJREE3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSM1pXVnVRMjl1ZEdGcGJtVnlMbk4wWVhKMFZtRnNkV1VnUFNBek5qQTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQzllWW1GamEyZHliM1Z1WkZCdmMybDBhVzl1THk1MFpYTjBLSEJ5YjNCbGNuUjVUbUZ0WlNrZ0ppWWdjR0Z5YzJWR2JHOWhkQ2gwZDJWbGJrTnZiblJoYVc1bGNpNWxibVJXWVd4MVpTa2dQVDA5SURFd01DQW1KaUIwZDJWbGJrTnZiblJoYVc1bGNpNTFibWwwVkhsd1pTQTlQVDBnWENJbFhDSXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhkbFpXNURiMjUwWVdsdVpYSXVaVzVrVm1Gc2RXVWdQU0F3TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGQyVmxia052Ym5SaGFXNWxjaTV6ZEdGeWRGWmhiSFZsSUQwZ01UQXdPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQldaV3h2WTJsMGVTaGxiR1Z0Wlc1MExDQmNJbkpsZG1WeWMyVmNJaXdnZXlCc2IyOXdPaUIwY25WbExDQmtaV3hoZVRvZ2IzQjBjeTVrWld4aGVTQjlLVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQzhxS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSR1Z4ZFdWMVpXbHVaMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQXFLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dSbWx5WlNCMGFHVWdibVY0ZENCallXeHNJR2x1SUhSb1pTQnhkV1YxWlNCemJ5QnNiMjVuSUdGeklIUm9hWE1nWTJGc2JDZHpJSEYxWlhWbElIZGhjMjRuZENCelpYUWdkRzhnWm1Gc2MyVWdLSFJ2SUhSeWFXZG5aWElnWVNCd1lYSmhiR3hsYkNCaGJtbHRZWFJwYjI0cExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhR2xqYUNCM2IzVnNaQ0JvWVhabElHRnNjbVZoWkhrZ1kyRjFjMlZrSUhSb1pTQnVaWGgwSUdOaGJHd2dkRzhnWm1seVpTNGdUbTkwWlRvZ1JYWmxiaUJwWmlCMGFHVWdaVzVrSUc5bUlIUm9aU0JoYm1sdFlYUnBiMjRnY1hWbGRXVWdhR0Z6SUdKbFpXNGdjbVZoWTJobFpDeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQzVrWlhGMVpYVmxLQ2tnYlhWemRDQnpkR2xzYkNCaVpTQmpZV3hzWldRZ2FXNGdiM0prWlhJZ2RHOGdZMjl0Y0d4bGRHVnNlU0JqYkdWaGNpQnFVWFZsY25rbmN5QmhibWx0WVhScGIyNGdjWFZsZFdVdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2Y0hSekxuRjFaWFZsSUNFOVBTQm1ZV3h6WlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQzVrWlhGMVpYVmxLR1ZzWlcxbGJuUXNJRzl3ZEhNdWNYVmxkV1VwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1WEhRZ0lDQWdJQ0FnSUNBZ0lFTmhiR3h6SUVGeWNtRjVJRU5zWldGdWRYQmNibHgwSUNBZ0lDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYmx4MElDQWdJQ0FnSUNBdktpQlRhVzVqWlNCMGFHbHpJR05oYkd3Z2FYTWdZMjl0Y0d4bGRHVXNJSE5sZENCcGRDQjBieUJtWVd4elpTQnpieUIwYUdGMElIUm9aU0J5UVVZZ2RHbGpheUJ6YTJsd2N5QnBkQzRnVkdocGN5QmhjbkpoZVNCcGN5QnNZWFJsY2lCamIyMXdZV04wWldRZ2RtbGhJR052YlhCaFkzUlRjR0Z5YzJWQmNuSmhlU2dwTGx4dVhIUWdJQ0FnSUNBZ0lDQWdLRVp2Y2lCd1pYSm1iM0p0WVc1alpTQnlaV0Z6YjI1ekxDQjBhR1VnWTJGc2JDQnBjeUJ6WlhRZ2RHOGdabUZzYzJVZ2FXNXpkR1ZoWkNCdlppQmlaV2x1WnlCa1pXeGxkR1ZrSUdaeWIyMGdkR2hsSUdGeWNtRjVPaUJvZEhSd09pOHZkM2QzTG1oMGJXdzFjbTlqYTNNdVkyOXRMMlZ1TDNSMWRHOXlhV0ZzY3k5emNHVmxaQzkyT0M4cElDb3ZYRzVjZENBZ0lDQWdJQ0FnVm1Wc2IyTnBkSGt1VTNSaGRHVXVZMkZzYkhOYlkyRnNiRWx1WkdWNFhTQTlJR1poYkhObE8xeHVYRzVjZENBZ0lDQWdJQ0FnTHlvZ1NYUmxjbUYwWlNCMGFISnZkV2RvSUhSb1pTQmpZV3hzY3lCaGNuSmhlU0IwYnlCa1pYUmxjbTFwYm1VZ2FXWWdkR2hwY3lCM1lYTWdkR2hsSUdacGJtRnNJR2x1TFhCeWIyZHlaWE56SUdGdWFXMWhkR2x2Ymk1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0JKWmlCemJ5d2djMlYwSUdFZ1pteGhaeUIwYnlCbGJtUWdkR2xqYTJsdVp5QmhibVFnWTJ4bFlYSWdkR2hsSUdOaGJHeHpJR0Z5Y21GNUxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQXdMQ0JqWVd4c2MweGxibWQwYUNBOUlGWmxiRzlqYVhSNUxsTjBZWFJsTG1OaGJHeHpMbXhsYm1kMGFEc2dhaUE4SUdOaGJHeHpUR1Z1WjNSb095QnFLeXNwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGWmxiRzlqYVhSNUxsTjBZWFJsTG1OaGJHeHpXMnBkSUNFOVBTQm1ZV3h6WlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ0WVdsdWFXNW5RMkZzYkhORmVHbHpkQ0E5SUhSeWRXVTdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0hKbGJXRnBibWx1WjBOaGJHeHpSWGhwYzNRZ1BUMDlJR1poYkhObEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJSFJwWTJzb0tTQjNhV3hzSUdSbGRHVmpkQ0IwYUdseklHWnNZV2NnZFhCdmJpQnBkSE1nYm1WNGRDQnBkR1Z5WVhScGIyNGdZVzVrSUhOMVluTmxjWFZsYm5Sc2VTQjBkWEp1SUdsMGMyVnNaaUJ2Wm1ZdUlDb3ZYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lGWmxiRzlqYVhSNUxsTjBZWFJsTG1selZHbGphMmx1WnlBOUlHWmhiSE5sTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4cUlFTnNaV0Z5SUhSb1pTQmpZV3hzY3lCaGNuSmhlU0J6YnlCMGFHRjBJR2wwY3lCc1pXNW5kR2dnYVhNZ2NtVnpaWFF1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JXWld4dlkybDBlUzVUZEdGMFpTNWpZV3hzY3p0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnVm1Wc2IyTnBkSGt1VTNSaGRHVXVZMkZzYkhNZ1BTQmJYVHRjYmx4MElDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNCOVhHNWNibHgwSUNBZ0lDOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNibHgwSUNBZ0lDQWdJQ0JHY21GdFpYZHZjbXR6WEc1Y2RDQWdJQ0FxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JseDBJQ0FnSUM4cUlFSnZkR2dnYWxGMVpYSjVJR0Z1WkNCYVpYQjBieUJoYkd4dmR5QjBhR1ZwY2lBa0xtWnVJRzlpYW1WamRDQjBieUJpWlNCbGVIUmxibVJsWkNCMGJ5QmhiR3h2ZHlCM2NtRndjR1ZrSUdWc1pXMWxiblJ6SUhSdklHSmxJSE4xWW1wbFkzUmxaQ0IwYnlCd2JIVm5hVzRnWTJGc2JITXVYRzVjZENBZ0lDQWdJQ0JKWmlCbGFYUm9aWElnWm5KaGJXVjNiM0pySUdseklHeHZZV1JsWkN3Z2NtVm5hWE4wWlhJZ1lTQmNJblpsYkc5amFYUjVYQ0lnWlhoMFpXNXphVzl1SUhCdmFXNTBhVzVuSUhSdklGWmxiRzlqYVhSNUozTWdZMjl5WlNCaGJtbHRZWFJsS0NrZ2JXVjBhRzlrTGlBZ1ZtVnNiMk5wZEhsY2JseDBJQ0FnSUNBZ0lHRnNjMjhnY21WbmFYTjBaWEp6SUdsMGMyVnNaaUJ2Ym5SdklHRWdaMnh2WW1Gc0lHTnZiblJoYVc1bGNpQW9kMmx1Wkc5M0xtcFJkV1Z5ZVNCOGZDQjNhVzVrYjNjdVdtVndkRzhnZkh3Z2QybHVaRzkzS1NCemJ5QjBhR0YwSUdObGNuUmhhVzRnWm1WaGRIVnlaWE1nWVhKbFhHNWNkQ0FnSUNBZ0lDQmhZMk5sYzNOcFlteGxJR0psZVc5dVpDQnFkWE4wSUdFZ2NHVnlMV1ZzWlcxbGJuUWdjMk52Y0dVdUlGUm9hWE1nYldGemRHVnlJRzlpYW1WamRDQmpiMjUwWVdsdWN5QmhiaUF1WVc1cGJXRjBaU2dwSUcxbGRHaHZaQ3dnZDJocFkyZ2dhWE1nYkdGMFpYSWdZWE56YVdkdVpXUWdkRzhnSkM1bWJseHVYSFFnSUNBZ0lDQWdLR2xtSUdwUmRXVnllU0J2Y2lCYVpYQjBieUJoY21VZ2NISmxjMlZ1ZENrdUlFRmpZMjl5WkdsdVoyeDVMQ0JXWld4dlkybDBlU0JqWVc0Z1ltOTBhQ0JoWTNRZ2IyNGdkM0poY0hCbFpDQkVUMDBnWld4bGJXVnVkSE1nWVc1a0lITjBZVzVrSUdGc2IyNWxJR1p2Y2lCMFlYSm5aWFJwYm1jZ2NtRjNJRVJQVFNCbGJHVnRaVzUwY3k0Z0tpOWNibHgwSUNBZ0lHZHNiMkpoYkM1V1pXeHZZMmwwZVNBOUlGWmxiRzlqYVhSNU8xeHVYRzVjZENBZ0lDQnBaaUFvWjJ4dlltRnNJQ0U5UFNCM2FXNWtiM2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQXZLaUJCYzNOcFoyNGdkR2hsSUdWc1pXMWxiblFnWm5WdVkzUnBiMjRnZEc4Z1ZtVnNiMk5wZEhrbmN5QmpiM0psSUdGdWFXMWhkR1VvS1NCdFpYUm9iMlF1SUNvdlhHNWNkQ0FnSUNBZ0lDQWdaMnh2WW1Gc0xtWnVMblpsYkc5amFYUjVJRDBnWVc1cGJXRjBaVHRjYmx4MElDQWdJQ0FnSUNBdktpQkJjM05wWjI0Z2RHaGxJRzlpYW1WamRDQm1kVzVqZEdsdmJpZHpJR1JsWm1GMWJIUnpJSFJ2SUZabGJHOWphWFI1SjNNZ1oyeHZZbUZzSUdSbFptRjFiSFJ6SUc5aWFtVmpkQzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQm5iRzlpWVd3dVptNHVkbVZzYjJOcGRIa3VaR1ZtWVhWc2RITWdQU0JXWld4dlkybDBlUzVrWldaaGRXeDBjenRjYmx4MElDQWdJSDFjYmx4dVhIUWdJQ0FnTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzVjZENBZ0lDQWdJQ0JRWVdOcllXZGxaQ0JTWldScGNtVmpkSE5jYmx4MElDQWdJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVjZENBZ0lDQXZLaUJ6Ykdsa1pWVndMQ0J6Ykdsa1pVUnZkMjRnS2k5Y2JseDBJQ0FnSUNRdVpXRmphQ2hiSUZ3aVJHOTNibHdpTENCY0lsVndYQ0lnWFN3Z1puVnVZM1JwYjI0b2FTd2daR2x5WldOMGFXOXVLU0I3WEc1Y2RDQWdJQ0FnSUNBZ1ZtVnNiMk5wZEhrdVVtVmthWEpsWTNSelcxd2ljMnhwWkdWY0lpQXJJR1JwY21WamRHbHZibDBnUFNCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3l3Z1pXeGxiV1Z1ZEhOSmJtUmxlQ3dnWld4bGJXVnVkSE5UYVhwbExDQmxiR1Z0Wlc1MGN5d2djSEp2YldselpVUmhkR0VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOXdkSE1nUFNBa0xtVjRkR1Z1WkNoN2ZTd2diM0IwYVc5dWN5a3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWldkcGJpQTlJRzl3ZEhNdVltVm5hVzRzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdiR1YwWlNBOUlHOXdkSE11WTI5dGNHeGxkR1VzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdkWFJsWkZaaGJIVmxjeUE5SUhzZ2FHVnBaMmgwT2lCY0lsd2lMQ0J0WVhKbmFXNVViM0E2SUZ3aVhDSXNJRzFoY21kcGJrSnZkSFJ2YlRvZ1hDSmNJaXdnY0dGa1pHbHVaMVJ2Y0RvZ1hDSmNJaXdnY0dGa1pHbHVaMEp2ZEhSdmJUb2dYQ0pjSWlCOUxGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVzYVc1bFZtRnNkV1Z6SUQwZ2UzMDdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d2RITXVaR2x6Y0d4aGVTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJUYUc5M0lIUm9aU0JsYkdWdFpXNTBJR0psWm05eVpTQnpiR2xrWlVSdmQyNGdZbVZuYVc1eklHRnVaQ0JvYVdSbElIUm9aU0JsYkdWdFpXNTBJR0ZtZEdWeUlITnNhV1JsVlhBZ1kyOXRjR3hsZEdWekxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1RtOTBaVG9nU1c1c2FXNWxJR1ZzWlcxbGJuUnpJR05oYm01dmRDQm9ZWFpsSUdScGJXVnVjMmx2Ym5NZ1lXNXBiV0YwWldRc0lITnZJSFJvWlhrbmNtVWdjbVYyWlhKMFpXUWdkRzhnYVc1c2FXNWxMV0pzYjJOckxpQXFMMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGN5NWthWE53YkdGNUlEMGdLR1JwY21WamRHbHZiaUE5UFQwZ1hDSkViM2R1WENJZ1B5QW9WbVZzYjJOcGRIa3VRMU5UTGxaaGJIVmxjeTVuWlhSRWFYTndiR0Y1Vkhsd1pTaGxiR1Z0Wlc1MEtTQTlQVDBnWENKcGJteHBibVZjSWlBL0lGd2lhVzVzYVc1bExXSnNiMk5yWENJZ09pQmNJbUpzYjJOclhDSXBJRG9nWENKdWIyNWxYQ0lwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGN5NWlaV2RwYmlBOUlHWjFibU4wYVc5dUtDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1NXWWdkR2hsSUhWelpYSWdjR0Z6YzJWa0lHbHVJR0VnWW1WbmFXNGdZMkZzYkdKaFkyc3NJR1pwY21VZ2FYUWdibTkzTGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbVZuYVc0Z0ppWWdZbVZuYVc0dVkyRnNiQ2hsYkdWdFpXNTBjeXdnWld4bGJXVnVkSE1wTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZLaUJEWVdOb1pTQjBhR1VnWld4bGJXVnVkSE1uSUc5eWFXZHBibUZzSUhabGNuUnBZMkZzSUdScGJXVnVjMmx2Ym1Gc0lIQnliM0JsY25SNUlIWmhiSFZsY3lCemJ5QjBhR0YwSUhkbElHTmhiaUJoYm1sdFlYUmxJR0poWTJzZ2RHOGdkR2hsYlM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNCbGNuUjVJR2x1SUdOdmJYQjFkR1ZrVm1Gc2RXVnpLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVzYVc1bFZtRnNkV1Z6VzNCeWIzQmxjblI1WFNBOUlHVnNaVzFsYm5RdWMzUjViR1ZiY0hKdmNHVnlkSGxkTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1JtOXlJSE5zYVdSbFJHOTNiaXdnZFhObElHWnZjbU5sWm1WbFpHbHVaeUIwYnlCaGJtbHRZWFJsSUdGc2JDQjJaWEowYVdOaGJDQndjbTl3WlhKMGFXVnpJR1p5YjIwZ01DNGdSbTl5SUhOc2FXUmxWWEFzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObElHWnZjbU5sWm1WbFpHbHVaeUIwYnlCemRHRnlkQ0JtY205dElHTnZiWEIxZEdWa0lIWmhiSFZsY3lCaGJtUWdZVzVwYldGMFpTQmtiM2R1SUhSdklEQXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCeWIzQmxjblI1Vm1Gc2RXVWdQU0JXWld4dlkybDBlUzVEVTFNdVoyVjBVSEp2Y0dWeWRIbFdZV3gxWlNobGJHVnRaVzUwTENCd2NtOXdaWEowZVNrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dGNIVjBaV1JXWVd4MVpYTmJjSEp2Y0dWeWRIbGRJRDBnS0dScGNtVmpkR2x2YmlBOVBUMGdYQ0pFYjNkdVhDSXBJRDhnV3lCd2NtOXdaWEowZVZaaGJIVmxMQ0F3SUYwZ09pQmJJREFzSUhCeWIzQmxjblI1Vm1Gc2RXVWdYVHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeW9nUm05eVkyVWdkbVZ5ZEdsallXd2diM1psY21ac2IzY2dZMjl1ZEdWdWRDQjBieUJqYkdsd0lITnZJSFJvWVhRZ2MyeHBaR2x1WnlCM2IzSnJjeUJoY3lCbGVIQmxZM1JsWkM0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1YkdsdVpWWmhiSFZsY3k1dmRtVnlabXh2ZHlBOUlHVnNaVzFsYm5RdWMzUjViR1V1YjNabGNtWnNiM2M3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG5OMGVXeGxMbTkyWlhKbWJHOTNJRDBnWENKb2FXUmtaVzVjSWp0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVZMjl0Y0d4bGRHVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFJRkpsYzJWMElHVnNaVzFsYm5RZ2RHOGdhWFJ6SUhCeVpTMXpiR2xrWlNCcGJteHBibVVnZG1Gc2RXVnpJRzl1WTJVZ2FYUnpJSE5zYVdSbElHRnVhVzFoZEdsdmJpQnBjeUJqYjIxd2JHVjBaUzRnS2k5Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQnliM0JsY25SNUlHbHVJR2x1YkdsdVpWWmhiSFZsY3lrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1YzNSNWJHVmJjSEp2Y0dWeWRIbGRJRDBnYVc1c2FXNWxWbUZzZFdWelczQnliM0JsY25SNVhUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnZEdobElIVnpaWElnY0dGemMyVmtJR2x1SUdFZ1kyOXRjR3hsZEdVZ1kyRnNiR0poWTJzc0lHWnBjbVVnYVhRZ2JtOTNMaUFxTDF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXRjR3hsZEdVZ0ppWWdZMjl0Y0d4bGRHVXVZMkZzYkNobGJHVnRaVzUwY3l3Z1pXeGxiV1Z1ZEhNcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2YldselpVUmhkR0VnSmlZZ2NISnZiV2x6WlVSaGRHRXVjbVZ6YjJ4MlpYSW9aV3hsYldWdWRITXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRlpsYkc5amFYUjVLR1ZzWlcxbGJuUXNJR052YlhCMWRHVmtWbUZzZFdWekxDQnZjSFJ6S1R0Y2JseDBJQ0FnSUNBZ0lDQjlPMXh1WEhRZ0lDQWdmU2s3WEc1Y2JseDBJQ0FnSUM4cUlHWmhaR1ZKYml3Z1ptRmtaVTkxZENBcUwxeHVYSFFnSUNBZ0pDNWxZV05vS0ZzZ1hDSkpibHdpTENCY0lrOTFkRndpSUYwc0lHWjFibU4wYVc5dUtHa3NJR1JwY21WamRHbHZiaWtnZTF4dVhIUWdJQ0FnSUNBZ0lGWmxiRzlqYVhSNUxsSmxaR2x5WldOMGMxdGNJbVpoWkdWY0lpQXJJR1JwY21WamRHbHZibDBnUFNCbWRXNWpkR2x2YmlBb1pXeGxiV1Z1ZEN3Z2IzQjBhVzl1Y3l3Z1pXeGxiV1Z1ZEhOSmJtUmxlQ3dnWld4bGJXVnVkSE5UYVhwbExDQmxiR1Z0Wlc1MGN5d2djSEp2YldselpVUmhkR0VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHOXdkSE1nUFNBa0xtVjRkR1Z1WkNoN2ZTd2diM0IwYVc5dWN5a3NYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6VFdGd0lEMGdleUJ2Y0dGamFYUjVPaUFvWkdseVpXTjBhVzl1SUQwOVBTQmNJa2x1WENJcElEOGdNU0E2SURBZ2ZTeGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl5YVdkcGJtRnNRMjl0Y0d4bGRHVWdQU0J2Y0hSekxtTnZiWEJzWlhSbE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDOHFJRk5wYm1ObElISmxaR2x5WldOMGN5QmhjbVVnZEhKcFoyZGxjbVZrSUdsdVpHbDJhV1IxWVd4c2VTQm1iM0lnWldGamFDQmxiR1Z0Wlc1MElHbHVJSFJvWlNCaGJtbHRZWFJsWkNCelpYUXNJR0YyYjJsa0lISmxjR1ZoZEdWa2JIa2dkSEpwWjJkbGNtbHVaMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmphM01nWW5rZ1ptbHlhVzVuSUhSb1pXMGdiMjVzZVNCM2FHVnVJSFJvWlNCbWFXNWhiQ0JsYkdWdFpXNTBJR2hoY3lCaVpXVnVJSEpsWVdOb1pXUXVJQ292WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwYzBsdVpHVjRJQ0U5UFNCbGJHVnRaVzUwYzFOcGVtVWdMU0F4S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJ6TG1OdmJYQnNaWFJsSUQwZ2IzQjBjeTVpWldkcGJpQTlJRzUxYkd3N1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnpMbU52YlhCc1pYUmxJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOXlhV2RwYm1Gc1EyOXRjR3hsZEdVcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0pwWjJsdVlXeERiMjF3YkdWMFpTNWpZV3hzS0dWc1pXMWxiblJ6TENCbGJHVnRaVzUwY3lrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaVVJoZEdFZ0ppWWdjSEp2YldselpVUmhkR0V1Y21WemIyeDJaWElvWld4bGJXVnVkSE1wTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dTV1lnWVNCa2FYTndiR0Y1SUhkaGN5QndZWE56WldRZ2FXNHNJSFZ6WlNCcGRDNGdUM1JvWlhKM2FYTmxMQ0JrWldaaGRXeDBJSFJ2SUZ3aWJtOXVaVndpSUdadmNpQm1ZV1JsVDNWMElHOXlJSFJvWlNCbGJHVnRaVzUwTFhOd1pXTnBabWxqSUdSbFptRjFiSFFnWm05eUlHWmhaR1ZKYmk0Z0tpOWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dUbTkwWlRvZ1YyVWdZV3hzYjNjZ2RYTmxjbk1nZEc4Z2NHRnpjeUJwYmlCY0ltNTFiR3hjSWlCMGJ5QnphMmx3SUdScGMzQnNZWGtnYzJWMGRHbHVaeUJoYkhSdloyVjBhR1Z5TGlBcUwxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM0IwY3k1a2FYTndiR0Y1SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RITXVaR2x6Y0d4aGVTQTlJQ2hrYVhKbFkzUnBiMjRnUFQwOUlGd2lTVzVjSWlBL0lGd2lZWFYwYjF3aUlEb2dYQ0p1YjI1bFhDSXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdWbVZzYjJOcGRIa29kR2hwY3l3Z2NISnZjR1Z5ZEdsbGMwMWhjQ3dnYjNCMGN5azdYRzVjZENBZ0lDQWdJQ0FnZlR0Y2JseDBJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQnlaWFIxY200Z1ZtVnNiMk5wZEhrN1hHNWNkSDBvS0hkcGJtUnZkeTVxVVhWbGNua2dmSHdnZDJsdVpHOTNMbHBsY0hSdklIeDhJSGRwYm1SdmR5a3NJSGRwYm1SdmR5d2daRzlqZFcxbGJuUXBPMXh1WEhSOUtTazdYRzVjYmx4MEx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVYSFFnSUNCTGJtOTNiaUJKYzNOMVpYTmNibHgwS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNkQzhxSUZSb1pTQkRVMU1nYzNCbFl5QnRZVzVrWVhSbGN5QjBhR0YwSUhSb1pTQjBjbUZ1YzJ4aGRHVllMMWt2V2lCMGNtRnVjMlp2Y20xeklHRnlaU0FsTFhKbGJHRjBhWFpsSUhSdklIUm9aU0JsYkdWdFpXNTBJR2wwYzJWc1ppQXRMU0J1YjNRZ2FYUnpJSEJoY21WdWRDNWNibHgwVm1Wc2IyTnBkSGtzSUdodmQyVjJaWElzSUdSdlpYTnVKM1FnYldGclpTQjBhR2x6SUdScGMzUnBibU4wYVc5dUxpQlVhSFZ6TENCamIyNTJaWEowYVc1bklIUnZJRzl5SUdaeWIyMGdkR2hsSUNVZ2RXNXBkQ0IzYVhSb0lIUm9aWE5sSUhOMVluQnliM0JsY25ScFpYTmNibHgwZDJsc2JDQndjbTlrZFdObElHRnVJR2x1WVdOamRYSmhkR1VnWTI5dWRtVnljMmx2YmlCMllXeDFaUzRnVkdobElITmhiV1VnYVhOemRXVWdaWGhwYzNSeklIZHBkR2dnZEdobElHTjRMMk41SUdGMGRISnBZblYwWlhNZ2IyWWdVMVpISUdOcGNtTnNaWE1nWVc1a0lHVnNiR2x3YzJWekxpQXFMMXh1WEc0dktpb3FMeUI5TEZ4dUx5b2dOQ0FxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpLU0I3WEc1Y2JseDBkbUZ5SUVac2VXOTFkRVpoWTNSdmNua2dQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR1ZzWlcxbGJuUXBJSHRjYmx4MElDQjJZWElnY0dGa1pHbHVaeUE5SURFd08xeHVYSFFnSUhaaGNpQm9iM1psY21GaWJHVnpJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtRndjR3g1S0dSdlkzVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjF0a1lYUmhMV1pzZVc5MWRGMG5LU2s3WEc1Y2JseDBJQ0JvYjNabGNtRmliR1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYUc5MlpYSmhZbXhsS1NCN1hHNWNkQ0FnSUNCMllYSWdabXg1YjNWMElEMGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lnbkl5Y2dLeUJvYjNabGNtRmliR1V1WjJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFdac2VXOTFkQ2NwS1R0Y2JseHVYSFFnSUNBZ2FHOTJaWEpoWW14bExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sYjNabGNpY3NJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUWdJQ0FnSUNCbWJIbHZkWFF1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duWm14NWIzVjBMV2hwWkdSbGJpY3BPMXh1WEhRZ0lDQWdJQ0IyWVhJZ2JtOWtaU0E5SUdodmRtVnlZV0pzWlR0Y2JseDBJQ0FnSUNBZ2RtRnlJR3hsWm5RZ1BTQXdPMXh1WEhRZ0lDQWdJQ0IyWVhJZ2RHOXdJRDBnTUR0Y2JseHVYSFFnSUNBZ0lDQmtieUI3WEc1Y2RDQWdJQ0FnSUNBZ2JHVm1kQ0FyUFNCdWIyUmxMbTltWm5ObGRFeGxablE3WEc1Y2RDQWdJQ0FnSUNBZ2RHOXdJQ3M5SUc1dlpHVXViMlptYzJWMFZHOXdPMXh1WEhRZ0lDQWdJQ0I5SUhkb2FXeGxJQ2dvYm05a1pTQTlJRzV2WkdVdWIyWm1jMlYwVUdGeVpXNTBLU0FoUFQwZ2JuVnNiQ2s3WEc1Y2JseDBJQ0FnSUNBZ2JHVm1kQ0E5SUd4bFpuUWdLeUJvYjNabGNtRmliR1V1YjJabWMyVjBWMmxrZEdnZ0x5QXlPMXh1WEhRZ0lDQWdJQ0IwYjNBZ1BTQjBiM0FnS3lCb2IzWmxjbUZpYkdVdWIyWm1jMlYwU0dWcFoyaDBJQ3NnY0dGa1pHbHVaenRjYmx4dVhIUWdJQ0FnSUNCbWJIbHZkWFF1YzNSNWJHVXViR1ZtZENBOUlHeGxablFnS3lBbmNIZ25PMXh1WEhRZ0lDQWdJQ0JtYkhsdmRYUXVjM1I1YkdVdWRHOXdJRDBnZEc5d0lDc2dKM0I0Snp0Y2JseDBJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQm9iM1psY21GaWJHVXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25iVzkxYzJWdmRYUW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBJQ0FnSUNBZ1pteDViM1YwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMlpzZVc5MWRDMW9hV1JrWlc0bktUdGNibHgwSUNBZ0lIMHBPMXh1WEhRZ0lIMHBPMXh1WEc1Y2RIMWNibHh1WEc0dktpb3FMeUI5TEZ4dUx5b2dOU0FxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpLU0I3WEc1Y2JseDBkbUZ5SUUxbGJuVkdZV04wYjNKNUlEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MEtTQjdYRzVjZENBZ2RtRnlJRzFsYm5WeklEMGdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29aV3hsYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDY3ViV1Z1ZFNjcEtUdGNibHgwSUNCMllYSWdkRzluWjJ4bGN5QTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLR1ZzWlcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDZ25XMlJoZEdFdGJXVnVkUzEwYjJkbmJHVmRKeWtwTzF4dVhHNWNkQ0FnZEc5bloyeGxjeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVLSFJ2WjJkc1pTa2dlMXh1WEhRZ0lDQWdkRzluWjJ4bExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0b0tTQjdYRzVjZENBZ0lDQWdJSFpoY2lCdFpXNTFJRDBnWld4bGJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDY2pKeUFySUhSdloyZHNaUzVuWlhSQmRIUnlhV0oxZEdVb0oyUmhkR0V0YldWdWRTMTBiMmRuYkdVbktTazdYRzVjZENBZ0lDQWdJRzFsYm5VdVkyeGhjM05NYVhOMExuUnZaMmRzWlNnbllXTjBhWFpsSnlrN1hHNWNkQ0FnSUNCOUtUdGNibHgwSUNCOUtUdGNibHh1WEhRZ0lHMWxiblZ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYldWdWRTa2dlMXh1WEhRZ0lDQWdkbUZ5SUdScGMyMXBjM05oYkhNZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaHRaVzUxTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjF0a1lYUmhMVzFsYm5VdFpHbHpiV2x6YzEwbktTazdYRzVjYmx4MElDQWdJR1JwYzIxcGMzTmhiSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWhrYVhOdGFYTnpZV3dwSUh0Y2JseDBJQ0FnSUNBZ1pHbHpiV2x6YzJGc0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0b0tTQjdYRzVjZENBZ0lDQWdJQ0FnYldWdWRTNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZGhZM1JwZG1VbktUdGNibHgwSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eUtDZGJaR0YwWVMxdFpXNTFMWFJ2WjJkc1pUMWNJaWNnS3lCdFpXNTFMbWxrSUNzZ0oxd2lYU2NwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvSjJGamRHbDJaU2NwTzF4dVhIUWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lIMHBPMXh1WEhRZ0lIMHBPMXh1WEhSOVhHNWNibHh1THlvcUtpOGdmU3hjYmk4cUlEWWdLaTljYmk4cUtpb3ZJR1oxYm1OMGFXOXVLRzF2WkhWc1pTd2daWGh3YjNKMGN5a2dlMXh1WEc1Y2RIWmhjaUJOYjJSaGJFWmhZM1J2Y25rZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHVnNaVzFsYm5RcElIdGNibHgwSUNCMGFHbHpMbkp2YjNRZ1BTQmxiR1Z0Wlc1ME8xeHVYSFFnSUhSb2FYTXVaR2x6YldsemMyRnNjeUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWhjSEJzZVNobGJHVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjF0a1lYUmhMVzF2WkdGc0xXUnBjMjFwYzNOZEp5a3BPMXh1WEhRZ0lIUm9hWE11YjNCbGJtVnljeUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWhjSEJzZVNobGJHVnRaVzUwTG5GMVpYSjVVMlZzWldOMGIzSkJiR3dvSjF0a1lYUmhMVzF2WkdGc1hTY3BLVHRjYmx4MElDQjBhR2x6TG1GMGRHRmphRVYyWlc1MGN5Z3BPMXh1WEhSOVhHNWNibHgwVFc5a1lXeEdZV04wYjNKNUxuQnliM1J2ZEhsd1pTQTlJSHRjYmx4MElDQmhkSFJoWTJoRmRtVnVkSE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFFnSUNBZ2RHaHBjeTVrYVhOdGFYTnpZV3h6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dScGMyMXBjM05oYkNrZ2UxeHVYSFFnSUNBZ0lDQmthWE50YVhOellXd3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQjBhR2x6TG1ScGMyMXBjM011WW1sdVpDaDBhR2x6S1NrN1hHNWNkQ0FnSUNCOUxDQjBhR2x6S1R0Y2JseHVYSFFnSUNBZ2RHaHBjeTV2Y0dWdVpYSnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLRzl3Wlc1bGNpa2dlMXh1WEhRZ0lDQWdJQ0J2Y0dWdVpYSXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQjBhR2x6TG05d1pXNHVZbWx1WkNoMGFHbHpLU2s3WEc1Y2RDQWdJQ0I5TENCMGFHbHpLVHRjYmx4dVhIUWdJQ0FnWkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYTJWNWRYQW5MQ0JtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1WEhRZ0lDQWdJQ0IyWVhJZ2EyVjVJRDBnWlhabGJuUXVkMmhwWTJnZ2ZId2daWFpsYm5RdWEyVjVRMjlrWlR0Y2JseHVYSFFnSUNBZ0lDQXZMeUJGVTBOY2JseDBJQ0FnSUNBZ2FXWWdLR3RsZVNBOVBUMGdNamNwSUh0Y2JseDBJQ0FnSUNBZ0lDQjJZWElnYlc5a1lXeHpJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtTmhiR3dvWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2duTG0xdlpHRnNPbTV2ZENndWJXOWtZV3d0YUdsa1pHVnVLU2NwS1R0Y2JseDBJQ0FnSUNBZ0lDQnRiMlJoYkhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlodGIyUmhiQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdiVzlrWVd3dVkyeGhjM05NYVhOMExtRmtaQ2duYlc5a1lXd3RhR2xrWkdWdUp5azdYRzVjZENBZ0lDQWdJQ0FnZlNrN1hHNWNkQ0FnSUNBZ0lIMWNibHgwSUNBZ0lIMHBPMXh1WEhRZ0lIMHNYRzVjZENBZ2IzQmxiam9nWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmx4MElDQWdJSFpoY2lCdGIyUmhiQ0E5SUdWMlpXNTBMblJoY21kbGRDNW5aWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRiVzlrWVd3bktUdGNibHgwSUNBZ0lHMXZaR0ZzSUQwZ2RHaHBjeTV5YjI5MExuRjFaWEo1VTJWc1pXTjBiM0lvSnlNbklDc2diVzlrWVd3cE8xeHVYSFFnSUNBZ2JXOWtZV3d1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duYlc5a1lXd3RhR2xrWkdWdUp5azdYRzVjZENBZ2ZTeGNibHgwSUNCa2FYTnRhWE56T2lCbWRXNWpkR2x2YmlobGRtVnVkQ2tnZTF4dVhIUWdJQ0FnZG1GeUlIUmhjbWRsZENBOUlHVjJaVzUwTG5SaGNtZGxkRHRjYmx4MElDQWdJSFpoY2lCamJHOXpaV0ZpYkdVZ1BTQjBZWEpuWlhRZ1BUMDlJR1YyWlc1MExtTjFjbkpsYm5SVVlYSm5aWFFnSmlaY2JseDBJQ0FnSUNBZ2RHRnlaMlYwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnbmJXOWtZV3d0YjNabGNteGhlU2NwTzF4dVhHNWNkQ0FnSUNCa2J5QjdYRzVjZENBZ0lDQWdJR2xtSUNoMFlYSm5aWFF1YUdGelFYUjBjbWxpZFhSbEtDZGtZWFJoTFcxdlpHRnNMV1JwYzIxcGMzTW5LU0FtSmx4dVhIUWdJQ0FnSUNBZ0lDQWdJWFJoY21kbGRDNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9KMjF2WkdGc0p5a3BJSHRjYmx4MElDQWdJQ0FnSUNCamJHOXpaV0ZpYkdVZ1BTQjBjblZsTzF4dVhIUWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUmhjbWRsZEM1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb0oyMXZaR0ZzSnlrZ0ppWWdZMnh2YzJWaFlteGxLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSaGNtZGxkQzVqYkdGemMweHBjM1F1WVdSa0tDZHRiMlJoYkMxb2FXUmtaVzRuS1R0Y2JseDBJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBZWEpuWlhRdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektDZHRiMlJoYkNjcEtYdGNibHgwSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJSDBnZDJocGJHVW9LSFJoY21kbGRDQTlJSFJoY21kbGRDNXdZWEpsYm5ST2IyUmxLU0FoUFQwZ2RHaHBjeTV5YjI5MEtUdGNibHgwSUNCOVhHNWNkSDA3WEc1Y2JseHVMeW9xS2k4Z2ZTeGNiaThxSURjZ0tpOWNiaThxS2lvdklHWjFibU4wYVc5dUtHMXZaSFZzWlN3Z1pYaHdiM0owY3lrZ2UxeHVYRzVjZEhaaGNpQlViMmRuYkdWR1lXTjBiM0o1SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobGJHVnRaVzUwS1NCN1hHNWNkQ0FnZG1GeUlIUnZaMmRzWlhNZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WVhCd2JIa29aV3hsYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZGJaR0YwWVMxMGIyZG5iR1ZkSnlrcE8xeHVYSFFnSUhSb2FYTXVaV3hsYldWdWRDQTlJR1ZzWlcxbGJuUTdYRzVjYmx4MElDQjBiMmRuYkdWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RHOW5aMnhsS1NCN1hHNWNkQ0FnSUNCMGIyZG5iR1V1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWTJ4cFkyc25MQ0IwYUdsekxuUnZaMmRzWlM1aWFXNWtLSFJvYVhNcEtUdGNibHgwSUNCOUxDQjBhR2x6S1R0Y2JseDBmVnh1WEc1Y2RGUnZaMmRzWlVaaFkzUnZjbmt1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVYSFFnSUhSdloyZHNaVG9nWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmx4MElDQWdJSFpoY2lCMFlYSm5aWFFnUFNCbGRtVnVkQzUwWVhKblpYUTdYRzVjYmx4MElDQWdJR1J2SUh0Y2JseDBJQ0FnSUNBZ2FXWWdLSFJoY21kbGRDNW9ZWE5CZEhSeWFXSjFkR1VvSjJSaGRHRXRkRzluWjJ4bEp5a3BJSHRjYmx4MElDQWdJQ0FnSUNCeVpYUjFjbTRnZEdGeVoyVjBMbU5zWVhOelRHbHpkQzUwYjJkbmJHVW9KMkZqZEdsMlpTY3BYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJSDBnZDJocGJHVW9LSFJoY21kbGRDQTlJSFJoY21kbGRDNXdZWEpsYm5ST2IyUmxLU0FoUFQwZ2RHaHBjeTVsYkdWdFpXNTBLVnh1WEhRZ0lIMWNibHgwZlZ4dVhHNWNiaThxS2lvdklIMHNYRzR2S2lBNElDb3ZYRzR2S2lvcUx5Qm1kVzVqZEdsdmJpaHRiMlIxYkdVc0lHVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJSHRjYmx4dVhIUjJZWElnVTJobGNHaGxjbVFnUFNCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktEa3BPMXh1WEc1Y2RDOHZJRU4xYzNSdmJVVjJaVzUwSUhCdmJIbG1hV3hzSUdadmNpQkpSVEV3THpFeElDaG1jbTl0SUdaeWIyNTBaVzVrTFhWMGFXeHpLVnh1WEhSMllYSWdRM1Z6ZEc5dFJYWmxiblFnUFNCbWRXNWpkR2x2YmlobGRtVnVkRTVoYldVc0lIQmhjbUZ0Y3lrZ2UxeHVYSFFnSUhaaGNpQmxkbVZ1ZEZCaGNtRnRjeUE5SUhzZ1luVmlZbXhsY3pvZ1ptRnNjMlVzSUdOaGJtTmxiR0ZpYkdVNklHWmhiSE5sTENCa1pYUmhhV3c2SUhWdVpHVm1hVzVsWkNCOU8xeHVYRzVjZENBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhCaGNtRnRjeWtnZTF4dVhIUWdJQ0FnYVdZZ0tIQmhjbUZ0Y3k1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzVjZENBZ0lDQWdJR1YyWlc1MFVHRnlZVzF6VzJ0bGVWMGdQU0J3WVhKaGJYTmJhMlY1WFR0Y2JseDBJQ0FnSUgxY2JseDBJQ0I5WEc1Y2JseDBJQ0IyWVhJZ1kzVnpkRzl0UlhabGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZkbVZ1ZENnblEzVnpkRzl0UlhabGJuUW5LVHRjYmx4dVhIUWdJR04xYzNSdmJVVjJaVzUwTG1sdWFYUkRkWE4wYjIxRmRtVnVkQ2hjYmx4MElDQWdJR1YyWlc1MFRtRnRaU3hjYmx4MElDQWdJR1YyWlc1MFVHRnlZVzF6TG1KMVltSnNaWE1zWEc1Y2RDQWdJQ0JsZG1WdWRGQmhjbUZ0Y3k1allXNWpaV3hoWW14bExGeHVYSFFnSUNBZ1pYWmxiblJRWVhKaGJYTXVaR1YwWVdsc1hHNWNkQ0FnS1R0Y2JseHVYSFFnSUhKbGRIVnliaUJqZFhOMGIyMUZkbVZ1ZER0Y2JseDBmVHRjYmx4dVhIUjJZWElnVkc5MWNrWmhZM1J2Y25rZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHVnNaVzFsYm5RcElIdGNibHgwSUNCMGFHbHpMbkp2YjNRZ1BTQmxiR1Z0Wlc1ME8xeHVYSFFnSUhSb2FYTXVkRzkxY2tWc1pXMWxiblJ6SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbUZ3Y0d4NUtHVnNaVzFsYm5RdWNYVmxjbmxUWld4bFkzUnZja0ZzYkNnblcyUmhkR0V0ZEc5MWNsMG5LU2s3WEc1Y2JseDBJQ0JwWmlBb2RHaHBjeTUwYjNWeVJXeGxiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01Da2dlMXh1WEhRZ0lDQWdkR2hwY3k1MGIzVnljeUE5SUh0OU8xeHVYSFFnSUNBZ2RHaHBjeTVqZFhKeVpXNTBWRzkxY2s1aGJXVWdQU0J1ZFd4c08xeHVYRzVjZENBZ0lDQjBhR2x6TG05d1pXNWxjbk1nUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZWEJ3Ykhrb1pXeGxiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkYlpHRjBZUzEwYjNWeUxXOXdaVzVsY2wwbktTazdYRzVjYmx4MElDQWdJSFpoY2lCMGIzVnlUM1psY214aGVVVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVHRjYmx4MElDQWdJSFJ2ZFhKUGRtVnliR0Y1Uld4bGJXVnVkQzVqYkdGemMweHBjM1F1WVdSa0tDZDBiM1Z5TFc5MlpYSnNZWGtuTENBbmIzWmxjbXhoZVMxb2FXUmtaVzRuS1R0Y2JseDBJQ0FnSUhSb2FYTXVkRzkxY2s5MlpYSnNZWGtnUFNCbGJHVnRaVzUwTG1KdlpIa3VZWEJ3Wlc1a1EyaHBiR1FvZEc5MWNrOTJaWEpzWVhsRmJHVnRaVzUwS1R0Y2JseHVYSFFnSUNBZ2RHaHBjeTVwYm1sMGFXRnNhWHBsS0NrN1hHNWNibHgwSUNBZ0lDOHZJRTl3Wlc0Z1lXeHNJSFJ2ZFhKeklIZHBkR2h2ZFhRZ2IzQmxibVZ5Y3lCcGJXMWxaR2xoZEdWc2VWeHVYSFFnSUNBZ2FXWWdLSFJvYVhNdWIzQmxibVZ5Y3k1c1pXNW5kR2dnUENCMGFHbHpMblJ2ZFhKRmJHVnRaVzUwY3k1c1pXNW5kR2dwSUh0Y2JseDBJQ0FnSUNBZ2RtRnlJSFJvWVhRZ1BTQjBhR2x6TzF4dVhIUWdJQ0FnSUNCMllYSWdiM0JsYm1WeVRtRnRaWE1nUFNCMGFHRjBMbTl3Wlc1bGNuTXViV0Z3S0daMWJtTjBhVzl1S0c5d1pXNWxjaWtnZXlCeVpYUjFjbTRnYjNCbGJtVnlMbWRsZEVGMGRISnBZblYwWlNnblpHRjBZUzEwYjNWeUxXOXdaVzVsY2ljcE95QjlLVHRjYmx4dVhIUWdJQ0FnSUNCMGFHRjBMblJ2ZFhKRmJHVnRaVzUwY3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hSdmRYSkZiR1Z0Wlc1MEtTQjdYRzVjZENBZ0lDQWdJQ0FnZG1GeUlIUnZkWEpPWVcxbElEMGdkRzkxY2tWc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFhSdmRYSXRibUZ0WlNjcE8xeHVYSFFnSUNBZ0lDQWdJR2xtSUNnaGIzQmxibVZ5VG1GdFpYTXVhVzVqYkhWa1pYTW9kRzkxY2s1aGJXVXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjBhR0YwTG05d1pXNVViM1Z5S0hSdmRYSk9ZVzFsS1R0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSDBwTzF4dVhIUWdJQ0FnZlZ4dVhIUWdJSDFjYmx4MGZWeHVYRzVjZEZSdmRYSkdZV04wYjNKNUxuQnliM1J2ZEhsd1pTQTlJSHRjYmx4MElDQnBibWwwYVdGc2FYcGxPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBJQ0FnSUhaaGNpQjBhR0YwSUQwZ2RHaHBjenRjYmx4dVhIUWdJQ0FnZEdoaGRDNTBiM1Z5Uld4bGJXVnVkSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWgwYjNWeVJXeGxiV1Z1ZENrZ2UxeHVYSFFnSUNBZ0lDQjBhR0YwTG1sdWFYUnBZV3hwZW1WVWIzVnlLSFJ2ZFhKRmJHVnRaVzUwS1R0Y2JseDBJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQjBhR0YwTG1GMGRHRmphRVYyWlc1MGN5Z3BPMXh1WEhRZ0lIMHNYRzVjZENBZ2FXNXBkR2xoYkdsNlpWUnZkWEk2SUdaMWJtTjBhVzl1S0hSdmRYSkZiR1Z0Wlc1MEtTQjdYRzVjZENBZ0lDQjJZWElnZEdoaGRDQTlJSFJvYVhNN1hHNWNkQ0FnSUNCMllYSWdkRzkxY2s1aGJXVWdQU0IwYjNWeVJXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGRHOTFjaTF1WVcxbEp5azdYRzVjYmx4MElDQWdJSFpoY2lCMGIzVnlJRDBnYm1WM0lGTm9aWEJvWlhKa0xsUnZkWElvZTF4dVhIUWdJQ0FnSUNCa1pXWmhkV3gwY3pvZ2UxeHVYSFFnSUNBZ0lDQWdJSE5vYjNkRFlXNWpaV3hNYVc1ck9pQjBjblZsTEZ4dVhIUWdJQ0FnSUNBZ0lHSjFkSFJ2Ym5NNklGdGNibHgwSUNBZ0lDQWdJQ0FnSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGREb2dkRzkxY2tWc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFhSdmRYSXRjMnRwY0NjcExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMlZ6T2lBblluUnVMV1JsWm1GMWJIUW5MRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmhZM1JwYjI0NklHWjFibU4wYVc5dUtDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvWVhRdVkyeHZjMlZVYjNWeUtIUnZkWEpPWVcxbEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQWdJQ0FnZlN4Y2JseDBJQ0FnSUNBZ0lDQWdJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ2RHOTFja1ZzWlcxbGJuUXVaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMWFJ2ZFhJdGJtVjRkQ2NwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMyVnpPaUFuWW5SdUxYQnlhVzFoY25rbkxGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjQ2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9ZWFF1WTJ4cFkydE9aWGgwS0hSdmRYSk9ZVzFsS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUYxY2JseDBJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ2ZTazdYRzVjYmx4MElDQWdJSFJvWVhRdWRHOTFjbk5iZEc5MWNrNWhiV1ZkSUQwZ2UxeHVYSFFnSUNBZ0lDQjBiM1Z5T2lCMGIzVnlMRnh1WEhRZ0lDQWdJQ0J1WVcxbE9pQjBiM1Z5VG1GdFpWeHVYSFFnSUNBZ2ZUdGNibHgwSUNBZ0lIUm9ZWFF1WVdSa1UzUmxjSE1vZEc5MWNpd2dkRzkxY2tWc1pXMWxiblFwTzF4dVhIUWdJSDBzWEc1Y2RDQWdZV1JrVTNSbGNITTZJR1oxYm1OMGFXOXVLSFJ2ZFhJc0lIUnZkWEpGYkdWdFpXNTBLU0I3WEc1Y2RDQWdJQ0IyWVhJZ2RHaGhkQ0E5SUhSb2FYTTdYRzVjYmx4MElDQWdJSFpoY2lCemRHVndjeUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWhjSEJzZVNoMGIzVnlSV3hsYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZGJaR0YwWVMxMGIzVnlMWE4wWlhCZEp5a3BPMXh1WEhRZ0lDQWdkbUZ5SUhOdmNuUmxaRk4wWlhCeklEMGdjM1JsY0hNdWMyOXlkQ2htZFc1amRHbHZiaWhoTENCaUtTQjdYRzVjZENBZ0lDQWdJSFpoY2lCemRHVndRU0E5SUhCaGNuTmxTVzUwS0dFdVoyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExYTjBaWEF0Ym5WdFltVnlKeWtwTzF4dVhIUWdJQ0FnSUNCMllYSWdjM1JsY0VJZ1BTQndZWEp6WlVsdWRDaGlMbWRsZEVGMGRISnBZblYwWlNnblpHRjBZUzF6ZEdWd0xXNTFiV0psY2ljcEtUdGNibHh1WEhRZ0lDQWdJQ0JwWmlBb2MzUmxjRUVnUGlCemRHVndRaWtnZTF4dVhIUWdJQ0FnSUNBZ0lISmxkSFZ5YmlBeE8xeHVYSFFnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE4wWlhCQklEd2djM1JsY0VJcElIdGNibHgwSUNBZ0lDQWdJQ0J5WlhSMWNtNGdMVEU3WEc1Y2RDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ2NtVjBkWEp1SURBN1hHNWNkQ0FnSUNBZ0lIMWNibHgwSUNBZ0lIMHBPMXh1WEc1Y2RDQWdJQ0J6YjNKMFpXUlRkR1Z3Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hOMFpYQXNJR2x1WkdWNEtTQjdYRzVjZENBZ0lDQWdJSFpoY2lCemRHVndRMjl1Wm1sbklEMGdlMXh1WEhRZ0lDQWdJQ0FnSUhScGRHeGxPaUJ6ZEdWd0xtZGxkRUYwZEhKcFluVjBaU2duWkdGMFlTMTBhWFJzWlNjcElIeDhJQ2NuTEZ4dVhIUWdJQ0FnSUNBZ0lIUmxlSFE2SUhOMFpYQXVhVzV1WlhKSVZFMU1MRnh1WEhRZ0lDQWdJQ0I5TzF4dVhHNWNkQ0FnSUNBZ0lIWmhjaUJqYkdGemMyVnpJRDBnYzNSbGNDNW5aWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRZMnhoYzNObGN5Y3BJSHg4SUNjbk8xeHVYRzVjZENBZ0lDQWdJSFpoY2lCaGRIUmhZMmhVYjBWc1pXMWxiblFnUFNCemRHVndMbWRsZEVGMGRISnBZblYwWlNnblpHRjBZUzFoZEhSaFkyZ3RkRzh0Wld4bGJXVnVkQ2NwTzF4dVhIUWdJQ0FnSUNCMllYSWdZWFIwWVdOb1ZHOVFiM05wZEdsdmJpQTlJSE4wWlhBdVoyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXRjBkR0ZqYUMxMGJ5MXdiM05wZEdsdmJpY3BPMXh1WEhRZ0lDQWdJQ0IyWVhJZ2NHOXphWFJwYjI1UFptWnpaWFFnUFNCN1hHNWNkQ0FnSUNBZ0lDQWdiR1ZtZERvZ0p6QWdNalZ3ZUNjc1hHNWNkQ0FnSUNBZ0lDQWdjbWxuYUhRNklDY3dJQzB5TlhCNEp5eGNibHgwSUNBZ0lDQWdJQ0IwYjNBNklDY3lOWEI0SURBbkxGeHVYSFFnSUNBZ0lDQWdJR0p2ZEhSdmJUb2dKeTB5TlhCNElEQW5YRzVjZENBZ0lDQWdJSDFiWVhSMFlXTm9WRzlRYjNOcGRHbHZibDA3WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLR05zWVhOelpYTXBJSHRjYmx4MElDQWdJQ0FnSUNCemRHVndRMjl1Wm1sbkxtTnNZWE56WlhNZ1BTQmpiR0Z6YzJWekxuTndiR2wwS0NjZ0p5azdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9ZWFIwWVdOb1ZHOUZiR1Z0Wlc1MElDWW1JR0YwZEdGamFGUnZVRzl6YVhScGIyNGdKaVlnY0c5emFYUnBiMjVQWm1aelpYUXBJSHRjYmx4MElDQWdJQ0FnSUNCemRHVndRMjl1Wm1sbkxtRjBkR0ZqYUZSdklEMGdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZERvZ1lYUjBZV05vVkc5RmJHVnRaVzUwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdiMjQ2SUdGMGRHRmphRlJ2VUc5emFYUnBiMjVjYmx4MElDQWdJQ0FnSUNCOU8xeHVYRzVjZENBZ0lDQWdJQ0FnYzNSbGNFTnZibVpwWnk1MFpYUm9aWEpQY0hScGIyNXpJRDBnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdiMlptYzJWME9pQndiM05wZEdsdmJrOW1abk5sZEZ4dVhIUWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUdsbUlDaHpiM0owWldSVGRHVndjeTVzWlc1bmRHZ2dMU0F4SUQwOVBTQnBibVJsZUNrZ2UxeHVYSFFnSUNBZ0lDQWdJSE4wWlhCRGIyNW1hV2N1WW5WMGRHOXVjeUE5SUZ0Y2JseDBJQ0FnSUNBZ0lDQWdJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZERvZ2RHOTFja1ZzWlcxbGJuUXVaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMWFJ2ZFhJdFpHOXVaU2NwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMyVnpPaUFuWW5SdUxYQnlhVzFoY25rbkxGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjQ2SUhSdmRYSXVZMjl0Y0d4bGRHVmNibHgwSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQmRPMXh1WEhRZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ2RHOTFjaTVoWkdSVGRHVndLSE4wWlhCRGIyNW1hV2NwTzF4dVhHNWNkQ0FnSUNBZ0lIUnZkWEl1YjI0b0oyRmpkR2wyWlNjc0lHWjFibU4wYVc5dUtDa2dlMXh1WEhRZ0lDQWdJQ0FnSUhSb1lYUXVkRzkxY2s5MlpYSnNZWGt1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duYjNabGNteGhlUzFvYVdSa1pXNG5LVHRjYmx4MElDQWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lDQWdkRzkxY2k1dmJpZ25hVzVoWTNScGRtVW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JseDBJQ0FnSUNBZ0lDQjBhR0YwTG5SdmRYSlBkbVZ5YkdGNUxtTnNZWE56VEdsemRDNWhaR1FvSjI5MlpYSnNZWGt0YUdsa1pHVnVKeWs3WEc1Y2RDQWdJQ0FnSUgwcE8xeHVYSFFnSUNBZ2ZTazdYRzVjZENBZ2ZTeGNibHgwSUNCaGRIUmhZMmhGZG1WdWRITTZJR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUWdJQ0FnZG1GeUlIUm9ZWFFnUFNCMGFHbHpPMXh1WEc1Y2RDQWdJQ0IwYUdGMExtOXdaVzVsY25NdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2IzQmxibVZ5S1NCN1hHNWNkQ0FnSUNBZ0lHOXdaVzVsY2k1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUhSb1lYUXViM0JsYmxSdmRYSXVZbWx1WkNoMGFHRjBMQ0J2Y0dWdVpYSXVaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMWFJ2ZFhJdGIzQmxibVZ5SnlrcEtUdGNibHgwSUNBZ0lIMHNJSFJvWVhRcE8xeHVYRzVjZENBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHJaWGwxY0Njc0lHWjFibU4wYVc5dUtHVjJaVzUwS1NCN1hHNWNkQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQmxkbVZ1ZEM1M2FHbGphQ0I4ZkNCbGRtVnVkQzVyWlhsRGIyUmxPMXh1WEc1Y2RDQWdJQ0FnSUdsbUlDaDBhR0YwTG1OMWNuSmxiblJVYjNWeVRtRnRaU0E5UFQwZ2JuVnNiQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JseDBJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQzh2SUVWVFExeHVYSFFnSUNBZ0lDQnBaaUFvYTJWNUlEMDlQU0F5TnlrZ2UxeHVYSFFnSUNBZ0lDQWdJSFJvWVhRdVkyeHZjMlZVYjNWeUtIUm9ZWFF1WTNWeWNtVnVkRlJ2ZFhKT1lXMWxLVHRjYmx4MElDQWdJQ0FnZlZ4dVhIUWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lIUm9ZWFF1ZEc5MWNrOTJaWEpzWVhrdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCbWRXNWpkR2x2YmlncElIdGNibHgwSUNBZ0lDQWdkR2hoZEM1amJHOXpaVlJ2ZFhJb2RHaGhkQzVqZFhKeVpXNTBWRzkxY2s1aGJXVXBPMXh1WEhRZ0lDQWdmU2s3WEc1Y2RDQWdmU3hjYmx4MElDQnZjR1Z1Vkc5MWNqb2dablZ1WTNScGIyNG9kRzkxY2s1aGJXVXBJSHRjYmx4MElDQWdJSFpoY2lCMGIzVnlUMkpxWldOMElEMGdkR2hwY3k1MGIzVnljMXQwYjNWeVRtRnRaVjA3WEc1Y2JseDBJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRGUnZkWEpPWVcxbElEMGdkRzkxY2s5aWFtVmpkQzV1WVcxbE8xeHVYRzVjZENBZ0lDQjBiM1Z5VDJKcVpXTjBMblJ2ZFhJdWMzUmhjblFvS1R0Y2JseDBJQ0FnSUhSb2FYTXVkRzkxY2s5MlpYSnNZWGt1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2duZEc5MWNpMXZkbVZ5YkdGNUxXaHBaR1JsYmljcE8xeHVYSFFnSUgwc1hHNWNkQ0FnWTJ4cFkydE9aWGgwT2lCbWRXNWpkR2x2YmloMGIzVnlUbUZ0WlNrZ2UxeHVYSFFnSUNBZ2RtRnlJSFJ2ZFhKUFltcGxZM1FnUFNCMGFHbHpMblJ2ZFhKelczUnZkWEpPWVcxbFhUdGNibHgwSUNBZ0lIWmhjaUJ3WVhsc2IyRmtJRDBnZTF4dVhIUWdJQ0FnSUNCamRYSnlaVzUwVTNSbGNEb2dkRzkxY2s5aWFtVmpkQzUwYjNWeUxtZGxkRU4xY25KbGJuUlRkR1Z3S0NrdWFXUXVjbVZ3YkdGalpTZ25jM1JsY0MwbkxDQW5KeWtzWEc1Y2RDQWdJQ0FnSUhSdmRYSk9ZVzFsT2lCMGIzVnlUMkpxWldOMExtNWhiV1ZjYmx4MElDQWdJSDA3WEc1Y2JseDBJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZHVaWGgwSnl3Z2V5QW5aR1YwWVdsc0p6b2djR0Y1Ykc5aFpDQjlLU2s3WEc1Y2RDQWdJQ0IwYjNWeVQySnFaV04wTG5SdmRYSXVibVY0ZENncE8xeHVYSFFnSUgwc1hHNWNkQ0FnWTJ4dmMyVlViM1Z5T2lCbWRXNWpkR2x2YmloMGIzVnlUbUZ0WlNrZ2UxeHVYSFFnSUNBZ2RtRnlJSFJ2ZFhKUFltcGxZM1FnUFNCMGFHbHpMblJ2ZFhKelczUnZkWEpPWVcxbFhUdGNibHgwSUNBZ0lIWmhjaUJ3WVhsc2IyRmtJRDBnZTF4dVhIUWdJQ0FnSUNCamRYSnlaVzUwVTNSbGNEb2dkRzkxY2s5aWFtVmpkQzUwYjNWeUxtZGxkRU4xY25KbGJuUlRkR1Z3S0NrdWFXUXVjbVZ3YkdGalpTZ25jM1JsY0MwbkxDQW5KeWtzWEc1Y2RDQWdJQ0FnSUhSdmRYSk9ZVzFsT2lCMGIzVnlUMkpxWldOMExtNWhiV1ZjYmx4MElDQWdJSDA3WEc1Y2JseDBJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZGpZVzVqWld3bkxDQjdJQ2RrWlhSaGFXd25PaUJ3WVhsc2IyRmtJSDBwS1R0Y2JseDBJQ0FnSUhSdmRYSlBZbXBsWTNRdWRHOTFjaTVqWVc1alpXd29LVHRjYmx4MElDQjlYRzVjZEgwN1hHNWNibHh1THlvcUtpOGdmU3hjYmk4cUlEa2dLaTljYmk4cUtpb3ZJR1oxYm1OMGFXOXVLRzF2WkhWc1pTd2daWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWtnZTF4dVhHNWNkSFpoY2lCZlgxZEZRbEJCUTB0ZlFVMUVYMFJGUmtsT1JWOUdRVU5VVDFKWlgxOHNJRjlmVjBWQ1VFRkRTMTlCVFVSZlJFVkdTVTVGWDBGU1VrRlpYMThzSUY5ZlYwVkNVRUZEUzE5QlRVUmZSRVZHU1U1RlgxSkZVMVZNVkY5Zk95OHFJU0IwWlhSb1pYSXRjMmhsY0dobGNtUWdNUzR5TGpBZ0tpOWNibHh1WEhRb1puVnVZM1JwYjI0b2NtOXZkQ3dnWm1GamRHOXllU2tnZTF4dVhIUWdJR2xtSUNoMGNuVmxLU0I3WEc1Y2RDQWdJQ0FoS0Y5ZlYwVkNVRUZEUzE5QlRVUmZSRVZHU1U1RlgwRlNVa0ZaWDE4Z1BTQmJYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd4TUNsZExDQmZYMWRGUWxCQlEwdGZRVTFFWDBSRlJrbE9SVjlHUVVOVVQxSlpYMThnUFNBb1ptRmpkRzl5ZVNrc0lGOWZWMFZDVUVGRFMxOUJUVVJmUkVWR1NVNUZYMUpGVTFWTVZGOWZJRDBnS0hSNWNHVnZaaUJmWDFkRlFsQkJRMHRmUVUxRVgwUkZSa2xPUlY5R1FVTlVUMUpaWDE4Z1BUMDlJQ2RtZFc1amRHbHZiaWNnUHlBb1gxOVhSVUpRUVVOTFgwRk5SRjlFUlVaSlRrVmZSa0ZEVkU5U1dWOWZMbUZ3Y0d4NUtHVjRjRzl5ZEhNc0lGOWZWMFZDVUVGRFMxOUJUVVJmUkVWR1NVNUZYMEZTVWtGWlgxOHBLU0E2SUY5ZlYwVkNVRUZEUzE5QlRVUmZSRVZHU1U1RlgwWkJRMVJQVWxsZlh5a3NJRjlmVjBWQ1VFRkRTMTlCVFVSZlJFVkdTVTVGWDFKRlUxVk1WRjlmSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnS0cxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDE5WFJVSlFRVU5MWDBGTlJGOUVSVVpKVGtWZlVrVlRWVXhVWDE4cEtUdGNibHgwSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1WEhRZ0lDQWdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1ZV04wYjNKNUtISmxjWFZwY21Vb0ozUmxkR2hsY2ljcEtUdGNibHgwSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnY205dmRDNVRhR1Z3YUdWeVpDQTlJR1poWTNSdmNua29jbTl2ZEM1VVpYUm9aWElwTzF4dVhIUWdJSDFjYmx4MGZTaDBhR2x6TENCbWRXNWpkR2x2YmloVVpYUm9aWElwSUh0Y2JseHVYSFF2S2lCbmJHOWlZV3dnVkdWMGFHVnlJQ292WEc1Y2JseDBKM1Z6WlNCemRISnBZM1FuTzF4dVhHNWNkSFpoY2lCZlkzSmxZWFJsUTJ4aGMzTWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2V5Qm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowYVdWektIUmhjbWRsZEN3Z2NISnZjSE1wSUhzZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndjbTl3Y3k1c1pXNW5kR2c3SUdrckt5a2dleUIyWVhJZ1pHVnpZM0pwY0hSdmNpQTlJSEJ5YjNCelcybGRPeUJrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ1BTQmtaWE5qY21sd2RHOXlMbVZ1ZFcxbGNtRmliR1VnZkh3Z1ptRnNjMlU3SUdSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaFlteGxJRDBnZEhKMVpUc2dhV1lnS0NkMllXeDFaU2NnYVc0Z1pHVnpZM0pwY0hSdmNpa2daR1Z6WTNKcGNIUnZjaTUzY21sMFlXSnNaU0E5SUhSeWRXVTdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUdSbGMyTnlhWEIwYjNJdWEyVjVMQ0JrWlhOamNtbHdkRzl5S1RzZ2ZTQjlJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9RMjl1YzNSeWRXTjBiM0lzSUhCeWIzUnZVSEp2Y0hNc0lITjBZWFJwWTFCeWIzQnpLU0I3SUdsbUlDaHdjbTkwYjFCeWIzQnpLU0JrWldacGJtVlFjbTl3WlhKMGFXVnpLRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlN3Z2NISnZkRzlRY205d2N5azdJR2xtSUNoemRHRjBhV05RY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaXdnYzNSaGRHbGpVSEp2Y0hNcE95QnlaWFIxY200Z1EyOXVjM1J5ZFdOMGIzSTdJSDA3SUgwcEtDazdYRzVjYmx4MGRtRnlJRjluWlhRZ1BTQm1kVzVqZEdsdmJpQm5aWFFvWDNnMUxDQmZlRFlzSUY5NE55a2dleUIyWVhJZ1gyRm5ZV2x1SUQwZ2RISjFaVHNnWDJaMWJtTjBhVzl1T2lCM2FHbHNaU0FvWDJGbllXbHVLU0I3SUhaaGNpQnZZbXBsWTNRZ1BTQmZlRFVzSUhCeWIzQmxjblI1SUQwZ1gzZzJMQ0J5WldObGFYWmxjaUE5SUY5NE56c2daR1Z6WXlBOUlIQmhjbVZ1ZENBOUlHZGxkSFJsY2lBOUlIVnVaR1ZtYVc1bFpEc2dYMkZuWVdsdUlEMGdabUZzYzJVN0lHbG1JQ2h2WW1wbFkzUWdQVDA5SUc1MWJHd3BJRzlpYW1WamRDQTlJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaVHNnZG1GeUlHUmxjMk1nUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRzlpYW1WamRDd2djSEp2Y0dWeWRIa3BPeUJwWmlBb1pHVnpZeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdJSFpoY2lCd1lYSmxiblFnUFNCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9iMkpxWldOMEtUc2dhV1lnS0hCaGNtVnVkQ0E5UFQwZ2JuVnNiQ2tnZXlCeVpYUjFjbTRnZFc1a1pXWnBibVZrT3lCOUlHVnNjMlVnZXlCZmVEVWdQU0J3WVhKbGJuUTdJRjk0TmlBOUlIQnliM0JsY25SNU95QmZlRGNnUFNCeVpXTmxhWFpsY2pzZ1gyRm5ZV2x1SUQwZ2RISjFaVHNnWTI5dWRHbHVkV1VnWDJaMWJtTjBhVzl1T3lCOUlIMGdaV3h6WlNCcFppQW9KM1poYkhWbEp5QnBiaUJrWlhOaktTQjdJSEpsZEhWeWJpQmtaWE5qTG5aaGJIVmxPeUI5SUdWc2MyVWdleUIyWVhJZ1oyVjBkR1Z5SUQwZ1pHVnpZeTVuWlhRN0lHbG1JQ2huWlhSMFpYSWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2V5QnlaWFIxY200Z2RXNWtaV1pwYm1Wa095QjlJSEpsZEhWeWJpQm5aWFIwWlhJdVkyRnNiQ2h5WldObGFYWmxjaWs3SUgwZ2ZTQjlPMXh1WEc1Y2RHWjFibU4wYVc5dUlGOWpiR0Z6YzBOaGJHeERhR1ZqYXlocGJuTjBZVzVqWlN3Z1EyOXVjM1J5ZFdOMGIzSXBJSHNnYVdZZ0tDRW9hVzV6ZEdGdVkyVWdhVzV6ZEdGdVkyVnZaaUJEYjI1emRISjFZM1J2Y2lrcElIc2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUTJGdWJtOTBJR05oYkd3Z1lTQmpiR0Z6Y3lCaGN5QmhJR1oxYm1OMGFXOXVKeWs3SUgwZ2ZWeHVYRzVjZEdaMWJtTjBhVzl1SUY5cGJtaGxjbWwwY3loemRXSkRiR0Z6Y3l3Z2MzVndaWEpEYkdGemN5a2dleUJwWmlBb2RIbHdaVzltSUhOMWNHVnlRMnhoYzNNZ0lUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ2MzVndaWEpEYkdGemN5QWhQVDBnYm5Wc2JDa2dleUIwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkVGRYQmxjaUJsZUhCeVpYTnphVzl1SUcxMWMzUWdaV2wwYUdWeUlHSmxJRzUxYkd3Z2IzSWdZU0JtZFc1amRHbHZiaXdnYm05MElDY2dLeUIwZVhCbGIyWWdjM1Z3WlhKRGJHRnpjeWs3SUgwZ2MzVmlRMnhoYzNNdWNISnZkRzkwZVhCbElEMGdUMkpxWldOMExtTnlaV0YwWlNoemRYQmxja05zWVhOeklDWW1JSE4xY0dWeVEyeGhjM011Y0hKdmRHOTBlWEJsTENCN0lHTnZibk4wY25WamRHOXlPaUI3SUhaaGJIVmxPaUJ6ZFdKRGJHRnpjeXdnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzSUhkeWFYUmhZbXhsT2lCMGNuVmxMQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VnZlNCOUtUc2dhV1lnS0hOMWNHVnlRMnhoYzNNcElFOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaaUEvSUU5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFppaHpkV0pEYkdGemN5d2djM1Z3WlhKRGJHRnpjeWtnT2lCemRXSkRiR0Z6Y3k1ZlgzQnliM1J2WDE4Z1BTQnpkWEJsY2tOc1lYTnpPeUI5WEc1Y2JseDBkbUZ5SUY5VVpYUm9aWElrVlhScGJITWdQU0JVWlhSb1pYSXVWWFJwYkhNN1hHNWNkSFpoY2lCRmRtVnVkR1ZrSUQwZ1gxUmxkR2hsY2lSVmRHbHNjeTVGZG1WdWRHVmtPMXh1WEhSMllYSWdZV1JrUTJ4aGMzTWdQU0JmVkdWMGFHVnlKRlYwYVd4ekxtRmtaRU5zWVhOek8xeHVYSFIyWVhJZ1pYaDBaVzVrSUQwZ1gxUmxkR2hsY2lSVmRHbHNjeTVsZUhSbGJtUTdYRzVjZEhaaGNpQm9ZWE5EYkdGemN5QTlJRjlVWlhSb1pYSWtWWFJwYkhNdWFHRnpRMnhoYzNNN1hHNWNkSFpoY2lCeVpXMXZkbVZEYkdGemN5QTlJRjlVWlhSb1pYSWtWWFJwYkhNdWNtVnRiM1psUTJ4aGMzTTdYRzVjZEhaaGNpQjFibWx4ZFdWSlpDQTlJRjlVWlhSb1pYSWtWWFJwYkhNdWRXNXBjWFZsU1dRN1hHNWNibHgwZG1GeUlGTm9aWEJvWlhKa0lEMGdibVYzSUVWMlpXNTBaV1FvS1R0Y2JseHVYSFIyWVhJZ1FWUlVRVU5JVFVWT1ZDQTlJSHRjYmx4MElDQW5kRzl3SnpvZ0oySnZkSFJ2YlNCalpXNTBaWEluTEZ4dVhIUWdJQ2RzWldaMEp6b2dKMjFwWkdSc1pTQnlhV2RvZENjc1hHNWNkQ0FnSjNKcFoyaDBKem9nSjIxcFpHUnNaU0JzWldaMEp5eGNibHgwSUNBblltOTBkRzl0SnpvZ0ozUnZjQ0JqWlc1MFpYSW5MRnh1WEhRZ0lDZGpaVzUwWlhJbk9pQW5iV2xrWkd4bElHTmxiblJsY2lkY2JseDBmVHRjYmx4dVhIUm1kVzVqZEdsdmJpQmpjbVZoZEdWR2NtOXRTRlJOVENob2RHMXNLU0I3WEc1Y2RDQWdkbUZ5SUdWc0lEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc1Y2RDQWdaV3d1YVc1dVpYSklWRTFNSUQwZ2FIUnRiRHRjYmx4MElDQnlaWFIxY200Z1pXd3VZMmhwYkdSeVpXNWJNRjA3WEc1Y2RIMWNibHh1WEhSbWRXNWpkR2x2YmlCdFlYUmphR1Z6VTJWc1pXTjBiM0lvWld3c0lITmxiQ2tnZTF4dVhIUWdJSFpoY2lCdFlYUmphR1Z6SUQwZ2RXNWtaV1pwYm1Wa08xeHVYSFFnSUdsbUlDaDBlWEJsYjJZZ1pXd3ViV0YwWTJobGN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lHMWhkR05vWlhNZ1BTQmxiQzV0WVhSamFHVnpPMXh1WEhRZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHVnNMbTFoZEdOb1pYTlRaV3hsWTNSdmNpQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lHMWhkR05vWlhNZ1BTQmxiQzV0WVhSamFHVnpVMlZzWldOMGIzSTdYRzVjZENBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pXd3ViWE5OWVhSamFHVnpVMlZzWldOMGIzSWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQnRZWFJqYUdWeklEMGdaV3d1YlhOTllYUmphR1Z6VTJWc1pXTjBiM0k3WEc1Y2RDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdaV3d1ZDJWaWEybDBUV0YwWTJobGMxTmxiR1ZqZEc5eUlDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFFnSUNBZ2JXRjBZMmhsY3lBOUlHVnNMbmRsWW10cGRFMWhkR05vWlhOVFpXeGxZM1J2Y2p0Y2JseDBJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJsYkM1dGIzcE5ZWFJqYUdWelUyVnNaV04wYjNJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkQ0FnSUNCdFlYUmphR1Z6SUQwZ1pXd3ViVzk2VFdGMFkyaGxjMU5sYkdWamRHOXlPMXh1WEhRZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHVnNMbTlOWVhSamFHVnpVMlZzWldOMGIzSWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQnRZWFJqYUdWeklEMGdaV3d1YjAxaGRHTm9aWE5UWld4bFkzUnZjanRjYmx4MElDQjlYRzVjZENBZ2NtVjBkWEp1SUcxaGRHTm9aWE11WTJGc2JDaGxiQ3dnYzJWc0tUdGNibHgwZlZ4dVhHNWNkR1oxYm1OMGFXOXVJSEJoY25ObFUyaHZjblJvWVc1a0tHOWlhaXdnY0hKdmNITXBJSHRjYmx4MElDQnBaaUFvYjJKcUlEMDlQU0J1ZFd4c0lIeDhJSFI1Y0dWdlppQnZZbW9nUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0J5WlhSMWNtNGdiMkpxTzF4dVhIUWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JRzlpYWlBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmx4MElDQWdJSEpsZEhWeWJpQnZZbW83WEc1Y2RDQWdmVnh1WEc1Y2RDQWdkbUZ5SUhaaGJITWdQU0J2WW1vdWMzQnNhWFFvSnlBbktUdGNibHgwSUNCMllYSWdkbUZzYzB4bGJpQTlJSFpoYkhNdWJHVnVaM1JvTzF4dVhIUWdJSFpoY2lCd2NtOXdjMHhsYmlBOUlIQnliM0J6TG14bGJtZDBhRHRjYmx4MElDQnBaaUFvZG1Gc2MweGxiaUErSUhCeWIzQnpUR1Z1S1NCN1hHNWNkQ0FnSUNCMllXeHpXekJkSUQwZ2RtRnNjeTV6YkdsalpTZ3dMQ0IyWVd4elRHVnVJQzBnY0hKdmNITk1aVzRnS3lBeEtTNXFiMmx1S0NjZ0p5azdYRzVjZENBZ0lDQjJZV3h6TG5Od2JHbGpaU2d4TENBb2RtRnNjMHhsYml3Z2NISnZjSE5NWlc0cEtUdGNibHgwSUNCOVhHNWNibHgwSUNCMllYSWdiM1YwSUQwZ2UzMDdYRzVjZENBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndjbTl3YzB4bGJqc2dLeXRwS1NCN1hHNWNkQ0FnSUNCMllYSWdjSEp2Y0NBOUlIQnliM0J6VzJsZE8xeHVYSFFnSUNBZ2IzVjBXM0J5YjNCZElEMGdkbUZzYzF0cFhUdGNibHgwSUNCOVhHNWNibHgwSUNCeVpYUjFjbTRnYjNWME8xeHVYSFI5WEc1Y2JseDBkbUZ5SUZOMFpYQWdQU0FvWm5WdVkzUnBiMjRnS0Y5RmRtVnVkR1ZrS1NCN1hHNWNkQ0FnWDJsdWFHVnlhWFJ6S0ZOMFpYQXNJRjlGZG1WdWRHVmtLVHRjYmx4dVhIUWdJR1oxYm1OMGFXOXVJRk4wWlhBb2RHOTFjaXdnYjNCMGFXOXVjeWtnZTF4dVhIUWdJQ0FnWDJOc1lYTnpRMkZzYkVOb1pXTnJLSFJvYVhNc0lGTjBaWEFwTzF4dVhHNWNkQ0FnSUNCZloyVjBLRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloVGRHVndMbkJ5YjNSdmRIbHdaU2tzSUNkamIyNXpkSEoxWTNSdmNpY3NJSFJvYVhNcExtTmhiR3dvZEdocGN5d2dkRzkxY2l3Z2IzQjBhVzl1Y3lrN1hHNWNkQ0FnSUNCMGFHbHpMblJ2ZFhJZ1BTQjBiM1Z5TzF4dVhIUWdJQ0FnZEdocGN5NWlhVzVrVFdWMGFHOWtjeWdwTzF4dVhIUWdJQ0FnZEdocGN5NXpaWFJQY0hScGIyNXpLRzl3ZEdsdmJuTXBPMXh1WEhRZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc1Y2RDQWdmVnh1WEc1Y2RDQWdYMk55WldGMFpVTnNZWE56S0ZOMFpYQXNJRnQ3WEc1Y2RDQWdJQ0JyWlhrNklDZGlhVzVrVFdWMGFHOWtjeWNzWEc1Y2RDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdZbWx1WkUxbGRHaHZaSE1vS1NCN1hHNWNkQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNibHgwSUNBZ0lDQWdkbUZ5SUcxbGRHaHZaSE1nUFNCYkoxOXphRzkzSnl3Z0ozTm9iM2NuTENBbmFHbGtaU2NzSUNkcGMwOXdaVzRuTENBblkyRnVZMlZzSnl3Z0oyTnZiWEJzWlhSbEp5d2dKM05qY205c2JGUnZKeXdnSjJSbGMzUnliM2tuWFR0Y2JseDBJQ0FnSUNBZ2JXVjBhRzlrY3k1dFlYQW9ablZ1WTNScGIyNGdLRzFsZEdodlpDa2dlMXh1WEhRZ0lDQWdJQ0FnSUY5MGFHbHpXMjFsZEdodlpGMGdQU0JmZEdocGMxdHRaWFJvYjJSZExtSnBibVFvWDNSb2FYTXBPMXh1WEhRZ0lDQWdJQ0I5S1R0Y2JseDBJQ0FnSUgxY2JseDBJQ0I5TENCN1hHNWNkQ0FnSUNCclpYazZJQ2R6WlhSUGNIUnBiMjV6Snl4Y2JseDBJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJ6WlhSUGNIUnBiMjV6S0NrZ2UxeHVYSFFnSUNBZ0lDQjJZWElnYjNCMGFXOXVjeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUEQwZ01DQjhmQ0JoY21kMWJXVnVkSE5iTUYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUh0OUlEb2dZWEpuZFcxbGJuUnpXekJkTzF4dVhHNWNkQ0FnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUc5d2RHbHZibk03WEc1Y2RDQWdJQ0FnSUhSb2FYTXVaR1Z6ZEhKdmVTZ3BPMXh1WEc1Y2RDQWdJQ0FnSUhSb2FYTXVhV1FnUFNCMGFHbHpMbTl3ZEdsdmJuTXVhV1FnZkh3Z2RHaHBjeTVwWkNCOGZDQW5jM1JsY0MwbklDc2dkVzVwY1hWbFNXUW9LVHRjYmx4dVhIUWdJQ0FnSUNCMllYSWdkMmhsYmlBOUlIUm9hWE11YjNCMGFXOXVjeTUzYUdWdU8xeHVYSFFnSUNBZ0lDQnBaaUFvZDJobGJpa2dlMXh1WEhRZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUY5bGRtVnVkQ0JwYmlCM2FHVnVLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQnBaaUFvS0h0OUtTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLSGRvWlc0c0lGOWxkbVZ1ZENrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2hoYm1Sc1pYSWdQU0IzYUdWdVcxOWxkbVZ1ZEYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjRvWDJWMlpXNTBMQ0JvWVc1a2JHVnlMQ0IwYUdsektUdGNibHgwSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9JWFJvYVhNdWIzQjBhVzl1Y3k1aWRYUjBiMjV6S1NCN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6TG1KMWRIUnZibk1nUFNCYmUxeHVYSFFnSUNBZ0lDQWdJQ0FnZEdWNGREb2dKMDVsZUhRbkxGeHVYSFFnSUNBZ0lDQWdJQ0FnWVdOMGFXOXVPaUIwYUdsekxuUnZkWEl1Ym1WNGRGeHVYSFFnSUNBZ0lDQWdJSDFkTzF4dVhIUWdJQ0FnSUNCOVhHNWNkQ0FnSUNCOVhHNWNkQ0FnZlN3Z2UxeHVYSFFnSUNBZ2EyVjVPaUFuWjJWMFZHOTFjaWNzWEc1Y2RDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwVkc5MWNpZ3BJSHRjYmx4MElDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWRHOTFjanRjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZGlhVzVrUVdSMllXNWpaU2NzWEc1Y2RDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdZbWx1WkVGa2RtRnVZMlVvS1NCN1hHNWNkQ0FnSUNBZ0lIWmhjaUJmZEdocGN6SWdQU0IwYUdsek8xeHVYRzVjZENBZ0lDQWdJQzh2SUVGdUlHVnRjSFI1SUhObGJHVmpkRzl5SUcxaGRHTm9aWE1nZEdobElITjBaWEFnWld4bGJXVnVkRnh1WEc1Y2RDQWdJQ0FnSUhaaGNpQmZjR0Z5YzJWVGFHOXlkR2hoYm1RZ1BTQndZWEp6WlZOb2IzSjBhR0Z1WkNoMGFHbHpMbTl3ZEdsdmJuTXVZV1IyWVc1alpVOXVMQ0JiSjNObGJHVmpkRzl5Snl3Z0oyVjJaVzUwSjEwcE8xeHVYRzVjZENBZ0lDQWdJSFpoY2lCbGRtVnVkQ0E5SUY5d1lYSnpaVk5vYjNKMGFHRnVaQzVsZG1WdWREdGNibHgwSUNBZ0lDQWdkbUZ5SUhObGJHVmpkRzl5SUQwZ1gzQmhjbk5sVTJodmNuUm9ZVzVrTG5ObGJHVmpkRzl5TzF4dVhHNWNkQ0FnSUNBZ0lIWmhjaUJvWVc1a2JHVnlJRDBnWm5WdVkzUnBiMjRnYUdGdVpHeGxjaWhsS1NCN1hHNWNkQ0FnSUNBZ0lDQWdhV1lnS0NGZmRHaHBjekl1YVhOUGNHVnVLQ2twSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5sYkdWamRHOXlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb1pYTlRaV3hsWTNSdmNpaGxMblJoY21kbGRDd2djMlZzWldOMGIzSXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsek1pNTBiM1Z5TG01bGVIUW9LVHRjYmx4MElDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsek1pNWxiQ0FtSmlCbExuUmhjbWRsZENBOVBUMGdYM1JvYVhNeUxtVnNLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsek1pNTBiM1Z5TG01bGVIUW9LVHRjYmx4MElDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUgwN1hHNWNibHgwSUNBZ0lDQWdMeThnVkU5RVR6b2dkR2hwY3lCemFHOTFiR1FnWVd4emJ5QmlhVzVrTDNWdVltbHVaQ0J2YmlCemFHOTNMMmhwWkdWY2JseDBJQ0FnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLR1YyWlc1MExDQm9ZVzVrYkdWeUtUdGNibHgwSUNBZ0lDQWdkR2hwY3k1dmJpZ25aR1Z6ZEhKdmVTY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHOWpkVzFsYm5RdVltOWtlUzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0dWMlpXNTBMQ0JvWVc1a2JHVnlLVHRjYmx4MElDQWdJQ0FnZlNrN1hHNWNkQ0FnSUNCOVhHNWNkQ0FnZlN3Z2UxeHVYSFFnSUNBZ2EyVjVPaUFuWjJWMFFYUjBZV05vVkc4bkxGeHVYSFFnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUdkbGRFRjBkR0ZqYUZSdktDa2dlMXh1WEhRZ0lDQWdJQ0IyWVhJZ2IzQjBjeUE5SUhCaGNuTmxVMmh2Y25Sb1lXNWtLSFJvYVhNdWIzQjBhVzl1Y3k1aGRIUmhZMmhVYnl3Z1d5ZGxiR1Z0Wlc1MEp5d2dKMjl1SjEwcElIeDhJSHQ5TzF4dVhIUWdJQ0FnSUNCMllYSWdjMlZzWldOMGIzSWdQU0J2Y0hSekxtVnNaVzFsYm5RN1hHNWNibHgwSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6Wld4bFkzUnZjaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNibHgwSUNBZ0lDQWdJQ0J2Y0hSekxtVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0hObGJHVmpkRzl5S1R0Y2JseHVYSFFnSUNBZ0lDQWdJR2xtSUNnaGIzQjBjeTVsYkdWdFpXNTBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0JsYkdWdFpXNTBJR1p2Y2lCMGFHbHpJRk5vWlhCb1pYSmtJSE4wWlhBZ2QyRnpJRzV2ZENCbWIzVnVaQ0FuSUNzZ2MyVnNaV04wYjNJcE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lISmxkSFZ5YmlCdmNIUnpPMXh1WEhRZ0lDQWdmVnh1WEhRZ0lIMHNJSHRjYmx4MElDQWdJR3RsZVRvZ0ozTmxkSFZ3VkdWMGFHVnlKeXhjYmx4MElDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQnpaWFIxY0ZSbGRHaGxjaWdwSUh0Y2JseDBJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQlVaWFJvWlhJZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lWWE5wYm1jZ2RHaGxJR0YwZEdGamFHMWxiblFnWm1WaGRIVnlaU0J2WmlCVGFHVndhR1Z5WkNCeVpYRjFhWEpsY3lCMGFHVWdWR1YwYUdWeUlHeHBZbkpoY25sY0lpazdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCMllYSWdiM0IwY3lBOUlIUm9hWE11WjJWMFFYUjBZV05vVkc4b0tUdGNibHgwSUNBZ0lDQWdkbUZ5SUdGMGRHRmphRzFsYm5RZ1BTQkJWRlJCUTBoTlJVNVVXMjl3ZEhNdWIyNGdmSHdnSjNKcFoyaDBKMTA3WEc1Y2RDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IzQjBjeTVsYkdWdFpXNTBJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhRZ0lDQWdJQ0FnSUc5d2RITXVaV3hsYldWdWRDQTlJQ2QyYVdWM2NHOXlkQ2M3WEc1Y2RDQWdJQ0FnSUNBZ1lYUjBZV05vYldWdWRDQTlJQ2R0YVdSa2JHVWdZMlZ1ZEdWeUp6dGNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUhaaGNpQjBaWFJvWlhKUGNIUnpJRDBnZTF4dVhIUWdJQ0FnSUNBZ0lHTnNZWE56VUhKbFptbDRPaUFuYzJobGNHaGxjbVFuTEZ4dVhIUWdJQ0FnSUNBZ0lHVnNaVzFsYm5RNklIUm9hWE11Wld3c1hHNWNkQ0FnSUNBZ0lDQWdZMjl1YzNSeVlXbHVkSE02SUZ0N1hHNWNkQ0FnSUNBZ0lDQWdJQ0IwYnpvZ0ozZHBibVJ2ZHljc1hHNWNkQ0FnSUNBZ0lDQWdJQ0J3YVc0NklIUnlkV1VzWEc1Y2RDQWdJQ0FnSUNBZ0lDQmhkSFJoWTJodFpXNTBPaUFuZEc5blpYUm9aWEluWEc1Y2RDQWdJQ0FnSUNBZ2ZWMHNYRzVjZENBZ0lDQWdJQ0FnZEdGeVoyVjBPaUJ2Y0hSekxtVnNaVzFsYm5Rc1hHNWNkQ0FnSUNBZ0lDQWdiMlptYzJWME9pQnZjSFJ6TG05bVpuTmxkQ0I4ZkNBbk1DQXdKeXhjYmx4MElDQWdJQ0FnSUNCaGRIUmhZMmh0Wlc1ME9pQmhkSFJoWTJodFpXNTBYRzVjZENBZ0lDQWdJSDA3WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRHVjBhR1Z5S1NCN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1MFpYUm9aWEl1WkdWemRISnZlU2dwTzF4dVhIUWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdkR2hwY3k1MFpYUm9aWElnUFNCdVpYY2dWR1YwYUdWeUtHVjRkR1Z1WkNoMFpYUm9aWEpQY0hSekxDQjBhR2x6TG05d2RHbHZibk11ZEdWMGFHVnlUM0IwYVc5dWN5a3BPMXh1WEhRZ0lDQWdmVnh1WEhRZ0lIMHNJSHRjYmx4MElDQWdJR3RsZVRvZ0ozTm9iM2NuTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSE5vYjNjb0tTQjdYRzVjZENBZ0lDQWdJSFpoY2lCZmRHaHBjek1nUFNCMGFHbHpPMXh1WEc1Y2RDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTV2Y0hScGIyNXpMbUpsWm05eVpWTm9iM2RRY205dGFYTmxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhRZ0lDQWdJQ0FnSUhaaGNpQmlaV1p2Y21WVGFHOTNVSEp2YldselpTQTlJSFJvYVhNdWIzQjBhVzl1Y3k1aVpXWnZjbVZUYUc5M1VISnZiV2x6WlNncE8xeHVYSFFnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWW1WbWIzSmxVMmh2ZDFCeWIyMXBjMlVnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ltVm1iM0psVTJodmQxQnliMjFwYzJVdWRHaGxiaWhtZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN6TXVYM05vYjNjb0tUdGNibHgwSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYSFFnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNCMGFHbHpMbDl6YUc5M0tDazdYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBblgzTm9iM2NuTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJRjl6YUc5M0tDa2dlMXh1WEhRZ0lDQWdJQ0IyWVhJZ1gzUm9hWE0wSUQwZ2RHaHBjenRjYmx4dVhIUWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KMkpsWm05eVpTMXphRzkzSnlrN1hHNWNibHgwSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbVZzS1NCN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXNWtaWElvS1R0Y2JseDBJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJR0ZrWkVOc1lYTnpLSFJvYVhNdVpXd3NJQ2R6YUdWd2FHVnlaQzF2Y0dWdUp5azdYRzVjYmx4MElDQWdJQ0FnWkc5amRXMWxiblF1WW05a2VTNXpaWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRjMmhsY0dobGNtUXRjM1JsY0Njc0lIUm9hWE11YVdRcE8xeHVYRzVjZENBZ0lDQWdJSFJvYVhNdWMyVjBkWEJVWlhSb1pYSW9LVHRjYmx4dVhIUWdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG5OamNtOXNiRlJ2S1NCN1hHNWNkQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0JmZEdocGN6UXVjMk55YjJ4c1ZHOG9LVHRjYmx4MElDQWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpZ25jMmh2ZHljcE8xeHVYSFFnSUNBZ2ZWeHVYSFFnSUgwc0lIdGNibHgwSUNBZ0lHdGxlVG9nSjJocFpHVW5MRnh1WEhRZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlHaHBaR1VvS1NCN1hHNWNkQ0FnSUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWduWW1WbWIzSmxMV2hwWkdVbktUdGNibHh1WEhRZ0lDQWdJQ0J5WlcxdmRtVkRiR0Z6Y3loMGFHbHpMbVZzTENBbmMyaGxjR2hsY21RdGIzQmxiaWNwTzF4dVhHNWNkQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1Y21WdGIzWmxRWFIwY21saWRYUmxLQ2RrWVhSaExYTm9aWEJvWlhKa0xYTjBaWEFuS1R0Y2JseHVYSFFnSUNBZ0lDQnBaaUFvZEdocGN5NTBaWFJvWlhJcElIdGNibHgwSUNBZ0lDQWdJQ0IwYUdsekxuUmxkR2hsY2k1a1pYTjBjbTk1S0NrN1hHNWNkQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdkR2hwY3k1MFpYUm9aWElnUFNCdWRXeHNPMXh1WEc1Y2RDQWdJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpZ25hR2xrWlNjcE8xeHVYSFFnSUNBZ2ZWeHVYSFFnSUgwc0lIdGNibHgwSUNBZ0lHdGxlVG9nSjJselQzQmxiaWNzWEc1Y2RDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdhWE5QY0dWdUtDa2dlMXh1WEhRZ0lDQWdJQ0J5WlhSMWNtNGdhR0Z6UTJ4aGMzTW9kR2hwY3k1bGJDd2dKM05vWlhCb1pYSmtMVzl3Wlc0bktUdGNibHgwSUNBZ0lIMWNibHgwSUNCOUxDQjdYRzVjZENBZ0lDQnJaWGs2SUNkallXNWpaV3duTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR05oYm1ObGJDZ3BJSHRjYmx4MElDQWdJQ0FnZEdocGN5NTBiM1Z5TG1OaGJtTmxiQ2dwTzF4dVhIUWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KMk5oYm1ObGJDY3BPMXh1WEhRZ0lDQWdmVnh1WEhRZ0lIMHNJSHRjYmx4MElDQWdJR3RsZVRvZ0oyTnZiWEJzWlhSbEp5eGNibHgwSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCamIyMXdiR1YwWlNncElIdGNibHgwSUNBZ0lDQWdkR2hwY3k1MGIzVnlMbU52YlhCc1pYUmxLQ2s3WEc1Y2RDQWdJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpZ25ZMjl0Y0d4bGRHVW5LVHRjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZHpZM0p2Ykd4VWJ5Y3NYRzVjZENBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2MyTnliMnhzVkc4b0tTQjdYRzVjZENBZ0lDQWdJSFpoY2lCZloyVjBRWFIwWVdOb1ZHOGdQU0IwYUdsekxtZGxkRUYwZEdGamFGUnZLQ2s3WEc1Y2JseDBJQ0FnSUNBZ2RtRnlJR1ZzWlcxbGJuUWdQU0JmWjJWMFFYUjBZV05vVkc4dVpXeGxiV1Z1ZER0Y2JseHVYSFFnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdWIzQjBhVzl1Y3k1elkzSnZiR3hVYjBoaGJtUnNaWElnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbk5qY205c2JGUnZTR0Z1Wkd4bGNpaGxiR1Z0Wlc1MEtUdGNibHgwSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdaV3hsYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lDQWdJQ0JsYkdWdFpXNTBMbk5qY205c2JFbHVkRzlXYVdWM0tDazdYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZGtaWE4wY205NUp5eGNibHgwSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCa1pYTjBjbTk1S0NrZ2UxeHVYSFFnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdVpXd2dJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WW05a2VTNXlaVzF2ZG1WRGFHbHNaQ2gwYUdsekxtVnNLVHRjYmx4MElDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWxiRHRjYmx4MElDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUmxkR2hsY2lrZ2UxeHVYSFFnSUNBZ0lDQWdJSFJvYVhNdWRHVjBhR1Z5TG1SbGMzUnliM2tvS1R0Y2JseDBJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQjBhR2x6TG5SbGRHaGxjaUE5SUc1MWJHdzdYRzVjYmx4MElDQWdJQ0FnZEdocGN5NTBjbWxuWjJWeUtDZGtaWE4wY205NUp5azdYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBbmNtVnVaR1Z5Snl4Y2JseDBJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJ5Wlc1a1pYSW9LU0I3WEc1Y2RDQWdJQ0FnSUhaaGNpQmZkR2hwY3pVZ1BTQjBhR2x6TzF4dVhHNWNkQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1bGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lDQWdJQ0IwYUdsekxtUmxjM1J5YjNrb0tUdGNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUhSb2FYTXVaV3dnUFNCamNtVmhkR1ZHY205dFNGUk5UQ2duUEdScGRpQmpiR0Z6Y3oxY1hDZHphR1Z3YUdWeVpDMXpkR1Z3SUNjZ0t5QW9kR2hwY3k1dmNIUnBiMjV6TG1Oc1lYTnpaWE1nZkh3Z0p5Y3BJQ3NnSjF4Y0p5QmtZWFJoTFdsa1BWeGNKeWNnS3lCMGFHbHpMbWxrSUNzZ0oxeGNKeUFuSUNzZ0tIUm9hWE11YjNCMGFXOXVjeTVwWkVGMGRISnBZblYwWlNBL0lDZHBaRDFjSWljZ0t5QjBhR2x6TG05d2RHbHZibk11YVdSQmRIUnlhV0oxZEdVZ0t5QW5YQ0luSURvZ0p5Y3BJQ3NnSno0OEwyUnBkajRuS1R0Y2JseHVYSFFnSUNBZ0lDQjJZWElnWTI5dWRHVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVYSFFnSUNBZ0lDQmpiMjUwWlc1MExtTnNZWE56VG1GdFpTQTlJQ2R6YUdWd2FHVnlaQzFqYjI1MFpXNTBKenRjYmx4MElDQWdJQ0FnZEdocGN5NWxiQzVoY0hCbGJtUkRhR2xzWkNoamIyNTBaVzUwS1R0Y2JseHVYSFFnSUNBZ0lDQjJZWElnYUdWaFpHVnlJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25hR1ZoWkdWeUp5azdYRzVjZENBZ0lDQWdJR052Ym5SbGJuUXVZWEJ3Wlc1a1EyaHBiR1FvYUdWaFpHVnlLVHRjYmx4dVhIUWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11YjNCMGFXOXVjeTUwYVhSc1pTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lDQWdJQ0JvWldGa1pYSXVhVzV1WlhKSVZFMU1JQ3M5SUNjOGFETWdZMnhoYzNNOVhGd25jMmhsY0dobGNtUXRkR2wwYkdWY1hDYytKeUFySUhSb2FYTXViM0IwYVc5dWN5NTBhWFJzWlNBcklDYzhMMmd6UGljN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1bGJDNWpiR0Z6YzA1aGJXVWdLejBnSnlCemFHVndhR1Z5WkMxb1lYTXRkR2wwYkdVbk8xeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTV6YUc5M1EyRnVZMlZzVEdsdWF5a2dlMXh1WEhRZ0lDQWdJQ0FnSUhaaGNpQnNhVzVySUQwZ1kzSmxZWFJsUm5KdmJVaFVUVXdvWENJOFlTQm9jbVZtSUdOc1lYTnpQU2R6YUdWd2FHVnlaQzFqWVc1alpXd3RiR2x1YXljKzRweVZQQzloUGx3aUtUdGNibHgwSUNBZ0lDQWdJQ0JvWldGa1pYSXVZWEJ3Wlc1a1EyaHBiR1FvYkdsdWF5azdYRzVjYmx4MElDQWdJQ0FnSUNCMGFHbHpMbVZzTG1Oc1lYTnpUbUZ0WlNBclBTQW5JSE5vWlhCb1pYSmtMV2hoY3kxallXNWpaV3d0YkdsdWF5YzdYRzVjYmx4MElDQWdJQ0FnSUNCMGFHbHpMbUpwYm1SRFlXNWpaV3hNYVc1cktHeHBibXNwTzF4dVhIUWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxtOXdkR2x2Ym5NdWRHVjRkQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MElDQWdJQ0FnSUNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJsZUhRZ1BTQmpjbVZoZEdWR2NtOXRTRlJOVENoY0lqeGthWFlnWTJ4aGMzTTlKM05vWlhCb1pYSmtMWFJsZUhRblBqd3ZaR2wyUGx3aUtUdGNibHgwSUNBZ0lDQWdJQ0FnSUhaaGNpQndZWEpoWjNKaGNHaHpJRDBnWDNSb2FYTTFMbTl3ZEdsdmJuTXVkR1Y0ZER0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd1lYSmhaM0poY0doeklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhCaGNtRm5jbUZ3YUhNZ1BTQndZWEpoWjNKaGNHaHpMbU5oYkd3b1gzUm9hWE0xTENCMFpYaDBLVHRjYmx4MElDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJoY21GbmNtRndhSE1nYVc1emRHRnVZMlZ2WmlCSVZFMU1SV3hsYldWdWRDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBaWGgwTG1Gd2NHVnVaRU5vYVd4a0tIQmhjbUZuY21Gd2FITXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd1lYSmhaM0poY0doeklEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGNtRm5jbUZ3YUhNZ1BTQmJjR0Z5WVdkeVlYQm9jMTA3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J3WVhKaFozSmhjR2h6TG0xaGNDaG1kVzVqZEdsdmJpQW9jR0Z5WVdkeVlYQm9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGRDNXBibTVsY2toVVRVd2dLejBnSnp4d1BpY2dLeUJ3WVhKaFozSmhjR2dnS3lBblBDOXdQaWM3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQmpiMjUwWlc1MExtRndjR1Z1WkVOb2FXeGtLSFJsZUhRcE8xeHVYSFFnSUNBZ0lDQWdJSDBwS0NrN1hHNWNkQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0IyWVhJZ1ptOXZkR1Z5SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWm05dmRHVnlKeWs3WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1aWRYUjBiMjV6S1NCN1hHNWNkQ0FnSUNBZ0lDQWdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJSFpoY2lCaWRYUjBiMjV6SUQwZ1kzSmxZWFJsUm5KdmJVaFVUVXdvWENJOGRXd2dZMnhoYzNNOUozTm9aWEJvWlhKa0xXSjFkSFJ2Ym5NblBqd3ZkV3crWENJcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNCZmRHaHBjelV1YjNCMGFXOXVjeTVpZFhSMGIyNXpMbTFoY0NobWRXNWpkR2x2YmlBb1kyWm5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaWRYUjBiMjRnUFNCamNtVmhkR1ZHY205dFNGUk5UQ2duUEd4cFBqeGhJR05zWVhOelBWeGNKM05vWlhCb1pYSmtMV0oxZEhSdmJpQW5JQ3NnS0dObVp5NWpiR0Z6YzJWeklIeDhJQ2NuS1NBcklDZGNYQ2MrSnlBcklHTm1aeTUwWlhoMElDc2dKend2WVQ0bktUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1Y3k1aGNIQmxibVJEYUdsc1pDaGlkWFIwYjI0cE8xeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjelV1WW1sdVpFSjFkSFJ2YmtWMlpXNTBjeWhqWm1jc0lHSjFkSFJ2Ymk1eGRXVnllVk5sYkdWamRHOXlLQ2RoSnlrcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUdadmIzUmxjaTVoY0hCbGJtUkRhR2xzWkNoaWRYUjBiMjV6S1R0Y2JseDBJQ0FnSUNBZ0lDQjlLU2dwTzF4dVhIUWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdZMjl1ZEdWdWRDNWhjSEJsYm1SRGFHbHNaQ2htYjI5MFpYSXBPMXh1WEc1Y2RDQWdJQ0FnSUdSdlkzVnRaVzUwTG1KdlpIa3VZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NWxiQ2s3WEc1Y2JseDBJQ0FnSUNBZ2RHaHBjeTV6WlhSMWNGUmxkR2hsY2lncE8xeHVYRzVjZENBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVZV1IyWVc1alpVOXVLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTVpYVc1a1FXUjJZVzVqWlNncE8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBblltbHVaRU5oYm1ObGJFeHBibXNuTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR0pwYm1SRFlXNWpaV3hNYVc1cktHeHBibXNwSUh0Y2JseDBJQ0FnSUNBZ2RtRnlJRjkwYUdsek5pQTlJSFJvYVhNN1hHNWNibHgwSUNBZ0lDQWdiR2x1YXk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNobEtTQjdYRzVjZENBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4dVhIUWdJQ0FnSUNBZ0lGOTBhR2x6Tmk1allXNWpaV3dvS1R0Y2JseDBJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBblltbHVaRUoxZEhSdmJrVjJaVzUwY3ljc1hHNWNkQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnWW1sdVpFSjFkSFJ2YmtWMlpXNTBjeWhqWm1jc0lHVnNLU0I3WEc1Y2RDQWdJQ0FnSUhaaGNpQmZkR2hwY3pjZ1BTQjBhR2x6TzF4dVhHNWNkQ0FnSUNBZ0lHTm1aeTVsZG1WdWRITWdQU0JqWm1jdVpYWmxiblJ6SUh4OElIdDlPMXh1WEhRZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdObVp5NWhZM1JwYjI0Z0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdMeThnU1c1amJIVmthVzVuSUdKdmRHZ2dZU0JqYkdsamF5QmxkbVZ1ZENCaGJtUWdZVzRnWVdOMGFXOXVJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUmNibHgwSUNBZ0lDQWdJQ0JqWm1jdVpYWmxiblJ6TG1Oc2FXTnJJRDBnWTJabkxtRmpkR2x2Ymp0Y2JseDBJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJR1p2Y2lBb2RtRnlJRjlsZG1WdWRESWdhVzRnWTJabkxtVjJaVzUwY3lrZ2UxeHVYSFFnSUNBZ0lDQWdJR2xtSUNnb2UzMHBMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvWTJabkxtVjJaVzUwY3l3Z1gyVjJaVzUwTWlrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUhaaGNpQm9ZVzVrYkdWeUlEMGdZMlpuTG1WMlpXNTBjMXRmWlhabGJuUXlYVHRjYmx4MElDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhR0Z1Wkd4bGNpQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnS0daMWJtTjBhVzl1SUNncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0dGblpTQTlJR2hoYm1Sc1pYSTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bGNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjemN1ZEc5MWNpNXphRzkzS0hCaFoyVXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSDBwS0NrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ0lDQmxiQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRjlsZG1WdWRESXNJR2hoYm1Sc1pYSXBPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJSFJvYVhNdWIyNG9KMlJsYzNSeWIza25MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdYMlYyWlc1ME15QnBiaUJqWm1jdVpYWmxiblJ6S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0JwWmlBb0tIdDlLUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0dObVp5NWxkbVZ1ZEhNc0lGOWxkbVZ1ZERNcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJvWVc1a2JHVnlJRDBnWTJabkxtVjJaVzUwYzF0ZlpYWmxiblF6WFR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWld3dWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGZaWFpsYm5RekxDQm9ZVzVrYkdWeUtUdGNibHgwSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSDBwTzF4dVhIUWdJQ0FnZlZ4dVhIUWdJSDFkS1R0Y2JseHVYSFFnSUhKbGRIVnliaUJUZEdWd08xeHVYSFI5S1NoRmRtVnVkR1ZrS1R0Y2JseHVYSFIyWVhJZ1ZHOTFjaUE5SUNobWRXNWpkR2x2YmlBb1gwVjJaVzUwWldReUtTQjdYRzVjZENBZ1gybHVhR1Z5YVhSektGUnZkWElzSUY5RmRtVnVkR1ZrTWlrN1hHNWNibHgwSUNCbWRXNWpkR2x2YmlCVWIzVnlLQ2tnZTF4dVhIUWdJQ0FnZG1GeUlGOTBhR2x6T0NBOUlIUm9hWE03WEc1Y2JseDBJQ0FnSUhaaGNpQnZjSFJwYjI1eklEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThQU0F3SUh4OElHRnlaM1Z0Wlc1MGMxc3dYU0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdlMzBnT2lCaGNtZDFiV1Z1ZEhOYk1GMDdYRzVjYmx4MElDQWdJRjlqYkdGemMwTmhiR3hEYUdWamF5aDBhR2x6TENCVWIzVnlLVHRjYmx4dVhIUWdJQ0FnWDJkbGRDaFBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllvVkc5MWNpNXdjbTkwYjNSNWNHVXBMQ0FuWTI5dWMzUnlkV04wYjNJbkxDQjBhR2x6S1M1allXeHNLSFJvYVhNc0lHOXdkR2x2Ym5NcE8xeHVYSFFnSUNBZ2RHaHBjeTVpYVc1a1RXVjBhRzlrY3lncE8xeHVYSFFnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnYjNCMGFXOXVjenRjYmx4MElDQWdJSFJvYVhNdWMzUmxjSE1nUFNCMGFHbHpMbTl3ZEdsdmJuTXVjM1JsY0hNZ2ZId2dXMTA3WEc1Y2JseDBJQ0FnSUM4dklGQmhjM01nZEdobGMyVWdaWFpsYm5SeklHOXVkRzhnZEdobElHZHNiMkpoYkNCVGFHVndhR1Z5WkNCdlltcGxZM1JjYmx4MElDQWdJSFpoY2lCbGRtVnVkSE1nUFNCYkoyTnZiWEJzWlhSbEp5d2dKMk5oYm1ObGJDY3NJQ2RvYVdSbEp5d2dKM04wWVhKMEp5d2dKM05vYjNjbkxDQW5ZV04wYVhabEp5d2dKMmx1WVdOMGFYWmxKMTA3WEc1Y2RDQWdJQ0JsZG1WdWRITXViV0Z3S0daMWJtTjBhVzl1SUNobGRtVnVkQ2tnZTF4dVhIUWdJQ0FnSUNBb1puVnVZM1JwYjI0Z0tHVXBJSHRjYmx4MElDQWdJQ0FnSUNCZmRHaHBjemd1YjI0b1pTd2dablZ1WTNScGIyNGdLRzl3ZEhNcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUc5d2RITWdQU0J2Y0hSeklIeDhJSHQ5TzF4dVhIUWdJQ0FnSUNBZ0lDQWdiM0IwY3k1MGIzVnlJRDBnWDNSb2FYTTRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ1UyaGxjR2hsY21RdWRISnBaMmRsY2lobExDQnZjSFJ6S1R0Y2JseDBJQ0FnSUNBZ0lDQjlLVHRjYmx4MElDQWdJQ0FnZlNrb1pYWmxiblFwTzF4dVhIUWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1WEhRZ0lIMWNibHh1WEhRZ0lGOWpjbVZoZEdWRGJHRnpjeWhVYjNWeUxDQmJlMXh1WEhRZ0lDQWdhMlY1T2lBblltbHVaRTFsZEdodlpITW5MRnh1WEhRZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlHSnBibVJOWlhSb2IyUnpLQ2tnZTF4dVhIUWdJQ0FnSUNCMllYSWdYM1JvYVhNNUlEMGdkR2hwY3p0Y2JseHVYSFFnSUNBZ0lDQjJZWElnYldWMGFHOWtjeUE5SUZzbmJtVjRkQ2NzSUNkaVlXTnJKeXdnSjJOaGJtTmxiQ2NzSUNkamIyMXdiR1YwWlNjc0lDZG9hV1JsSjEwN1hHNWNkQ0FnSUNBZ0lHMWxkR2h2WkhNdWJXRndLR1oxYm1OMGFXOXVJQ2h0WlhSb2IyUXBJSHRjYmx4MElDQWdJQ0FnSUNCZmRHaHBjemxiYldWMGFHOWtYU0E5SUY5MGFHbHpPVnR0WlhSb2IyUmRMbUpwYm1Rb1gzUm9hWE01S1R0Y2JseDBJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBbllXUmtVM1JsY0Njc1hHNWNkQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnWVdSa1UzUmxjQ2h1WVcxbExDQnpkR1Z3S1NCN1hHNWNkQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjM1JsY0NBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQnpkR1Z3SUQwZ2JtRnRaVHRjYmx4MElDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lHbG1JQ2doS0hOMFpYQWdhVzV6ZEdGdVkyVnZaaUJUZEdWd0tTa2dlMXh1WEhRZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JtRnRaU0E5UFQwZ0ozTjBjbWx1WnljZ2ZId2dkSGx3Wlc5bUlHNWhiV1VnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCemRHVndMbWxrSUQwZ2JtRnRaUzUwYjFOMGNtbHVaeWdwTzF4dVhIUWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0J6ZEdWd0lEMGdaWGgwWlc1a0tIdDlMQ0IwYUdsekxtOXdkR2x2Ym5NdVpHVm1ZWFZzZEhNc0lITjBaWEFwTzF4dVhIUWdJQ0FnSUNBZ0lITjBaWEFnUFNCdVpYY2dVM1JsY0NoMGFHbHpMQ0J6ZEdWd0tUdGNibHgwSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0J6ZEdWd0xuUnZkWElnUFNCMGFHbHpPMXh1WEhRZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ2RHaHBjeTV6ZEdWd2N5NXdkWE5vS0hOMFpYQXBPMXh1WEhRZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JseDBJQ0FnSUgxY2JseDBJQ0I5TENCN1hHNWNkQ0FnSUNCclpYazZJQ2RuWlhSQ2VVbGtKeXhjYmx4MElDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm5aWFJDZVVsa0tHbGtLU0I3WEc1Y2RDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTV6ZEdWd2N5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJ6ZEdWd0lEMGdkR2hwY3k1emRHVndjMXRwWFR0Y2JseDBJQ0FnSUNBZ0lDQnBaaUFvYzNSbGNDNXBaQ0E5UFQwZ2FXUXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRHVndPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ2ZWeHVYSFFnSUgwc0lIdGNibHgwSUNBZ0lHdGxlVG9nSjJkbGRFTjFjbkpsYm5SVGRHVndKeXhjYmx4MElDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm5aWFJEZFhKeVpXNTBVM1JsY0NncElIdGNibHgwSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNWeWNtVnVkRk4wWlhBN1hHNWNkQ0FnSUNCOVhHNWNkQ0FnZlN3Z2UxeHVYSFFnSUNBZ2EyVjVPaUFuYm1WNGRDY3NYRzVjZENBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2JtVjRkQ2dwSUh0Y2JseDBJQ0FnSUNBZ2RtRnlJR2x1WkdWNElEMGdkR2hwY3k1emRHVndjeTVwYm1SbGVFOW1LSFJvYVhNdVkzVnljbVZ1ZEZOMFpYQXBPMXh1WEc1Y2RDQWdJQ0FnSUdsbUlDaHBibVJsZUNBOVBUMGdkR2hwY3k1emRHVndjeTVzWlc1bmRHZ2dMU0F4S1NCN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1b2FXUmxLR2x1WkdWNEtUdGNibHgwSUNBZ0lDQWdJQ0IwYUdsekxuUnlhV2RuWlhJb0oyTnZiWEJzWlhSbEp5azdYRzVjZENBZ0lDQWdJQ0FnZEdocGN5NWtiMjVsS0NrN1hHNWNkQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1emFHOTNLR2x1WkdWNElDc2dNU3dnZEhKMVpTazdYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZGlZV05ySnl4Y2JseDBJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJpWVdOcktDa2dlMXh1WEhRZ0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCMGFHbHpMbk4wWlhCekxtbHVaR1Y0VDJZb2RHaHBjeTVqZFhKeVpXNTBVM1JsY0NrN1hHNWNkQ0FnSUNBZ0lIUm9hWE11YzJodmR5aHBibVJsZUNBdElERXNJR1poYkhObEtUdGNibHgwSUNBZ0lIMWNibHgwSUNCOUxDQjdYRzVjZENBZ0lDQnJaWGs2SUNkallXNWpaV3duTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR05oYm1ObGJDZ3BJSHRjYmx4MElDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbU4xY25KbGJuUlRkR1Z3SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRk4wWlhBdWFHbGtaU2dwTzF4dVhIUWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWduWTJGdVkyVnNKeWs3WEc1Y2RDQWdJQ0FnSUhSb2FYTXVaRzl1WlNncE8xeHVYSFFnSUNBZ2ZWeHVYSFFnSUgwc0lIdGNibHgwSUNBZ0lHdGxlVG9nSjJOdmJYQnNaWFJsSnl4Y2JseDBJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJqYjIxd2JHVjBaU2dwSUh0Y2JseDBJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjBhR2x6TG1OMWNuSmxiblJUZEdWd0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFFnSUNBZ0lDQWdJSFJvYVhNdVkzVnljbVZ1ZEZOMFpYQXVhR2xrWlNncE8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSFJvYVhNdWRISnBaMmRsY2lnblkyOXRjR3hsZEdVbktUdGNibHgwSUNBZ0lDQWdkR2hwY3k1a2IyNWxLQ2s3WEc1Y2RDQWdJQ0I5WEc1Y2RDQWdmU3dnZTF4dVhIUWdJQ0FnYTJWNU9pQW5hR2xrWlNjc1hHNWNkQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnYUdsa1pTZ3BJSHRjYmx4MElDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbU4xY25KbGJuUlRkR1Z3SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUWdJQ0FnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRk4wWlhBdWFHbGtaU2dwTzF4dVhIUWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWduYUdsa1pTY3BPMXh1WEhRZ0lDQWdJQ0IwYUdsekxtUnZibVVvS1R0Y2JseDBJQ0FnSUgxY2JseDBJQ0I5TENCN1hHNWNkQ0FnSUNCclpYazZJQ2RrYjI1bEp5eGNibHgwSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCa2IyNWxLQ2tnZTF4dVhIUWdJQ0FnSUNCVGFHVndhR1Z5WkM1aFkzUnBkbVZVYjNWeUlEMGdiblZzYkR0Y2JseDBJQ0FnSUNBZ2NtVnRiM1psUTJ4aGMzTW9aRzlqZFcxbGJuUXVZbTlrZVN3Z0ozTm9aWEJvWlhKa0xXRmpkR2wyWlNjcE8xeHVYSFFnSUNBZ0lDQjBhR2x6TG5SeWFXZG5aWElvSjJsdVlXTjBhWFpsSnl3Z2V5QjBiM1Z5T2lCMGFHbHpJSDBwTzF4dVhIUWdJQ0FnZlZ4dVhIUWdJSDBzSUh0Y2JseDBJQ0FnSUd0bGVUb2dKM05vYjNjbkxGeHVYSFFnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUhOb2IzY29LU0I3WEc1Y2RDQWdJQ0FnSUhaaGNpQnJaWGtnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUR3OUlEQWdmSHdnWVhKbmRXMWxiblJ6V3pCZElEMDlQU0IxYm1SbFptbHVaV1FnUHlBd0lEb2dZWEpuZFcxbGJuUnpXekJkTzF4dVhIUWdJQ0FnSUNCMllYSWdabTl5ZDJGeVpDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQRDBnTVNCOGZDQmhjbWQxYldWdWRITmJNVjBnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JSFJ5ZFdVZ09pQmhjbWQxYldWdWRITmJNVjA3WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkzVnljbVZ1ZEZOMFpYQXBJSHRjYmx4MElDQWdJQ0FnSUNCMGFHbHpMbU4xY25KbGJuUlRkR1Z3TG1ocFpHVW9LVHRjYmx4MElDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNCaFpHUkRiR0Z6Y3loa2IyTjFiV1Z1ZEM1aWIyUjVMQ0FuYzJobGNHaGxjbVF0WVdOMGFYWmxKeWs3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTUwY21sbloyVnlLQ2RoWTNScGRtVW5MQ0I3SUhSdmRYSTZJSFJvYVhNZ2ZTazdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCVGFHVndhR1Z5WkM1aFkzUnBkbVZVYjNWeUlEMGdkR2hwY3p0Y2JseHVYSFFnSUNBZ0lDQjJZWElnYm1WNGRDQTlJSFZ1WkdWbWFXNWxaRHRjYmx4dVhIUWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHdGxlU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNibHgwSUNBZ0lDQWdJQ0J1WlhoMElEMGdkR2hwY3k1blpYUkNlVWxrS0d0bGVTazdYRzVjZENBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnYm1WNGRDQTlJSFJvYVhNdWMzUmxjSE5iYTJWNVhUdGNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUdsbUlDaHVaWGgwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ1WlhoMExtOXdkR2x2Ym5NdWMyaHZkMDl1SUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlBaGJtVjRkQzV2Y0hScGIyNXpMbk5vYjNkUGJpZ3BLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjJZWElnYVc1a1pYZ2dQU0IwYUdsekxuTjBaWEJ6TG1sdVpHVjRUMllvYm1WNGRDazdYRzVjZENBZ0lDQWdJQ0FnSUNCMllYSWdibVY0ZEVsdVpHVjRJRDBnWm05eWQyRnlaQ0EvSUdsdVpHVjRJQ3NnTVNBNklHbHVaR1Y0SUMwZ01UdGNibHgwSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMmh2ZHlodVpYaDBTVzVrWlhnc0lHWnZjbmRoY21RcE8xeHVYSFFnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ5YVdkblpYSW9KM05vYjNjbkxDQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lITjBaWEE2SUc1bGVIUXNYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIQnlaWFpwYjNWek9pQjBhR2x6TG1OMWNuSmxiblJUZEdWd1hHNWNkQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnZEdocGN5NWpkWEp5Wlc1MFUzUmxjQ0E5SUc1bGVIUTdYRzVjZENBZ0lDQWdJQ0FnSUNCdVpYaDBMbk5vYjNjb0tUdGNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUgxY2JseDBJQ0FnSUgxY2JseDBJQ0I5TENCN1hHNWNkQ0FnSUNCclpYazZJQ2R6ZEdGeWRDY3NYRzVjZENBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2MzUmhjblFvS1NCN1hHNWNkQ0FnSUNBZ0lIUm9hWE11ZEhKcFoyZGxjaWduYzNSaGNuUW5LVHRjYmx4dVhIUWdJQ0FnSUNCMGFHbHpMbU4xY25KbGJuUlRkR1Z3SUQwZ2JuVnNiRHRjYmx4MElDQWdJQ0FnZEdocGN5NXVaWGgwS0NrN1hHNWNkQ0FnSUNCOVhHNWNkQ0FnZlYwcE8xeHVYRzVjZENBZ2NtVjBkWEp1SUZSdmRYSTdYRzVjZEgwcEtFVjJaVzUwWldRcE8xeHVYRzVjZEdWNGRHVnVaQ2hUYUdWd2FHVnlaQ3dnZXlCVWIzVnlPaUJVYjNWeUxDQlRkR1Z3T2lCVGRHVndMQ0JGZG1WdWRHVmtPaUJGZG1WdWRHVmtJSDBwTzF4dVhIUnlaWFIxY200Z1UyaGxjR2hsY21RN1hHNWNibHgwZlNrcE8xeHVYRzVjYmk4cUtpb3ZJSDBzWEc0dktpQXhNQ0FxTDF4dUx5b3FLaThnWm5WdVkzUnBiMjRvYlc5a2RXeGxMQ0JsZUhCdmNuUnpMQ0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS1NCN1hHNWNibHgwZG1GeUlGOWZWMFZDVUVGRFMxOUJUVVJmUkVWR1NVNUZYMFpCUTFSUFVsbGZYeXdnWDE5WFJVSlFRVU5MWDBGTlJGOUVSVVpKVGtWZlVrVlRWVXhVWDE4N0x5b2hJSFJsZEdobGNpQXhMakl1TUNBcUwxeHVYRzVjZENobWRXNWpkR2x2YmloeWIyOTBMQ0JtWVdOMGIzSjVLU0I3WEc1Y2RDQWdhV1lnS0hSeWRXVXBJSHRjYmx4MElDQWdJQ0VvWDE5WFJVSlFRVU5MWDBGTlJGOUVSVVpKVGtWZlJrRkRWRTlTV1Y5ZklEMGdLR1poWTNSdmNua3BMQ0JmWDFkRlFsQkJRMHRmUVUxRVgwUkZSa2xPUlY5U1JWTlZURlJmWHlBOUlDaDBlWEJsYjJZZ1gxOVhSVUpRUVVOTFgwRk5SRjlFUlVaSlRrVmZSa0ZEVkU5U1dWOWZJRDA5UFNBblpuVnVZM1JwYjI0bklEOGdLRjlmVjBWQ1VFRkRTMTlCVFVSZlJFVkdTVTVGWDBaQlExUlBVbGxmWHk1allXeHNLR1Y0Y0c5eWRITXNJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThzSUdWNGNHOXlkSE1zSUcxdlpIVnNaU2twSURvZ1gxOVhSVUpRUVVOTFgwRk5SRjlFUlVaSlRrVmZSa0ZEVkU5U1dWOWZLU3dnWDE5WFJVSlFRVU5MWDBGTlJGOUVSVVpKVGtWZlVrVlRWVXhVWDE4Z0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlBb2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZlgxZEZRbEJCUTB0ZlFVMUVYMFJGUmtsT1JWOVNSVk5WVEZSZlh5a3BPMXh1WEhRZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHVjRjRzl5ZEhNZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc1Y2RDQWdJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1poWTNSdmNua29jbVZ4ZFdseVpTd2daWGh3YjNKMGN5d2diVzlrZFd4bEtUdGNibHgwSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnY205dmRDNVVaWFJvWlhJZ1BTQm1ZV04wYjNKNUtDazdYRzVjZENBZ2ZWeHVYSFI5S0hSb2FYTXNJR1oxYm1OMGFXOXVLSEpsY1hWcGNtVXNJR1Y0Y0c5eWRITXNJRzF2WkhWc1pTa2dlMXh1WEc1Y2RDZDFjMlVnYzNSeWFXTjBKenRjYmx4dVhIUjJZWElnWDJOeVpXRjBaVU5zWVhOeklEMGdLR1oxYm1OMGFXOXVJQ2dwSUhzZ1puVnVZM1JwYjI0Z1pHVm1hVzVsVUhKdmNHVnlkR2xsY3loMFlYSm5aWFFzSUhCeWIzQnpLU0I3SUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NISnZjSE11YkdWdVozUm9PeUJwS3lzcElIc2dkbUZ5SUdSbGMyTnlhWEIwYjNJZ1BTQndjbTl3YzF0cFhUc2daR1Z6WTNKcGNIUnZjaTVsYm5WdFpYSmhZbXhsSUQwZ1pHVnpZM0pwY0hSdmNpNWxiblZ0WlhKaFlteGxJSHg4SUdaaGJITmxPeUJrWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTQTlJSFJ5ZFdVN0lHbG1JQ2duZG1Gc2RXVW5JR2x1SUdSbGMyTnlhWEIwYjNJcElHUmxjMk55YVhCMGIzSXVkM0pwZEdGaWJHVWdQU0IwY25WbE95QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdGeVoyVjBMQ0JrWlhOamNtbHdkRzl5TG10bGVTd2daR1Z6WTNKcGNIUnZjaWs3SUgwZ2ZTQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tFTnZibk4wY25WamRHOXlMQ0J3Y205MGIxQnliM0J6TENCemRHRjBhV05RY205d2N5a2dleUJwWmlBb2NISnZkRzlRY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1VzSUhCeWIzUnZVSEp2Y0hNcE95QnBaaUFvYzNSaGRHbGpVSEp2Y0hNcElHUmxabWx1WlZCeWIzQmxjblJwWlhNb1EyOXVjM1J5ZFdOMGIzSXNJSE4wWVhScFkxQnliM0J6S1RzZ2NtVjBkWEp1SUVOdmJuTjBjblZqZEc5eU95QjlPeUI5S1NncE8xeHVYRzVjZEdaMWJtTjBhVzl1SUY5amJHRnpjME5oYkd4RGFHVmpheWhwYm5OMFlXNWpaU3dnUTI5dWMzUnlkV04wYjNJcElIc2dhV1lnS0NFb2FXNXpkR0Z1WTJVZ2FXNXpkR0Z1WTJWdlppQkRiMjV6ZEhKMVkzUnZjaWtwSUhzZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RMkZ1Ym05MElHTmhiR3dnWVNCamJHRnpjeUJoY3lCaElHWjFibU4wYVc5dUp5azdJSDBnZlZ4dVhHNWNkSFpoY2lCVVpYUm9aWEpDWVhObElEMGdkVzVrWldacGJtVmtPMXh1WEhScFppQW9kSGx3Wlc5bUlGUmxkR2hsY2tKaGMyVWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ1ZHVjBhR1Z5UW1GelpTQTlJSHNnYlc5a2RXeGxjem9nVzEwZ2ZUdGNibHgwZlZ4dVhHNWNkR1oxYm1OMGFXOXVJR2RsZEZOamNtOXNiRkJoY21WdWRDaGxiQ2tnZTF4dVhIUWdJQzh2SUVsdUlHWnBjbVZtYjNnZ2FXWWdkR2hsSUdWc0lHbHpJR2x1YzJsa1pTQmhiaUJwWm5KaGJXVWdkMmwwYUNCa2FYTndiR0Y1T2lCdWIyNWxPeUIzYVc1a2IzY3VaMlYwUTI5dGNIVjBaV1JUZEhsc1pTZ3BJSGRwYkd3Z2NtVjBkWEp1SUc1MWJHdzdYRzVjZENBZ0x5OGdhSFIwY0hNNkx5OWlkV2Q2YVd4c1lTNXRiM3BwYkd4aExtOXlaeTl6YUc5M1gySjFaeTVqWjJrL2FXUTlOVFE0TXprM1hHNWNkQ0FnZG1GeUlHTnZiWEIxZEdWa1UzUjViR1VnUFNCblpYUkRiMjF3ZFhSbFpGTjBlV3hsS0dWc0tTQjhmQ0I3ZlR0Y2JseDBJQ0IyWVhJZ2NHOXphWFJwYjI0Z1BTQmpiMjF3ZFhSbFpGTjBlV3hsTG5CdmMybDBhVzl1TzF4dVhHNWNkQ0FnYVdZZ0tIQnZjMmwwYVc5dUlEMDlQU0FuWm1sNFpXUW5LU0I3WEc1Y2RDQWdJQ0J5WlhSMWNtNGdaV3c3WEc1Y2RDQWdmVnh1WEc1Y2RDQWdkbUZ5SUhCaGNtVnVkQ0E5SUdWc08xeHVYSFFnSUhkb2FXeGxJQ2h3WVhKbGJuUWdQU0J3WVhKbGJuUXVjR0Z5Wlc1MFRtOWtaU2tnZTF4dVhIUWdJQ0FnZG1GeUlITjBlV3hsSUQwZ2RXNWtaV1pwYm1Wa08xeHVYSFFnSUNBZ2RISjVJSHRjYmx4MElDQWdJQ0FnYzNSNWJHVWdQU0JuWlhSRGIyMXdkWFJsWkZOMGVXeGxLSEJoY21WdWRDazdYRzVjZENBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0OVhHNWNibHgwSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjM1I1YkdVZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUh4OElITjBlV3hsSUQwOVBTQnVkV3hzS1NCN1hHNWNkQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYSmxiblE3WEc1Y2RDQWdJQ0I5WEc1Y2JseDBJQ0FnSUhaaGNpQmZjM1I1YkdVZ1BTQnpkSGxzWlR0Y2JseDBJQ0FnSUhaaGNpQnZkbVZ5Wm14dmR5QTlJRjl6ZEhsc1pTNXZkbVZ5Wm14dmR6dGNibHgwSUNBZ0lIWmhjaUJ2ZG1WeVpteHZkMWdnUFNCZmMzUjViR1V1YjNabGNtWnNiM2RZTzF4dVhIUWdJQ0FnZG1GeUlHOTJaWEptYkc5M1dTQTlJRjl6ZEhsc1pTNXZkbVZ5Wm14dmQxazdYRzVjYmx4MElDQWdJR2xtSUNndktHRjFkRzk4YzJOeWIyeHNLUzh1ZEdWemRDaHZkbVZ5Wm14dmR5QXJJRzkyWlhKbWJHOTNXU0FySUc5MlpYSm1iRzkzV0NrcElIdGNibHgwSUNBZ0lDQWdhV1lnS0hCdmMybDBhVzl1SUNFOVBTQW5ZV0p6YjJ4MWRHVW5JSHg4SUZzbmNtVnNZWFJwZG1VbkxDQW5ZV0p6YjJ4MWRHVW5MQ0FuWm1sNFpXUW5YUzVwYm1SbGVFOW1LSE4wZVd4bExuQnZjMmwwYVc5dUtTQStQU0F3S1NCN1hHNWNkQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQmhjbVZ1ZER0Y2JseDBJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ2ZWeHVYSFFnSUgxY2JseHVYSFFnSUhKbGRIVnliaUJrYjJOMWJXVnVkQzVpYjJSNU8xeHVYSFI5WEc1Y2JseDBkbUZ5SUhWdWFYRjFaVWxrSUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MElDQjJZWElnYVdRZ1BTQXdPMXh1WEhRZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZENBZ0lDQnlaWFIxY200Z0t5dHBaRHRjYmx4MElDQjlPMXh1WEhSOUtTZ3BPMXh1WEc1Y2RIWmhjaUI2WlhKdlVHOXpRMkZqYUdVZ1BTQjdmVHRjYmx4MGRtRnlJR2RsZEU5eWFXZHBiaUE5SUdaMWJtTjBhVzl1SUdkbGRFOXlhV2RwYmloa2IyTXBJSHRjYmx4MElDQXZMeUJuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRZ2FYTWdkVzVtYjNKMGRXNWhkR1ZzZVNCMGIyOGdZV05qZFhKaGRHVXVJQ0JKZENCcGJuUnliMlIxWTJWeklHRWdjR2w0Wld3Z2IzSWdkSGR2SUc5bVhHNWNkQ0FnTHk4Z2FtbDBkR1Z5SUdGeklIUm9aU0IxYzJWeUlITmpjbTlzYkhNZ2RHaGhkQ0J0WlhOelpYTWdkMmwwYUNCdmRYSWdZV0pwYkdsMGVTQjBieUJrWlhSbFkzUWdhV1lnZEhkdklIQnZjMmwwYVc5dWMxeHVYSFFnSUM4dklHRnlaU0JsY1hWcGRtbHNZVzUwSUc5eUlHNXZkQzRnSUZkbElIQnNZV05sSUdGdUlHVnNaVzFsYm5RZ1lYUWdkR2hsSUhSdmNDQnNaV1owSUc5bUlIUm9aU0J3WVdkbElIUm9ZWFFnZDJsc2JGeHVYSFFnSUM4dklHZGxkQ0IwYUdVZ2MyRnRaU0JxYVhSMFpYSXNJSE52SUhkbElHTmhiaUJqWVc1alpXd2dkR2hsSUhSM2J5QnZkWFF1WEc1Y2RDQWdkbUZ5SUc1dlpHVWdQU0JrYjJNdVgzUmxkR2hsY2xwbGNtOUZiR1Z0Wlc1ME8xeHVYSFFnSUdsbUlDaDBlWEJsYjJZZ2JtOWtaU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MElDQWdJRzV2WkdVZ1BTQmtiMk11WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlrN1hHNWNkQ0FnSUNCdWIyUmxMbk5sZEVGMGRISnBZblYwWlNnblpHRjBZUzEwWlhSb1pYSXRhV1FuTENCMWJtbHhkV1ZKWkNncEtUdGNibHgwSUNBZ0lHVjRkR1Z1WkNodWIyUmxMbk4wZVd4bExDQjdYRzVjZENBZ0lDQWdJSFJ2Y0RvZ01DeGNibHgwSUNBZ0lDQWdiR1ZtZERvZ01DeGNibHgwSUNBZ0lDQWdjRzl6YVhScGIyNDZJQ2RoWW5OdmJIVjBaU2RjYmx4MElDQWdJSDBwTzF4dVhHNWNkQ0FnSUNCa2IyTXVZbTlrZVM1aGNIQmxibVJEYUdsc1pDaHViMlJsS1R0Y2JseHVYSFFnSUNBZ1pHOWpMbDkwWlhSb1pYSmFaWEp2Uld4bGJXVnVkQ0E5SUc1dlpHVTdYRzVjZENBZ2ZWeHVYRzVjZENBZ2RtRnlJR2xrSUQwZ2JtOWtaUzVuWlhSQmRIUnlhV0oxZEdVb0oyUmhkR0V0ZEdWMGFHVnlMV2xrSnlrN1hHNWNkQ0FnYVdZZ0tIUjVjR1Z2WmlCNlpYSnZVRzl6UTJGamFHVmJhV1JkSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUWdJQ0FnZW1WeWIxQnZjME5oWTJobFcybGtYU0E5SUh0OU8xeHVYRzVjZENBZ0lDQjJZWElnY21WamRDQTlJRzV2WkdVdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2s3WEc1Y2RDQWdJQ0JtYjNJZ0tIWmhjaUJySUdsdUlISmxZM1FwSUh0Y2JseDBJQ0FnSUNBZ0x5OGdRMkZ1SjNRZ2RYTmxJR1Y0ZEdWdVpDd2dZWE1nYjI0Z1NVVTVMQ0JsYkdWdFpXNTBjeUJrYjI0bmRDQnlaWE52YkhabElIUnZJR0psSUdoaGMwOTNibEJ5YjNCbGNuUjVYRzVjZENBZ0lDQWdJSHBsY205UWIzTkRZV05vWlZ0cFpGMWJhMTBnUFNCeVpXTjBXMnRkTzF4dVhIUWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBdkx5QkRiR1ZoY2lCMGFHVWdZMkZqYUdVZ2QyaGxiaUIwYUdseklIQnZjMmwwYVc5dUlHTmhiR3dnYVhNZ1pHOXVaVnh1WEhRZ0lDQWdaR1ZtWlhJb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhRZ0lDQWdJQ0JrWld4bGRHVWdlbVZ5YjFCdmMwTmhZMmhsVzJsa1hUdGNibHgwSUNBZ0lIMHBPMXh1WEhRZ0lIMWNibHh1WEhRZ0lISmxkSFZ5YmlCNlpYSnZVRzl6UTJGamFHVmJhV1JkTzF4dVhIUjlPMXh1WEc1Y2RHWjFibU4wYVc5dUlHZGxkRUp2ZFc1a2N5aGxiQ2tnZTF4dVhIUWdJSFpoY2lCa2IyTWdQU0IxYm1SbFptbHVaV1E3WEc1Y2RDQWdhV1lnS0dWc0lEMDlQU0JrYjJOMWJXVnVkQ2tnZTF4dVhIUWdJQ0FnWkc5aklEMGdaRzlqZFcxbGJuUTdYRzVjZENBZ0lDQmxiQ0E5SUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmx4MElDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ1pHOWpJRDBnWld3dWIzZHVaWEpFYjJOMWJXVnVkRHRjYmx4MElDQjlYRzVjYmx4MElDQjJZWElnWkc5alJXd2dQU0JrYjJNdVpHOWpkVzFsYm5SRmJHVnRaVzUwTzF4dVhHNWNkQ0FnZG1GeUlHSnZlQ0E5SUh0OU8xeHVYSFFnSUM4dklGUm9aU0J2Y21sbmFXNWhiQ0J2WW1wbFkzUWdjbVYwZFhKdVpXUWdZbmtnWjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMElHbHpJR2x0YlhWMFlXSnNaU3dnYzI4Z2QyVWdZMnh2Ym1VZ2FYUmNibHgwSUNBdkx5QlhaU0JqWVc0bmRDQjFjMlVnWlhoMFpXNWtJR0psWTJGMWMyVWdkR2hsSUhCeWIzQmxjblJwWlhNZ1lYSmxJRzV2ZENCamIyNXphV1JsY21Wa0lIQmhjblFnYjJZZ2RHaGxJRzlpYW1WamRDQmllU0JvWVhOUGQyNVFjbTl3WlhKMGVTQnBiaUJKUlRsY2JseDBJQ0IyWVhJZ2NtVmpkQ0E5SUdWc0xtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTzF4dVhIUWdJR1p2Y2lBb2RtRnlJR3NnYVc0Z2NtVmpkQ2tnZTF4dVhIUWdJQ0FnWW05NFcydGRJRDBnY21WamRGdHJYVHRjYmx4MElDQjlYRzVjYmx4MElDQjJZWElnYjNKcFoybHVJRDBnWjJWMFQzSnBaMmx1S0dSdll5azdYRzVjYmx4MElDQmliM2d1ZEc5d0lDMDlJRzl5YVdkcGJpNTBiM0E3WEc1Y2RDQWdZbTk0TG14bFpuUWdMVDBnYjNKcFoybHVMbXhsWm5RN1hHNWNibHgwSUNCcFppQW9kSGx3Wlc5bUlHSnZlQzUzYVdSMGFDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lHSnZlQzUzYVdSMGFDQTlJR1J2WTNWdFpXNTBMbUp2WkhrdWMyTnliMnhzVjJsa2RHZ2dMU0JpYjNndWJHVm1kQ0F0SUdKdmVDNXlhV2RvZER0Y2JseDBJQ0I5WEc1Y2RDQWdhV1lnS0hSNWNHVnZaaUJpYjNndWFHVnBaMmgwSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUWdJQ0FnWW05NExtaGxhV2RvZENBOUlHUnZZM1Z0Wlc1MExtSnZaSGt1YzJOeWIyeHNTR1ZwWjJoMElDMGdZbTk0TG5SdmNDQXRJR0p2ZUM1aWIzUjBiMjA3WEc1Y2RDQWdmVnh1WEc1Y2RDQWdZbTk0TG5SdmNDQTlJR0p2ZUM1MGIzQWdMU0JrYjJORmJDNWpiR2xsYm5SVWIzQTdYRzVjZENBZ1ltOTRMbXhsWm5RZ1BTQmliM2d1YkdWbWRDQXRJR1J2WTBWc0xtTnNhV1Z1ZEV4bFpuUTdYRzVjZENBZ1ltOTRMbkpwWjJoMElEMGdaRzlqTG1KdlpIa3VZMnhwWlc1MFYybGtkR2dnTFNCaWIzZ3VkMmxrZEdnZ0xTQmliM2d1YkdWbWREdGNibHgwSUNCaWIzZ3VZbTkwZEc5dElEMGdaRzlqTG1KdlpIa3VZMnhwWlc1MFNHVnBaMmgwSUMwZ1ltOTRMbWhsYVdkb2RDQXRJR0p2ZUM1MGIzQTdYRzVjYmx4MElDQnlaWFIxY200Z1ltOTRPMXh1WEhSOVhHNWNibHgwWm5WdVkzUnBiMjRnWjJWMFQyWm1jMlYwVUdGeVpXNTBLR1ZzS1NCN1hHNWNkQ0FnY21WMGRYSnVJR1ZzTG05bVpuTmxkRkJoY21WdWRDQjhmQ0JrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUTdYRzVjZEgxY2JseHVYSFJtZFc1amRHbHZiaUJuWlhSVFkzSnZiR3hDWVhKVGFYcGxLQ2tnZTF4dVhIUWdJSFpoY2lCcGJtNWxjaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHVYSFFnSUdsdWJtVnlMbk4wZVd4bExuZHBaSFJvSUQwZ0p6RXdNQ1VuTzF4dVhIUWdJR2x1Ym1WeUxuTjBlV3hsTG1obGFXZG9kQ0E5SUNjeU1EQndlQ2M3WEc1Y2JseDBJQ0IyWVhJZ2IzVjBaWElnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktUdGNibHgwSUNCbGVIUmxibVFvYjNWMFpYSXVjM1I1YkdVc0lIdGNibHgwSUNBZ0lIQnZjMmwwYVc5dU9pQW5ZV0p6YjJ4MWRHVW5MRnh1WEhRZ0lDQWdkRzl3T2lBd0xGeHVYSFFnSUNBZ2JHVm1kRG9nTUN4Y2JseDBJQ0FnSUhCdmFXNTBaWEpGZG1WdWRITTZJQ2R1YjI1bEp5eGNibHgwSUNBZ0lIWnBjMmxpYVd4cGRIazZJQ2RvYVdSa1pXNG5MRnh1WEhRZ0lDQWdkMmxrZEdnNklDY3lNREJ3ZUNjc1hHNWNkQ0FnSUNCb1pXbG5hSFE2SUNjeE5UQndlQ2NzWEc1Y2RDQWdJQ0J2ZG1WeVpteHZkem9nSjJocFpHUmxiaWRjYmx4MElDQjlLVHRjYmx4dVhIUWdJRzkxZEdWeUxtRndjR1Z1WkVOb2FXeGtLR2x1Ym1WeUtUdGNibHh1WEhRZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVhCd1pXNWtRMmhwYkdRb2IzVjBaWElwTzF4dVhHNWNkQ0FnZG1GeUlIZHBaSFJvUTI5dWRHRnBibVZrSUQwZ2FXNXVaWEl1YjJabWMyVjBWMmxrZEdnN1hHNWNkQ0FnYjNWMFpYSXVjM1I1YkdVdWIzWmxjbVpzYjNjZ1BTQW5jMk55YjJ4c0p6dGNibHgwSUNCMllYSWdkMmxrZEdoVFkzSnZiR3dnUFNCcGJtNWxjaTV2Wm1aelpYUlhhV1IwYUR0Y2JseHVYSFFnSUdsbUlDaDNhV1IwYUVOdmJuUmhhVzVsWkNBOVBUMGdkMmxrZEdoVFkzSnZiR3dwSUh0Y2JseDBJQ0FnSUhkcFpIUm9VMk55YjJ4c0lEMGdiM1YwWlhJdVkyeHBaVzUwVjJsa2RHZzdYRzVjZENBZ2ZWeHVYRzVjZENBZ1pHOWpkVzFsYm5RdVltOWtlUzV5WlcxdmRtVkRhR2xzWkNodmRYUmxjaWs3WEc1Y2JseDBJQ0IyWVhJZ2QybGtkR2dnUFNCM2FXUjBhRU52Ym5SaGFXNWxaQ0F0SUhkcFpIUm9VMk55YjJ4c08xeHVYRzVjZENBZ2NtVjBkWEp1SUhzZ2QybGtkR2c2SUhkcFpIUm9MQ0JvWldsbmFIUTZJSGRwWkhSb0lIMDdYRzVjZEgxY2JseHVYSFJtZFc1amRHbHZiaUJsZUhSbGJtUW9LU0I3WEc1Y2RDQWdkbUZ5SUc5MWRDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQRDBnTUNCOGZDQmhjbWQxYldWdWRITmJNRjBnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JSHQ5SURvZ1lYSm5kVzFsYm5Seld6QmRPMXh1WEc1Y2RDQWdkbUZ5SUdGeVozTWdQU0JiWFR0Y2JseHVYSFFnSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV3ZFhOb0xtRndjR3g1S0dGeVozTXNJR0Z5WjNWdFpXNTBjeWs3WEc1Y2JseDBJQ0JoY21kekxuTnNhV05sS0RFcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHOWlhaWtnZTF4dVhIUWdJQ0FnYVdZZ0tHOWlhaWtnZTF4dVhIUWdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYjJKcUtTQjdYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tDaDdmU2t1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltb3NJR3RsZVNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUc5MWRGdHJaWGxkSUQwZ2IySnFXMnRsZVYwN1hHNWNkQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0I5WEc1Y2RDQWdmU2s3WEc1Y2JseDBJQ0J5WlhSMWNtNGdiM1YwTzF4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z2NtVnRiM1psUTJ4aGMzTW9aV3dzSUc1aGJXVXBJSHRjYmx4MElDQnBaaUFvZEhsd1pXOW1JR1ZzTG1Oc1lYTnpUR2x6ZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBJQ0FnSUc1aGJXVXVjM0JzYVhRb0p5QW5LUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqYkhNcElIdGNibHgwSUNBZ0lDQWdhV1lnS0dOc2N5NTBjbWx0S0NrcElIdGNibHgwSUNBZ0lDQWdJQ0JsYkM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0dOc2N5azdYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJSDBwTzF4dVhIUWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQjJZWElnY21WblpYZ2dQU0J1WlhjZ1VtVm5SWGh3S0Njb1hud2dLU2NnS3lCdVlXMWxMbk53YkdsMEtDY2dKeWt1YW05cGJpZ25mQ2NwSUNzZ0p5Z2dmQ1FwSnl3Z0oyZHBKeWs3WEc1Y2RDQWdJQ0IyWVhJZ1kyeGhjM05PWVcxbElEMGdaMlYwUTJ4aGMzTk9ZVzFsS0dWc0tTNXlaWEJzWVdObEtISmxaMlY0TENBbklDY3BPMXh1WEhRZ0lDQWdjMlYwUTJ4aGMzTk9ZVzFsS0dWc0xDQmpiR0Z6YzA1aGJXVXBPMXh1WEhRZ0lIMWNibHgwZlZ4dVhHNWNkR1oxYm1OMGFXOXVJR0ZrWkVOc1lYTnpLR1ZzTENCdVlXMWxLU0I3WEc1Y2RDQWdhV1lnS0hSNWNHVnZaaUJsYkM1amJHRnpjMHhwYzNRZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkQ0FnSUNCdVlXMWxMbk53YkdsMEtDY2dKeWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWTJ4ektTQjdYRzVjZENBZ0lDQWdJR2xtSUNoamJITXVkSEpwYlNncEtTQjdYRzVjZENBZ0lDQWdJQ0FnWld3dVkyeGhjM05NYVhOMExtRmtaQ2hqYkhNcE8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQjlLVHRjYmx4MElDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ2NtVnRiM1psUTJ4aGMzTW9aV3dzSUc1aGJXVXBPMXh1WEhRZ0lDQWdkbUZ5SUdOc2N5QTlJR2RsZEVOc1lYTnpUbUZ0WlNobGJDa2dLeUFvSnlBbklDc2dibUZ0WlNrN1hHNWNkQ0FnSUNCelpYUkRiR0Z6YzA1aGJXVW9aV3dzSUdOc2N5azdYRzVjZENBZ2ZWeHVYSFI5WEc1Y2JseDBablZ1WTNScGIyNGdhR0Z6UTJ4aGMzTW9aV3dzSUc1aGJXVXBJSHRjYmx4MElDQnBaaUFvZEhsd1pXOW1JR1ZzTG1Oc1lYTnpUR2x6ZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBJQ0FnSUhKbGRIVnliaUJsYkM1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb2JtRnRaU2s3WEc1Y2RDQWdmVnh1WEhRZ0lIWmhjaUJqYkdGemMwNWhiV1VnUFNCblpYUkRiR0Z6YzA1aGJXVW9aV3dwTzF4dVhIUWdJSEpsZEhWeWJpQnVaWGNnVW1WblJYaHdLQ2NvWG53Z0tTY2dLeUJ1WVcxbElDc2dKeWdnZkNRcEp5d2dKMmRwSnlrdWRHVnpkQ2hqYkdGemMwNWhiV1VwTzF4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z1oyVjBRMnhoYzNOT1lXMWxLR1ZzS1NCN1hHNWNkQ0FnYVdZZ0tHVnNMbU5zWVhOelRtRnRaU0JwYm5OMFlXNWpaVzltSUZOV1IwRnVhVzFoZEdWa1UzUnlhVzVuS1NCN1hHNWNkQ0FnSUNCeVpYUjFjbTRnWld3dVkyeGhjM05PWVcxbExtSmhjMlZXWVd3N1hHNWNkQ0FnZlZ4dVhIUWdJSEpsZEhWeWJpQmxiQzVqYkdGemMwNWhiV1U3WEc1Y2RIMWNibHh1WEhSbWRXNWpkR2x2YmlCelpYUkRiR0Z6YzA1aGJXVW9aV3dzSUdOc1lYTnpUbUZ0WlNrZ2UxeHVYSFFnSUdWc0xuTmxkRUYwZEhKcFluVjBaU2duWTJ4aGMzTW5MQ0JqYkdGemMwNWhiV1VwTzF4dVhIUjlYRzVjYmx4MFpuVnVZM1JwYjI0Z2RYQmtZWFJsUTJ4aGMzTmxjeWhsYkN3Z1lXUmtMQ0JoYkd3cElIdGNibHgwSUNBdkx5QlBaaUIwYUdVZ2MyVjBJRzltSUNkaGJHd25JR05zWVhOelpYTXNJSGRsSUc1bFpXUWdkR2hsSUNkaFpHUW5JR05zWVhOelpYTXNJR0Z1WkNCdmJteDVJSFJvWlZ4dVhIUWdJQzh2SUNkaFpHUW5JR05zWVhOelpYTWdkRzhnWW1VZ2MyVjBMbHh1WEhRZ0lHRnNiQzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqYkhNcElIdGNibHgwSUNBZ0lHbG1JQ2hoWkdRdWFXNWtaWGhQWmloamJITXBJRDA5UFNBdE1TQW1KaUJvWVhORGJHRnpjeWhsYkN3Z1kyeHpLU2tnZTF4dVhIUWdJQ0FnSUNCeVpXMXZkbVZEYkdGemN5aGxiQ3dnWTJ4ektUdGNibHgwSUNBZ0lIMWNibHgwSUNCOUtUdGNibHh1WEhRZ0lHRmtaQzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2hqYkhNcElIdGNibHgwSUNBZ0lHbG1JQ2doYUdGelEyeGhjM01vWld3c0lHTnNjeWtwSUh0Y2JseDBJQ0FnSUNBZ1lXUmtRMnhoYzNNb1pXd3NJR05zY3lrN1hHNWNkQ0FnSUNCOVhHNWNkQ0FnZlNrN1hHNWNkSDFjYmx4dVhIUjJZWElnWkdWbVpYSnlaV1FnUFNCYlhUdGNibHh1WEhSMllYSWdaR1ZtWlhJZ1BTQm1kVzVqZEdsdmJpQmtaV1psY2lobWJpa2dlMXh1WEhRZ0lHUmxabVZ5Y21Wa0xuQjFjMmdvWm00cE8xeHVYSFI5TzF4dVhHNWNkSFpoY2lCbWJIVnphQ0E5SUdaMWJtTjBhVzl1SUdac2RYTm9LQ2tnZTF4dVhIUWdJSFpoY2lCbWJpQTlJSFZ1WkdWbWFXNWxaRHRjYmx4MElDQjNhR2xzWlNBb1ptNGdQU0JrWldabGNuSmxaQzV3YjNBb0tTa2dlMXh1WEhRZ0lDQWdabTRvS1R0Y2JseDBJQ0I5WEc1Y2RIMDdYRzVjYmx4MGRtRnlJRVYyWlc1MFpXUWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHVYSFFnSUdaMWJtTjBhVzl1SUVWMlpXNTBaV1FvS1NCN1hHNWNkQ0FnSUNCZlkyeGhjM05EWVd4c1EyaGxZMnNvZEdocGN5d2dSWFpsYm5SbFpDazdYRzVjZENBZ2ZWeHVYRzVjZENBZ1gyTnlaV0YwWlVOc1lYTnpLRVYyWlc1MFpXUXNJRnQ3WEc1Y2RDQWdJQ0JyWlhrNklDZHZiaWNzWEc1Y2RDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdiMjRvWlhabGJuUXNJR2hoYm1Sc1pYSXNJR04wZUNrZ2UxeHVYSFFnSUNBZ0lDQjJZWElnYjI1alpTQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQRDBnTXlCOGZDQmhjbWQxYldWdWRITmJNMTBnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JR1poYkhObElEb2dZWEpuZFcxbGJuUnpXek5kTzF4dVhHNWNkQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1aWFXNWthVzVuY3lBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQjBhR2x6TG1KcGJtUnBibWR6SUQwZ2UzMDdYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbUpwYm1ScGJtZHpXMlYyWlc1MFhTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lDQWdJQ0IwYUdsekxtSnBibVJwYm1kelcyVjJaVzUwWFNBOUlGdGRPMXh1WEhRZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUhSb2FYTXVZbWx1WkdsdVozTmJaWFpsYm5SZExuQjFjMmdvZXlCb1lXNWtiR1Z5T2lCb1lXNWtiR1Z5TENCamRIZzZJR04wZUN3Z2IyNWpaVG9nYjI1alpTQjlLVHRjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZHZibU5sSnl4Y2JseDBJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJ2Ym1ObEtHVjJaVzUwTENCb1lXNWtiR1Z5TENCamRIZ3BJSHRjYmx4MElDQWdJQ0FnZEdocGN5NXZiaWhsZG1WdWRDd2dhR0Z1Wkd4bGNpd2dZM1I0TENCMGNuVmxLVHRjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZHZabVluTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJRzltWmlobGRtVnVkQ3dnYUdGdVpHeGxjaWtnZTF4dVhIUWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11WW1sdVpHbHVaM01nSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhSNWNHVnZaaUIwYUdsekxtSnBibVJwYm1kelcyVjJaVzUwWFNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNWNkQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdoaGJtUnNaWElnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVZbWx1WkdsdVozTmJaWFpsYm5SZE8xeHVYSFFnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJSFpoY2lCcElEMGdNRHRjYmx4MElDQWdJQ0FnSUNCM2FHbHNaU0FvYVNBOElIUm9hWE11WW1sdVpHbHVaM05iWlhabGJuUmRMbXhsYm1kMGFDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVltbHVaR2x1WjNOYlpYWmxiblJkVzJsZExtaGhibVJzWlhJZ1BUMDlJR2hoYm1Sc1pYSXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aWFXNWthVzVuYzF0bGRtVnVkRjB1YzNCc2FXTmxLR2tzSURFcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdLeXRwTzF4dVhIUWdJQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ2ZWeHVYSFFnSUgwc0lIdGNibHgwSUNBZ0lHdGxlVG9nSjNSeWFXZG5aWEluTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSFJ5YVdkblpYSW9aWFpsYm5RcElIdGNibHgwSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxtSnBibVJwYm1keklDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBhR2x6TG1KcGJtUnBibWR6VzJWMlpXNTBYU2tnZTF4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ01EdGNibHh1WEhRZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUY5c1pXNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9MQ0JoY21keklEMGdRWEp5WVhrb1gyeGxiaUErSURFZ1B5QmZiR1Z1SUMwZ01TQTZJREFwTENCZmEyVjVJRDBnTVRzZ1gydGxlU0E4SUY5c1pXNDdJRjlyWlhrckt5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRmYTJWNUlDMGdNVjBnUFNCaGNtZDFiV1Z1ZEhOYlgydGxlVjA3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnZDJocGJHVWdLR2tnUENCMGFHbHpMbUpwYm1ScGJtZHpXMlYyWlc1MFhTNXNaVzVuZEdncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUhaaGNpQmZZbWx1WkdsdVozTWtaWFpsYm5Ra2FTQTlJSFJvYVhNdVltbHVaR2x1WjNOYlpYWmxiblJkVzJsZE8xeHVYSFFnSUNBZ0lDQWdJQ0FnZG1GeUlHaGhibVJzWlhJZ1BTQmZZbWx1WkdsdVozTWtaWFpsYm5Ra2FTNW9ZVzVrYkdWeU8xeHVYSFFnSUNBZ0lDQWdJQ0FnZG1GeUlHTjBlQ0E5SUY5aWFXNWthVzVuY3lSbGRtVnVkQ1JwTG1OMGVEdGNibHgwSUNBZ0lDQWdJQ0FnSUhaaGNpQnZibU5sSUQwZ1gySnBibVJwYm1kekpHVjJaVzUwSkdrdWIyNWpaVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJuUmxlSFFnUFNCamRIZzdYRzVjZENBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZiblJsZUhRZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFFnUFNCMGFHbHpPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5TG1Gd2NHeDVLR052Ym5SbGVIUXNJR0Z5WjNNcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNCcFppQW9iMjVqWlNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUpwYm1ScGJtZHpXMlYyWlc1MFhTNXpjR3hwWTJVb2FTd2dNU2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBcksyazdYRzVjZENBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0I5WEc1Y2RDQWdmVjBwTzF4dVhHNWNkQ0FnY21WMGRYSnVJRVYyWlc1MFpXUTdYRzVjZEgwcEtDazdYRzVjYmx4MFZHVjBhR1Z5UW1GelpTNVZkR2xzY3lBOUlIdGNibHgwSUNCblpYUlRZM0p2Ykd4UVlYSmxiblE2SUdkbGRGTmpjbTlzYkZCaGNtVnVkQ3hjYmx4MElDQm5aWFJDYjNWdVpITTZJR2RsZEVKdmRXNWtjeXhjYmx4MElDQm5aWFJQWm1aelpYUlFZWEpsYm5RNklHZGxkRTltWm5ObGRGQmhjbVZ1ZEN4Y2JseDBJQ0JsZUhSbGJtUTZJR1Y0ZEdWdVpDeGNibHgwSUNCaFpHUkRiR0Z6Y3pvZ1lXUmtRMnhoYzNNc1hHNWNkQ0FnY21WdGIzWmxRMnhoYzNNNklISmxiVzkyWlVOc1lYTnpMRnh1WEhRZ0lHaGhjME5zWVhOek9pQm9ZWE5EYkdGemN5eGNibHgwSUNCMWNHUmhkR1ZEYkdGemMyVnpPaUIxY0dSaGRHVkRiR0Z6YzJWekxGeHVYSFFnSUdSbFptVnlPaUJrWldabGNpeGNibHgwSUNCbWJIVnphRG9nWm14MWMyZ3NYRzVjZENBZ2RXNXBjWFZsU1dRNklIVnVhWEYxWlVsa0xGeHVYSFFnSUVWMlpXNTBaV1E2SUVWMlpXNTBaV1FzWEc1Y2RDQWdaMlYwVTJOeWIyeHNRbUZ5VTJsNlpUb2daMlYwVTJOeWIyeHNRbUZ5VTJsNlpWeHVYSFI5TzF4dVhIUXZLaUJuYkc5aVlXeHpJRlJsZEdobGNrSmhjMlVzSUhCbGNtWnZjbTFoYm1ObElDb3ZYRzVjYmx4MEozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1Y2RIWmhjaUJmYzJ4cFkyVmtWRzlCY25KaGVTQTlJQ2htZFc1amRHbHZiaUFvS1NCN0lHWjFibU4wYVc5dUlITnNhV05sU1hSbGNtRjBiM0lvWVhKeUxDQnBLU0I3SUhaaGNpQmZZWEp5SUQwZ1cxMDdJSFpoY2lCZmJpQTlJSFJ5ZFdVN0lIWmhjaUJmWkNBOUlHWmhiSE5sT3lCMllYSWdYMlVnUFNCMWJtUmxabWx1WldRN0lIUnllU0I3SUdadmNpQW9kbUZ5SUY5cElEMGdZWEp5VzFONWJXSnZiQzVwZEdWeVlYUnZjbDBvS1N3Z1gzTTdJQ0VvWDI0Z1BTQW9YM01nUFNCZmFTNXVaWGgwS0NrcExtUnZibVVwT3lCZmJpQTlJSFJ5ZFdVcElIc2dYMkZ5Y2k1d2RYTm9LRjl6TG5aaGJIVmxLVHNnYVdZZ0tHa2dKaVlnWDJGeWNpNXNaVzVuZEdnZ1BUMDlJR2twSUdKeVpXRnJPeUI5SUgwZ1kyRjBZMmdnS0dWeWNpa2dleUJmWkNBOUlIUnlkV1U3SUY5bElEMGdaWEp5T3lCOUlHWnBibUZzYkhrZ2V5QjBjbmtnZXlCcFppQW9JVjl1SUNZbUlGOXBXeWR5WlhSMWNtNG5YU2tnWDJsYkozSmxkSFZ5YmlkZEtDazdJSDBnWm1sdVlXeHNlU0I3SUdsbUlDaGZaQ2tnZEdoeWIzY2dYMlU3SUgwZ2ZTQnlaWFIxY200Z1gyRnljanNnZlNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0dGeWNpd2dhU2tnZXlCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoaGNuSXBLU0I3SUhKbGRIVnliaUJoY25JN0lIMGdaV3h6WlNCcFppQW9VM2x0WW05c0xtbDBaWEpoZEc5eUlHbHVJRTlpYW1WamRDaGhjbklwS1NCN0lISmxkSFZ5YmlCemJHbGpaVWwwWlhKaGRHOXlLR0Z5Y2l3Z2FTazdJSDBnWld4elpTQjdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBsdWRtRnNhV1FnWVhSMFpXMXdkQ0IwYnlCa1pYTjBjblZqZEhWeVpTQnViMjR0YVhSbGNtRmliR1VnYVc1emRHRnVZMlVuS1RzZ2ZTQjlPeUI5S1NncE8xeHVYRzVjZEhaaGNpQmZZM0psWVhSbFEyeGhjM01nUFNBb1puVnVZM1JwYjI0Z0tDa2dleUJtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGFXVnpLSFJoY21kbGRDd2djSEp2Y0hNcElIc2dabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J3Y205d2N5NXNaVzVuZEdnN0lHa3JLeWtnZXlCMllYSWdaR1Z6WTNKcGNIUnZjaUE5SUhCeWIzQnpXMmxkT3lCa1pYTmpjbWx3ZEc5eUxtVnVkVzFsY21GaWJHVWdQU0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ2ZId2dabUZzYzJVN0lHUmxjMk55YVhCMGIzSXVZMjl1Wm1sbmRYSmhZbXhsSUQwZ2RISjFaVHNnYVdZZ0tDZDJZV3gxWlNjZ2FXNGdaR1Z6WTNKcGNIUnZjaWtnWkdWelkzSnBjSFJ2Y2k1M2NtbDBZV0pzWlNBOUlIUnlkV1U3SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lHUmxjMk55YVhCMGIzSXVhMlY1TENCa1pYTmpjbWx3ZEc5eUtUc2dmU0I5SUhKbGRIVnliaUJtZFc1amRHbHZiaUFvUTI5dWMzUnlkV04wYjNJc0lIQnliM1J2VUhKdmNITXNJSE4wWVhScFkxQnliM0J6S1NCN0lHbG1JQ2h3Y205MGIxQnliM0J6S1NCa1pXWnBibVZRY205d1pYSjBhV1Z6S0VOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTd2djSEp2ZEc5UWNtOXdjeWs3SUdsbUlDaHpkR0YwYVdOUWNtOXdjeWtnWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhEYjI1emRISjFZM1J2Y2l3Z2MzUmhkR2xqVUhKdmNITXBPeUJ5WlhSMWNtNGdRMjl1YzNSeWRXTjBiM0k3SUgwN0lIMHBLQ2s3WEc1Y2JseDBablZ1WTNScGIyNGdYMk5zWVhOelEyRnNiRU5vWldOcktHbHVjM1JoYm1ObExDQkRiMjV6ZEhKMVkzUnZjaWtnZXlCcFppQW9JU2hwYm5OMFlXNWpaU0JwYm5OMFlXNWpaVzltSUVOdmJuTjBjblZqZEc5eUtTa2dleUIwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkRFlXNXViM1FnWTJGc2JDQmhJR05zWVhOeklHRnpJR0VnWm5WdVkzUnBiMjRuS1RzZ2ZTQjlYRzVjYmx4MGFXWWdLSFI1Y0dWdlppQlVaWFJvWlhKQ1lYTmxJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhRZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbldXOTFJRzExYzNRZ2FXNWpiSFZrWlNCMGFHVWdkWFJwYkhNdWFuTWdabWxzWlNCaVpXWnZjbVVnZEdWMGFHVnlMbXB6SnlrN1hHNWNkSDFjYmx4dVhIUjJZWElnWDFSbGRHaGxja0poYzJVa1ZYUnBiSE1nUFNCVVpYUm9aWEpDWVhObExsVjBhV3h6TzF4dVhIUjJZWElnWjJWMFUyTnliMnhzVUdGeVpXNTBJRDBnWDFSbGRHaGxja0poYzJVa1ZYUnBiSE11WjJWMFUyTnliMnhzVUdGeVpXNTBPMXh1WEhSMllYSWdaMlYwUW05MWJtUnpJRDBnWDFSbGRHaGxja0poYzJVa1ZYUnBiSE11WjJWMFFtOTFibVJ6TzF4dVhIUjJZWElnWjJWMFQyWm1jMlYwVUdGeVpXNTBJRDBnWDFSbGRHaGxja0poYzJVa1ZYUnBiSE11WjJWMFQyWm1jMlYwVUdGeVpXNTBPMXh1WEhSMllYSWdaWGgwWlc1a0lEMGdYMVJsZEdobGNrSmhjMlVrVlhScGJITXVaWGgwWlc1a08xeHVYSFIyWVhJZ1lXUmtRMnhoYzNNZ1BTQmZWR1YwYUdWeVFtRnpaU1JWZEdsc2N5NWhaR1JEYkdGemN6dGNibHgwZG1GeUlISmxiVzkyWlVOc1lYTnpJRDBnWDFSbGRHaGxja0poYzJVa1ZYUnBiSE11Y21WdGIzWmxRMnhoYzNNN1hHNWNkSFpoY2lCMWNHUmhkR1ZEYkdGemMyVnpJRDBnWDFSbGRHaGxja0poYzJVa1ZYUnBiSE11ZFhCa1lYUmxRMnhoYzNObGN6dGNibHgwZG1GeUlHUmxabVZ5SUQwZ1gxUmxkR2hsY2tKaGMyVWtWWFJwYkhNdVpHVm1aWEk3WEc1Y2RIWmhjaUJtYkhWemFDQTlJRjlVWlhSb1pYSkNZWE5sSkZWMGFXeHpMbVpzZFhOb08xeHVYSFIyWVhJZ1oyVjBVMk55YjJ4c1FtRnlVMmw2WlNBOUlGOVVaWFJvWlhKQ1lYTmxKRlYwYVd4ekxtZGxkRk5qY205c2JFSmhjbE5wZW1VN1hHNWNibHgwWm5WdVkzUnBiMjRnZDJsMGFHbHVLR0VzSUdJcElIdGNibHgwSUNCMllYSWdaR2xtWmlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BEMGdNaUI4ZkNCaGNtZDFiV1Z1ZEhOYk1sMGdQVDA5SUhWdVpHVm1hVzVsWkNBL0lERWdPaUJoY21kMWJXVnVkSE5iTWwwN1hHNWNibHgwSUNCeVpYUjFjbTRnWVNBcklHUnBabVlnUGowZ1lpQW1KaUJpSUQ0OUlHRWdMU0JrYVdabU8xeHVYSFI5WEc1Y2JseDBkbUZ5SUhSeVlXNXpabTl5YlV0bGVTQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnYVdZZ0tIUjVjR1Z2WmlCa2IyTjFiV1Z1ZENBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBJQ0FnSUhKbGRIVnliaUFuSnp0Y2JseDBJQ0I5WEc1Y2RDQWdkbUZ5SUdWc0lEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc1Y2JseDBJQ0IyWVhJZ2RISmhibk5tYjNKdGN5QTlJRnNuZEhKaGJuTm1iM0p0Snl3Z0ozZGxZbXRwZEZSeVlXNXpabTl5YlNjc0lDZFBWSEpoYm5ObWIzSnRKeXdnSjAxdmVsUnlZVzV6Wm05eWJTY3NJQ2R0YzFSeVlXNXpabTl5YlNkZE8xeHVYSFFnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RISmhibk5tYjNKdGN5NXNaVzVuZEdnN0lDc3JhU2tnZTF4dVhIUWdJQ0FnZG1GeUlHdGxlU0E5SUhSeVlXNXpabTl5YlhOYmFWMDdYRzVjZENBZ0lDQnBaaUFvWld3dWMzUjViR1ZiYTJWNVhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkQ0FnSUNBZ0lISmxkSFZ5YmlCclpYazdYRzVjZENBZ0lDQjlYRzVjZENBZ2ZWeHVYSFI5S1NncE8xeHVYRzVjZEhaaGNpQjBaWFJvWlhKeklEMGdXMTA3WEc1Y2JseDBkbUZ5SUhCdmMybDBhVzl1SUQwZ1puVnVZM1JwYjI0Z2NHOXphWFJwYjI0b0tTQjdYRzVjZENBZ2RHVjBhR1Z5Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoMFpYUm9aWElwSUh0Y2JseDBJQ0FnSUhSbGRHaGxjaTV3YjNOcGRHbHZiaWhtWVd4elpTazdYRzVjZENBZ2ZTazdYRzVjZENBZ1pteDFjMmdvS1R0Y2JseDBmVHRjYmx4dVhIUm1kVzVqZEdsdmJpQnViM2NvS1NCN1hHNWNkQ0FnYVdZZ0tIUjVjR1Z2WmlCd1pYSm1iM0p0WVc1alpTQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkSGx3Wlc5bUlIQmxjbVp2Y20xaGJtTmxMbTV2ZHlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JseDBJQ0FnSUhKbGRIVnliaUJ3WlhKbWIzSnRZVzVqWlM1dWIzY29LVHRjYmx4MElDQjlYRzVjZENBZ2NtVjBkWEp1SUN0dVpYY2dSR0YwWlNncE8xeHVYSFI5WEc1Y2JseDBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBJQ0IyWVhJZ2JHRnpkRU5oYkd3Z1BTQnVkV3hzTzF4dVhIUWdJSFpoY2lCc1lYTjBSSFZ5WVhScGIyNGdQU0J1ZFd4c08xeHVYSFFnSUhaaGNpQndaVzVrYVc1blZHbHRaVzkxZENBOUlHNTFiR3c3WEc1Y2JseDBJQ0IyWVhJZ2RHbGpheUE5SUdaMWJtTjBhVzl1SUhScFkyc29LU0I3WEc1Y2RDQWdJQ0JwWmlBb2RIbHdaVzltSUd4aGMzUkVkWEpoZEdsdmJpQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdiR0Z6ZEVSMWNtRjBhVzl1SUQ0Z01UWXBJSHRjYmx4MElDQWdJQ0FnTHk4Z1YyVWdkbTlzZFc1MFlYSnBiSGtnZEdoeWIzUjBiR1VnYjNWeWMyVnNkbVZ6SUdsbUlIZGxJR05oYmlkMElHMWhibUZuWlNBMk1HWndjMXh1WEhRZ0lDQWdJQ0JzWVhOMFJIVnlZWFJwYjI0Z1BTQk5ZWFJvTG0xcGJpaHNZWE4wUkhWeVlYUnBiMjRnTFNBeE5pd2dNalV3S1R0Y2JseHVYSFFnSUNBZ0lDQXZMeUJLZFhOMElHbHVJR05oYzJVZ2RHaHBjeUJwY3lCMGFHVWdiR0Z6ZENCbGRtVnVkQ3dnY21WdFpXMWlaWElnZEc4Z2NHOXphWFJwYjI0Z2FuVnpkQ0J2Ym1ObElHMXZjbVZjYmx4MElDQWdJQ0FnY0dWdVpHbHVaMVJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwS0hScFkyc3NJREkxTUNrN1hHNWNkQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JseDBJQ0FnSUgxY2JseHVYSFFnSUNBZ2FXWWdLSFI1Y0dWdlppQnNZWE4wUTJGc2JDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdibTkzS0NrZ0xTQnNZWE4wUTJGc2JDQThJREV3S1NCN1hHNWNkQ0FnSUNBZ0lDOHZJRk52YldVZ1luSnZkM05sY25NZ1kyRnNiQ0JsZG1WdWRITWdZU0JzYVhSMGJHVWdkRzl2SUdaeVpYRjFaVzUwYkhrc0lISmxablZ6WlNCMGJ5QnlkVzRnYlc5eVpTQjBhR0Z1SUdseklISmxZWE52Ym1GaWJHVmNibHgwSUNBZ0lDQWdjbVYwZFhKdU8xeHVYSFFnSUNBZ2ZWeHVYRzVjZENBZ0lDQnBaaUFvZEhsd1pXOW1JSEJsYm1ScGJtZFVhVzFsYjNWMElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFFnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvY0dWdVpHbHVaMVJwYldWdmRYUXBPMXh1WEhRZ0lDQWdJQ0J3Wlc1a2FXNW5WR2x0Wlc5MWRDQTlJRzUxYkd3N1hHNWNkQ0FnSUNCOVhHNWNibHgwSUNBZ0lHeGhjM1JEWVd4c0lEMGdibTkzS0NrN1hHNWNkQ0FnSUNCd2IzTnBkR2x2YmlncE8xeHVYSFFnSUNBZ2JHRnpkRVIxY21GMGFXOXVJRDBnYm05M0tDa2dMU0JzWVhOMFEyRnNiRHRjYmx4MElDQjlPMXh1WEc1Y2RDQWdhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQmJKM0psYzJsNlpTY3NJQ2R6WTNKdmJHd25MQ0FuZEc5MVkyaHRiM1psSjEwdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb1pYWmxiblFwSUh0Y2JseDBJQ0FnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWlhabGJuUXNJSFJwWTJzcE8xeHVYSFFnSUNBZ2ZTazdYRzVjZENBZ2ZWeHVYSFI5S1NncE8xeHVYRzVjZEhaaGNpQk5TVkpTVDFKZlRGSWdQU0I3WEc1Y2RDQWdZMlZ1ZEdWeU9pQW5ZMlZ1ZEdWeUp5eGNibHgwSUNCc1pXWjBPaUFuY21sbmFIUW5MRnh1WEhRZ0lISnBaMmgwT2lBbmJHVm1kQ2RjYmx4MGZUdGNibHh1WEhSMllYSWdUVWxTVWs5U1gxUkNJRDBnZTF4dVhIUWdJRzFwWkdSc1pUb2dKMjFwWkdSc1pTY3NYRzVjZENBZ2RHOXdPaUFuWW05MGRHOXRKeXhjYmx4MElDQmliM1IwYjIwNklDZDBiM0FuWEc1Y2RIMDdYRzVjYmx4MGRtRnlJRTlHUmxORlZGOU5RVkFnUFNCN1hHNWNkQ0FnZEc5d09pQXdMRnh1WEhRZ0lHeGxablE2SURBc1hHNWNkQ0FnYldsa1pHeGxPaUFuTlRBbEp5eGNibHgwSUNCalpXNTBaWEk2SUNjMU1DVW5MRnh1WEhRZ0lHSnZkSFJ2YlRvZ0p6RXdNQ1VuTEZ4dVhIUWdJSEpwWjJoME9pQW5NVEF3SlNkY2JseDBmVHRjYmx4dVhIUjJZWElnWVhWMGIxUnZSbWw0WldSQmRIUmhZMmh0Wlc1MElEMGdablZ1WTNScGIyNGdZWFYwYjFSdlJtbDRaV1JCZEhSaFkyaHRaVzUwS0dGMGRHRmphRzFsYm5Rc0lISmxiR0YwYVhabFZHOUJkSFJoWTJodFpXNTBLU0I3WEc1Y2RDQWdkbUZ5SUd4bFpuUWdQU0JoZEhSaFkyaHRaVzUwTG14bFpuUTdYRzVjZENBZ2RtRnlJSFJ2Y0NBOUlHRjBkR0ZqYUcxbGJuUXVkRzl3TzF4dVhHNWNkQ0FnYVdZZ0tHeGxablFnUFQwOUlDZGhkWFJ2SnlrZ2UxeHVYSFFnSUNBZ2JHVm1kQ0E5SUUxSlVsSlBVbDlNVWx0eVpXeGhkR2wyWlZSdlFYUjBZV05vYldWdWRDNXNaV1owWFR0Y2JseDBJQ0I5WEc1Y2JseDBJQ0JwWmlBb2RHOXdJRDA5UFNBbllYVjBieWNwSUh0Y2JseDBJQ0FnSUhSdmNDQTlJRTFKVWxKUFVsOVVRbHR5Wld4aGRHbDJaVlJ2UVhSMFlXTm9iV1Z1ZEM1MGIzQmRPMXh1WEhRZ0lIMWNibHh1WEhRZ0lISmxkSFZ5YmlCN0lHeGxablE2SUd4bFpuUXNJSFJ2Y0RvZ2RHOXdJSDA3WEc1Y2RIMDdYRzVjYmx4MGRtRnlJR0YwZEdGamFHMWxiblJVYjA5bVpuTmxkQ0E5SUdaMWJtTjBhVzl1SUdGMGRHRmphRzFsYm5SVWIwOW1abk5sZENoaGRIUmhZMmh0Wlc1MEtTQjdYRzVjZENBZ2RtRnlJR3hsWm5RZ1BTQmhkSFJoWTJodFpXNTBMbXhsWm5RN1hHNWNkQ0FnZG1GeUlIUnZjQ0E5SUdGMGRHRmphRzFsYm5RdWRHOXdPMXh1WEc1Y2RDQWdhV1lnS0hSNWNHVnZaaUJQUmtaVFJWUmZUVUZRVzJGMGRHRmphRzFsYm5RdWJHVm1kRjBnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0JzWldaMElEMGdUMFpHVTBWVVgwMUJVRnRoZEhSaFkyaHRaVzUwTG14bFpuUmRPMXh1WEhRZ0lIMWNibHh1WEhRZ0lHbG1JQ2gwZVhCbGIyWWdUMFpHVTBWVVgwMUJVRnRoZEhSaFkyaHRaVzUwTG5SdmNGMGdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQjBiM0FnUFNCUFJrWlRSVlJmVFVGUVcyRjBkR0ZqYUcxbGJuUXVkRzl3WFR0Y2JseDBJQ0I5WEc1Y2JseDBJQ0J5WlhSMWNtNGdleUJzWldaME9pQnNaV1owTENCMGIzQTZJSFJ2Y0NCOU8xeHVYSFI5TzF4dVhHNWNkR1oxYm1OMGFXOXVJR0ZrWkU5bVpuTmxkQ2dwSUh0Y2JseDBJQ0IyWVhJZ2IzVjBJRDBnZXlCMGIzQTZJREFzSUd4bFpuUTZJREFnZlR0Y2JseHVYSFFnSUdadmNpQW9kbUZ5SUY5c1pXNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9MQ0J2Wm1aelpYUnpJRDBnUVhKeVlYa29YMnhsYmlrc0lGOXJaWGtnUFNBd095QmZhMlY1SUR3Z1gyeGxianNnWDJ0bGVTc3JLU0I3WEc1Y2RDQWdJQ0J2Wm1aelpYUnpXMTlyWlhsZElEMGdZWEpuZFcxbGJuUnpXMTlyWlhsZE8xeHVYSFFnSUgxY2JseHVYSFFnSUc5bVpuTmxkSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWDNKbFppa2dlMXh1WEhRZ0lDQWdkbUZ5SUhSdmNDQTlJRjl5WldZdWRHOXdPMXh1WEhRZ0lDQWdkbUZ5SUd4bFpuUWdQU0JmY21WbUxteGxablE3WEc1Y2JseDBJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHOXdJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVYSFFnSUNBZ0lDQjBiM0FnUFNCd1lYSnpaVVpzYjJGMEtIUnZjQ3dnTVRBcE8xeHVYSFFnSUNBZ2ZWeHVYSFFnSUNBZ2FXWWdLSFI1Y0dWdlppQnNaV1owSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1WEhRZ0lDQWdJQ0JzWldaMElEMGdjR0Z5YzJWR2JHOWhkQ2hzWldaMExDQXhNQ2s3WEc1Y2RDQWdJQ0I5WEc1Y2JseDBJQ0FnSUc5MWRDNTBiM0FnS3owZ2RHOXdPMXh1WEhRZ0lDQWdiM1YwTG14bFpuUWdLejBnYkdWbWREdGNibHgwSUNCOUtUdGNibHh1WEhRZ0lISmxkSFZ5YmlCdmRYUTdYRzVjZEgxY2JseHVYSFJtZFc1amRHbHZiaUJ2Wm1aelpYUlViMUI0S0c5bVpuTmxkQ3dnYzJsNlpTa2dlMXh1WEhRZ0lHbG1JQ2gwZVhCbGIyWWdiMlptYzJWMExteGxablFnUFQwOUlDZHpkSEpwYm1jbklDWW1JRzltWm5ObGRDNXNaV1owTG1sdVpHVjRUMllvSnlVbktTQWhQVDBnTFRFcElIdGNibHgwSUNBZ0lHOW1abk5sZEM1c1pXWjBJRDBnY0dGeWMyVkdiRzloZENodlptWnpaWFF1YkdWbWRDd2dNVEFwSUM4Z01UQXdJQ29nYzJsNlpTNTNhV1IwYUR0Y2JseDBJQ0I5WEc1Y2RDQWdhV1lnS0hSNWNHVnZaaUJ2Wm1aelpYUXVkRzl3SUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJ2Wm1aelpYUXVkRzl3TG1sdVpHVjRUMllvSnlVbktTQWhQVDBnTFRFcElIdGNibHgwSUNBZ0lHOW1abk5sZEM1MGIzQWdQU0J3WVhKelpVWnNiMkYwS0c5bVpuTmxkQzUwYjNBc0lERXdLU0F2SURFd01DQXFJSE5wZW1VdWFHVnBaMmgwTzF4dVhIUWdJSDFjYmx4dVhIUWdJSEpsZEhWeWJpQnZabVp6WlhRN1hHNWNkSDFjYmx4dVhIUjJZWElnY0dGeWMyVlBabVp6WlhRZ1BTQm1kVzVqZEdsdmJpQndZWEp6WlU5bVpuTmxkQ2gyWVd4MVpTa2dlMXh1WEhRZ0lIWmhjaUJmZG1Gc2RXVWtjM0JzYVhRZ1BTQjJZV3gxWlM1emNHeHBkQ2duSUNjcE8xeHVYRzVjZENBZ2RtRnlJRjkyWVd4MVpTUnpjR3hwZERJZ1BTQmZjMnhwWTJWa1ZHOUJjbkpoZVNoZmRtRnNkV1VrYzNCc2FYUXNJRElwTzF4dVhHNWNkQ0FnZG1GeUlIUnZjQ0E5SUY5MllXeDFaU1J6Y0d4cGRESmJNRjA3WEc1Y2RDQWdkbUZ5SUd4bFpuUWdQU0JmZG1Gc2RXVWtjM0JzYVhReVd6RmRPMXh1WEc1Y2RDQWdjbVYwZFhKdUlIc2dkRzl3T2lCMGIzQXNJR3hsWm5RNklHeGxablFnZlR0Y2JseDBmVHRjYmx4MGRtRnlJSEJoY25ObFFYUjBZV05vYldWdWRDQTlJSEJoY25ObFQyWm1jMlYwTzF4dVhHNWNkSFpoY2lCVVpYUm9aWEpEYkdGemN5QTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnWm5WdVkzUnBiMjRnVkdWMGFHVnlRMnhoYzNNb2IzQjBhVzl1Y3lrZ2UxeHVYSFFnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVYSFFnSUNBZ1gyTnNZWE56UTJGc2JFTm9aV05yS0hSb2FYTXNJRlJsZEdobGNrTnNZWE56S1R0Y2JseHVYSFFnSUNBZ2RHaHBjeTV3YjNOcGRHbHZiaUE5SUhSb2FYTXVjRzl6YVhScGIyNHVZbWx1WkNoMGFHbHpLVHRjYmx4dVhIUWdJQ0FnZEdWMGFHVnljeTV3ZFhOb0tIUm9hWE1wTzF4dVhHNWNkQ0FnSUNCMGFHbHpMbWhwYzNSdmNua2dQU0JiWFR0Y2JseHVYSFFnSUNBZ2RHaHBjeTV6WlhSUGNIUnBiMjV6S0c5d2RHbHZibk1zSUdaaGJITmxLVHRjYmx4dVhIUWdJQ0FnVkdWMGFHVnlRbUZ6WlM1dGIyUjFiR1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0cxdlpIVnNaU2tnZTF4dVhIUWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHMXZaSFZzWlM1cGJtbDBhV0ZzYVhwbElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFFnSUNBZ0lDQWdJRzF2WkhWc1pTNXBibWwwYVdGc2FYcGxMbU5oYkd3b1gzUm9hWE1wTzF4dVhIUWdJQ0FnSUNCOVhHNWNkQ0FnSUNCOUtUdGNibHh1WEhRZ0lDQWdkR2hwY3k1d2IzTnBkR2x2YmlncE8xeHVYSFFnSUgxY2JseHVYSFFnSUY5amNtVmhkR1ZEYkdGemN5aFVaWFJvWlhKRGJHRnpjeXdnVzN0Y2JseDBJQ0FnSUd0bGVUb2dKMmRsZEVOc1lYTnpKeXhjYmx4MElDQWdJSFpoYkhWbE9pQm1kVzVqZEdsdmJpQm5aWFJEYkdGemN5Z3BJSHRjYmx4MElDQWdJQ0FnZG1GeUlHdGxlU0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUEQwZ01DQjhmQ0JoY21kMWJXVnVkSE5iTUYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNjbklEb2dZWEpuZFcxbGJuUnpXekJkTzF4dVhIUWdJQ0FnSUNCMllYSWdZMnhoYzNObGN5QTlJSFJvYVhNdWIzQjBhVzl1Y3k1amJHRnpjMlZ6TzF4dVhHNWNkQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZMnhoYzNObGN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdZMnhoYzNObGMxdHJaWGxkS1NCN1hHNWNkQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YjNCMGFXOXVjeTVqYkdGemMyVnpXMnRsZVYwN1hHNWNkQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1Oc1lYTnpVSEpsWm1sNEtTQjdYRzVjZENBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWIzQjBhVzl1Y3k1amJHRnpjMUJ5WldacGVDQXJJQ2N0SnlBcklHdGxlVHRjYmx4MElDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNCeVpYUjFjbTRnYTJWNU8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBbmMyVjBUM0IwYVc5dWN5Y3NYRzVjZENBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z2MyVjBUM0IwYVc5dWN5aHZjSFJwYjI1ektTQjdYRzVjZENBZ0lDQWdJSFpoY2lCZmRHaHBjeklnUFNCMGFHbHpPMXh1WEc1Y2RDQWdJQ0FnSUhaaGNpQndiM01nUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUR3OUlERWdmSHdnWVhKbmRXMWxiblJ6V3pGZElEMDlQU0IxYm1SbFptbHVaV1FnUHlCMGNuVmxJRG9nWVhKbmRXMWxiblJ6V3pGZE8xeHVYRzVjZENBZ0lDQWdJSFpoY2lCa1pXWmhkV3gwY3lBOUlIdGNibHgwSUNBZ0lDQWdJQ0J2Wm1aelpYUTZJQ2N3SURBbkxGeHVYSFFnSUNBZ0lDQWdJSFJoY21kbGRFOW1abk5sZERvZ0p6QWdNQ2NzWEc1Y2RDQWdJQ0FnSUNBZ2RHRnlaMlYwUVhSMFlXTm9iV1Z1ZERvZ0oyRjFkRzhnWVhWMGJ5Y3NYRzVjZENBZ0lDQWdJQ0FnWTJ4aGMzTlFjbVZtYVhnNklDZDBaWFJvWlhJblhHNWNkQ0FnSUNBZ0lIMDdYRzVjYmx4MElDQWdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdaWGgwWlc1a0tHUmxabUYxYkhSekxDQnZjSFJwYjI1ektUdGNibHh1WEhRZ0lDQWdJQ0IyWVhJZ1gyOXdkR2x2Ym5NZ1BTQjBhR2x6TG05d2RHbHZibk03WEc1Y2RDQWdJQ0FnSUhaaGNpQmxiR1Z0Wlc1MElEMGdYMjl3ZEdsdmJuTXVaV3hsYldWdWREdGNibHgwSUNBZ0lDQWdkbUZ5SUhSaGNtZGxkQ0E5SUY5dmNIUnBiMjV6TG5SaGNtZGxkRHRjYmx4MElDQWdJQ0FnZG1GeUlIUmhjbWRsZEUxdlpHbG1hV1Z5SUQwZ1gyOXdkR2x2Ym5NdWRHRnlaMlYwVFc5a2FXWnBaWEk3WEc1Y2JseDBJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBJRDBnWld4bGJXVnVkRHRjYmx4MElDQWdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQjBZWEpuWlhRN1hHNWNkQ0FnSUNBZ0lIUm9hWE11ZEdGeVoyVjBUVzlrYVdacFpYSWdQU0IwWVhKblpYUk5iMlJwWm1sbGNqdGNibHh1WEhRZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwWVhKblpYUWdQVDA5SUNkMmFXVjNjRzl5ZENjcElIdGNibHgwSUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZENBOUlHUnZZM1Z0Wlc1MExtSnZaSGs3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUk5iMlJwWm1sbGNpQTlJQ2QyYVhOcFlteGxKenRjYmx4MElDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMblJoY21kbGRDQTlQVDBnSjNOamNtOXNiQzFvWVc1a2JHVW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTUwWVhKblpYUWdQU0JrYjJOMWJXVnVkQzVpYjJSNU8xeHVYSFFnSUNBZ0lDQWdJSFJvYVhNdWRHRnlaMlYwVFc5a2FXWnBaWElnUFNBbmMyTnliMnhzTFdoaGJtUnNaU2M3WEc1Y2RDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQmJKMlZzWlcxbGJuUW5MQ0FuZEdGeVoyVjBKMTB1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYTJWNUtTQjdYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCZmRHaHBjekpiYTJWNVhTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVkdWMGFHVnlJRVZ5Y205eU9pQkNiM1JvSUdWc1pXMWxiblFnWVc1a0lIUmhjbWRsZENCdGRYTjBJR0psSUdSbFptbHVaV1FuS1R0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlGOTBhR2x6TWx0clpYbGRMbXB4ZFdWeWVTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUY5MGFHbHpNbHRyWlhsZElEMGdYM1JvYVhNeVcydGxlVjFiTUYwN1hHNWNkQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdYM1JvYVhNeVcydGxlVjBnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCZmRHaHBjekpiYTJWNVhTQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1gzUm9hWE15VzJ0bGVWMHBPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2ZTazdYRzVjYmx4MElDQWdJQ0FnWVdSa1EyeGhjM01vZEdocGN5NWxiR1Z0Wlc1MExDQjBhR2x6TG1kbGRFTnNZWE56S0NkbGJHVnRaVzUwSnlrcE8xeHVYSFFnSUNBZ0lDQnBaaUFvSVNoMGFHbHpMbTl3ZEdsdmJuTXVZV1JrVkdGeVoyVjBRMnhoYzNObGN5QTlQVDBnWm1Gc2MyVXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ1lXUmtRMnhoYzNNb2RHaHBjeTUwWVhKblpYUXNJSFJvYVhNdVoyVjBRMnhoYzNNb0ozUmhjbWRsZENjcEtUdGNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1dmNIUnBiMjV6TG1GMGRHRmphRzFsYm5RcElIdGNibHgwSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVJsZEdobGNpQkZjbkp2Y2pvZ1dXOTFJRzExYzNRZ2NISnZkbWxrWlNCaGJpQmhkSFJoWTJodFpXNTBKeWs3WEc1Y2RDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQjBhR2x6TG5SaGNtZGxkRUYwZEdGamFHMWxiblFnUFNCd1lYSnpaVUYwZEdGamFHMWxiblFvZEdocGN5NXZjSFJwYjI1ekxuUmhjbWRsZEVGMGRHRmphRzFsYm5RcE8xeHVYSFFnSUNBZ0lDQjBhR2x6TG1GMGRHRmphRzFsYm5RZ1BTQndZWEp6WlVGMGRHRmphRzFsYm5Rb2RHaHBjeTV2Y0hScGIyNXpMbUYwZEdGamFHMWxiblFwTzF4dVhIUWdJQ0FnSUNCMGFHbHpMbTltWm5ObGRDQTlJSEJoY25ObFQyWm1jMlYwS0hSb2FYTXViM0IwYVc5dWN5NXZabVp6WlhRcE8xeHVYSFFnSUNBZ0lDQjBhR2x6TG5SaGNtZGxkRTltWm5ObGRDQTlJSEJoY25ObFQyWm1jMlYwS0hSb2FYTXViM0IwYVc5dWN5NTBZWEpuWlhSUFptWnpaWFFwTzF4dVhHNWNkQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1elkzSnZiR3hRWVhKbGJuUWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQWdJQ0FnZEdocGN5NWthWE5oWW14bEtDazdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9kR2hwY3k1MFlYSm5aWFJOYjJScFptbGxjaUE5UFQwZ0ozTmpjbTlzYkMxb1lXNWtiR1VuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1elkzSnZiR3hRWVhKbGJuUWdQU0IwYUdsekxuUmhjbWRsZER0Y2JseDBJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQjBhR2x6TG5OamNtOXNiRkJoY21WdWRDQTlJR2RsZEZOamNtOXNiRkJoY21WdWRDaDBhR2x6TG5SaGNtZGxkQ2s3WEc1Y2RDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQnBaaUFvSVNoMGFHbHpMbTl3ZEdsdmJuTXVaVzVoWW14bFpDQTlQVDBnWm1Gc2MyVXBLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTVsYm1GaWJHVW9jRzl6S1R0Y2JseDBJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ2ZWeHVYSFFnSUgwc0lIdGNibHgwSUNBZ0lHdGxlVG9nSjJkbGRGUmhjbWRsZEVKdmRXNWtjeWNzWEc1Y2RDQWdJQ0IyWVd4MVpUb2dablZ1WTNScGIyNGdaMlYwVkdGeVoyVjBRbTkxYm1SektDa2dlMXh1WEhRZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhSb2FYTXVkR0Z5WjJWMFRXOWthV1pwWlhJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkR0Z5WjJWMFRXOWthV1pwWlhJZ1BUMDlJQ2QyYVhOcFlteGxKeWtnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkR0Z5WjJWMElEMDlQU0JrYjJOMWJXVnVkQzVpYjJSNUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN0lIUnZjRG9nY0dGblpWbFBabVp6WlhRc0lHeGxablE2SUhCaFoyVllUMlptYzJWMExDQm9aV2xuYUhRNklHbHVibVZ5U0dWcFoyaDBMQ0IzYVdSMGFEb2dhVzV1WlhKWGFXUjBhQ0I5TzF4dVhIUWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0p2ZFc1a2N5QTlJR2RsZEVKdmRXNWtjeWgwYUdsekxuUmhjbWRsZENrN1hHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzkxZENBOUlIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklHSnZkVzVrY3k1b1pXbG5hSFFzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJR0p2ZFc1a2N5NTNhV1IwYUN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzQTZJR0p2ZFc1a2N5NTBiM0FzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWbWREb2dZbTkxYm1SekxteGxablJjYmx4MElDQWdJQ0FnSUNBZ0lDQWdmVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRdWFHVnBaMmgwSUQwZ1RXRjBhQzV0YVc0b2IzVjBMbWhsYVdkb2RDd2dZbTkxYm1SekxtaGxhV2RvZENBdElDaHdZV2RsV1U5bVpuTmxkQ0F0SUdKdmRXNWtjeTUwYjNBcEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBMbWhsYVdkb2RDQTlJRTFoZEdndWJXbHVLRzkxZEM1b1pXbG5hSFFzSUdKdmRXNWtjeTVvWldsbmFIUWdMU0FvWW05MWJtUnpMblJ2Y0NBcklHSnZkVzVrY3k1b1pXbG5hSFFnTFNBb2NHRm5aVmxQWm1aelpYUWdLeUJwYm01bGNraGxhV2RvZENrcEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBMbWhsYVdkb2RDQTlJRTFoZEdndWJXbHVLR2x1Ym1WeVNHVnBaMmgwTENCdmRYUXVhR1ZwWjJoMEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBMbWhsYVdkb2RDQXRQU0F5TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUc5MWRDNTNhV1IwYUNBOUlFMWhkR2d1YldsdUtHOTFkQzUzYVdSMGFDd2dZbTkxYm1SekxuZHBaSFJvSUMwZ0tIQmhaMlZZVDJabWMyVjBJQzBnWW05MWJtUnpMbXhsWm5RcEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBMbmRwWkhSb0lEMGdUV0YwYUM1dGFXNG9iM1YwTG5kcFpIUm9MQ0JpYjNWdVpITXVkMmxrZEdnZ0xTQW9ZbTkxYm1SekxteGxablFnS3lCaWIzVnVaSE11ZDJsa2RHZ2dMU0FvY0dGblpWaFBabVp6WlhRZ0t5QnBibTVsY2xkcFpIUm9LU2twTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhRdWQybGtkR2dnUFNCTllYUm9MbTFwYmlocGJtNWxjbGRwWkhSb0xDQnZkWFF1ZDJsa2RHZ3BPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnZkWFF1ZDJsa2RHZ2dMVDBnTWp0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iM1YwTG5SdmNDQThJSEJoWjJWWlQyWm1jMlYwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBMblJ2Y0NBOUlIQmhaMlZaVDJabWMyVjBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h2ZFhRdWJHVm1kQ0E4SUhCaFoyVllUMlptYzJWMEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1YwTG14bFpuUWdQU0J3WVdkbFdFOW1abk5sZER0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2ZFhRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5SaGNtZGxkRTF2WkdsbWFXVnlJRDA5UFNBbmMyTnliMnhzTFdoaGJtUnNaU2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJSFpoY2lCaWIzVnVaSE1nUFNCMWJtUmxabWx1WldRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RHRnlaMlYwSUQwZ2RHaHBjeTUwWVhKblpYUTdYRzVjZENBZ0lDQWdJQ0FnSUNCcFppQW9kR0Z5WjJWMElEMDlQU0JrYjJOMWJXVnVkQzVpYjJSNUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZENBOUlHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZER0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCaWIzVnVaSE1nUFNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRG9nY0dGblpWaFBabVp6WlhRc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOXdPaUJ3WVdkbFdVOW1abk5sZEN4Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUdsdWJtVnlTR1ZwWjJoMExGeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCcGJtNWxjbGRwWkhSb1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmliM1Z1WkhNZ1BTQm5aWFJDYjNWdVpITW9kR0Z5WjJWMEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnZG1GeUlITjBlV3hsSUQwZ1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNoMFlYSm5aWFFwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FHRnpRbTkwZEc5dFUyTnliMnhzSUQwZ2RHRnlaMlYwTG5OamNtOXNiRmRwWkhSb0lENGdkR0Z5WjJWMExtTnNhV1Z1ZEZkcFpIUm9JSHg4SUZ0emRIbHNaUzV2ZG1WeVpteHZkeXdnYzNSNWJHVXViM1psY21ac2IzZFlYUzVwYm1SbGVFOW1LQ2R6WTNKdmJHd25LU0ErUFNBd0lIeDhJSFJvYVhNdWRHRnlaMlYwSUNFOVBTQmtiMk4xYldWdWRDNWliMlI1TzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MyTnliMnhzUW05MGRHOXRJRDBnTUR0Y2JseDBJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYTkNiM1IwYjIxVFkzSnZiR3dwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWIyeHNRbTkwZEc5dElEMGdNVFU3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNBZ0lIWmhjaUJvWldsbmFIUWdQU0JpYjNWdVpITXVhR1ZwWjJoMElDMGdjR0Z5YzJWR2JHOWhkQ2h6ZEhsc1pTNWliM0prWlhKVWIzQlhhV1IwYUNrZ0xTQndZWEp6WlVac2IyRjBLSE4wZVd4bExtSnZjbVJsY2tKdmRIUnZiVmRwWkhSb0tTQXRJSE5qY205c2JFSnZkSFJ2YlR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnZG1GeUlHOTFkQ0E5SUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJREUxTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJR2hsYVdkb2RDQXFJREF1T1RjMUlDb2dLR2hsYVdkb2RDQXZJSFJoY21kbGRDNXpZM0p2Ykd4SVpXbG5hSFFwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JzWldaME9pQmliM1Z1WkhNdWJHVm1kQ0FySUdKdmRXNWtjeTUzYVdSMGFDQXRJSEJoY25ObFJteHZZWFFvYzNSNWJHVXVZbTl5WkdWeVRHVm1kRmRwWkhSb0tTQXRJREUxWEc1Y2RDQWdJQ0FnSUNBZ0lDQjlPMXh1WEc1Y2RDQWdJQ0FnSUNBZ0lDQjJZWElnWm1sMFFXUnFJRDBnTUR0Y2JseDBJQ0FnSUNBZ0lDQWdJR2xtSUNob1pXbG5hSFFnUENBME1EZ2dKaVlnZEdocGN5NTBZWEpuWlhRZ1BUMDlJR1J2WTNWdFpXNTBMbUp2WkhrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1ptbDBRV1JxSUQwZ0xUQXVNREF3TVRFZ0tpQk5ZWFJvTG5CdmR5aG9aV2xuYUhRc0lESXBJQzBnTUM0d01EY3lOeUFxSUdobGFXZG9kQ0FySURJeUxqVTRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MFlYSm5aWFFnSVQwOUlHUnZZM1Z0Wlc1MExtSnZaSGtwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYjNWMExtaGxhV2RvZENBOUlFMWhkR2d1YldGNEtHOTFkQzVvWldsbmFIUXNJREkwS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOamNtOXNiRkJsY21ObGJuUmhaMlVnUFNCMGFHbHpMblJoY21kbGRDNXpZM0p2Ykd4VWIzQWdMeUFvZEdGeVoyVjBMbk5qY205c2JFaGxhV2RvZENBdElHaGxhV2RvZENrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0J2ZFhRdWRHOXdJRDBnYzJOeWIyeHNVR1Z5WTJWdWRHRm5aU0FxSUNob1pXbG5hSFFnTFNCdmRYUXVhR1ZwWjJoMElDMGdabWwwUVdScUtTQXJJR0p2ZFc1a2N5NTBiM0FnS3lCd1lYSnpaVVpzYjJGMEtITjBlV3hsTG1KdmNtUmxjbFJ2Y0ZkcFpIUm9LVHRjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkR0Z5WjJWMElEMDlQU0JrYjJOMWJXVnVkQzVpYjJSNUtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHOTFkQzVvWldsbmFIUWdQU0JOWVhSb0xtMWhlQ2h2ZFhRdWFHVnBaMmgwTENBeU5DazdYRzVjZENBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2ZFhRN1hHNWNkQ0FnSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUhKbGRIVnliaUJuWlhSQ2IzVnVaSE1vZEdocGN5NTBZWEpuWlhRcE8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBblkyeGxZWEpEWVdOb1pTY3NYRzVjZENBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z1kyeGxZWEpEWVdOb1pTZ3BJSHRjYmx4MElDQWdJQ0FnZEdocGN5NWZZMkZqYUdVZ1BTQjdmVHRjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZGpZV05vWlNjc1hHNWNkQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnWTJGamFHVW9heXdnWjJWMGRHVnlLU0I3WEc1Y2RDQWdJQ0FnSUM4dklFMXZjbVVnZEdoaGJpQnZibVVnYlc5a2RXeGxJSGRwYkd3Z2IyWjBaVzRnYm1WbFpDQjBhR1VnYzJGdFpTQkVUMDBnYVc1bWJ5d2djMjljYmx4MElDQWdJQ0FnTHk4Z2QyVWdhMlZsY0NCaElHTmhZMmhsSUhkb2FXTm9JR2x6SUdOc1pXRnlaV1FnYjI0Z1pXRmphQ0J3YjNOcGRHbHZiaUJqWVd4c1hHNWNkQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1ZlkyRmphR1VnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTVmWTJGamFHVWdQU0I3ZlR0Y2JseDBJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NWZZMkZqYUdWYmExMGdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQWdJQ0FnZEdocGN5NWZZMkZqYUdWYmExMGdQU0JuWlhSMFpYSXVZMkZzYkNoMGFHbHpLVHRjYmx4MElDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqWVdOb1pWdHJYVHRjYmx4MElDQWdJSDFjYmx4MElDQjlMQ0I3WEc1Y2RDQWdJQ0JyWlhrNklDZGxibUZpYkdVbkxGeHVYSFFnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUdWdVlXSnNaU2dwSUh0Y2JseDBJQ0FnSUNBZ2RtRnlJSEJ2Y3lBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BEMGdNQ0I4ZkNCaGNtZDFiV1Z1ZEhOYk1GMGdQVDA5SUhWdVpHVm1hVzVsWkNBL0lIUnlkV1VnT2lCaGNtZDFiV1Z1ZEhOYk1GMDdYRzVjYmx4MElDQWdJQ0FnYVdZZ0tDRW9kR2hwY3k1dmNIUnBiMjV6TG1Ga1pGUmhjbWRsZEVOc1lYTnpaWE1nUFQwOUlHWmhiSE5sS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJR0ZrWkVOc1lYTnpLSFJvYVhNdWRHRnlaMlYwTENCMGFHbHpMbWRsZEVOc1lYTnpLQ2RsYm1GaWJHVmtKeWtwTzF4dVhIUWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lHRmtaRU5zWVhOektIUm9hWE11Wld4bGJXVnVkQ3dnZEdocGN5NW5aWFJEYkdGemN5Z25aVzVoWW14bFpDY3BLVHRjYmx4MElDQWdJQ0FnZEdocGN5NWxibUZpYkdWa0lEMGdkSEoxWlR0Y2JseHVYSFFnSUNBZ0lDQnBaaUFvZEdocGN5NXpZM0p2Ykd4UVlYSmxiblFnSVQwOUlHUnZZM1Z0Wlc1MEtTQjdYRzVjZENBZ0lDQWdJQ0FnZEdocGN5NXpZM0p2Ykd4UVlYSmxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYzJOeWIyeHNKeXdnZEdocGN5NXdiM05wZEdsdmJpazdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9jRzl6S1NCN1hHNWNkQ0FnSUNBZ0lDQWdkR2hwY3k1d2IzTnBkR2x2YmlncE8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQjlYRzVjZENBZ2ZTd2dlMXh1WEhRZ0lDQWdhMlY1T2lBblpHbHpZV0pzWlNjc1hHNWNkQ0FnSUNCMllXeDFaVG9nWm5WdVkzUnBiMjRnWkdsellXSnNaU2dwSUh0Y2JseDBJQ0FnSUNBZ2NtVnRiM1psUTJ4aGMzTW9kR2hwY3k1MFlYSm5aWFFzSUhSb2FYTXVaMlYwUTJ4aGMzTW9KMlZ1WVdKc1pXUW5LU2s3WEc1Y2RDQWdJQ0FnSUhKbGJXOTJaVU5zWVhOektIUm9hWE11Wld4bGJXVnVkQ3dnZEdocGN5NW5aWFJEYkdGemN5Z25aVzVoWW14bFpDY3BLVHRjYmx4MElDQWdJQ0FnZEdocGN5NWxibUZpYkdWa0lEMGdabUZzYzJVN1hHNWNibHgwSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxuTmpjbTlzYkZCaGNtVnVkQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MElDQWdJQ0FnSUNCMGFHbHpMbk5qY205c2JGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHpZM0p2Ykd3bkxDQjBhR2x6TG5CdmMybDBhVzl1S1R0Y2JseDBJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ2ZWeHVYSFFnSUgwc0lIdGNibHgwSUNBZ0lHdGxlVG9nSjJSbGMzUnliM2tuTEZ4dVhIUWdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJR1JsYzNSeWIza29LU0I3WEc1Y2RDQWdJQ0FnSUhaaGNpQmZkR2hwY3pNZ1BTQjBhR2x6TzF4dVhHNWNkQ0FnSUNBZ0lIUm9hWE11WkdsellXSnNaU2dwTzF4dVhHNWNkQ0FnSUNBZ0lIUmxkR2hsY25NdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2RHVjBhR1Z5TENCcEtTQjdYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tIUmxkR2hsY2lBOVBUMGdYM1JvYVhNektTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCMFpYUm9aWEp6TG5Od2JHbGpaU2hwTENBeEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmx4MElDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lIMHBPMXh1WEhRZ0lDQWdmVnh1WEhRZ0lIMHNJSHRjYmx4MElDQWdJR3RsZVRvZ0ozVndaR0YwWlVGMGRHRmphRU5zWVhOelpYTW5MRnh1WEhRZ0lDQWdkbUZzZFdVNklHWjFibU4wYVc5dUlIVndaR0YwWlVGMGRHRmphRU5zWVhOelpYTW9aV3hsYldWdWRFRjBkR0ZqYUN3Z2RHRnlaMlYwUVhSMFlXTm9LU0I3WEc1Y2RDQWdJQ0FnSUhaaGNpQmZkR2hwY3pRZ1BTQjBhR2x6TzF4dVhHNWNkQ0FnSUNBZ0lHVnNaVzFsYm5SQmRIUmhZMmdnUFNCbGJHVnRaVzUwUVhSMFlXTm9JSHg4SUhSb2FYTXVZWFIwWVdOb2JXVnVkRHRjYmx4MElDQWdJQ0FnZEdGeVoyVjBRWFIwWVdOb0lEMGdkR0Z5WjJWMFFYUjBZV05vSUh4OElIUm9hWE11ZEdGeVoyVjBRWFIwWVdOb2JXVnVkRHRjYmx4MElDQWdJQ0FnZG1GeUlITnBaR1Z6SUQwZ1d5ZHNaV1owSnl3Z0ozUnZjQ2NzSUNkaWIzUjBiMjBuTENBbmNtbG5hSFFuTENBbmJXbGtaR3hsSnl3Z0oyTmxiblJsY2lkZE8xeHVYRzVjZENBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NWZZV1JrUVhSMFlXTm9RMnhoYzNObGN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkR2hwY3k1ZllXUmtRWFIwWVdOb1EyeGhjM05sY3k1c1pXNW5kR2dwSUh0Y2JseDBJQ0FnSUNBZ0lDQXZMeUIxY0dSaGRHVkJkSFJoWTJoRGJHRnpjMlZ6SUdOaGJpQmlaU0JqWVd4c1pXUWdiVzl5WlNCMGFHRnVJRzl1WTJVZ2FXNGdZU0J3YjNOcGRHbHZiaUJqWVd4c0xDQnpiMXh1WEhRZ0lDQWdJQ0FnSUM4dklIZGxJRzVsWldRZ2RHOGdZMnhsWVc0Z2RYQWdZV1owWlhJZ2IzVnljMlZzZG1WeklITjFZMmdnZEdoaGRDQjNhR1Z1SUhSb1pTQnNZWE4wSUdSbFptVnlJR2RsZEhOY2JseDBJQ0FnSUNBZ0lDQXZMeUJ5WVc0Z2FYUWdaRzlsYzI0bmRDQmhaR1FnWVc1NUlHVjRkSEpoSUdOc1lYTnpaWE1nWm5KdmJTQndjbVYyYVc5MWN5QmpZV3hzY3k1Y2JseDBJQ0FnSUNBZ0lDQjBhR2x6TGw5aFpHUkJkSFJoWTJoRGJHRnpjMlZ6TG5Od2JHbGpaU2d3TENCMGFHbHpMbDloWkdSQmRIUmhZMmhEYkdGemMyVnpMbXhsYm1kMGFDazdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11WDJGa1pFRjBkR0ZqYUVOc1lYTnpaWE1nUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ2RHaHBjeTVmWVdSa1FYUjBZV05vUTJ4aGMzTmxjeUE5SUZ0ZE8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSFpoY2lCaFpHUWdQU0IwYUdsekxsOWhaR1JCZEhSaFkyaERiR0Z6YzJWek8xeHVYRzVjZENBZ0lDQWdJR2xtSUNobGJHVnRaVzUwUVhSMFlXTm9MblJ2Y0NrZ2UxeHVYSFFnSUNBZ0lDQWdJR0ZrWkM1d2RYTm9LSFJvYVhNdVoyVjBRMnhoYzNNb0oyVnNaVzFsYm5RdFlYUjBZV05vWldRbktTQXJJQ2N0SnlBcklHVnNaVzFsYm5SQmRIUmhZMmd1ZEc5d0tUdGNibHgwSUNBZ0lDQWdmVnh1WEhRZ0lDQWdJQ0JwWmlBb1pXeGxiV1Z1ZEVGMGRHRmphQzVzWldaMEtTQjdYRzVjZENBZ0lDQWdJQ0FnWVdSa0xuQjFjMmdvZEdocGN5NW5aWFJEYkdGemN5Z25aV3hsYldWdWRDMWhkSFJoWTJobFpDY3BJQ3NnSnkwbklDc2daV3hsYldWdWRFRjBkR0ZqYUM1c1pXWjBLVHRjYmx4MElDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNCcFppQW9kR0Z5WjJWMFFYUjBZV05vTG5SdmNDa2dlMXh1WEhRZ0lDQWdJQ0FnSUdGa1pDNXdkWE5vS0hSb2FYTXVaMlYwUTJ4aGMzTW9KM1JoY21kbGRDMWhkSFJoWTJobFpDY3BJQ3NnSnkwbklDc2dkR0Z5WjJWMFFYUjBZV05vTG5SdmNDazdYRzVjZENBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnYVdZZ0tIUmhjbWRsZEVGMGRHRmphQzVzWldaMEtTQjdYRzVjZENBZ0lDQWdJQ0FnWVdSa0xuQjFjMmdvZEdocGN5NW5aWFJEYkdGemN5Z25kR0Z5WjJWMExXRjBkR0ZqYUdWa0p5a2dLeUFuTFNjZ0t5QjBZWEpuWlhSQmRIUmhZMmd1YkdWbWRDazdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCMllYSWdZV3hzSUQwZ1cxMDdYRzVjZENBZ0lDQWdJSE5wWkdWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tITnBaR1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQmhiR3d1Y0hWemFDaGZkR2hwY3pRdVoyVjBRMnhoYzNNb0oyVnNaVzFsYm5RdFlYUjBZV05vWldRbktTQXJJQ2N0SnlBcklITnBaR1VwTzF4dVhIUWdJQ0FnSUNBZ0lHRnNiQzV3ZFhOb0tGOTBhR2x6TkM1blpYUkRiR0Z6Y3lnbmRHRnlaMlYwTFdGMGRHRmphR1ZrSnlrZ0t5QW5MU2NnS3lCemFXUmxLVHRjYmx4MElDQWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lDQWdaR1ZtWlhJb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhRZ0lDQWdJQ0FnSUdsbUlDZ2hLSFI1Y0dWdlppQmZkR2hwY3pRdVgyRmtaRUYwZEdGamFFTnNZWE56WlhNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJSFZ3WkdGMFpVTnNZWE56WlhNb1gzUm9hWE0wTG1Wc1pXMWxiblFzSUY5MGFHbHpOQzVmWVdSa1FYUjBZV05vUTJ4aGMzTmxjeXdnWVd4c0tUdGNibHgwSUNBZ0lDQWdJQ0JwWmlBb0lTaGZkR2hwY3pRdWIzQjBhVzl1Y3k1aFpHUlVZWEpuWlhSRGJHRnpjMlZ6SUQwOVBTQm1ZV3h6WlNrcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUhWd1pHRjBaVU5zWVhOelpYTW9YM1JvYVhNMExuUmhjbWRsZEN3Z1gzUm9hWE0wTGw5aFpHUkJkSFJoWTJoRGJHRnpjMlZ6TENCaGJHd3BPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJR1JsYkdWMFpTQmZkR2hwY3pRdVgyRmtaRUYwZEdGamFFTnNZWE56WlhNN1hHNWNkQ0FnSUNBZ0lIMHBPMXh1WEhRZ0lDQWdmVnh1WEhRZ0lIMHNJSHRjYmx4MElDQWdJR3RsZVRvZ0ozQnZjMmwwYVc5dUp5eGNibHgwSUNBZ0lIWmhiSFZsT2lCbWRXNWpkR2x2YmlCd2IzTnBkR2x2YmlncElIdGNibHgwSUNBZ0lDQWdkbUZ5SUY5MGFHbHpOU0E5SUhSb2FYTTdYRzVjYmx4MElDQWdJQ0FnZG1GeUlHWnNkWE5vUTJoaGJtZGxjeUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUEQwZ01DQjhmQ0JoY21kMWJXVnVkSE5iTUYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUhSeWRXVWdPaUJoY21kMWJXVnVkSE5iTUYwN1hHNWNibHgwSUNBZ0lDQWdMeThnWm14MWMyaERhR0Z1WjJWeklHTnZiVzFwZEhNZ2RHaGxJR05vWVc1blpYTWdhVzF0WldScFlYUmxiSGtzSUd4bFlYWmxJSFJ5ZFdVZ2RXNXNaWE56SUhsdmRTQmhjbVVnY0c5emFYUnBiMjVwYm1jZ2JYVnNkR2x3YkdWY2JseDBJQ0FnSUNBZ0x5OGdkR1YwYUdWeWN5QW9hVzRnZDJocFkyZ2dZMkZ6WlNCallXeHNJRlJsZEdobGNpNVZkR2xzY3k1bWJIVnphQ0I1YjNWeWMyVnNaaUIzYUdWdUlIbHZkU2R5WlNCa2IyNWxLVnh1WEc1Y2RDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1bGJtRmliR1ZrS1NCN1hHNWNkQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnZEdocGN5NWpiR1ZoY2tOaFkyaGxLQ2s3WEc1Y2JseDBJQ0FnSUNBZ0x5OGdWSFZ5YmlBbllYVjBieWNnWVhSMFlXTm9iV1Z1ZEhNZ2FXNTBieUIwYUdVZ1lYQndjbTl3Y21saGRHVWdZMjl5Ym1WeUlHOXlJR1ZrWjJWY2JseDBJQ0FnSUNBZ2RtRnlJSFJoY21kbGRFRjBkR0ZqYUcxbGJuUWdQU0JoZFhSdlZHOUdhWGhsWkVGMGRHRmphRzFsYm5Rb2RHaHBjeTUwWVhKblpYUkJkSFJoWTJodFpXNTBMQ0IwYUdsekxtRjBkR0ZqYUcxbGJuUXBPMXh1WEc1Y2RDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFFYUjBZV05vUTJ4aGMzTmxjeWgwYUdsekxtRjBkR0ZqYUcxbGJuUXNJSFJoY21kbGRFRjBkR0ZqYUcxbGJuUXBPMXh1WEc1Y2RDQWdJQ0FnSUhaaGNpQmxiR1Z0Wlc1MFVHOXpJRDBnZEdocGN5NWpZV05vWlNnblpXeGxiV1Z1ZEMxaWIzVnVaSE1uTENCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZENBZ0lDQWdJQ0FnY21WMGRYSnVJR2RsZEVKdmRXNWtjeWhmZEdocGN6VXVaV3hsYldWdWRDazdYRzVjZENBZ0lDQWdJSDBwTzF4dVhHNWNkQ0FnSUNBZ0lIWmhjaUIzYVdSMGFDQTlJR1ZzWlcxbGJuUlFiM011ZDJsa2RHZzdYRzVjZENBZ0lDQWdJSFpoY2lCb1pXbG5hSFFnUFNCbGJHVnRaVzUwVUc5ekxtaGxhV2RvZER0Y2JseHVYSFFnSUNBZ0lDQnBaaUFvZDJsa2RHZ2dQVDA5SURBZ0ppWWdhR1ZwWjJoMElEMDlQU0F3SUNZbUlIUjVjR1Z2WmlCMGFHbHpMbXhoYzNSVGFYcGxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1WEhRZ0lDQWdJQ0FnSUhaaGNpQmZiR0Z6ZEZOcGVtVWdQU0IwYUdsekxteGhjM1JUYVhwbE8xeHVYRzVjZENBZ0lDQWdJQ0FnTHk4Z1YyVWdZMkZqYUdVZ2RHaGxJR2hsYVdkb2RDQmhibVFnZDJsa2RHZ2dkRzhnYldGclpTQnBkQ0J3YjNOemFXSnNaU0IwYnlCd2IzTnBkR2x2YmlCbGJHVnRaVzUwY3lCMGFHRjBJR0Z5WlZ4dVhIUWdJQ0FnSUNBZ0lDOHZJR2RsZEhScGJtY2dhR2xrWkdWdUxseHVYSFFnSUNBZ0lDQWdJSGRwWkhSb0lEMGdYMnhoYzNSVGFYcGxMbmRwWkhSb08xeHVYSFFnSUNBZ0lDQWdJR2hsYVdkb2RDQTlJRjlzWVhOMFUybDZaUzVvWldsbmFIUTdYRzVjZENBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnZEdocGN5NXNZWE4wVTJsNlpTQTlJSHNnZDJsa2RHZzZJSGRwWkhSb0xDQm9aV2xuYUhRNklHaGxhV2RvZENCOU8xeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnZG1GeUlIUmhjbWRsZEZCdmN5QTlJSFJvYVhNdVkyRmphR1VvSjNSaGNtZGxkQzFpYjNWdVpITW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TlM1blpYUlVZWEpuWlhSQ2IzVnVaSE1vS1R0Y2JseDBJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQWdJSFpoY2lCMFlYSm5aWFJUYVhwbElEMGdkR0Z5WjJWMFVHOXpPMXh1WEc1Y2RDQWdJQ0FnSUM4dklFZGxkQ0JoYmlCaFkzUjFZV3dnY0hnZ2IyWm1jMlYwSUdaeWIyMGdkR2hsSUdGMGRHRmphRzFsYm5SY2JseDBJQ0FnSUNBZ2RtRnlJRzltWm5ObGRDQTlJRzltWm5ObGRGUnZVSGdvWVhSMFlXTm9iV1Z1ZEZSdlQyWm1jMlYwS0hSb2FYTXVZWFIwWVdOb2JXVnVkQ2tzSUhzZ2QybGtkR2c2SUhkcFpIUm9MQ0JvWldsbmFIUTZJR2hsYVdkb2RDQjlLVHRjYmx4MElDQWdJQ0FnZG1GeUlIUmhjbWRsZEU5bVpuTmxkQ0E5SUc5bVpuTmxkRlJ2VUhnb1lYUjBZV05vYldWdWRGUnZUMlptYzJWMEtIUmhjbWRsZEVGMGRHRmphRzFsYm5RcExDQjBZWEpuWlhSVGFYcGxLVHRjYmx4dVhIUWdJQ0FnSUNCMllYSWdiV0Z1ZFdGc1QyWm1jMlYwSUQwZ2IyWm1jMlYwVkc5UWVDaDBhR2x6TG05bVpuTmxkQ3dnZXlCM2FXUjBhRG9nZDJsa2RHZ3NJR2hsYVdkb2REb2dhR1ZwWjJoMElIMHBPMXh1WEhRZ0lDQWdJQ0IyWVhJZ2JXRnVkV0ZzVkdGeVoyVjBUMlptYzJWMElEMGdiMlptYzJWMFZHOVFlQ2gwYUdsekxuUmhjbWRsZEU5bVpuTmxkQ3dnZEdGeVoyVjBVMmw2WlNrN1hHNWNibHgwSUNBZ0lDQWdMeThnUVdSa0lIUm9aU0J0WVc1MVlXeHNlU0J3Y205MmFXUmxaQ0J2Wm1aelpYUmNibHgwSUNBZ0lDQWdiMlptYzJWMElEMGdZV1JrVDJabWMyVjBLRzltWm5ObGRDd2diV0Z1ZFdGc1QyWm1jMlYwS1R0Y2JseDBJQ0FnSUNBZ2RHRnlaMlYwVDJabWMyVjBJRDBnWVdSa1QyWm1jMlYwS0hSaGNtZGxkRTltWm5ObGRDd2diV0Z1ZFdGc1ZHRnlaMlYwVDJabWMyVjBLVHRjYmx4dVhIUWdJQ0FnSUNBdkx5QkpkQ2R6SUc1dmR5QnZkWElnWjI5aGJDQjBieUJ0WVd0bElDaGxiR1Z0Wlc1MElIQnZjMmwwYVc5dUlDc2diMlptYzJWMEtTQTlQU0FvZEdGeVoyVjBJSEJ2YzJsMGFXOXVJQ3NnZEdGeVoyVjBJRzltWm5ObGRDbGNibHgwSUNBZ0lDQWdkbUZ5SUd4bFpuUWdQU0IwWVhKblpYUlFiM011YkdWbWRDQXJJSFJoY21kbGRFOW1abk5sZEM1c1pXWjBJQzBnYjJabWMyVjBMbXhsWm5RN1hHNWNkQ0FnSUNBZ0lIWmhjaUIwYjNBZ1BTQjBZWEpuWlhSUWIzTXVkRzl3SUNzZ2RHRnlaMlYwVDJabWMyVjBMblJ2Y0NBdElHOW1abk5sZEM1MGIzQTdYRzVjYmx4MElDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCVVpYUm9aWEpDWVhObExtMXZaSFZzWlhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmx4MElDQWdJQ0FnSUNCMllYSWdYMjF2WkhWc1pUSWdQU0JVWlhSb1pYSkNZWE5sTG0xdlpIVnNaWE5iYVYwN1hHNWNkQ0FnSUNBZ0lDQWdkbUZ5SUhKbGRDQTlJRjl0YjJSMWJHVXlMbkJ2YzJsMGFXOXVMbU5oYkd3b2RHaHBjeXdnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdiR1ZtZERvZ2JHVm1kQ3hjYmx4MElDQWdJQ0FnSUNBZ0lIUnZjRG9nZEc5d0xGeHVYSFFnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBRWFIwWVdOb2JXVnVkRG9nZEdGeVoyVjBRWFIwWVdOb2JXVnVkQ3hjYmx4MElDQWdJQ0FnSUNBZ0lIUmhjbWRsZEZCdmN6b2dkR0Z5WjJWMFVHOXpMRnh1WEhRZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEZCdmN6b2daV3hsYldWdWRGQnZjeXhjYmx4MElDQWdJQ0FnSUNBZ0lHOW1abk5sZERvZ2IyWm1jMlYwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFQyWm1jMlYwT2lCMFlYSm5aWFJQWm1aelpYUXNYRzVjZENBZ0lDQWdJQ0FnSUNCdFlXNTFZV3hQWm1aelpYUTZJRzFoYm5WaGJFOW1abk5sZEN4Y2JseDBJQ0FnSUNBZ0lDQWdJRzFoYm5WaGJGUmhjbWRsZEU5bVpuTmxkRG9nYldGdWRXRnNWR0Z5WjJWMFQyWm1jMlYwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdjMk55YjJ4c1ltRnlVMmw2WlRvZ2MyTnliMnhzWW1GeVUybDZaU3hjYmx4MElDQWdJQ0FnSUNBZ0lHRjBkR0ZqYUcxbGJuUTZJSFJvYVhNdVlYUjBZV05vYldWdWRGeHVYSFFnSUNBZ0lDQWdJSDBwTzF4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0hKbGRDQTlQVDBnWm1Gc2MyVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4MElDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCeVpYUWdQVDA5SUNkMWJtUmxabWx1WldRbklIeDhJSFI1Y0dWdlppQnlaWFFnSVQwOUlDZHZZbXBsWTNRbktTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JseDBJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnZEc5d0lEMGdjbVYwTG5SdmNEdGNibHgwSUNBZ0lDQWdJQ0FnSUd4bFpuUWdQU0J5WlhRdWJHVm1kRHRjYmx4MElDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0F2THlCWFpTQmtaWE5qY21saVpTQjBhR1VnY0c5emFYUnBiMjRnZEdoeVpXVWdaR2xtWm1WeVpXNTBJSGRoZVhNZ2RHOGdaMmwyWlNCMGFHVWdiM0IwYVcxcGVtVnlYRzVjZENBZ0lDQWdJQzh2SUdFZ1kyaGhibU5sSUhSdklHUmxZMmxrWlNCMGFHVWdZbVZ6ZENCd2IzTnphV0pzWlNCM1lYa2dkRzhnY0c5emFYUnBiMjRnZEdobElHVnNaVzFsYm5SY2JseDBJQ0FnSUNBZ0x5OGdkMmwwYUNCMGFHVWdabVYzWlhOMElISmxjR0ZwYm5SekxseHVYSFFnSUNBZ0lDQjJZWElnYm1WNGRDQTlJSHRjYmx4MElDQWdJQ0FnSUNBdkx5QkpkQ2R6SUhCdmMybDBhVzl1SUhKbGJHRjBhWFpsSUhSdklIUm9aU0J3WVdkbElDaGhZbk52YkhWMFpTQndiM05wZEdsdmJtbHVaeUIzYUdWdVhHNWNkQ0FnSUNBZ0lDQWdMeThnZEdobElHVnNaVzFsYm5RZ2FYTWdZU0JqYUdsc1pDQnZaaUIwYUdVZ1ltOWtlU2xjYmx4MElDQWdJQ0FnSUNCd1lXZGxPaUI3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjBiM0E2SUhSdmNDeGNibHgwSUNBZ0lDQWdJQ0FnSUd4bFpuUTZJR3hsWm5SY2JseDBJQ0FnSUNBZ0lDQjlMRnh1WEc1Y2RDQWdJQ0FnSUNBZ0x5OGdTWFFuY3lCd2IzTnBkR2x2YmlCeVpXeGhkR2wyWlNCMGJ5QjBhR1VnZG1sbGQzQnZjblFnS0dacGVHVmtJSEJ2YzJsMGFXOXVhVzVuS1Z4dVhIUWdJQ0FnSUNBZ0lIWnBaWGR3YjNKME9pQjdYRzVjZENBZ0lDQWdJQ0FnSUNCMGIzQTZJSFJ2Y0NBdElIQmhaMlZaVDJabWMyVjBMRnh1WEhRZ0lDQWdJQ0FnSUNBZ1ltOTBkRzl0T2lCd1lXZGxXVTltWm5ObGRDQXRJSFJ2Y0NBdElHaGxhV2RvZENBcklHbHVibVZ5U0dWcFoyaDBMRnh1WEhRZ0lDQWdJQ0FnSUNBZ2JHVm1kRG9nYkdWbWRDQXRJSEJoWjJWWVQyWm1jMlYwTEZ4dVhIUWdJQ0FnSUNBZ0lDQWdjbWxuYUhRNklIQmhaMlZZVDJabWMyVjBJQzBnYkdWbWRDQXRJSGRwWkhSb0lDc2dhVzV1WlhKWGFXUjBhRnh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2ZUdGNibHh1WEhRZ0lDQWdJQ0IyWVhJZ2MyTnliMnhzWW1GeVUybDZaU0E5SUhWdVpHVm1hVzVsWkR0Y2JseDBJQ0FnSUNBZ2FXWWdLR1J2WTNWdFpXNTBMbUp2WkhrdWMyTnliMnhzVjJsa2RHZ2dQaUIzYVc1a2IzY3VhVzV1WlhKWGFXUjBhQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lITmpjbTlzYkdKaGNsTnBlbVVnUFNCMGFHbHpMbU5oWTJobEtDZHpZM0p2Ykd4aVlYSXRjMmw2WlNjc0lHZGxkRk5qY205c2JFSmhjbE5wZW1VcE8xeHVYSFFnSUNBZ0lDQWdJRzVsZUhRdWRtbGxkM0J2Y25RdVltOTBkRzl0SUMwOUlITmpjbTlzYkdKaGNsTnBlbVV1YUdWcFoyaDBPMXh1WEhRZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLR1J2WTNWdFpXNTBMbUp2WkhrdWMyTnliMnhzU0dWcFoyaDBJRDRnZDJsdVpHOTNMbWx1Ym1WeVNHVnBaMmgwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdjMk55YjJ4c1ltRnlVMmw2WlNBOUlIUm9hWE11WTJGamFHVW9KM05qY205c2JHSmhjaTF6YVhwbEp5d2daMlYwVTJOeWIyeHNRbUZ5VTJsNlpTazdYRzVjZENBZ0lDQWdJQ0FnYm1WNGRDNTJhV1YzY0c5eWRDNXlhV2RvZENBdFBTQnpZM0p2Ykd4aVlYSlRhWHBsTG5kcFpIUm9PMXh1WEhRZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLRnNuSnl3Z0ozTjBZWFJwWXlkZExtbHVaR1Y0VDJZb1pHOWpkVzFsYm5RdVltOWtlUzV6ZEhsc1pTNXdiM05wZEdsdmJpa2dQVDA5SUMweElIeDhJRnNuSnl3Z0ozTjBZWFJwWXlkZExtbHVaR1Y0VDJZb1pHOWpkVzFsYm5RdVltOWtlUzV3WVhKbGJuUkZiR1Z0Wlc1MExuTjBlV3hsTG5CdmMybDBhVzl1S1NBOVBUMGdMVEVwSUh0Y2JseDBJQ0FnSUNBZ0lDQXZMeUJCWW5OdmJIVjBaU0J3YjNOcGRHbHZibWx1WnlCcGJpQjBhR1VnWW05a2VTQjNhV3hzSUdKbElISmxiR0YwYVhabElIUnZJSFJvWlNCd1lXZGxMQ0J1YjNRZ2RHaGxJQ2RwYm1sMGFXRnNJR052Ym5SaGFXNXBibWNnWW14dlkyc25YRzVjZENBZ0lDQWdJQ0FnYm1WNGRDNXdZV2RsTG1KdmRIUnZiU0E5SUdSdlkzVnRaVzUwTG1KdlpIa3VjMk55YjJ4c1NHVnBaMmgwSUMwZ2RHOXdJQzBnYUdWcFoyaDBPMXh1WEhRZ0lDQWdJQ0FnSUc1bGVIUXVjR0ZuWlM1eWFXZG9kQ0E5SUdSdlkzVnRaVzUwTG1KdlpIa3VjMk55YjJ4c1YybGtkR2dnTFNCc1pXWjBJQzBnZDJsa2RHZzdYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIUm9hWE11YjNCMGFXOXVjeTV2Y0hScGJXbDZZWFJwYjI1eklDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBhR2x6TG05d2RHbHZibk11YjNCMGFXMXBlbUYwYVc5dWN5NXRiM1psUld4bGJXVnVkQ0FoUFQwZ1ptRnNjMlVnSmlZZ0lTaDBlWEJsYjJZZ2RHaHBjeTUwWVhKblpYUk5iMlJwWm1sbGNpQWhQVDBnSjNWdVpHVm1hVzVsWkNjcEtTQjdYRzVjZENBZ0lDQWdJQ0FnS0daMWJtTjBhVzl1SUNncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUhaaGNpQnZabVp6WlhSUVlYSmxiblFnUFNCZmRHaHBjelV1WTJGamFHVW9KM1JoY21kbGRDMXZabVp6WlhSd1lYSmxiblFuTENCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCblpYUlBabVp6WlhSUVlYSmxiblFvWDNSb2FYTTFMblJoY21kbGRDazdYRzVjZENBZ0lDQWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lDQWdJQ0FnSUhaaGNpQnZabVp6WlhSUWIzTnBkR2x2YmlBOUlGOTBhR2x6TlM1allXTm9aU2duZEdGeVoyVjBMVzltWm5ObGRIQmhjbVZ1ZEMxaWIzVnVaSE1uTENCbWRXNWpkR2x2YmlBb0tTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCblpYUkNiM1Z1WkhNb2IyWm1jMlYwVUdGeVpXNTBLVHRjYmx4MElDQWdJQ0FnSUNBZ0lIMHBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2RtRnlJRzltWm5ObGRGQmhjbVZ1ZEZOMGVXeGxJRDBnWjJWMFEyOXRjSFYwWldSVGRIbHNaU2h2Wm1aelpYUlFZWEpsYm5RcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnZG1GeUlHOW1abk5sZEZCaGNtVnVkRk5wZW1VZ1BTQnZabVp6WlhSUWIzTnBkR2x2Ymp0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnZG1GeUlHOW1abk5sZEVKdmNtUmxjaUE5SUh0OU8xeHVYSFFnSUNBZ0lDQWdJQ0FnV3lkVWIzQW5MQ0FuVEdWbWRDY3NJQ2RDYjNSMGIyMG5MQ0FuVW1sbmFIUW5YUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2h6YVdSbEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEVKdmNtUmxjbHR6YVdSbExuUnZURzkzWlhKRFlYTmxLQ2xkSUQwZ2NHRnljMlZHYkc5aGRDaHZabVp6WlhSUVlYSmxiblJUZEhsc1pWc25ZbTl5WkdWeUp5QXJJSE5wWkdVZ0t5QW5WMmxrZEdnblhTazdYRzVjZENBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1WEhRZ0lDQWdJQ0FnSUNBZ2IyWm1jMlYwVUc5emFYUnBiMjR1Y21sbmFIUWdQU0JrYjJOMWJXVnVkQzVpYjJSNUxuTmpjbTlzYkZkcFpIUm9JQzBnYjJabWMyVjBVRzl6YVhScGIyNHViR1ZtZENBdElHOW1abk5sZEZCaGNtVnVkRk5wZW1VdWQybGtkR2dnS3lCdlptWnpaWFJDYjNKa1pYSXVjbWxuYUhRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0J2Wm1aelpYUlFiM05wZEdsdmJpNWliM1IwYjIwZ1BTQmtiMk4xYldWdWRDNWliMlI1TG5OamNtOXNiRWhsYVdkb2RDQXRJRzltWm5ObGRGQnZjMmwwYVc5dUxuUnZjQ0F0SUc5bVpuTmxkRkJoY21WdWRGTnBlbVV1YUdWcFoyaDBJQ3NnYjJabWMyVjBRbTl5WkdWeUxtSnZkSFJ2YlR0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWxlSFF1Y0dGblpTNTBiM0FnUGowZ2IyWm1jMlYwVUc5emFYUnBiMjR1ZEc5d0lDc2diMlptYzJWMFFtOXlaR1Z5TG5SdmNDQW1KaUJ1WlhoMExuQmhaMlV1WW05MGRHOXRJRDQ5SUc5bVpuTmxkRkJ2YzJsMGFXOXVMbUp2ZEhSdmJTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYm1WNGRDNXdZV2RsTG14bFpuUWdQajBnYjJabWMyVjBVRzl6YVhScGIyNHViR1ZtZENBcklHOW1abk5sZEVKdmNtUmxjaTVzWldaMElDWW1JRzVsZUhRdWNHRm5aUzV5YVdkb2RDQStQU0J2Wm1aelpYUlFiM05wZEdsdmJpNXlhV2RvZENrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSjNKbElIZHBkR2hwYmlCMGFHVWdkbWx6YVdKc1pTQndZWEowSUc5bUlIUm9aU0IwWVhKblpYUW5jeUJ6WTNKdmJHd2djR0Z5Wlc1MFhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5qY205c2JGUnZjQ0E5SUc5bVpuTmxkRkJoY21WdWRDNXpZM0p2Ykd4VWIzQTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOamNtOXNiRXhsWm5RZ1BTQnZabVp6WlhSUVlYSmxiblF1YzJOeWIyeHNUR1ZtZER0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWwwSjNNZ2NHOXphWFJwYjI0Z2NtVnNZWFJwZG1VZ2RHOGdkR2hsSUhSaGNtZGxkQ2R6SUc5bVpuTmxkQ0J3WVhKbGJuUWdLR0ZpYzI5c2RYUmxJSEJ2YzJsMGFXOXVhVzVuSUhkb1pXNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYUdVZ1pXeGxiV1Z1ZENCcGN5QnRiM1psWkNCMGJ5QmlaU0JoSUdOb2FXeGtJRzltSUhSb1pTQjBZWEpuWlhRbmN5QnZabVp6WlhRZ2NHRnlaVzUwS1M1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBMbTltWm5ObGRDQTlJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmNEb2dibVY0ZEM1d1lXZGxMblJ2Y0NBdElHOW1abk5sZEZCdmMybDBhVzl1TG5SdmNDQXJJSE5qY205c2JGUnZjQ0F0SUc5bVpuTmxkRUp2Y21SbGNpNTBiM0FzWEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXWjBPaUJ1WlhoMExuQmhaMlV1YkdWbWRDQXRJRzltWm5ObGRGQnZjMmwwYVc5dUxteGxablFnS3lCelkzSnZiR3hNWldaMElDMGdiMlptYzJWMFFtOXlaR1Z5TG14bFpuUmNibHgwSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmU2tvS1R0Y2JseDBJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQzh2SUZkbElHTnZkV3hrSUdGc2MyOGdkSEpoZG1Wc0lIVndJSFJvWlNCRVQwMGdZVzVrSUhSeWVTQmxZV05vSUdOdmJuUmhhVzVwYm1jZ1kyOXVkR1Y0ZEN3Z2NtRjBhR1Z5SUhSb1lXNGdiMjVzZVZ4dVhIUWdJQ0FnSUNBdkx5QnNiMjlyYVc1bklHRjBJSFJvWlNCaWIyUjVMQ0JpZFhRZ2QyVW5jbVVnWjI5dWJtRWdaMlYwSUdScGJXbHVhWE5vYVc1bklISmxkSFZ5Ym5NdVhHNWNibHgwSUNBZ0lDQWdkR2hwY3k1dGIzWmxLRzVsZUhRcE8xeHVYRzVjZENBZ0lDQWdJSFJvYVhNdWFHbHpkRzl5ZVM1MWJuTm9hV1owS0c1bGVIUXBPMXh1WEc1Y2RDQWdJQ0FnSUdsbUlDaDBhR2x6TG1ocGMzUnZjbmt1YkdWdVozUm9JRDRnTXlrZ2UxeHVYSFFnSUNBZ0lDQWdJSFJvYVhNdWFHbHpkRzl5ZVM1d2IzQW9LVHRjYmx4MElDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lHbG1JQ2htYkhWemFFTm9ZVzVuWlhNcElIdGNibHgwSUNBZ0lDQWdJQ0JtYkhWemFDZ3BPMXh1WEhRZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjZENBZ0lDQjlYRzVjYmx4MElDQWdJQzh2SUZSSVJTQkpVMU5WUlZ4dVhIUWdJSDBzSUh0Y2JseDBJQ0FnSUd0bGVUb2dKMjF2ZG1VbkxGeHVYSFFnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUcxdmRtVW9jRzl6S1NCN1hHNWNkQ0FnSUNBZ0lIWmhjaUJmZEdocGN6WWdQU0IwYUdsek8xeHVYRzVjZENBZ0lDQWdJR2xtSUNnaEtIUjVjR1Z2WmlCMGFHbHpMbVZzWlcxbGJuUXVjR0Z5Wlc1MFRtOWtaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BLU0I3WEc1Y2RDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dVhIUWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdkbUZ5SUhOaGJXVWdQU0I3ZlR0Y2JseHVYSFFnSUNBZ0lDQm1iM0lnS0haaGNpQjBlWEJsSUdsdUlIQnZjeWtnZTF4dVhIUWdJQ0FnSUNBZ0lITmhiV1ZiZEhsd1pWMGdQU0I3ZlR0Y2JseHVYSFFnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQndiM05iZEhsd1pWMHBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lIWmhjaUJtYjNWdVpDQTlJR1poYkhObE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YUdsemRHOXllUzVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjRzlwYm5RZ1BTQjBhR2x6TG1ocGMzUnZjbmxiYVYwN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NHOXBiblJiZEhsd1pWMGdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JQ0YzYVhSb2FXNG9jRzlwYm5SYmRIbHdaVjFiYTJWNVhTd2djRzl6VzNSNWNHVmRXMnRsZVYwcEtTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lDQWdabTkxYm1RZ1BTQjBjblZsTzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUdsbUlDZ2habTkxYm1RcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2MyRnRaVnQwZVhCbFhWdHJaWGxkSUQwZ2RISjFaVHRjYmx4MElDQWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQjJZWElnWTNOeklEMGdleUIwYjNBNklDY25MQ0JzWldaME9pQW5KeXdnY21sbmFIUTZJQ2NuTENCaWIzUjBiMjA2SUNjbklIMDdYRzVjYmx4MElDQWdJQ0FnZG1GeUlIUnlZVzV6WTNKcFltVWdQU0JtZFc1amRHbHZiaUIwY21GdWMyTnlhV0psS0Y5ellXMWxMQ0JmY0c5ektTQjdYRzVjZENBZ0lDQWdJQ0FnZG1GeUlHaGhjMDl3ZEdsdGFYcGhkR2x2Ym5NZ1BTQjBlWEJsYjJZZ1gzUm9hWE0yTG05d2RHbHZibk11YjNCMGFXMXBlbUYwYVc5dWN5QWhQVDBnSjNWdVpHVm1hVzVsWkNjN1hHNWNkQ0FnSUNBZ0lDQWdkbUZ5SUdkd2RTQTlJR2hoYzA5d2RHbHRhWHBoZEdsdmJuTWdQeUJmZEdocGN6WXViM0IwYVc5dWN5NXZjSFJwYldsNllYUnBiMjV6TG1kd2RTQTZJRzUxYkd3N1hHNWNkQ0FnSUNBZ0lDQWdhV1lnS0dkd2RTQWhQVDBnWm1Gc2MyVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lIWmhjaUI1VUc5eklEMGdkVzVrWldacGJtVmtMRnh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJSGhRYjNNZ1BTQjFibVJsWm1sdVpXUTdYRzVjZENBZ0lDQWdJQ0FnSUNCcFppQW9YM05oYldVdWRHOXdLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR056Y3k1MGIzQWdQU0F3TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I1VUc5eklEMGdYM0J2Y3k1MGIzQTdYRzVjZENBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0JqYzNNdVltOTBkRzl0SUQwZ01EdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2VWQnZjeUE5SUMxZmNHOXpMbUp2ZEhSdmJUdGNibHgwSUNBZ0lDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQWdJQ0FnYVdZZ0tGOXpZVzFsTG14bFpuUXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdZM056TG14bFpuUWdQU0F3TzF4dVhIUWdJQ0FnSUNBZ0lDQWdJQ0I0VUc5eklEMGdYM0J2Y3k1c1pXWjBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWTNOekxuSnBaMmgwSUQwZ01EdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2VGQnZjeUE5SUMxZmNHOXpMbkpwWjJoME8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0JqYzNOYmRISmhibk5tYjNKdFMyVjVYU0E5SUNkMGNtRnVjMnhoZEdWWUtDY2dLeUJOWVhSb0xuSnZkVzVrS0hoUWIzTXBJQ3NnSjNCNEtTQjBjbUZ1YzJ4aGRHVlpLQ2NnS3lCTllYUm9Mbkp2ZFc1a0tIbFFiM01wSUNzZ0ozQjRLU2M3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJR2xtSUNoMGNtRnVjMlp2Y20xTFpYa2dJVDA5SUNkdGMxUnlZVzV6Wm05eWJTY3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdMeThnVkdobElGb2dkSEpoYm5ObWIzSnRJSGRwYkd3Z2EyVmxjQ0IwYUdseklHbHVJSFJvWlNCSFVGVWdLR1poYzNSbGNpd2dZVzVrSUhCeVpYWmxiblJ6SUdGeWRHbG1ZV04wY3lrc1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHSjFkQ0JKUlRrZ1pHOWxjMjRuZENCemRYQndiM0owSUROa0lIUnlZVzV6Wm05eWJYTWdZVzVrSUhkcGJHd2dZMmh2YTJVdVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdOemMxdDBjbUZ1YzJadmNtMUxaWGxkSUNzOUlGd2lJSFJ5WVc1emJHRjBaVm9vTUNsY0lqdGNibHgwSUNBZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnYVdZZ0tGOXpZVzFsTG5SdmNDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmpjM011ZEc5d0lEMGdYM0J2Y3k1MGIzQWdLeUFuY0hnbk8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdZM056TG1KdmRIUnZiU0E5SUY5d2IzTXVZbTkwZEc5dElDc2dKM0I0Snp0Y2JseDBJQ0FnSUNBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNBZ0lDQWdhV1lnS0Y5ellXMWxMbXhsWm5RcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1kzTnpMbXhsWm5RZ1BTQmZjRzl6TG14bFpuUWdLeUFuY0hnbk8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdZM056TG5KcFoyaDBJRDBnWDNCdmN5NXlhV2RvZENBcklDZHdlQ2M3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNCOU8xeHVYRzVjZENBZ0lDQWdJSFpoY2lCdGIzWmxaQ0E5SUdaaGJITmxPMXh1WEhRZ0lDQWdJQ0JwWmlBb0tITmhiV1V1Y0dGblpTNTBiM0FnZkh3Z2MyRnRaUzV3WVdkbExtSnZkSFJ2YlNrZ0ppWWdLSE5oYldVdWNHRm5aUzVzWldaMElIeDhJSE5oYldVdWNHRm5aUzV5YVdkb2RDa3BJSHRjYmx4MElDQWdJQ0FnSUNCamMzTXVjRzl6YVhScGIyNGdQU0FuWVdKemIyeDFkR1VuTzF4dVhIUWdJQ0FnSUNBZ0lIUnlZVzV6WTNKcFltVW9jMkZ0WlM1d1lXZGxMQ0J3YjNNdWNHRm5aU2s3WEc1Y2RDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0tITmhiV1V1ZG1sbGQzQnZjblF1ZEc5d0lIeDhJSE5oYldVdWRtbGxkM0J2Y25RdVltOTBkRzl0S1NBbUppQW9jMkZ0WlM1MmFXVjNjRzl5ZEM1c1pXWjBJSHg4SUhOaGJXVXVkbWxsZDNCdmNuUXVjbWxuYUhRcEtTQjdYRzVjZENBZ0lDQWdJQ0FnWTNOekxuQnZjMmwwYVc5dUlEMGdKMlpwZUdWa0p6dGNibHgwSUNBZ0lDQWdJQ0IwY21GdWMyTnlhV0psS0hOaGJXVXVkbWxsZDNCdmNuUXNJSEJ2Y3k1MmFXVjNjRzl5ZENrN1hHNWNkQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlITmhiV1V1YjJabWMyVjBJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJ6WVcxbExtOW1abk5sZEM1MGIzQWdKaVlnYzJGdFpTNXZabVp6WlhRdWJHVm1kQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQmpjM011Y0c5emFYUnBiMjRnUFNBbllXSnpiMngxZEdVbk8xeHVYSFFnSUNBZ0lDQWdJQ0FnZG1GeUlHOW1abk5sZEZCaGNtVnVkQ0E5SUY5MGFHbHpOaTVqWVdOb1pTZ25kR0Z5WjJWMExXOW1abk5sZEhCaGNtVnVkQ2NzSUdaMWJtTjBhVzl1SUNncElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdkbGRFOW1abk5sZEZCaGNtVnVkQ2hmZEdocGN6WXVkR0Z5WjJWMEtUdGNibHgwSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNCcFppQW9aMlYwVDJabWMyVjBVR0Z5Wlc1MEtGOTBhR2x6Tmk1bGJHVnRaVzUwS1NBaFBUMGdiMlptYzJWMFVHRnlaVzUwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptVnlLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjell1Wld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsTG5KbGJXOTJaVU5vYVd4a0tGOTBhR2x6Tmk1bGJHVnRaVzUwS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFJRWVhKbGJuUXVZWEJ3Wlc1a1EyaHBiR1FvWDNSb2FYTTJMbVZzWlcxbGJuUXBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4MElDQWdJQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0FnSUNBZ2RISmhibk5qY21saVpTaHpZVzFsTG05bVpuTmxkQ3dnY0c5ekxtOW1abk5sZENrN1hHNWNkQ0FnSUNBZ0lDQWdJQ0J0YjNabFpDQTlJSFJ5ZFdVN1hHNWNkQ0FnSUNBZ0lDQWdmU2tvS1R0Y2JseDBJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQmpjM011Y0c5emFYUnBiMjRnUFNBbllXSnpiMngxZEdVbk8xeHVYSFFnSUNBZ0lDQWdJSFJ5WVc1elkzSnBZbVVvZXlCMGIzQTZJSFJ5ZFdVc0lHeGxablE2SUhSeWRXVWdmU3dnY0c5ekxuQmhaMlVwTzF4dVhIUWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdhV1lnS0NGdGIzWmxaQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJ2Wm1aelpYUlFZWEpsYm5SSmMwSnZaSGtnUFNCMGNuVmxPMXh1WEhRZ0lDQWdJQ0FnSUhaaGNpQmpkWEp5Wlc1MFRtOWtaU0E5SUhSb2FYTXVaV3hsYldWdWRDNXdZWEpsYm5ST2IyUmxPMXh1WEhRZ0lDQWdJQ0FnSUhkb2FXeGxJQ2hqZFhKeVpXNTBUbTlrWlNBbUppQmpkWEp5Wlc1MFRtOWtaUzUwWVdkT1lXMWxJQ0U5UFNBblFrOUVXU2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJR2xtSUNoblpYUkRiMjF3ZFhSbFpGTjBlV3hsS0dOMWNuSmxiblJPYjJSbEtTNXdiM05wZEdsdmJpQWhQVDBnSjNOMFlYUnBZeWNwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYjJabWMyVjBVR0Z5Wlc1MFNYTkNiMlI1SUQwZ1ptRnNjMlU3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBUbTlrWlNBOUlHTjFjbkpsYm5ST2IyUmxMbkJoY21WdWRFNXZaR1U3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tDRnZabVp6WlhSUVlYSmxiblJKYzBKdlpIa3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsTG5KbGJXOTJaVU5vYVd4a0tIUm9hWE11Wld4bGJXVnVkQ2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWliMlI1TG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11Wld4bGJXVnVkQ2s3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnTHk4Z1FXNTVJR056Y3lCamFHRnVaMlVnZDJsc2JDQjBjbWxuWjJWeUlHRWdjbVZ3WVdsdWRDd2djMjhnYkdWMEozTWdZWFp2YVdRZ2IyNWxJR2xtSUc1dmRHaHBibWNnWTJoaGJtZGxaRnh1WEhRZ0lDQWdJQ0IyWVhJZ2QzSnBkR1ZEVTFNZ1BTQjdmVHRjYmx4MElDQWdJQ0FnZG1GeUlIZHlhWFJsSUQwZ1ptRnNjMlU3WEc1Y2RDQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJqYzNNcElIdGNibHgwSUNBZ0lDQWdJQ0IyWVhJZ2RtRnNJRDBnWTNOelcydGxlVjA3WEc1Y2RDQWdJQ0FnSUNBZ2RtRnlJR1ZzVm1Gc0lEMGdkR2hwY3k1bGJHVnRaVzUwTG5OMGVXeGxXMnRsZVYwN1hHNWNibHgwSUNBZ0lDQWdJQ0JwWmlBb1pXeFdZV3dnSVQwOUlDY25JQ1ltSUhaaGJDQWhQVDBnSnljZ0ppWWdXeWQwYjNBbkxDQW5iR1ZtZENjc0lDZGliM1IwYjIwbkxDQW5jbWxuYUhRblhTNXBibVJsZUU5bUtHdGxlU2tnUGowZ01Da2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ1pXeFdZV3dnUFNCd1lYSnpaVVpzYjJGMEtHVnNWbUZzS1R0Y2JseDBJQ0FnSUNBZ0lDQWdJSFpoYkNBOUlIQmhjbk5sUm14dllYUW9kbUZzS1R0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnSUNCcFppQW9aV3hXWVd3Z0lUMDlJSFpoYkNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnZDNKcGRHVWdQU0IwY25WbE8xeHVYSFFnSUNBZ0lDQWdJQ0FnZDNKcGRHVkRVMU5iYTJWNVhTQTlJSFpoYkR0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9kM0pwZEdVcElIdGNibHgwSUNBZ0lDQWdJQ0JrWldabGNpaG1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQmxlSFJsYm1Rb1gzUm9hWE0yTG1Wc1pXMWxiblF1YzNSNWJHVXNJSGR5YVhSbFExTlRLVHRjYmx4MElDQWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lDQWdmVnh1WEhRZ0lDQWdmVnh1WEhRZ0lIMWRLVHRjYmx4dVhIUWdJSEpsZEhWeWJpQlVaWFJvWlhKRGJHRnpjenRjYmx4MGZTa29LVHRjYmx4dVhIUlVaWFJvWlhKRGJHRnpjeTV0YjJSMWJHVnpJRDBnVzEwN1hHNWNibHgwVkdWMGFHVnlRbUZ6WlM1d2IzTnBkR2x2YmlBOUlIQnZjMmwwYVc5dU8xeHVYRzVjZEhaaGNpQlVaWFJvWlhJZ1BTQmxlSFJsYm1Rb1ZHVjBhR1Z5UTJ4aGMzTXNJRlJsZEdobGNrSmhjMlVwTzF4dVhIUXZLaUJuYkc5aVlXeHpJRlJsZEdobGNrSmhjMlVnS2k5Y2JseHVYSFFuZFhObElITjBjbWxqZENjN1hHNWNibHgwZG1GeUlGOXpiR2xqWldSVWIwRnljbUY1SUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHNnWm5WdVkzUnBiMjRnYzJ4cFkyVkpkR1Z5WVhSdmNpaGhjbklzSUdrcElIc2dkbUZ5SUY5aGNuSWdQU0JiWFRzZ2RtRnlJRjl1SUQwZ2RISjFaVHNnZG1GeUlGOWtJRDBnWm1Gc2MyVTdJSFpoY2lCZlpTQTlJSFZ1WkdWbWFXNWxaRHNnZEhKNUlIc2dabTl5SUNoMllYSWdYMmtnUFNCaGNuSmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JmY3pzZ0lTaGZiaUE5SUNoZmN5QTlJRjlwTG01bGVIUW9LU2t1Wkc5dVpTazdJRjl1SUQwZ2RISjFaU2tnZXlCZllYSnlMbkIxYzJnb1gzTXVkbUZzZFdVcE95QnBaaUFvYVNBbUppQmZZWEp5TG14bGJtZDBhQ0E5UFQwZ2FTa2dZbkpsWVdzN0lIMGdmU0JqWVhSamFDQW9aWEp5S1NCN0lGOWtJRDBnZEhKMVpUc2dYMlVnUFNCbGNuSTdJSDBnWm1sdVlXeHNlU0I3SUhSeWVTQjdJR2xtSUNnaFgyNGdKaVlnWDJsYkozSmxkSFZ5YmlkZEtTQmZhVnNuY21WMGRYSnVKMTBvS1RzZ2ZTQm1hVzVoYkd4NUlIc2dhV1lnS0Y5a0tTQjBhSEp2ZHlCZlpUc2dmU0I5SUhKbGRIVnliaUJmWVhKeU95QjlJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9ZWEp5TENCcEtTQjdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR0Z5Y2lrcElIc2djbVYwZFhKdUlHRnljanNnZlNCbGJITmxJR2xtSUNoVGVXMWliMnd1YVhSbGNtRjBiM0lnYVc0Z1QySnFaV04wS0dGeWNpa3BJSHNnY21WMGRYSnVJSE5zYVdObFNYUmxjbUYwYjNJb1lYSnlMQ0JwS1RzZ2ZTQmxiSE5sSUhzZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25TVzUyWVd4cFpDQmhkSFJsYlhCMElIUnZJR1JsYzNSeWRXTjBkWEpsSUc1dmJpMXBkR1Z5WVdKc1pTQnBibk4wWVc1alpTY3BPeUI5SUgwN0lIMHBLQ2s3WEc1Y2JseDBkbUZ5SUY5VVpYUm9aWEpDWVhObEpGVjBhV3h6SUQwZ1ZHVjBhR1Z5UW1GelpTNVZkR2xzY3p0Y2JseDBkbUZ5SUdkbGRFSnZkVzVrY3lBOUlGOVVaWFJvWlhKQ1lYTmxKRlYwYVd4ekxtZGxkRUp2ZFc1a2N6dGNibHgwZG1GeUlHVjRkR1Z1WkNBOUlGOVVaWFJvWlhKQ1lYTmxKRlYwYVd4ekxtVjRkR1Z1WkR0Y2JseDBkbUZ5SUhWd1pHRjBaVU5zWVhOelpYTWdQU0JmVkdWMGFHVnlRbUZ6WlNSVmRHbHNjeTUxY0dSaGRHVkRiR0Z6YzJWek8xeHVYSFIyWVhJZ1pHVm1aWElnUFNCZlZHVjBhR1Z5UW1GelpTUlZkR2xzY3k1a1pXWmxjanRjYmx4dVhIUjJZWElnUWs5VlRrUlRYMFpQVWsxQlZDQTlJRnNuYkdWbWRDY3NJQ2QwYjNBbkxDQW5jbWxuYUhRbkxDQW5ZbTkwZEc5dEoxMDdYRzVjYmx4MFpuVnVZM1JwYjI0Z1oyVjBRbTkxYm1ScGJtZFNaV04wS0hSbGRHaGxjaXdnZEc4cElIdGNibHgwSUNCcFppQW9kRzhnUFQwOUlDZHpZM0p2Ykd4UVlYSmxiblFuS1NCN1hHNWNkQ0FnSUNCMGJ5QTlJSFJsZEdobGNpNXpZM0p2Ykd4UVlYSmxiblE3WEc1Y2RDQWdmU0JsYkhObElHbG1JQ2gwYnlBOVBUMGdKM2RwYm1SdmR5Y3BJSHRjYmx4MElDQWdJSFJ2SUQwZ1czQmhaMlZZVDJabWMyVjBMQ0J3WVdkbFdVOW1abk5sZEN3Z2FXNXVaWEpYYVdSMGFDQXJJSEJoWjJWWVQyWm1jMlYwTENCcGJtNWxja2hsYVdkb2RDQXJJSEJoWjJWWlQyWm1jMlYwWFR0Y2JseDBJQ0I5WEc1Y2JseDBJQ0JwWmlBb2RHOGdQVDA5SUdSdlkzVnRaVzUwS1NCN1hHNWNkQ0FnSUNCMGJ5QTlJSFJ2TG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmx4MElDQjlYRzVjYmx4MElDQnBaaUFvZEhsd1pXOW1JSFJ2TG01dlpHVlVlWEJsSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dVhIUWdJQ0FnS0daMWJtTjBhVzl1SUNncElIdGNibHgwSUNBZ0lDQWdkbUZ5SUhOcGVtVWdQU0JuWlhSQ2IzVnVaSE1vZEc4cE8xeHVYSFFnSUNBZ0lDQjJZWElnY0c5eklEMGdjMmw2WlR0Y2JseDBJQ0FnSUNBZ2RtRnlJSE4wZVd4bElEMGdaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaDBieWs3WEc1Y2JseDBJQ0FnSUNBZ2RHOGdQU0JiY0c5ekxteGxablFzSUhCdmN5NTBiM0FzSUhOcGVtVXVkMmxrZEdnZ0t5QndiM011YkdWbWRDd2djMmw2WlM1b1pXbG5hSFFnS3lCd2IzTXVkRzl3WFR0Y2JseHVYSFFnSUNBZ0lDQkNUMVZPUkZOZlJrOVNUVUZVTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hOcFpHVXNJR2twSUh0Y2JseDBJQ0FnSUNBZ0lDQnphV1JsSUQwZ2MybGtaVnN3WFM1MGIxVndjR1Z5UTJGelpTZ3BJQ3NnYzJsa1pTNXpkV0p6ZEhJb01TazdYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tITnBaR1VnUFQwOUlDZFViM0FuSUh4OElITnBaR1VnUFQwOUlDZE1aV1owSnlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnZEc5YmFWMGdLejBnY0dGeWMyVkdiRzloZENoemRIbHNaVnNuWW05eVpHVnlKeUFySUhOcFpHVWdLeUFuVjJsa2RHZ25YU2s3WEc1Y2RDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJSFJ2VzJsZElDMDlJSEJoY25ObFJteHZZWFFvYzNSNWJHVmJKMkp2Y21SbGNpY2dLeUJ6YVdSbElDc2dKMWRwWkhSb0oxMHBPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQjlLU2dwTzF4dVhIUWdJSDFjYmx4dVhIUWdJSEpsZEhWeWJpQjBienRjYmx4MGZWeHVYRzVjZEZSbGRHaGxja0poYzJVdWJXOWtkV3hsY3k1d2RYTm9LSHRjYmx4MElDQndiM05wZEdsdmJqb2dablZ1WTNScGIyNGdjRzl6YVhScGIyNG9YM0psWmlrZ2UxeHVYSFFnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVYSFFnSUNBZ2RtRnlJSFJ2Y0NBOUlGOXlaV1l1ZEc5d08xeHVYSFFnSUNBZ2RtRnlJR3hsWm5RZ1BTQmZjbVZtTG14bFpuUTdYRzVjZENBZ0lDQjJZWElnZEdGeVoyVjBRWFIwWVdOb2JXVnVkQ0E5SUY5eVpXWXVkR0Z5WjJWMFFYUjBZV05vYldWdWREdGNibHh1WEhRZ0lDQWdhV1lnS0NGMGFHbHpMbTl3ZEdsdmJuTXVZMjl1YzNSeVlXbHVkSE1wSUh0Y2JseDBJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjZENBZ0lDQjlYRzVjYmx4MElDQWdJSFpoY2lCZlkyRmphR1VnUFNCMGFHbHpMbU5oWTJobEtDZGxiR1Z0Wlc1MExXSnZkVzVrY3ljc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmx4MElDQWdJQ0FnY21WMGRYSnVJR2RsZEVKdmRXNWtjeWhmZEdocGN5NWxiR1Z0Wlc1MEtUdGNibHgwSUNBZ0lIMHBPMXh1WEc1Y2RDQWdJQ0IyWVhJZ2FHVnBaMmgwSUQwZ1gyTmhZMmhsTG1obGFXZG9kRHRjYmx4MElDQWdJSFpoY2lCM2FXUjBhQ0E5SUY5allXTm9aUzUzYVdSMGFEdGNibHh1WEhRZ0lDQWdhV1lnS0hkcFpIUm9JRDA5UFNBd0lDWW1JR2hsYVdkb2RDQTlQVDBnTUNBbUppQjBlWEJsYjJZZ2RHaHBjeTVzWVhOMFUybDZaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmx4MElDQWdJQ0FnZG1GeUlGOXNZWE4wVTJsNlpTQTlJSFJvYVhNdWJHRnpkRk5wZW1VN1hHNWNibHgwSUNBZ0lDQWdMeThnU0dGdVpHeGxJSFJvWlNCcGRHVnRJR2RsZEhScGJtY2dhR2xrWkdWdUlHRnpJR0VnY21WemRXeDBJRzltSUc5MWNpQndiM05wZEdsdmJtbHVaeUIzYVhSb2IzVjBJR2RzYVhSamFHbHVaMXh1WEhRZ0lDQWdJQ0F2THlCMGFHVWdZMnhoYzNObGN5QnBiaUJoYm1RZ2IzVjBYRzVjZENBZ0lDQWdJSGRwWkhSb0lEMGdYMnhoYzNSVGFYcGxMbmRwWkhSb08xeHVYSFFnSUNBZ0lDQm9aV2xuYUhRZ1BTQmZiR0Z6ZEZOcGVtVXVhR1ZwWjJoME8xeHVYSFFnSUNBZ2ZWeHVYRzVjZENBZ0lDQjJZWElnZEdGeVoyVjBVMmw2WlNBOUlIUm9hWE11WTJGamFHVW9KM1JoY21kbGRDMWliM1Z1WkhNbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc1Y2RDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NW5aWFJVWVhKblpYUkNiM1Z1WkhNb0tUdGNibHgwSUNBZ0lIMHBPMXh1WEc1Y2RDQWdJQ0IyWVhJZ2RHRnlaMlYwU0dWcFoyaDBJRDBnZEdGeVoyVjBVMmw2WlM1b1pXbG5hSFE3WEc1Y2RDQWdJQ0IyWVhJZ2RHRnlaMlYwVjJsa2RHZ2dQU0IwWVhKblpYUlRhWHBsTG5kcFpIUm9PMXh1WEc1Y2RDQWdJQ0IyWVhJZ1lXeHNRMnhoYzNObGN5QTlJRnQwYUdsekxtZGxkRU5zWVhOektDZHdhVzV1WldRbktTd2dkR2hwY3k1blpYUkRiR0Z6Y3lnbmIzVjBMVzltTFdKdmRXNWtjeWNwWFR0Y2JseHVYSFFnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbU52Ym5OMGNtRnBiblJ6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dOdmJuTjBjbUZwYm5RcElIdGNibHgwSUNBZ0lDQWdkbUZ5SUc5MWRFOW1RbTkxYm1SelEyeGhjM01nUFNCamIyNXpkSEpoYVc1MExtOTFkRTltUW05MWJtUnpRMnhoYzNNN1hHNWNkQ0FnSUNBZ0lIWmhjaUJ3YVc1dVpXUkRiR0Z6Y3lBOUlHTnZibk4wY21GcGJuUXVjR2x1Ym1Wa1EyeGhjM003WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLRzkxZEU5bVFtOTFibVJ6UTJ4aGMzTXBJSHRjYmx4MElDQWdJQ0FnSUNCaGJHeERiR0Z6YzJWekxuQjFjMmdvYjNWMFQyWkNiM1Z1WkhORGJHRnpjeWs3WEc1Y2RDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2FXWWdLSEJwYm01bFpFTnNZWE56S1NCN1hHNWNkQ0FnSUNBZ0lDQWdZV3hzUTJ4aGMzTmxjeTV3ZFhOb0tIQnBibTVsWkVOc1lYTnpLVHRjYmx4MElDQWdJQ0FnZlZ4dVhIUWdJQ0FnZlNrN1hHNWNibHgwSUNBZ0lHRnNiRU5zWVhOelpYTXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ZMnh6S1NCN1hHNWNkQ0FnSUNBZ0lGc25iR1ZtZENjc0lDZDBiM0FuTENBbmNtbG5hSFFuTENBblltOTBkRzl0SjEwdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2MybGtaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lHRnNiRU5zWVhOelpYTXVjSFZ6YUNoamJITWdLeUFuTFNjZ0t5QnphV1JsS1R0Y2JseDBJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQjlLVHRjYmx4dVhIUWdJQ0FnZG1GeUlHRmtaRU5zWVhOelpYTWdQU0JiWFR0Y2JseHVYSFFnSUNBZ2RtRnlJSFJCZEhSaFkyaHRaVzUwSUQwZ1pYaDBaVzVrS0h0OUxDQjBZWEpuWlhSQmRIUmhZMmh0Wlc1MEtUdGNibHgwSUNBZ0lIWmhjaUJsUVhSMFlXTm9iV1Z1ZENBOUlHVjRkR1Z1WkNoN2ZTd2dkR2hwY3k1aGRIUmhZMmh0Wlc1MEtUdGNibHh1WEhRZ0lDQWdkR2hwY3k1dmNIUnBiMjV6TG1OdmJuTjBjbUZwYm5SekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHTnZibk4wY21GcGJuUXBJSHRjYmx4MElDQWdJQ0FnZG1GeUlIUnZJRDBnWTI5dWMzUnlZV2x1ZEM1MGJ6dGNibHgwSUNBZ0lDQWdkbUZ5SUdGMGRHRmphRzFsYm5RZ1BTQmpiMjV6ZEhKaGFXNTBMbUYwZEdGamFHMWxiblE3WEc1Y2RDQWdJQ0FnSUhaaGNpQndhVzRnUFNCamIyNXpkSEpoYVc1MExuQnBianRjYmx4dVhIUWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHRjBkR0ZqYUcxbGJuUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQWdJQ0FnWVhSMFlXTm9iV1Z1ZENBOUlDY25PMXh1WEhRZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ2RtRnlJR05vWVc1blpVRjBkR0ZqYUZnZ1BTQjFibVJsWm1sdVpXUXNYRzVjZENBZ0lDQWdJQ0FnSUNCamFHRnVaMlZCZEhSaFkyaFpJRDBnZFc1a1pXWnBibVZrTzF4dVhIUWdJQ0FnSUNCcFppQW9ZWFIwWVdOb2JXVnVkQzVwYm1SbGVFOW1LQ2NnSnlrZ1BqMGdNQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lIWmhjaUJmWVhSMFlXTm9iV1Z1ZENSemNHeHBkQ0E5SUdGMGRHRmphRzFsYm5RdWMzQnNhWFFvSnlBbktUdGNibHh1WEhRZ0lDQWdJQ0FnSUhaaGNpQmZZWFIwWVdOb2JXVnVkQ1J6Y0d4cGRESWdQU0JmYzJ4cFkyVmtWRzlCY25KaGVTaGZZWFIwWVdOb2JXVnVkQ1J6Y0d4cGRDd2dNaWs3WEc1Y2JseDBJQ0FnSUNBZ0lDQmphR0Z1WjJWQmRIUmhZMmhaSUQwZ1gyRjBkR0ZqYUcxbGJuUWtjM0JzYVhReVd6QmRPMXh1WEhRZ0lDQWdJQ0FnSUdOb1lXNW5aVUYwZEdGamFGZ2dQU0JmWVhSMFlXTm9iV1Z1ZENSemNHeHBkREpiTVYwN1hHNWNkQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdZMmhoYm1kbFFYUjBZV05vV0NBOUlHTm9ZVzVuWlVGMGRHRmphRmtnUFNCaGRIUmhZMmh0Wlc1ME8xeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnZG1GeUlHSnZkVzVrY3lBOUlHZGxkRUp2ZFc1a2FXNW5VbVZqZENoZmRHaHBjeXdnZEc4cE8xeHVYRzVjZENBZ0lDQWdJR2xtSUNoamFHRnVaMlZCZEhSaFkyaFpJRDA5UFNBbmRHRnlaMlYwSnlCOGZDQmphR0Z1WjJWQmRIUmhZMmhaSUQwOVBTQW5ZbTkwYUNjcElIdGNibHgwSUNBZ0lDQWdJQ0JwWmlBb2RHOXdJRHdnWW05MWJtUnpXekZkSUNZbUlIUkJkSFJoWTJodFpXNTBMblJ2Y0NBOVBUMGdKM1J2Y0NjcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUhSdmNDQXJQU0IwWVhKblpYUklaV2xuYUhRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0IwUVhSMFlXTm9iV1Z1ZEM1MGIzQWdQU0FuWW05MGRHOXRKenRjYmx4MElDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0JwWmlBb2RHOXdJQ3NnYUdWcFoyaDBJRDRnWW05MWJtUnpXek5kSUNZbUlIUkJkSFJoWTJodFpXNTBMblJ2Y0NBOVBUMGdKMkp2ZEhSdmJTY3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lIUnZjQ0F0UFNCMFlYSm5aWFJJWldsbmFIUTdYRzVjZENBZ0lDQWdJQ0FnSUNCMFFYUjBZV05vYldWdWRDNTBiM0FnUFNBbmRHOXdKenRjYmx4MElDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0JwWmlBb1kyaGhibWRsUVhSMFlXTm9XU0E5UFQwZ0ozUnZaMlYwYUdWeUp5a2dlMXh1WEhRZ0lDQWdJQ0FnSUdsbUlDaDBiM0FnUENCaWIzVnVaSE5iTVYwZ0ppWWdkRUYwZEdGamFHMWxiblF1ZEc5d0lEMDlQU0FuZEc5d0p5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZCZEhSaFkyaHRaVzUwTG5SdmNDQTlQVDBnSjJKdmRIUnZiU2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEc5d0lDczlJSFJoY21kbGRFaGxhV2RvZER0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEVGMGRHRmphRzFsYm5RdWRHOXdJRDBnSjJKdmRIUnZiU2M3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEc5d0lDczlJR2hsYVdkb2REdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1pVRjBkR0ZqYUcxbGJuUXVkRzl3SUQwZ0ozUnZjQ2M3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1ZCZEhSaFkyaHRaVzUwTG5SdmNDQTlQVDBnSjNSdmNDY3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkRzl3SUNzOUlIUmhjbWRsZEVobGFXZG9kRHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkRUYwZEdGamFHMWxiblF1ZEc5d0lEMGdKMkp2ZEhSdmJTYzdYRzVjYmx4MElDQWdJQ0FnSUNBZ0lDQWdkRzl3SUMwOUlHaGxhV2RvZER0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWlVGMGRHRmphRzFsYm5RdWRHOXdJRDBnSjJKdmRIUnZiU2M3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0hSdmNDQXJJR2hsYVdkb2RDQStJR0p2ZFc1a2Mxc3pYU0FtSmlCMFFYUjBZV05vYldWdWRDNTBiM0FnUFQwOUlDZGliM1IwYjIwbktTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCcFppQW9aVUYwZEdGamFHMWxiblF1ZEc5d0lEMDlQU0FuZEc5d0p5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBiM0FnTFQwZ2RHRnlaMlYwU0dWcFoyaDBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBRWFIwWVdOb2JXVnVkQzUwYjNBZ1BTQW5kRzl3Snp0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMGIzQWdMVDBnYUdWcFoyaDBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmxRWFIwWVdOb2JXVnVkQzUwYjNBZ1BTQW5ZbTkwZEc5dEp6dGNibHgwSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pVRjBkR0ZqYUcxbGJuUXVkRzl3SUQwOVBTQW5ZbTkwZEc5dEp5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBiM0FnTFQwZ2RHRnlaMlYwU0dWcFoyaDBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBRWFIwWVdOb2JXVnVkQzUwYjNBZ1BTQW5kRzl3Snp0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMGIzQWdLejBnYUdWcFoyaDBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmxRWFIwWVdOb2JXVnVkQzUwYjNBZ1BTQW5kRzl3Snp0Y2JseDBJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0JwWmlBb2RFRjBkR0ZqYUcxbGJuUXVkRzl3SUQwOVBTQW5iV2xrWkd4bEp5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ2Y0NBcklHaGxhV2RvZENBK0lHSnZkVzVrYzFzelhTQW1KaUJsUVhSMFlXTm9iV1Z1ZEM1MGIzQWdQVDA5SUNkMGIzQW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0NBdFBTQm9aV2xuYUhRN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdWQmRIUmhZMmh0Wlc1MExuUnZjQ0E5SUNkaWIzUjBiMjBuTzF4dVhIUWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwYjNBZ1BDQmliM1Z1WkhOYk1WMGdKaVlnWlVGMGRHRmphRzFsYm5RdWRHOXdJRDA5UFNBblltOTBkRzl0SnlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCMGIzQWdLejBnYUdWcFoyaDBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmxRWFIwWVdOb2JXVnVkQzUwYjNBZ1BTQW5kRzl3Snp0Y2JseDBJQ0FnSUNBZ0lDQWdJSDFjYmx4MElDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0JwWmlBb1kyaGhibWRsUVhSMFlXTm9XQ0E5UFQwZ0ozUmhjbWRsZENjZ2ZId2dZMmhoYm1kbFFYUjBZV05vV0NBOVBUMGdKMkp2ZEdnbktTQjdYRzVjZENBZ0lDQWdJQ0FnYVdZZ0tHeGxablFnUENCaWIzVnVaSE5iTUYwZ0ppWWdkRUYwZEdGamFHMWxiblF1YkdWbWRDQTlQVDBnSjJ4bFpuUW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQnNaV1owSUNzOUlIUmhjbWRsZEZkcFpIUm9PMXh1WEhRZ0lDQWdJQ0FnSUNBZ2RFRjBkR0ZqYUcxbGJuUXViR1ZtZENBOUlDZHlhV2RvZENjN1hHNWNkQ0FnSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUNBZ2FXWWdLR3hsWm5RZ0t5QjNhV1IwYUNBK0lHSnZkVzVrYzFzeVhTQW1KaUIwUVhSMFlXTm9iV1Z1ZEM1c1pXWjBJRDA5UFNBbmNtbG5hSFFuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0JzWldaMElDMDlJSFJoY21kbGRGZHBaSFJvTzF4dVhIUWdJQ0FnSUNBZ0lDQWdkRUYwZEdGamFHMWxiblF1YkdWbWRDQTlJQ2RzWldaMEp6dGNibHgwSUNBZ0lDQWdJQ0I5WEc1Y2RDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQnBaaUFvWTJoaGJtZGxRWFIwWVdOb1dDQTlQVDBnSjNSdloyVjBhR1Z5SnlrZ2UxeHVYSFFnSUNBZ0lDQWdJR2xtSUNoc1pXWjBJRHdnWW05MWJtUnpXekJkSUNZbUlIUkJkSFJoWTJodFpXNTBMbXhsWm5RZ1BUMDlJQ2RzWldaMEp5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZCZEhSaFkyaHRaVzUwTG14bFpuUWdQVDA5SUNkeWFXZG9kQ2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYkdWbWRDQXJQU0IwWVhKblpYUlhhV1IwYUR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnZEVGMGRHRmphRzFsYm5RdWJHVm1kQ0E5SUNkeWFXZG9kQ2M3WEc1Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYkdWbWRDQXJQU0IzYVdSMGFEdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1pVRjBkR0ZqYUcxbGJuUXViR1ZtZENBOUlDZHNaV1owSnp0Y2JseDBJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWlVGMGRHRmphRzFsYm5RdWJHVm1kQ0E5UFQwZ0oyeGxablFuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUd4bFpuUWdLejBnZEdGeVoyVjBWMmxrZEdnN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhSQmRIUmhZMmh0Wlc1MExteGxablFnUFNBbmNtbG5hSFFuTzF4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUd4bFpuUWdMVDBnZDJsa2RHZzdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHVkJkSFJoWTJodFpXNTBMbXhsWm5RZ1BTQW5jbWxuYUhRbk8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9iR1ZtZENBcklIZHBaSFJvSUQ0Z1ltOTFibVJ6V3pKZElDWW1JSFJCZEhSaFkyaHRaVzUwTG14bFpuUWdQVDA5SUNkeWFXZG9kQ2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJR2xtSUNobFFYUjBZV05vYldWdWRDNXNaV1owSUQwOVBTQW5iR1ZtZENjcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kQ0F0UFNCMFlYSm5aWFJYYVdSMGFEdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2RFRjBkR0ZqYUcxbGJuUXViR1ZtZENBOUlDZHNaV1owSnp0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCc1pXWjBJQzA5SUhkcFpIUm9PMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmxRWFIwWVdOb2JXVnVkQzVzWldaMElEMGdKM0pwWjJoMEp6dGNibHgwSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pVRjBkR0ZqYUcxbGJuUXViR1ZtZENBOVBUMGdKM0pwWjJoMEp5a2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQnNaV1owSUMwOUlIUmhjbWRsZEZkcFpIUm9PMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQjBRWFIwWVdOb2JXVnVkQzVzWldaMElEMGdKMnhsWm5Rbk8xeHVYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHeGxablFnS3owZ2QybGtkR2c3WEc1Y2RDQWdJQ0FnSUNBZ0lDQWdJR1ZCZEhSaFkyaHRaVzUwTG14bFpuUWdQU0FuYkdWbWRDYzdYRzVjZENBZ0lDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwUVhSMFlXTm9iV1Z1ZEM1c1pXWjBJRDA5UFNBblkyVnVkR1Z5SnlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnYVdZZ0tHeGxablFnS3lCM2FXUjBhQ0ErSUdKdmRXNWtjMXN5WFNBbUppQmxRWFIwWVdOb2JXVnVkQzVzWldaMElEMDlQU0FuYkdWbWRDY3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdiR1ZtZENBdFBTQjNhV1IwYUR0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWlVGMGRHRmphRzFsYm5RdWJHVm1kQ0E5SUNkeWFXZG9kQ2M3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR3hsWm5RZ1BDQmliM1Z1WkhOYk1GMGdKaVlnWlVGMGRHRmphRzFsYm5RdWJHVm1kQ0E5UFQwZ0ozSnBaMmgwSnlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCc1pXWjBJQ3M5SUhkcFpIUm9PMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmxRWFIwWVdOb2JXVnVkQzVzWldaMElEMGdKMnhsWm5Rbk8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUdsbUlDaGphR0Z1WjJWQmRIUmhZMmhaSUQwOVBTQW5aV3hsYldWdWRDY2dmSHdnWTJoaGJtZGxRWFIwWVdOb1dTQTlQVDBnSjJKdmRHZ25LU0I3WEc1Y2RDQWdJQ0FnSUNBZ2FXWWdLSFJ2Y0NBOElHSnZkVzVrYzFzeFhTQW1KaUJsUVhSMFlXTm9iV1Z1ZEM1MGIzQWdQVDA5SUNkaWIzUjBiMjBuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0IwYjNBZ0t6MGdhR1ZwWjJoME8xeHVYSFFnSUNBZ0lDQWdJQ0FnWlVGMGRHRmphRzFsYm5RdWRHOXdJRDBnSjNSdmNDYzdYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0hSdmNDQXJJR2hsYVdkb2RDQStJR0p2ZFc1a2Mxc3pYU0FtSmlCbFFYUjBZV05vYldWdWRDNTBiM0FnUFQwOUlDZDBiM0FuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0IwYjNBZ0xUMGdhR1ZwWjJoME8xeHVYSFFnSUNBZ0lDQWdJQ0FnWlVGMGRHRmphRzFsYm5RdWRHOXdJRDBnSjJKdmRIUnZiU2M3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnYVdZZ0tHTm9ZVzVuWlVGMGRHRmphRmdnUFQwOUlDZGxiR1Z0Wlc1MEp5QjhmQ0JqYUdGdVoyVkJkSFJoWTJoWUlEMDlQU0FuWW05MGFDY3BJSHRjYmx4MElDQWdJQ0FnSUNCcFppQW9iR1ZtZENBOElHSnZkVzVrYzFzd1hTa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZCZEhSaFkyaHRaVzUwTG14bFpuUWdQVDA5SUNkeWFXZG9kQ2NwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYkdWbWRDQXJQU0IzYVdSMGFEdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1pVRjBkR0ZqYUcxbGJuUXViR1ZtZENBOUlDZHNaV1owSnp0Y2JseDBJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWlVGMGRHRmphRzFsYm5RdWJHVm1kQ0E5UFQwZ0oyTmxiblJsY2ljcElIdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kQ0FyUFNCM2FXUjBhQ0F2SURJN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUdWQmRIUmhZMmh0Wlc1MExteGxablFnUFNBbmJHVm1kQ2M3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdhV1lnS0d4bFpuUWdLeUIzYVdSMGFDQStJR0p2ZFc1a2Mxc3lYU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdhV1lnS0dWQmRIUmhZMmh0Wlc1MExteGxablFnUFQwOUlDZHNaV1owSnlrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnSUNCc1pXWjBJQzA5SUhkcFpIUm9PMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQmxRWFIwWVdOb2JXVnVkQzVzWldaMElEMGdKM0pwWjJoMEp6dGNibHgwSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pVRjBkR0ZqYUcxbGJuUXViR1ZtZENBOVBUMGdKMk5sYm5SbGNpY3BJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdiR1ZtZENBdFBTQjNhV1IwYUNBdklESTdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lHVkJkSFJoWTJodFpXNTBMbXhsWm5RZ1BTQW5jbWxuYUhRbk8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNBZ0lIMWNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NHbHVJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVYSFFnSUNBZ0lDQWdJSEJwYmlBOUlIQnBiaTV6Y0d4cGRDZ25MQ2NwTG0xaGNDaG1kVzVqZEdsdmJpQW9jQ2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQXVkSEpwYlNncE8xeHVYSFFnSUNBZ0lDQWdJSDBwTzF4dVhIUWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIQnBiaUE5UFQwZ2RISjFaU2tnZTF4dVhIUWdJQ0FnSUNBZ0lIQnBiaUE5SUZzbmRHOXdKeXdnSjJ4bFpuUW5MQ0FuY21sbmFIUW5MQ0FuWW05MGRHOXRKMTA3WEc1Y2RDQWdJQ0FnSUgxY2JseHVYSFFnSUNBZ0lDQndhVzRnUFNCd2FXNGdmSHdnVzEwN1hHNWNibHgwSUNBZ0lDQWdkbUZ5SUhCcGJtNWxaQ0E5SUZ0ZE8xeHVYSFFnSUNBZ0lDQjJZWElnYjI5aUlEMGdXMTA3WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLSFJ2Y0NBOElHSnZkVzVrYzFzeFhTa2dlMXh1WEhRZ0lDQWdJQ0FnSUdsbUlDaHdhVzR1YVc1a1pYaFBaaWduZEc5d0p5a2dQajBnTUNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnZEc5d0lEMGdZbTkxYm1Seld6RmRPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2NHbHVibVZrTG5CMWMyZ29KM1J2Y0NjcE8xeHVYSFFnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCdmIySXVjSFZ6YUNnbmRHOXdKeWs3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnYVdZZ0tIUnZjQ0FySUdobGFXZG9kQ0ErSUdKdmRXNWtjMXN6WFNrZ2UxeHVYSFFnSUNBZ0lDQWdJR2xtSUNod2FXNHVhVzVrWlhoUFppZ25ZbTkwZEc5dEp5a2dQajBnTUNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnZEc5d0lEMGdZbTkxYm1Seld6TmRJQzBnYUdWcFoyaDBPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2NHbHVibVZrTG5CMWMyZ29KMkp2ZEhSdmJTY3BPMXh1WEhRZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQnZiMkl1Y0hWemFDZ25ZbTkwZEc5dEp5azdYRzVjZENBZ0lDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdhV1lnS0d4bFpuUWdQQ0JpYjNWdVpITmJNRjBwSUh0Y2JseDBJQ0FnSUNBZ0lDQnBaaUFvY0dsdUxtbHVaR1Y0VDJZb0oyeGxablFuS1NBK1BTQXdLU0I3WEc1Y2RDQWdJQ0FnSUNBZ0lDQnNaV1owSUQwZ1ltOTFibVJ6V3pCZE8xeHVYSFFnSUNBZ0lDQWdJQ0FnY0dsdWJtVmtMbkIxYzJnb0oyeGxablFuS1R0Y2JseDBJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVYSFFnSUNBZ0lDQWdJQ0FnYjI5aUxuQjFjMmdvSjJ4bFpuUW5LVHRjYmx4MElDQWdJQ0FnSUNCOVhHNWNkQ0FnSUNBZ0lIMWNibHh1WEhRZ0lDQWdJQ0JwWmlBb2JHVm1kQ0FySUhkcFpIUm9JRDRnWW05MWJtUnpXekpkS1NCN1hHNWNkQ0FnSUNBZ0lDQWdhV1lnS0hCcGJpNXBibVJsZUU5bUtDZHlhV2RvZENjcElENDlJREFwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJR3hsWm5RZ1BTQmliM1Z1WkhOYk1sMGdMU0IzYVdSMGFEdGNibHgwSUNBZ0lDQWdJQ0FnSUhCcGJtNWxaQzV3ZFhOb0tDZHlhV2RvZENjcE8xeHVYSFFnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzVjZENBZ0lDQWdJQ0FnSUNCdmIySXVjSFZ6YUNnbmNtbG5hSFFuS1R0Y2JseDBJQ0FnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSDFjYmx4dVhIUWdJQ0FnSUNCcFppQW9jR2x1Ym1Wa0xteGxibWQwYUNrZ2UxeHVYSFFnSUNBZ0lDQWdJQ2htZFc1amRHbHZiaUFvS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NHbHVibVZrUTJ4aGMzTWdQU0IxYm1SbFptbHVaV1E3WEc1Y2RDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRjkwYUdsekxtOXdkR2x2Ym5NdWNHbHVibVZrUTJ4aGMzTWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzVjZENBZ0lDQWdJQ0FnSUNBZ0lIQnBibTVsWkVOc1lYTnpJRDBnWDNSb2FYTXViM0IwYVc5dWN5NXdhVzV1WldSRGJHRnpjenRjYmx4MElDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUhCcGJtNWxaRU5zWVhOeklEMGdYM1JvYVhNdVoyVjBRMnhoYzNNb0ozQnBibTVsWkNjcE8xeHVYSFFnSUNBZ0lDQWdJQ0FnZlZ4dVhHNWNkQ0FnSUNBZ0lDQWdJQ0JoWkdSRGJHRnpjMlZ6TG5CMWMyZ29jR2x1Ym1Wa1EyeGhjM01wTzF4dVhIUWdJQ0FnSUNBZ0lDQWdjR2x1Ym1Wa0xtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tITnBaR1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnWVdSa1EyeGhjM05sY3k1d2RYTm9LSEJwYm01bFpFTnNZWE56SUNzZ0p5MG5JQ3NnYzJsa1pTazdYRzVjZENBZ0lDQWdJQ0FnSUNCOUtUdGNibHgwSUNBZ0lDQWdJQ0I5S1NncE8xeHVYSFFnSUNBZ0lDQjlYRzVjYmx4MElDQWdJQ0FnYVdZZ0tHOXZZaTVzWlc1bmRHZ3BJSHRjYmx4MElDQWdJQ0FnSUNBb1puVnVZM1JwYjI0Z0tDa2dlMXh1WEhRZ0lDQWdJQ0FnSUNBZ2RtRnlJRzl2WWtOc1lYTnpJRDBnZFc1a1pXWnBibVZrTzF4dVhIUWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJmZEdocGN5NXZjSFJwYjI1ekxtOTFkRTltUW05MWJtUnpRMnhoYzNNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUc5dllrTnNZWE56SUQwZ1gzUm9hWE11YjNCMGFXOXVjeTV2ZFhSUFprSnZkVzVrYzBOc1lYTnpPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYjI5aVEyeGhjM01nUFNCZmRHaHBjeTVuWlhSRGJHRnpjeWduYjNWMExXOW1MV0p2ZFc1a2N5Y3BPMXh1WEhRZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzVjZENBZ0lDQWdJQ0FnSUNCaFpHUkRiR0Z6YzJWekxuQjFjMmdvYjI5aVEyeGhjM01wTzF4dVhIUWdJQ0FnSUNBZ0lDQWdiMjlpTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hOcFpHVXBJSHRjYmx4MElDQWdJQ0FnSUNBZ0lDQWdZV1JrUTJ4aGMzTmxjeTV3ZFhOb0tHOXZZa05zWVhOeklDc2dKeTBuSUNzZ2MybGtaU2s3WEc1Y2RDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4MElDQWdJQ0FnSUNCOUtTZ3BPMXh1WEhRZ0lDQWdJQ0I5WEc1Y2JseDBJQ0FnSUNBZ2FXWWdLSEJwYm01bFpDNXBibVJsZUU5bUtDZHNaV1owSnlrZ1BqMGdNQ0I4ZkNCd2FXNXVaV1F1YVc1a1pYaFBaaWduY21sbmFIUW5LU0ErUFNBd0tTQjdYRzVjZENBZ0lDQWdJQ0FnWlVGMGRHRmphRzFsYm5RdWJHVm1kQ0E5SUhSQmRIUmhZMmh0Wlc1MExteGxablFnUFNCbVlXeHpaVHRjYmx4MElDQWdJQ0FnZlZ4dVhIUWdJQ0FnSUNCcFppQW9jR2x1Ym1Wa0xtbHVaR1Y0VDJZb0ozUnZjQ2NwSUQ0OUlEQWdmSHdnY0dsdWJtVmtMbWx1WkdWNFQyWW9KMkp2ZEhSdmJTY3BJRDQ5SURBcElIdGNibHgwSUNBZ0lDQWdJQ0JsUVhSMFlXTm9iV1Z1ZEM1MGIzQWdQU0IwUVhSMFlXTm9iV1Z1ZEM1MGIzQWdQU0JtWVd4elpUdGNibHgwSUNBZ0lDQWdmVnh1WEc1Y2RDQWdJQ0FnSUdsbUlDaDBRWFIwWVdOb2JXVnVkQzUwYjNBZ0lUMDlJSFJoY21kbGRFRjBkR0ZqYUcxbGJuUXVkRzl3SUh4OElIUkJkSFJoWTJodFpXNTBMbXhsWm5RZ0lUMDlJSFJoY21kbGRFRjBkR0ZqYUcxbGJuUXViR1ZtZENCOGZDQmxRWFIwWVdOb2JXVnVkQzUwYjNBZ0lUMDlJRjkwYUdsekxtRjBkR0ZqYUcxbGJuUXVkRzl3SUh4OElHVkJkSFJoWTJodFpXNTBMbXhsWm5RZ0lUMDlJRjkwYUdsekxtRjBkR0ZqYUcxbGJuUXViR1ZtZENrZ2UxeHVYSFFnSUNBZ0lDQWdJRjkwYUdsekxuVndaR0YwWlVGMGRHRmphRU5zWVhOelpYTW9aVUYwZEdGamFHMWxiblFzSUhSQmRIUmhZMmh0Wlc1MEtUdGNibHgwSUNBZ0lDQWdmVnh1WEhRZ0lDQWdmU2s3WEc1Y2JseDBJQ0FnSUdSbFptVnlLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseDBJQ0FnSUNBZ2FXWWdLQ0VvWDNSb2FYTXViM0IwYVc5dWN5NWhaR1JVWVhKblpYUkRiR0Z6YzJWeklEMDlQU0JtWVd4elpTa3BJSHRjYmx4MElDQWdJQ0FnSUNCMWNHUmhkR1ZEYkdGemMyVnpLRjkwYUdsekxuUmhjbWRsZEN3Z1lXUmtRMnhoYzNObGN5d2dZV3hzUTJ4aGMzTmxjeWs3WEc1Y2RDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2RYQmtZWFJsUTJ4aGMzTmxjeWhmZEdocGN5NWxiR1Z0Wlc1MExDQmhaR1JEYkdGemMyVnpMQ0JoYkd4RGJHRnpjMlZ6S1R0Y2JseDBJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQnlaWFIxY200Z2V5QjBiM0E2SUhSdmNDd2diR1ZtZERvZ2JHVm1kQ0I5TzF4dVhIUWdJSDFjYmx4MGZTazdYRzVjZEM4cUlHZHNiMkpoYkhNZ1ZHVjBhR1Z5UW1GelpTQXFMMXh1WEc1Y2RDZDFjMlVnYzNSeWFXTjBKenRjYmx4dVhIUjJZWElnWDFSbGRHaGxja0poYzJVa1ZYUnBiSE1nUFNCVVpYUm9aWEpDWVhObExsVjBhV3h6TzF4dVhIUjJZWElnWjJWMFFtOTFibVJ6SUQwZ1gxUmxkR2hsY2tKaGMyVWtWWFJwYkhNdVoyVjBRbTkxYm1Sek8xeHVYSFIyWVhJZ2RYQmtZWFJsUTJ4aGMzTmxjeUE5SUY5VVpYUm9aWEpDWVhObEpGVjBhV3h6TG5Wd1pHRjBaVU5zWVhOelpYTTdYRzVjZEhaaGNpQmtaV1psY2lBOUlGOVVaWFJvWlhKQ1lYTmxKRlYwYVd4ekxtUmxabVZ5TzF4dVhHNWNkRlJsZEdobGNrSmhjMlV1Ylc5a2RXeGxjeTV3ZFhOb0tIdGNibHgwSUNCd2IzTnBkR2x2YmpvZ1puVnVZM1JwYjI0Z2NHOXphWFJwYjI0b1gzSmxaaWtnZTF4dVhIUWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dVhIUWdJQ0FnZG1GeUlIUnZjQ0E5SUY5eVpXWXVkRzl3TzF4dVhIUWdJQ0FnZG1GeUlHeGxablFnUFNCZmNtVm1MbXhsWm5RN1hHNWNibHgwSUNBZ0lIWmhjaUJmWTJGamFHVWdQU0IwYUdsekxtTmhZMmhsS0NkbGJHVnRaVzUwTFdKdmRXNWtjeWNzSUdaMWJtTjBhVzl1SUNncElIdGNibHgwSUNBZ0lDQWdjbVYwZFhKdUlHZGxkRUp2ZFc1a2N5aGZkR2hwY3k1bGJHVnRaVzUwS1R0Y2JseDBJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQjJZWElnYUdWcFoyaDBJRDBnWDJOaFkyaGxMbWhsYVdkb2REdGNibHgwSUNBZ0lIWmhjaUIzYVdSMGFDQTlJRjlqWVdOb1pTNTNhV1IwYUR0Y2JseHVYSFFnSUNBZ2RtRnlJSFJoY21kbGRGQnZjeUE5SUhSb2FYTXVaMlYwVkdGeVoyVjBRbTkxYm1SektDazdYRzVjYmx4MElDQWdJSFpoY2lCaWIzUjBiMjBnUFNCMGIzQWdLeUJvWldsbmFIUTdYRzVjZENBZ0lDQjJZWElnY21sbmFIUWdQU0JzWldaMElDc2dkMmxrZEdnN1hHNWNibHgwSUNBZ0lIWmhjaUJoWW5WMGRHVmtJRDBnVzEwN1hHNWNkQ0FnSUNCcFppQW9kRzl3SUR3OUlIUmhjbWRsZEZCdmN5NWliM1IwYjIwZ0ppWWdZbTkwZEc5dElENDlJSFJoY21kbGRGQnZjeTUwYjNBcElIdGNibHgwSUNBZ0lDQWdXeWRzWldaMEp5d2dKM0pwWjJoMEoxMHVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9jMmxrWlNrZ2UxeHVYSFFnSUNBZ0lDQWdJSFpoY2lCMFlYSm5aWFJRYjNOVGFXUmxJRDBnZEdGeVoyVjBVRzl6VzNOcFpHVmRPMXh1WEhRZ0lDQWdJQ0FnSUdsbUlDaDBZWEpuWlhSUWIzTlRhV1JsSUQwOVBTQnNaV1owSUh4OElIUmhjbWRsZEZCdmMxTnBaR1VnUFQwOUlISnBaMmgwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0JoWW5WMGRHVmtMbkIxYzJnb2MybGtaU2s3WEc1Y2RDQWdJQ0FnSUNBZ2ZWeHVYSFFnSUNBZ0lDQjlLVHRjYmx4MElDQWdJSDFjYmx4dVhIUWdJQ0FnYVdZZ0tHeGxablFnUEQwZ2RHRnlaMlYwVUc5ekxuSnBaMmgwSUNZbUlISnBaMmgwSUQ0OUlIUmhjbWRsZEZCdmN5NXNaV1owS1NCN1hHNWNkQ0FnSUNBZ0lGc25kRzl3Snl3Z0oySnZkSFJ2YlNkZExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tITnBaR1VwSUh0Y2JseDBJQ0FnSUNBZ0lDQjJZWElnZEdGeVoyVjBVRzl6VTJsa1pTQTlJSFJoY21kbGRGQnZjMXR6YVdSbFhUdGNibHgwSUNBZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwVUc5elUybGtaU0E5UFQwZ2RHOXdJSHg4SUhSaGNtZGxkRkJ2YzFOcFpHVWdQVDA5SUdKdmRIUnZiU2tnZTF4dVhIUWdJQ0FnSUNBZ0lDQWdZV0oxZEhSbFpDNXdkWE5vS0hOcFpHVXBPMXh1WEhRZ0lDQWdJQ0FnSUgxY2JseDBJQ0FnSUNBZ2ZTazdYRzVjZENBZ0lDQjlYRzVjYmx4MElDQWdJSFpoY2lCaGJHeERiR0Z6YzJWeklEMGdXMTA3WEc1Y2RDQWdJQ0IyWVhJZ1lXUmtRMnhoYzNObGN5QTlJRnRkTzF4dVhHNWNkQ0FnSUNCMllYSWdjMmxrWlhNZ1BTQmJKMnhsWm5RbkxDQW5kRzl3Snl3Z0ozSnBaMmgwSnl3Z0oySnZkSFJ2YlNkZE8xeHVYSFFnSUNBZ1lXeHNRMnhoYzNObGN5NXdkWE5vS0hSb2FYTXVaMlYwUTJ4aGMzTW9KMkZpZFhSMFpXUW5LU2s3WEc1Y2RDQWdJQ0J6YVdSbGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaHphV1JsS1NCN1hHNWNkQ0FnSUNBZ0lHRnNiRU5zWVhOelpYTXVjSFZ6YUNoZmRHaHBjeTVuWlhSRGJHRnpjeWduWVdKMWRIUmxaQ2NwSUNzZ0p5MG5JQ3NnYzJsa1pTazdYRzVjZENBZ0lDQjlLVHRjYmx4dVhIUWdJQ0FnYVdZZ0tHRmlkWFIwWldRdWJHVnVaM1JvS1NCN1hHNWNkQ0FnSUNBZ0lHRmtaRU5zWVhOelpYTXVjSFZ6YUNoMGFHbHpMbWRsZEVOc1lYTnpLQ2RoWW5WMGRHVmtKeWtwTzF4dVhIUWdJQ0FnZlZ4dVhHNWNkQ0FnSUNCaFluVjBkR1ZrTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hOcFpHVXBJSHRjYmx4MElDQWdJQ0FnWVdSa1EyeGhjM05sY3k1d2RYTm9LRjkwYUdsekxtZGxkRU5zWVhOektDZGhZblYwZEdWa0p5a2dLeUFuTFNjZ0t5QnphV1JsS1R0Y2JseDBJQ0FnSUgwcE8xeHVYRzVjZENBZ0lDQmtaV1psY2lobWRXNWpkR2x2YmlBb0tTQjdYRzVjZENBZ0lDQWdJR2xtSUNnaEtGOTBhR2x6TG05d2RHbHZibk11WVdSa1ZHRnlaMlYwUTJ4aGMzTmxjeUE5UFQwZ1ptRnNjMlVwS1NCN1hHNWNkQ0FnSUNBZ0lDQWdkWEJrWVhSbFEyeGhjM05sY3loZmRHaHBjeTUwWVhKblpYUXNJR0ZrWkVOc1lYTnpaWE1zSUdGc2JFTnNZWE56WlhNcE8xeHVYSFFnSUNBZ0lDQjlYRzVjZENBZ0lDQWdJSFZ3WkdGMFpVTnNZWE56WlhNb1gzUm9hWE11Wld4bGJXVnVkQ3dnWVdSa1EyeGhjM05sY3l3Z1lXeHNRMnhoYzNObGN5azdYRzVjZENBZ0lDQjlLVHRjYmx4dVhIUWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNkQ0FnZlZ4dVhIUjlLVHRjYmx4MEx5b2daMnh2WW1Gc2N5QlVaWFJvWlhKQ1lYTmxJQ292WEc1Y2JseDBKM1Z6WlNCemRISnBZM1FuTzF4dVhHNWNkSFpoY2lCZmMyeHBZMlZrVkc5QmNuSmhlU0E5SUNobWRXNWpkR2x2YmlBb0tTQjdJR1oxYm1OMGFXOXVJSE5zYVdObFNYUmxjbUYwYjNJb1lYSnlMQ0JwS1NCN0lIWmhjaUJmWVhKeUlEMGdXMTA3SUhaaGNpQmZiaUE5SUhSeWRXVTdJSFpoY2lCZlpDQTlJR1poYkhObE95QjJZWElnWDJVZ1BTQjFibVJsWm1sdVpXUTdJSFJ5ZVNCN0lHWnZjaUFvZG1GeUlGOXBJRDBnWVhKeVcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwb0tTd2dYM003SUNFb1gyNGdQU0FvWDNNZ1BTQmZhUzV1WlhoMEtDa3BMbVJ2Ym1VcE95QmZiaUE5SUhSeWRXVXBJSHNnWDJGeWNpNXdkWE5vS0Y5ekxuWmhiSFZsS1RzZ2FXWWdLR2tnSmlZZ1gyRnljaTVzWlc1bmRHZ2dQVDA5SUdrcElHSnlaV0ZyT3lCOUlIMGdZMkYwWTJnZ0tHVnljaWtnZXlCZlpDQTlJSFJ5ZFdVN0lGOWxJRDBnWlhKeU95QjlJR1pwYm1Gc2JIa2dleUIwY25rZ2V5QnBaaUFvSVY5dUlDWW1JRjlwV3lkeVpYUjFjbTRuWFNrZ1gybGJKM0psZEhWeWJpZGRLQ2s3SUgwZ1ptbHVZV3hzZVNCN0lHbG1JQ2hmWkNrZ2RHaHliM2NnWDJVN0lIMGdmU0J5WlhSMWNtNGdYMkZ5Y2pzZ2ZTQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tHRnljaXdnYVNrZ2V5QnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGhjbklwS1NCN0lISmxkSFZ5YmlCaGNuSTdJSDBnWld4elpTQnBaaUFvVTNsdFltOXNMbWwwWlhKaGRHOXlJR2x1SUU5aWFtVmpkQ2hoY25JcEtTQjdJSEpsZEhWeWJpQnpiR2xqWlVsMFpYSmhkRzl5S0dGeWNpd2dhU2s3SUgwZ1pXeHpaU0I3SUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owbHVkbUZzYVdRZ1lYUjBaVzF3ZENCMGJ5QmtaWE4wY25WamRIVnlaU0J1YjI0dGFYUmxjbUZpYkdVZ2FXNXpkR0Z1WTJVbktUc2dmU0I5T3lCOUtTZ3BPMXh1WEc1Y2RGUmxkR2hsY2tKaGMyVXViVzlrZFd4bGN5NXdkWE5vS0h0Y2JseDBJQ0J3YjNOcGRHbHZiam9nWm5WdVkzUnBiMjRnY0c5emFYUnBiMjRvWDNKbFppa2dlMXh1WEhRZ0lDQWdkbUZ5SUhSdmNDQTlJRjl5WldZdWRHOXdPMXh1WEhRZ0lDQWdkbUZ5SUd4bFpuUWdQU0JmY21WbUxteGxablE3WEc1Y2JseDBJQ0FnSUdsbUlDZ2hkR2hwY3k1dmNIUnBiMjV6TG5Ob2FXWjBLU0I3WEc1Y2RDQWdJQ0FnSUhKbGRIVnlianRjYmx4MElDQWdJSDFjYmx4dVhIUWdJQ0FnZG1GeUlITm9hV1owSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbk5vYVdaME8xeHVYSFFnSUNBZ2FXWWdLSFI1Y0dWdlppQjBhR2x6TG05d2RHbHZibk11YzJocFpuUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNibHgwSUNBZ0lDQWdjMmhwWm5RZ1BTQjBhR2x6TG05d2RHbHZibk11YzJocFpuUXVZMkZzYkNoMGFHbHpMQ0I3SUhSdmNEb2dkRzl3TENCc1pXWjBPaUJzWldaMElIMHBPMXh1WEhRZ0lDQWdmVnh1WEc1Y2RDQWdJQ0IyWVhJZ2MyaHBablJVYjNBZ1BTQjFibVJsWm1sdVpXUXNYRzVjZENBZ0lDQWdJQ0FnYzJocFpuUk1aV1owSUQwZ2RXNWtaV1pwYm1Wa08xeHVYSFFnSUNBZ2FXWWdLSFI1Y0dWdlppQnphR2xtZENBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmx4MElDQWdJQ0FnYzJocFpuUWdQU0J6YUdsbWRDNXpjR3hwZENnbklDY3BPMXh1WEhRZ0lDQWdJQ0J6YUdsbWRGc3hYU0E5SUhOb2FXWjBXekZkSUh4OElITm9hV1owV3pCZE8xeHVYRzVjZENBZ0lDQWdJSFpoY2lCZmMyaHBablFnUFNCemFHbG1kRHRjYmx4dVhIUWdJQ0FnSUNCMllYSWdYM05vYVdaME1pQTlJRjl6YkdsalpXUlViMEZ5Y21GNUtGOXphR2xtZEN3Z01pazdYRzVjYmx4MElDQWdJQ0FnYzJocFpuUlViM0FnUFNCZmMyaHBablF5V3pCZE8xeHVYSFFnSUNBZ0lDQnphR2xtZEV4bFpuUWdQU0JmYzJocFpuUXlXekZkTzF4dVhHNWNkQ0FnSUNBZ0lITm9hV1owVkc5d0lEMGdjR0Z5YzJWR2JHOWhkQ2h6YUdsbWRGUnZjQ3dnTVRBcE8xeHVYSFFnSUNBZ0lDQnphR2xtZEV4bFpuUWdQU0J3WVhKelpVWnNiMkYwS0hOb2FXWjBUR1ZtZEN3Z01UQXBPMXh1WEhRZ0lDQWdmU0JsYkhObElIdGNibHgwSUNBZ0lDQWdjMmhwWm5SVWIzQWdQU0J6YUdsbWRDNTBiM0E3WEc1Y2RDQWdJQ0FnSUhOb2FXWjBUR1ZtZENBOUlITm9hV1owTG14bFpuUTdYRzVjZENBZ0lDQjlYRzVjYmx4MElDQWdJSFJ2Y0NBclBTQnphR2xtZEZSdmNEdGNibHgwSUNBZ0lHeGxablFnS3owZ2MyaHBablJNWldaME8xeHVYRzVjZENBZ0lDQnlaWFIxY200Z2V5QjBiM0E2SUhSdmNDd2diR1ZtZERvZ2JHVm1kQ0I5TzF4dVhIUWdJSDFjYmx4MGZTazdYRzVjZEhKbGRIVnliaUJVWlhSb1pYSTdYRzVjYmx4MGZTa3BPMXh1WEc1Y2JpOHFLaW92SUgxY2JpOHFLaW9xS2lvdklGMHBYRzU5S1R0Y2Jqc2lYU3dpWm1sc1pTSTZJbk4wZVd4bFozVnBaR1V1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDNOdmRYSmpaUzhpZlE9PVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
