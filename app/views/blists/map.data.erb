<%- content_for :headline do -%>
<h1 class='mapIcon'><%= @is_edit ? 'Edit this' : 'Create a' %> Map</h1>
<%- end -%>

<div class='modalContentWrapper mapWrapper viewSetupWrapper'>
  <p class='subtitle'>
  Datasets can be displayed as points on a map
  </p>

  <%- cur_type = @view.displayFormat.nil? ||
    @view.displayFormat.data['type'].nil? ?
    'google' : @view.displayFormat.data['type'] -%>
  <%- heatmap_config = @view.displayFormat.nil? ||
    @view.displayFormat.data['heatmap'].nil? ?
    {} : @view.displayFormat.data['heatmap']

    # Legacy support:
    if @view.displayFormat && (@view.displayFormat.data['heatmapType'] || '').include?('counties')
      heatmap_config['type'] = 'counties'
      heatmap_config['region'] = @view.displayFormat.data['heatmapType'].split('_').first
    end
    heatmap_config['type'] = 'state' if @view.displayFormat &&
                                        @view.displayFormat.data['heatmapType'] == 'us_state'
  -%>

  <% form_tag("#{@view.href}/create_visualization?edit=#{@is_edit}",
    :class => 'clearfix') do %>
    <input type='hidden' id='view_query' name='view_query'
      value='<%= @view.query.to_json %>' />

    <div class='column'>

      <div class='section common'>
        <h3>Setup</h3>
        <p class='subtitle separator'>
        Enter a name for the map and choose a map type
        </p>
        <%- if !@is_edit -%>
        <div class='line'>
          <label class='required' for='mapName'>Name</label>
          <input type='text' id='mapName' name='viewName' class='required' />
        </div>
        <%- end -%>
        <div class='line'>
          <label class='required' for='mapType'>Type</label>
          <select id='mapType' name='mapType'
            class='required <%= @is_edit ? '' : 'prompt' %>'>
            <option class='prompt' value=''>Select a Map Type</option>
            <%- Displays::Map::MAP_TYPES.each do |t| -%>
            <option value='<%= t['value'] %>'
              <%= @is_edit && cur_type == t['value'] ?
                "selected='selected'" : '' %>><%= t['label'] %></option>
            <%- end -%>
          </select>
        </div>
        <div class='line configLine type-heatmap <%= @is_edit && cur_type == 'heatmap' ? 'default' : '' %>'>
          <label class='required' for='heatmapType'>Region</label>
          <select id='heatmapType' name='heatmapType'
            class='required <%= @is_edit ? '' : 'prompt' %> <%=
            @is_edit && heatmap_config['type'] == 'counties' ? 'default' : '' %>'>
            <option class='prompt' value=''>Select a Region Type</option>
            <%- Displays::Map::HEATMAP_TYPES.each do |t| -%>
            <option value='<%= t['value'] %>'
              <%= @is_edit && heatmap_config['type'] == t['value'] ?
                "selected='selected'" : '' %>><%= t['label'] %></option>
            <%- end -%>
          </select><select id='heatmapRegion' name='heatmapRegion'
            class='required <%= @is_edit ? '' : 'prompt' %> <%=
            @is_edit && heatmap_config['type']  == 'counties'? 'default' : '' %>'>
            <option class='prompt' value=''>Select a US State</option>
            <%- User.fetch_state_list.sort.each do |t|
                  next if ['DC','--'].include? t.first -%>
            <option value='<%= t[0].downcase %>'
              <%= @is_edit && heatmap_config['region'] == t[0].downcase ?
                "selected='selected'" : '' %>><%= t[1] %></option>
            <%- end -%>
          </select>
        </div>
      </div>

      <%- cur_cols = @is_edit ? @view.columns.select {|c| !c.flag?('hidden')} :
        [] -%>
      <%- cols = {} -%>
      <div class='typeBlock default'>

        <div class='section'>
          <h3>Coordinates</h3>
          <p class='subtitle separator'>
          Choose the data to map.  You must choose a location column.
          </p>

          <%- uses_col_format = !@view.displayFormat.nil? &&
            (!@view.displayFormat.data['plot'].nil? ||
              !@view.displayFormat.latitudeId.nil?) -%>
          <%- col_format = uses_col_format ?
            @view.displayFormat.data['plot'] || @view.displayFormat.data : nil -%>

          <%- cols['location'] =
                  @view.columns_for_datatypes('location',
                    @is_edit && !@view.is_grouped?) -%>

          <%- loc_id = @is_edit && uses_col_format ?
                col_format['locationId'] : nil -%>

          <div class='line'>
            <label class='required' for='mapColumn_location'>
              Location
            </label>
            <select id='mapColumn_location' name='mapColumn_location'
              class='required <%= loc_id.nil? ? 'prompt' : '' %>'>
              <option class='prompt' value=''>Select a Column</option>
              <%- cols['location'].each do |c| -%>
              <option value='<%= c.tableColumnId %>'
                data-columnId='<%= c.id %>'
                <%= c.tableColumnId.to_s == loc_id ?
                  "selected='selected'" : '' %>><%= c.name %></option>
              <%- end -%>
            </select>
          </div>

        </div>


        <div class='section'>
          <h3>Configuration</h3>
          <p class='subtitle separator'>
          Set other options for the map.
          </p>


          <%- title_id = @is_edit && uses_col_format ?
            col_format['titleId'] : nil -%>
          <%- cur_id = @is_edit && uses_col_format ?
            col_format['titleCol'] : nil -%>

          <div class='line configLine type- <%= cur_type != 'heatmap' ? 'default' : '' %>'>
            <label for='mapColumn_title'>
              Title
            </label>
            <select id='mapColumn_title' name='mapColumn_title'
              class='<%= title_id.nil? && cur_id.nil? ? 'prompt' : '' %>'>
              <option class='prompt' value=''>Select a Column</option>
              <%- @view.columns_for_datatypes('text',
                    @is_edit && !@view.is_grouped?).concat(cols['location']).
                      each do |c| -%>
                <option value='<%= c.tableColumnId %>'
                  data-columnId='<%= c.id %>'
                  <%= c.tableColumnId.to_s == title_id || c.id == cur_id ?
                  "selected='selected'" : '' %>><%= c.name %>
                  <%= '(address)' if c.renderTypeName == 'location' %></option>
              <%- end -%>
            </select>
            <span class="helpie"
              title="Tooltip to display on mouseover of a marker">?</span>
          </div>


          <%- data_types = ['text', 'html'] -%>
          <%- desc_id = @is_edit && uses_col_format ?
            col_format['descriptionId'] : nil -%>
          <%- cur_id = @is_edit && uses_col_format ?
            col_format['bodyCol'] : nil -%>
          <%- cur_id = @is_edit && !uses_col_format && cur_cols.length > 0 &&
            @view.datatypes_match(cur_cols[0], data_types) ?
              cur_cols.shift.id : cur_id -%>

          <div class='line configLine type- type-heatmap default'>
            <label for='mapColumn_description'>
              Description
            </label>
            <select id='mapColumn_description' name='mapColumn_description'
              class='<%= desc_id.nil? && cur_id.nil? ? 'prompt' : '' %>'>
              <option class='prompt' value=''>Select a Column</option>
              <%- @view.columns_for_datatypes(data_types,
                    @is_edit && !@view.is_grouped?).concat(cols['location']).
                      each do |c| -%>
                <option value='<%= c.tableColumnId %>'
                  data-columnId='<%= c.id %>'
                  <%= c.tableColumnId.to_s == desc_id || c.id == cur_id ?
                  "selected='selected'" : '' %>><%= c.name %>
                  <%= '(address)' if c.renderTypeName == 'location' %></option>
              <%- end -%>
            </select>
            <span class="helpie"
              title="Content to display on clicking a marker">?</span>
          </div>

          <%- data_types = ['number', 'money', 'percent'] -%>
          <%- quantity_id = @is_edit && uses_col_format ?
            col_format['quantityId'] : nil -%>

          <div class='line configLine type-heatmap <%= @is_edit && cur_type == 'heatmap' ?  'default' : '' %>'>
            <label class='required' for='mapColumn_quantity'>
              Quantity
            </label>
            <select id='mapColumn_quantity' name='mapColumn_quantity'
              class='required <%= quantity_id.nil?() ? 'prompt' : '' %>'>
              <option class='prompt' value=''>Select a Column</option>
              <%- @view.columns_for_datatypes(data_types,
                    @is_edit && !@view.is_grouped?).each do |c| -%>
                <option value='<%= c.tableColumnId %>'
                  data-columnId='<%= c.id %>'
                  <%= c.tableColumnId.to_s == quantity_id ?
                  "selected='selected'" : '' %>><%= c.name %></option>
              <%- end -%>
            </select>
            <span class="helpie"
              title="Number by which intensity is determined">?</span>
          </div>

          <%- classes = ['configLine']
              classes << 'default' if cur_type == 'heatmap'
          -%>
          <%- options = [
          {'label' => 'Color (Low)',  'name' => 'lowcolor',  'type' => 'color', 'classes' => classes, 'default' => ['#d1d1d1'], 'help' => 'Color at minimum intensity'},
          {'label' => 'Color (High)', 'name' => 'highcolor', 'type' => 'color', 'classes' => classes, 'default' => ['#00ff00'], 'help' => 'Color at maximum intensity'}] -%>
          <%- is_edit_block = @is_edit && cur_type == 'heatmap' -%>
          <%= render(:partial => 'viz_opts',
            :locals => {:options => options,
            :name_prefix => 'heatmap', :existing_values => is_edit_block ?
              @view.displayFormat.data : nil}) %>

        </div>

      </div>
    </div>

    <div class='column right'>
      <div class='typeBlock type- <%= @is_edit ? '' : 'default' %> empty'>
        (Choose a chart type to see more details)
      </div>

      <div class='typeBlock type-esri type-heatmap <%= @is_edit && ['esri', 'heatmap'].include?(cur_type) ?
        'default' : '' %>'>
        <div class='section'>
          <h3>Layers</h3>
          <p class='subtitle separator'>
          Choose the layers to display for this map
          </p>

          <div class='scrollBlock'>
            <%- count = 0 -%>
            <%- layer_options = Displays::Map::ESRI_LAYERS -%>
            <%- layers = @is_edit && ['esri', 'heatmap'].include?(cur_type) ?
              @view.displayFormat.layers : nil -%>
            <%- layers = [layer_options[0]] if layers.nil? -%>
            <%- layers.each do |l| -%>
            <%- layer_name = 'esri-layer-' + count.to_s -%>

            <div class='layerBlock configLineBlock <%= count == 0 && cur_type != 'heatmap' ?
              'firstBlock' : '' %> clearfix'>
            <a class='removeButton' href='#removeDataBlock'
              title='Remove'>Remove</a>

              <div class='line'>
                <label <%= count == 0 ? "class='required'" : '' %>
                  for='<%= layer_name %>'>Layer</label>
                <select id='<%= layer_name %>' name='<%= layer_name %>'
                  <%= count == 0 ? "class='required'" : '' %>>
                  <option class='prompt' value=''>Select a Layer</option>
                  <%- layer_options.each do |lo| -%>
                  <option layer_type='<%= lo['type'] %>'
                    value='<%= lo['url'] %>' <%= l['url'] == lo['url'] ?
                      "selected='selected'" : '' %>><%= lo['name'] %></option>
                  <%- end -%>
                </select>
              </div>

              <div class='line'>
                <label>Opacity</label>
                <%- opacity = l['options'].nil? ? '' : l['options']['opacity'] -%>
                <%- if !opacity.blank?
                    opacity = opacity * 100
                  else
                    opacity = 100
                  end -%>
                <div class='opacitySlider' value='<%= opacity %>'></div>
              </div>

            </div>
            <%- count += 1 -%>
            <%- end -%>
          </div>

          <ul class='actionButtons'>
            <li><a class='button addLayer'
              href='#addLayer-esri'>Add Layer</a></li>
          </ul>
        </div>
      </div>

      <div class='typeBlock type-google empty <%= @is_edit && cur_type == 'google' ?
        'default' : '' %>'>
        (There is no additional configuration available)
      </div>

      <div class='typeBlock type-bing empty <%= @is_edit && cur_type == 'bing' ?
        'default' : '' %>'>
        (There is no additional configuration available)
      </div>
    </div>

  <% end %>

  <div class='error mainError'></div>

  <div class='submitLine clearfix'>
    <div class="required">Required Field</div>
    <ul class='actionButtons clearfix'>
      <li><a href='#create' class='create arrowButton'>
        <%= @is_edit ? 'Save' : 'Create' %> Map
      </a></li>
      <li><a class="jqmClose" href="#cancel">Cancel</a></li>
    </ul>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
  blist.common.modalReady = function()
  {
    $('.mapWrapper form').validate({ignore: ':hidden', errorElement: 'span'});

    var adjustSelectPrompt = function(event)
    {
      var $sel = $(this);
      setTimeout(function()
          {
            $sel.toggleClass('prompt', $sel.val() === '');
          }, 0);
    };

    $('.mapWrapper select').change(adjustSelectPrompt).keypress(adjustSelectPrompt)
      .click(adjustSelectPrompt).blur(adjustSelectPrompt);

    var adjustMapType = function(event)
    {
      var $sel = $(this);
      setTimeout(function()
          {
            var v = $sel.val();
            $('.mapWrapper .column.right .typeBlock').hide();
            $('.mapWrapper .column.right .typeBlock.type-' + v).show();
            $('.mapWrapper .configLine').hide();
            $('.mapWrapper .configLine.type-' + (v == 'heatmap' ? v : '')).show();
            if (v == 'heatmap')
            { $('.mapWrapper .column.right .layerBlock:first').removeClass('firstBlock'); }
          }, 0);
    };

    $('.mapWrapper #mapType').change(adjustMapType)
      .keypress(adjustMapType).click(adjustMapType);

    var adjustHeatmapType = function(event)
    {
      var $sel = $(this);
      setTimeout(function()
          {
            if ($sel.val() == 'counties')
            {
              $(".mapWrapper #heatmapType").css('width', '8em');
              $(".mapWrapper #heatmapRegion").show();
            }
            else
            {
              $(".mapWrapper #heatmapType").css('width', '17em');
              $(".mapWrapper #heatmapRegion").hide();
            }
          }, 0);
    };

    $('.mapWrapper #heatmapType').change(adjustHeatmapType)
      .keypress(adjustHeatmapType).click(adjustHeatmapType);

    var layersChanged = false;
    var hookUpLayer = function(block)
    {
        var $block = $(block);

        $block.find('a.removeButton').click(function(event)
        {
            event.preventDefault();
            $(event.target).closest('.configLineBlock').remove();
            layersChanged = true;
        });

        $block.find('select').change(function() { layersChanged = true; })
          .change(adjustSelectPrompt).keypress(adjustSelectPrompt)
          .click(adjustSelectPrompt).blur(adjustSelectPrompt).blur();

        $block.find('.opacitySlider').each(function()
        {
            var $slider = $(this);
            var sliderVal = $slider.attr('value');
            if (sliderVal === '' || sliderVal === undefined) { sliderVal = 60; }
            $slider.slider({min: 0, max: 100, value: sliderVal,
              change: function() { layersChanged = true; }});
        });
    };


    $('.mapWrapper a.addLayer').click(function(event)
    {
        event.preventDefault();
        var $scrollBlock = $(event.target).closest('ul').prev('.scrollBlock');

        var $block = $scrollBlock.find('.configLineBlock:last').clone()
          .removeClass('firstBlock');
        $block.find('.line').each(function(i, l)
        {
            var $this = $(this);
            var $label = $this.find('label');

            var oldName = $label.attr('for');
            var splitName = oldName.split('-');
            var newIndex = parseInt(splitName[splitName.length - 1]) + 1;
            splitName[splitName.length - 1] = newIndex;
            var newName = splitName.join('-');

            $label.removeClass('required').attr('for', newName);
            $this.find(':input').removeClass('required').attr('id', newName)
              .attr('name', newName).val('');

            $this.find('.opacitySlider')
              .replaceWith("<div class='opacitySlider'></div>");
        });
        hookUpLayer($block);

        $scrollBlock.append($block);

        layersChanged = true;
    });

    $('.mapWrapper .layerBlock').each(function(i, b) { hookUpLayer(b); });

    var formSubmit = function(event)
    {
      event.preventDefault();
      $('.mapWrapper .mainError').text('');
      var $form = $('.mapWrapper form');
      if (!$form.valid()) { return; }

      var colIds = [];
      var newType = $('.mapWrapper #mapType').val();
      var options = {plot: {}, type: newType};

      var $sel = $('.mapWrapper #mapColumn_location');
      options.plot.locationId = $sel.val();
      colIds.push($sel.find('option:selected').attr('data-columnId'));

      if ($('.mapWrapper #mapType').val() == 'heatmap')
      {
        $sel = $('.mapWrapper #mapColumn_quantity');
        var descId = $sel.val();
        if (descId !== '')
        {
            options.plot.quantityId = descId;
            colIds.push($sel.find('option:selected').attr('data-columnId'));
        }

        options.heatmap = {
          type: $('.mapWrapper #heatmapType').val(),
          region: $('.mapWrapper #heatmapRegion').val(),
          colors: {
            low: $('#heatmap-lowcolor-0').val(),
            high: $('#heatmap-highcolor-0').val()
          }
        };
      }
      else
      {
        $sel = $('.mapWrapper #mapColumn_title');
        var titleId = $sel.val();
        if (titleId !== '')
        {
            options.plot.titleId = titleId;
            colIds.push($sel.find('option:selected').attr('data-columnId'));
        }
      }

      $sel = $('.mapWrapper #mapColumn_description');
      var descId = $sel.val();
      if (descId !== '')
      {
          options.plot.descriptionId = descId;
          colIds.push($sel.find('option:selected').attr('data-columnId'));
      }

      $('.mapWrapper .type-' + newType + ' .layerBlock').each(function()
      {
          var $block = $(this);
          var $layer = $block.find('select');
          options.layers = options.layers || [];
          var $opacity = $block.find('.opacitySlider');
          var layer = {url: $layer.val(),
            options: {opacity: $opacity.slider('value') / 100.0},
            type: $layer.find(':selected').attr('layer_type')};
          options.layers.push(layer);
      });
      if (options.heatmap && (!options.layers || options.layers.length == 0))
      { options.heatmap.hideLayers = true; }

      var data = {viewName: $('.mapWrapper #mapName').val(),
        vizType: 'map', options: JSON.stringify(options),
        columnIds: JSON.stringify(colIds),
        view_query: $('.mapWrapper #view_query').val()};

      var loginMsg = 'You must be signed in to create a map';
      if (!$.isBlank(blist.util.inlineLogin))
      {
          blist.util.inlineLogin.verifyUser(
              function(isSuccess)
              {
                if (isSuccess) { doSave($form, data, options); }
                else { $('.mapWrapper .mainError').text(loginMsg); }
              }, loginMsg);
      }
      else { doSave($form, data, options); }
    };

    var doSave = function($form, postData, newDisplayFormat)
    {

      $.ajax({
          url: $form.attr("action"),
          type: "POST",
          data: postData,
          dataType: "json",
          success: function(data)
          {
            if (data.status == 'failure')
            {
              $('.mapWrapper .mainError').text(data.errors.join('; '));
            }
            else
            {
              $("#modal").jqmHide();
              <%- if @is_edit -%>
              if ('<%= cur_type %>' != $('.mapWrapper #mapType').val()
                || layersChanged)
              {
                  blist.$display.socrataMap()
                    .reset({displayFormat: newDisplayFormat});
              }
              else
              {
                  blist.$display.socrataMap().reload();
              }
              <%- else -%>
              blist.util.navigation.redirectToView(data.newViewId);
              <%- end -%>
            }
          }
      });
    };

    $('.mapWrapper .colorOption').colorPicker().bind('color_change',
        function(e, newColor)
        {
            var $target = $(e.target);
            $target.css('background-color', newColor)
              .next(':input').val(newColor);
        })
    .mousedown(function(e)
        {
            var $target = $(e.target);
            $target.data('colorpicker-color', $target.next(':input').val());
        });

    $('.mapWrapper form').submit(formSubmit);
    $('.mapWrapper a.create').click(formSubmit);

    $.analytics.trackEvent('Dataset Page Menu', 'Create a Map dialog opened', blistGridNS.viewId);
  };
</script>
