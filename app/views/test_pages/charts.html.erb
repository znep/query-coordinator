
<div class="chartArea">
  <div class="chartContainer"></div>
  <div class="baseline"></div>
</div>

<%- content_for :js_footer do -%>
<%= include_javascripts 'shared-new-chart' %>

<style type="text/css">

.chartArea {
  position: relative;
}

.chartContainer {
  margin-bottom: -800px;
  overflow-y: hidden;
  overflow-x: auto;
}

.chartContainer svg {
  top: auto !important;
}

.chartArea .baseline,
.chartArea .tickLine {
  background-color: #000;
  height: 1px;
  left: 0;
  position: absolute;
  width: 100%;
}

.chartArea .baseline {
  top: 600px;
  z-index: 2;
}

.chartArea .tickLine {
  background-color: #ccc;
  opacity: 0.7;
  z-index: 1;
}

.ie .chartArea .tickLine {
  opacity: 70
}

.chartArea .tickLabel {
  background-color: rgba(247, 247, 247, 0.7);
  font-size: 1.2em;
  margin-top: -1.2em;
  padding: 0 0.3em;
  position: absolute;
}

</style>

<script type="text/javascript">

$(function()
{
  var $chartContainer = $('.chartContainer');
  var raphaelPaper = new Raphael($chartContainer.get(0), 100, chartHeight);
  var chart = d3.raphael(raphaelPaper);
  var chartArea = d3.select('.chartArea');
  var $chartArea = $('.chartArea');
  var oldYScale, yScale;

  var renderHeight = 800;
  var chartHeight = 600;

  var gutterWidth = 60;

  var barWidth = 20;

  var ds, max, rowCount;

  Dataset.createFromViewId('<%= @view.id %>', function(inDs)
  {
    ds = inDs;

    // get prereqs
    var customAggs = {};
    // var column = ds.columnForFieldName('_1');
    // customAggs[column.id] = [ 'maximum' ];
    // ds.getAggregates(function()
    // {
    //   max = parseFloat(column.aggregates.maximum);
      ds.getTotalRows(function()
      {
        rowCount = ds.totalRows();
        setupChart();
      });
    // }, customAggs);

  });

  var setupChart = function()
  {
    raphaelPaper.setSize(rowCount * barWidth, renderHeight);

    $chartArea
      .addClass('chartArea')
      .width($('.chartContainer').width())
      .height(renderHeight);

    // kick off data fetch
    checkRowRenderRange();

    // set up future data fetch
    var throttledCheck = _.throttle(checkRowRenderRange, 250);
    $('.chartContainer').scroll(function()
    {
      throttledCheck();
    });
  };

  var currentFetchId;
  var checkRowRenderRange = function()
  {
    var reverseScrollScale = d3.scale.linear()
      .domain([ 0, (rowCount * barWidth) - $chartArea.width() ])
      .range([ 0, rowCount ]);

    var start = Math.max(Math.floor(reverseScrollScale($('.chartContainer').scrollLeft())) - 30, 0);
    var length = Math.ceil($chartArea.width() / barWidth) + 40;

    var fetchId = currentFetchId = _.uniqueId();
    var fetchedRows = [];
    ds.getRows(start, length, function(rows)
    {
      if (currentFetchId != fetchId)
      {
        return; // don't bother; we're doing other things now.
      }

      fetchedRows = fetchedRows.concat(rows);
      // if (!$.browser.msie || (fetchedRows.length == length))
      // {
        renderChart(fetchedRows);
      // }
    });
  };

  var px = function(f)
  {
    return function() {
      return Math.ceil(f.apply(this, arguments)) + 'px';
    };
  };

  // can't use d3 .text() on html elems because it assumes textContent. mux here for IE.
  var text = function(property)
  {
    if ($.browser.msie && ($.browser.majorVersion < 9))
    {
      return function(d, i) {
        $(this).text(property ? d[property] : d);
      };
    }
    else
    {
      return function(d, i) {
        this.textContent = (property ? d[property] : d);
      };
    }
  };

  var renderChart = function(data)
  {
    // readjust y-axis
    yScale = d3.scale.linear()
      .domain([ 0, d3.max(_.map(_.pluck(data, '17360'), function(val) { return parseFloat(val); })) ])
      .range([ 0, chartHeight ]);

    // init prev y-axis
    if (!oldYScale)
      oldYScale = yScale;

    // render actual bars
    var bars = chart.selectAll('.dataBar')
        .data(data, function(datum) { return datum.id; });
    bars
      .enter().append('rect')
        .classed('dataBar', true)
        .attr('stroke', '#fff')
        .attr('fill', '#4682b4')
        .attr('x', function(d) { return d.index * barWidth - .5 + gutterWidth; })
        .attr('y', chartHeight)
        .attr('width', barWidth)
        .attr('height', function(d) { return oldYScale(d['17360']); })
        .attr('transform', 'S1,-1,0,' + chartHeight);
    bars
      .transition()
        .duration(1000)
        .attr('height', function(d) { return yScale(d['17360']); });
    bars
      .exit()
        .remove();

    // render bar labels
    var labelX = function(d) { return d.index * barWidth + (barWidth / 2) - 2.5 + gutterWidth; };
    var labels = chart.selectAll('.dataLabel')
        .data(data, function(datum) { return datum.id; });
    labels
      .enter().append('text')
        .classed('dataLabel', true)
        .attr({ 'x': 0,
                'y': 0,
                'text-anchor': 'start',
                'font-size': 13 })
        .attr('transform', function(d) { return [ 'r40', 0, 0 ].join(',') + 'T' + labelX(d) + ',' + (chartHeight + 10); });

    labels
        .text(function(d) { return d['17361']; });

    labels
      .exit()
        .remove();

    // render tick lines
    var tickLines = chartArea.selectAll('.tickLine')
        .data(yScale.ticks(8), function(val) { return val; });
    tickLines
      .enter().append('div')
        .attr('class', 'tickLine')
        .style('top', px(function(d) { return chartHeight - oldYScale(d); }));;
    tickLines
      .transition()
        .duration(1000)
        .style('top', px(function(d) { return chartHeight - yScale(d); }));
    tickLines
      .exit()
        .remove();
    
    // render tick labels
    var tickLabels = chartArea.selectAll('.tickLabel')
        .data(yScale.ticks(8), function(val) { return val; });
    tickLabels
      .enter().append('div')
        .attr('class', 'tickLabel')
        .style('top', px(function(d) { return chartHeight - oldYScale(d); }));
    tickLabels
        .each(text())
      .transition()
        .duration(1000)
        .style('top', px(function(d) { return chartHeight - yScale(d); }));
    tickLabels
      .exit()
        .remove();

    // update old y-scale for anim init on next cycle
    oldYScale = yScale;
  };

});

</script>

<%- end -%>
