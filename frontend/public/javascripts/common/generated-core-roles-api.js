/**
 * Roles and Rights API
 * API for configurable roles and rights
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "https://localhost/api".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * DefaultApi - fetch parameter creator
 */
exports.DefaultApiFetchParamCreator = {
    /**
     * Set the role for a user. If the user already has a role, their role will be changed to the given role.
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    assignRoleToUser: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling assignRoleToUser");
        }
        // verify required parameter "roleId" is set
        if (params["roleId"] == null) {
            throw new Error("Missing required parameter roleId when calling assignRoleToUser");
        }
        // verify required parameter "xCSRFToken" is set
        if (params["xCSRFToken"] == null) {
            throw new Error("Missing required parameter xCSRFToken when calling assignRoleToUser");
        }
        var baseUrl = "/roles/{role-id}/users/{user-id}"
            .replace("{" + "user-id" + "}", "" + params["userId"])
            .replace("{" + "role-id" + "}", "" + params["roleId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"], "X-CSRF-Token": params["xCSRFToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Post a new custom &#x60;Role&#x60; for this domain.
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     * @param body
     */
    createRole: function (params, options) {
        // verify required parameter "xCSRFToken" is set
        if (params["xCSRFToken"] == null) {
            throw new Error("Missing required parameter xCSRFToken when calling createRole");
        }
        var baseUrl = "/roles";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"], "X-CSRF-Token": params["xCSRFToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Delete a specific &#x60;Role&#x60; object for the domain. Note that while a &#x60;Role&#x60; has users assigned to it, it can not be deleted.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    deleteRole: function (params, options) {
        // verify required parameter "roleId" is set
        if (params["roleId"] == null) {
            throw new Error("Missing required parameter roleId when calling deleteRole");
        }
        // verify required parameter "xCSRFToken" is set
        if (params["xCSRFToken"] == null) {
            throw new Error("Missing required parameter xCSRFToken when calling deleteRole");
        }
        var baseUrl = "/roles/{role-id}"
            .replace("{" + "role-id" + "}", "" + params["roleId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"], "X-CSRF-Token": params["xCSRFToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get all of the rights categories on the domain.
     * @param xAppToken App token for request
     */
    getAllRights: function (params, options) {
        var baseUrl = "/rights";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get all &#x60;Role&#x60; objects for domain.
     * @param xAppToken App token for request
     */
    getAllRoles: function (params, options) {
        var baseUrl = "/roles";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get a specific &#x60;Role&#x60; object for the domain.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xAppToken App token for request
     */
    getRole: function (params, options) {
        // verify required parameter "roleId" is set
        if (params["roleId"] == null) {
            throw new Error("Missing required parameter roleId when calling getRole");
        }
        var baseUrl = "/roles/{role-id}"
            .replace("{" + "role-id" + "}", "" + params["roleId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get the role for a user
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param xAppToken App token for request
     */
    getUserRole: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling getUserRole");
        }
        var baseUrl = "/users/{user-id}/role"
            .replace("{" + "user-id" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Get users with the given role
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xAppToken App token for request
     */
    getUsersWithRole: function (params, options) {
        // verify required parameter "roleId" is set
        if (params["roleId"] == null) {
            throw new Error("Missing required parameter roleId when calling getUsersWithRole");
        }
        var baseUrl = "/roles/{role-id}/users"
            .replace("{" + "role-id" + "}", "" + params["roleId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Remove the role from a user.
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    removeRoleFromUser: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling removeRoleFromUser");
        }
        // verify required parameter "roleId" is set
        if (params["roleId"] == null) {
            throw new Error("Missing required parameter roleId when calling removeRoleFromUser");
        }
        // verify required parameter "xCSRFToken" is set
        if (params["xCSRFToken"] == null) {
            throw new Error("Missing required parameter xCSRFToken when calling removeRoleFromUser");
        }
        var baseUrl = "/roles/{role-id}/users/{user-id}"
            .replace("{" + "user-id" + "}", "" + params["userId"])
            .replace("{" + "role-id" + "}", "" + params["roleId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"], "X-CSRF-Token": params["xCSRFToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Update a specific &#x60;Role&#x60; object for the domain.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param body
     * @param xAppToken App token for request
     */
    updateRole: function (params, options) {
        // verify required parameter "roleId" is set
        if (params["roleId"] == null) {
            throw new Error("Missing required parameter roleId when calling updateRole");
        }
        // verify required parameter "xCSRFToken" is set
        if (params["xCSRFToken"] == null) {
            throw new Error("Missing required parameter xCSRFToken when calling updateRole");
        }
        // verify required parameter "body" is set
        if (params["body"] == null) {
            throw new Error("Missing required parameter body when calling updateRole");
        }
        var baseUrl = "/roles/{role-id}"
            .replace("{" + "role-id" + "}", "" + params["roleId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["body"]) {
            fetchOptions.body = JSON.stringify(params["body"] || {});
        }
        fetchOptions.headers = assign({
            "X-App-Token": params["xAppToken"], "X-CSRF-Token": params["xCSRFToken"],
        }, contentTypeHeader);
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DefaultApi - functional programming interface
 */
exports.DefaultApiFp = {
    /**
     * Set the role for a user. If the user already has a role, their role will be changed to the given role.
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    assignRoleToUser: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.assignRoleToUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Post a new custom &#x60;Role&#x60; for this domain.
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     * @param body
     */
    createRole: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.createRole(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Delete a specific &#x60;Role&#x60; object for the domain. Note that while a &#x60;Role&#x60; has users assigned to it, it can not be deleted.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    deleteRole: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.deleteRole(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get all of the rights categories on the domain.
     * @param xAppToken App token for request
     */
    getAllRights: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getAllRights(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get all &#x60;Role&#x60; objects for domain.
     * @param xAppToken App token for request
     */
    getAllRoles: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getAllRoles(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get a specific &#x60;Role&#x60; object for the domain.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xAppToken App token for request
     */
    getRole: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getRole(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get the role for a user
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param xAppToken App token for request
     */
    getUserRole: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getUserRole(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Get users with the given role
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xAppToken App token for request
     */
    getUsersWithRole: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.getUsersWithRole(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Remove the role from a user.
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    removeRoleFromUser: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.removeRoleFromUser(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Update a specific &#x60;Role&#x60; object for the domain.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param body
     * @param xAppToken App token for request
     */
    updateRole: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.updateRole(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DefaultApi - object-oriented interface
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        _super.apply(this, arguments);
    }
    /**
     * Set the role for a user. If the user already has a role, their role will be changed to the given role.
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.assignRoleToUser = function (params, options) {
        return exports.DefaultApiFp.assignRoleToUser(params, options)(this.fetch, this.basePath);
    };
    /**
     * Post a new custom &#x60;Role&#x60; for this domain.
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     * @param body
     */
    DefaultApi.prototype.createRole = function (params, options) {
        return exports.DefaultApiFp.createRole(params, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a specific &#x60;Role&#x60; object for the domain. Note that while a &#x60;Role&#x60; has users assigned to it, it can not be deleted.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.deleteRole = function (params, options) {
        return exports.DefaultApiFp.deleteRole(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get all of the rights categories on the domain.
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.getAllRights = function (params, options) {
        return exports.DefaultApiFp.getAllRights(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get all &#x60;Role&#x60; objects for domain.
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.getAllRoles = function (params, options) {
        return exports.DefaultApiFp.getAllRoles(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get a specific &#x60;Role&#x60; object for the domain.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.getRole = function (params, options) {
        return exports.DefaultApiFp.getRole(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get the role for a user
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.getUserRole = function (params, options) {
        return exports.DefaultApiFp.getUserRole(params, options)(this.fetch, this.basePath);
    };
    /**
     * Get users with the given role
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.getUsersWithRole = function (params, options) {
        return exports.DefaultApiFp.getUsersWithRole(params, options)(this.fetch, this.basePath);
    };
    /**
     * Remove the role from a user.
     * @param userId The &#x60;User&#x60; identifier (4x4)
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.removeRoleFromUser = function (params, options) {
        return exports.DefaultApiFp.removeRoleFromUser(params, options)(this.fetch, this.basePath);
    };
    /**
     * Update a specific &#x60;Role&#x60; object for the domain.
     * @param roleId The &#x60;Role&#x60; identifier (UUID)
     * @param xCSRFToken Required to help prevent CSRF attacks
     * @param body
     * @param xAppToken App token for request
     */
    DefaultApi.prototype.updateRole = function (params, options) {
        return exports.DefaultApiFp.updateRole(params, options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
;
/**
 * DefaultApi - factory interface
 */
exports.DefaultApiFactory = function (fetch, basePath) {
    return {
        /**
         * Set the role for a user. If the user already has a role, their role will be changed to the given role.
         * @param userId The &#x60;User&#x60; identifier (4x4)
         * @param roleId The &#x60;Role&#x60; identifier (UUID)
         * @param xCSRFToken Required to help prevent CSRF attacks
         * @param xAppToken App token for request
         */
        assignRoleToUser: function (params, options) {
            return exports.DefaultApiFp.assignRoleToUser(params, options)(fetch, basePath);
        },
        /**
         * Post a new custom &#x60;Role&#x60; for this domain.
         * @param xCSRFToken Required to help prevent CSRF attacks
         * @param xAppToken App token for request
         * @param body
         */
        createRole: function (params, options) {
            return exports.DefaultApiFp.createRole(params, options)(fetch, basePath);
        },
        /**
         * Delete a specific &#x60;Role&#x60; object for the domain. Note that while a &#x60;Role&#x60; has users assigned to it, it can not be deleted.
         * @param roleId The &#x60;Role&#x60; identifier (UUID)
         * @param xCSRFToken Required to help prevent CSRF attacks
         * @param xAppToken App token for request
         */
        deleteRole: function (params, options) {
            return exports.DefaultApiFp.deleteRole(params, options)(fetch, basePath);
        },
        /**
         * Get all of the rights categories on the domain.
         * @param xAppToken App token for request
         */
        getAllRights: function (params, options) {
            return exports.DefaultApiFp.getAllRights(params, options)(fetch, basePath);
        },
        /**
         * Get all &#x60;Role&#x60; objects for domain.
         * @param xAppToken App token for request
         */
        getAllRoles: function (params, options) {
            return exports.DefaultApiFp.getAllRoles(params, options)(fetch, basePath);
        },
        /**
         * Get a specific &#x60;Role&#x60; object for the domain.
         * @param roleId The &#x60;Role&#x60; identifier (UUID)
         * @param xAppToken App token for request
         */
        getRole: function (params, options) {
            return exports.DefaultApiFp.getRole(params, options)(fetch, basePath);
        },
        /**
         * Get the role for a user
         * @param userId The &#x60;User&#x60; identifier (4x4)
         * @param xAppToken App token for request
         */
        getUserRole: function (params, options) {
            return exports.DefaultApiFp.getUserRole(params, options)(fetch, basePath);
        },
        /**
         * Get users with the given role
         * @param roleId The &#x60;Role&#x60; identifier (UUID)
         * @param xAppToken App token for request
         */
        getUsersWithRole: function (params, options) {
            return exports.DefaultApiFp.getUsersWithRole(params, options)(fetch, basePath);
        },
        /**
         * Remove the role from a user.
         * @param userId The &#x60;User&#x60; identifier (4x4)
         * @param roleId The &#x60;Role&#x60; identifier (UUID)
         * @param xCSRFToken Required to help prevent CSRF attacks
         * @param xAppToken App token for request
         */
        removeRoleFromUser: function (params, options) {
            return exports.DefaultApiFp.removeRoleFromUser(params, options)(fetch, basePath);
        },
        /**
         * Update a specific &#x60;Role&#x60; object for the domain.
         * @param roleId The &#x60;Role&#x60; identifier (UUID)
         * @param xCSRFToken Required to help prevent CSRF attacks
         * @param body
         * @param xAppToken App token for request
         */
        updateRole: function (params, options) {
            return exports.DefaultApiFp.updateRole(params, options)(fetch, basePath);
        },
    };
};
