<% content_for :head do %>
<%= rendered_stylesheet_tag 'internal' %>
<title><%=
  [ "Domain #{@domain.try(:name) || ''}",
    'Internal Panel',
    get_site_title
  ].join(' | ') %></title>
<% end %>

<%= render '/internal/left_nav' %>

<div class="contentBox withLeftNavigation internalPanelRedesign">
  <div class='content'>

    <!-- Federations for everyone? <%= federations_for_everyone? %> -->

    <%= render :partial => 'production_warning' %>
    <h1><%= @domain.name %> (<%= @domain.cname %>)</h1>
    <%= display_standard_flashes %>

    <p>This is a
    <a href="/internal/tiers/<%= @domain.accountTier.name %>">
      <em><%= @domain.accountTier.name %></em>
    </a>
    domain.</p>
    <p>Domain ID: <%= @domain.id %></p>
    <p class="cacheRefreshedAt">
      Cache Refreshed at:
      <%= link_to domain_cache_time, show_domain_data_path(format: :json) %>
    </p>
    <p>Organized inside: <%= organization_link %></p>
    <p>Salesforce Information: <%= salesforce_information %></p>
    <p>Domain Deleted: <%= @deleted ? Time.at(@domain.deletedAt).utc : "false" %></p>

    <h2>Domain/Aliases:</h2>
    <div class="updateAliases">
      <div class="line">
        <%= label_tag 'new_cname', 'Primary CName' %>
        <%= content_tag :span, @domain.cname %>
      </div>
      <%- @aliases.each_with_index do |_alias, index| %>
        <div class="line" title="<%= _alias %>">
          <%= label_tag 'aliases', index.zero? ? 'Aliases' : '' %>
          <%= content_tag :span, _alias, :class => 'alias' %>
          <%= remove_alias_button(_alias) %>
          <%= promote_to_primary_cname_button(_alias) %>
        </div>
      <%- end %>
    </div>

    <h2>Add New Alias:</h2>
    <%= form_tag update_aliases_path, :class => 'updateAliasesForm' do %>
      <div class="line">
        <%= text_field_tag 'new_alias', '' %>
      </div>
      <%= submit_tag 'Add Alias' %>
    <% end %>

    <h2>Configuration Sets</h2>
    <ul>
      <%- @configs.each do |conf|
        path =
          case conf.type
          when 'feature_flags' then feature_flags_config_path
          else show_config_path(domain_id: @domain.cname,
                                config_id: conf.id)
          end -%>
          <li<%== ' class="isDefault"' if conf.default %>>
          <%= link_to "(#{conf.type}) #{conf.name}", path %>
          </li>
      <%- end -%>
    </ul>

    <h2>Add Configuration Set:</h2>
    <%= form_tag create_site_config_path, :class => 'addConfigForm' do %>
      <div class='line'>
        <%= text_field_tag 'config[type]', '', :class => 'add_config_type', :autocomplete => 'off' %>
        <div class="warning">
          <%- [ :poorly_understood,
                :not_intended_for_direct_manipulation,
                :deprecation ].each do |reason| %>
            <%= discouragement_explanation(reason) %>
          <%- end %>
          <div class="already_exists">
            This configuration already exists. Maybe you should edit the <a>existing one</a> instead?
          </div>
        </div>
      </div>
      <%= submit_tag 'Create' %>
    <% end %>

    <h2>Modules (formerly Modules and Features):</h2>
    <div>Disabling a module will cause it to remain visible in this list. There is no functional difference between a disabled and removed module.</div>
    <%# A module gets created in `domain_modules`. It is never deleted. A property is set in the config `feature_set`. This controls whether or not it is used. The exception is `federations`, which are automatically available in most cases unless it's not in our main datacenter. See CORE-2696 and InternalHelper#federations_for_everyone? %>
    <div class="featureList">
      <%- @domain.features.sort.each do |feature, enabled| -%>
      <div class="line<%= ' featureDisabled' unless enabled %>">
        <label><%= feature %></label>
        <%- unless module_notice?(feature) %>
          <%= enable_or_disable_module_feature(feature, enabled) %>
          <%= remove_module_feature(feature) %>
        <%- end %>
      </div>
      <%- end -%>
    </div>

    <h2>Add Module</h2>
    <%= form_tag add_module_feature_path, :class => 'addModuleForm', :autocomplete => 'off' do %>
      <div class='line'>
        <%= text_field_tag 'new-feature_name' %>
        <%= hidden_field_tag 'new-feature_enabled', 'enabled' %>
      </div>
      <div class="warning"></div>
      <%= submit_tag 'Add' %>
    <% end %>

    <div class="actions expandable">
      <%= expandable_section('Management Actions') do %>
        <dl class="config_type_description">
          <dt>Change Organization</dt>
          <dd>
            <%= one_button_form(url: update_domain_path, text: 'Update') do %>
              <%= select_tag :org_id, nil, 'class' => 'organizationList' %>
            <%- end %>
            <p>This is entirely organizational and only affects which organization you see this domain listed in.</p>
          </dd>
          <dt>Rename Domain</dt>
          <dd>
            <%= one_button_form(url: update_domain_path, text: 'Rename') do %>
              <%= text_field_tag :new_name, @domain.name %>
            <%- end %>
            <p>This is entirely cosmetic and only affects how the name of the domain is reflected in the Internal Panel.</p>
          </dd>
          <dt>Salesforce ID</dt>
          <dd>
            <%= one_button_form(url: update_domain_path, text: 'Set Salesforce ID') do %>
              <%= text_field_tag :salesforce_id, @domain.salesforceId %>
            <%- end %>
          </dd>
          <dt>Flush Cache</dt>
          <dd>
            <%- if CurrentDomain.last_refresh(@domain.cname).nil? %>
              <p>Dev Mode does not cache domain data.</p>
            <%- else %>
              <%= one_button_form(url: flush_cache_path(format: :data), text: 'Flush cache') %>
            <%- end %>
            <p>This informs frontend that it should re-fetch domain data (including configurations) from core.</p>
          </dd>
          <%- if @deleted %>
            <dt>Un-delete Domain</dt>
            <dd>
              <p><%= one_button_form(url: undelete_domain_path, text: 'Mark Domain as NOT deleted') %></p>
              <br/>
              <p>This will remove deleted_at for the domain in metadb.</p>
            </dd>
          <%- else %>
            <dt>Delete Domain</dt>
            <dd>
              <p><%= one_button_form(url: delete_domain_path, text: 'Mark Domain as Deleted') %></p>
              <br/>
              <p>This will set deleted_at for the domain in metadb (soft-delete). This removes the domain from the api results for allCustomerDomains.  Some APIs like api/views/{id}[?method=getByIds], /resource/{id} will no longer work.  This means we will stop monitoring the domain, and stop indexing the domain for search. Once the name (not cname) of the domain is set to contain "delete" and the deleted_at property is not null, all extant customer data associated with the domain may be deleted at any time.</p>
            </dd>
          <%- end %>
        </dl>
      <%- end %>
    </div>

    <div class="prebuiltActions expandable">
      <%= expandable_section('Pre-built Actions') do %>
        <h3>Standard test configurations</h3>
          <div class="warning">
            <strong> WARNING! NOT INTENDED FOR USE ON CUSTOMER DOMAINS!</strong>
            <p>Enabling these cofigurations will override any existing values, and resetting will not remember the previous values.
          </div>
          <dl class="config_type_description">
            <%= reset_feature_flags(bundle_name: 'Reset to Default', bundle_description: 'Standard configuration. Reset all feature flags to their default values.') %>
            <%= bulk_feature_flag_update(@configurations[:sgcc]) %>
          </dl>

        <h3>Feature sets</h3>
        <dl class="config_type_description">
          <%= bulk_feature_flag_update(@configurations[:nbe])%>
          <%= bulk_module_feature_addition(@configurations[:govstat]) %>
        </dl>
      <%- end %>
    </div>
  </div>
</div>

<% content_for :js_footer do %>
  <script type="text/javascript">
    $(function() {
      var existingConfigTypes = <%== @configs.inject([]) { |memo, conf| memo << conf.type }.uniq.to_json %>;
      var knownConfigTypes = <%== @known_config_types.to_json %>;

      var showAllFieldsRenderFunction = function(dataItem, topMatch, config) {
        var toRender = [];
        var excludeFields = (config.excludeFieldsFromRender || []).concat(config.nameField);
        toRender.push(
          $.tag2({ _: 'p', className: 'title', contents: dataItem[config.nameField] }));
        _.each(_.difference(_.keys(dataItem), excludeFields), function(key) {
          var value = dataItem[key];
          // Autolink because that seems obvious.
          // There's more refined autolinking theoretically possible, but it's more
          // effort to figure out than it's worth.
          if (/^http/.test(value)) {
            value = {
              _: 'a',
              target: '_blank',
              // Nuke all the html tags that awesomecomplete adds when matching.
              href: $('<div>' + value + '</div>').text(),
              contents: value
            };
          }
          toRender.push(
            $.tag2({ _: 'p', className: 'matchRow', contents: [
              { _: 'span', className: 'matchedField', contents: key },
              value]
            }));
        });
        return _.pluck(toRender, '0.outerHTML').join('');
      };

      $('.addConfigForm input[name="config[type]"]').change(function() {
        var chosenType = $(this).val();
        if (_.isEmpty(chosenType)) {
          displayDiscouragement({});
          return;
        }

        var config = _.detect(knownConfigTypes, function(type) {
          return type.name === chosenType;
        });
        var poorly_understood = { discourage_in_creation_ui: { reason: 'poorly_understood' }};
        displayDiscouragement(config || poorly_understood);
      });

      var displayDiscouragement = function(dataItem) {
        var discouragement = dataItem.discourage_in_creation_ui;
        var $warning = $('.addConfigForm .warning');
        $warning.removeClass().addClass('warning');
        $warning.find('span.instead').hide();
        if (discouragement) {
          switch(discouragement.reason) {
            case 'poorly_understood':
              $warning.addClass('poorly_understood');
              break;
            case 'not_intended_for_direct_manipulation':
              $warning.addClass('not_intended_for_direct_manipulation');
              break;
            case 'deprecation':
              $warning.addClass('deprecation');
              break;
            default:
              console.error('not sure what happened');
          }
          if (discouragement.instead) {
            $warning.find('span.instead').show();
            $warning.find('span.instead a').attr('href', discouragement.instead);
          }
        } else if (_.include(existingConfigTypes, dataItem.name)) {
          $warning.addClass('already_exists');
          <%# Using `replace` instead of `format` because the url_helper is insistent on
            # escaping the value I give it. %>
          $warning.find('a').attr('href',
              '<%= show_config_path(config_id: '{0}') %>'.replace('%7B0%7D', dataItem.name));
        }
      };

      $('.add_config_type').focus(_.once(function() {
        $(this).awesomecomplete({
          highlightMatches: true,
          ignoreCase: true,
          excludeFieldsFromRender: ['default_config_name', 'discourage_in_creation_ui'],
          renderFunction: showAllFieldsRenderFunction,
          staticData: knownConfigTypes,
          resultLimit: 100,
          showAll: true,
          onComplete: displayDiscouragement,
          suggestionListClass: 'autocomplete config_type_autocomplete'
        }).focus();
      }));

      var displayModuleWarning = function(dataItem) {
        var $warning = $('.addModuleForm .warning');
        var genericWarning = 'This module is permanent right now. You will not be able to disable or remove it.';
        if (dataItem.permanent) {
          $warning.text(dataItem.permanent.reason || genericWarning).show();
        } else {
          $warning.hide();
        }
      };

      var modules = <%== @modules.to_json %>;
      $('input[name=new-feature_name]').focus(_.once(function() {
        $(this).awesomecomplete({
          highlightMatches: true,
          ignoreCase: true,
          excludeFieldsFromRender: ['flags', 'permanent'],
          onComplete: displayModuleWarning,
          renderFunction: showAllFieldsRenderFunction,
          staticData: modules,
          resultLimit: 100,
          showAll: true,
          suggestionListClass: 'autocomplete'
        }).focus();
      }));

      $('.featureList label').each(function() {
        var $this = $(this);
        var module = _.detect(modules, function(mod) { return mod.name === $this.text(); });
        if (module) {
          $this.socrataTip({
            trigger: 'hover',
            isSolo: true,
            message: _.compact([module.description, _.get(module, 'permanent.reason')]).join('<br /><br />'),
            'parent': 'body'
          });
        }
      });

      $('.cacheRefreshedAt a').formatWithMoment();
    });
  </script>
<% end %>
