describe('DragDropStore', function() {
  'use strict';

  var blockContent = 'testBlockContent';
  var storyteller = window.socrata.storyteller;

  function dragOver(storyUid, blockContent) {
    storyteller.dispatcher.dispatch({
      action: Actions.STORY_DRAG_OVER,
      storyUid: storyUid,
      pointer: {},
      storyElement: {},
      blockContent: blockContent
    });
  }

  function dragLeave(storyUid) {
    storyteller.dispatcher.dispatch({
      action: Actions.STORY_DRAG_LEAVE,
      storyUid: storyUid
    });
  }

  function dragDrop(storyUid, blockContent) {
    storyteller.dispatcher.dispatch({
      action: Actions.STORY_DROP,
      storyUid: storyUid,
      blockContent: blockContent
    });
  }


  describe('given STORY_DRAG_OVER action', function() {
    describe('with a valid storyUid and blockId', function() {
      it('should update its hint position', function(done) {
        storyteller.dragDropStore.addChangeListener(function() {
          var hint = storyteller.dragDropStore.getReorderHintPosition();
          assert.equal(hint.storyUid, standardMocks.validStoryUid);
          assert.equal(hint.dropIndex, 0);
          done();
        });

        dragOver(standardMocks.validStoryUid, blockContent);
      });

      describe('but then an invalid storyId', function() {
        it('should clear its hint position', function(done) {
          dragOver(standardMocks.validStoryUid, blockContent);

          storyteller.dragDropStore.addChangeListener(function() {
            var hint = storyteller.dragDropStore.getReorderHintPosition();
            assert.isNull(hint);
            done();
          });

          dragOver(standardMocks.invalidStoryUid, standardMocks.invalidBlockId);
        });
      });

      describe('but then a STORY_DRAG_LEAVE event', function() {
        describe('over some other story', function() {
          it('should preserve the existing hint', function() {
            dragOver(standardMocks.validStoryUid, blockContent);
            var originalHint = storyteller.dragDropStore.getReorderHintPosition();
            assert.isNotNull(originalHint);

            storyteller.dragDropStore.addChangeListener(function() {
              throw new Error('expected no change');
            });

            dragLeave(standardMocks.invalidStoryUid);

            var hint = storyteller.dragDropStore.getReorderHintPosition();
            assert.equal(hint, originalHint);

          });
        });
        describe('over the dragged story', function() {
          it('should clear the hint', function(done) {
            dragOver(standardMocks.validStoryUid, blockContent);
            var originalHint = storyteller.dragDropStore.getReorderHintPosition();
            assert.isNotNull(originalHint);

            storyteller.dragDropStore.addChangeListener(function() {
              var hint = storyteller.dragDropStore.getReorderHintPosition();
              assert.isNull(hint);
              done();
            });

            dragLeave(standardMocks.validStoryUid);
          });
        });
      });
    });
  });

  describe('given STORY_DROP action', function() {
    describe('while dragging over the story', function() {
      it('should invoke a correct STORY_INSERT_BLOCK', function(done) {
        dragOver(standardMocks.validStoryUid, blockContent);

        storyteller.dispatcher.register(function(payload) {
          if(payload.action === Actions.STORY_INSERT_BLOCK) {
            assert.propertyVal(payload, 'blockContent', standardMocks.validBlockData1);
            assert.propertyVal(payload, 'storyUid', standardMocks.validStoryUid);
            assert.propertyVal(payload, 'insertAt', 0);
            done();
          }
        });

        dragDrop(standardMocks.validStoryUid, standardMocks.validBlockData1);

      });
    });

    describe('while not dragging', function() {
      it('should invoke no further action', function() {
        var spy = sinon.spy();
        storyteller.dispatcher.register(spy);
        dragDrop(standardMocks.validStoryUid, standardMocks.validBlockId);
        assert(spy.calledOnce); // Once for the STORY_DROP generated by dragDrop in the test.
      });
    });

  });

  describe('isDraggingOverStory', function() {
    describe('while not dragging', function() {
      it('should return false', function() {
        assert.isFalse(storyteller.dragDropStore.isDraggingOverStory(standardMocks.validStoryUid));
      });
    });

    describe('while dragging', function() {
      beforeEach(function() {
        dragOver(standardMocks.validStoryUid, blockContent);
      });
      describe('over the story in the argument', function() {
        it('should return true', function() {
          assert.isTrue(storyteller.dragDropStore.isDraggingOverStory(standardMocks.validStoryUid));
        });
      });
      describe('over a story other than the one in the argument', function() {
        it('should return false', function() {
          assert.isFalse(storyteller.dragDropStore.isDraggingOverStory(standardMocks.invalidStoryUid));
        });
      });
    });

  });

});
