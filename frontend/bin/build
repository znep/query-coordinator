#!/bin/bash
set -ex

# Example usage:
# COMPRESS_ASSETS=true SERVICE_ARTIFACT=platform-ui.tgz SERVICE_NAME=frontend SERVICE_VERSION=1.0.0 \
#   SERVICE_SHA=$(git rev-parse HEAD | cut -c1-8) ARTIFACTORY_USER=shared-engr \
#   ARTIFACTORY_PASSWORD='2ZfexutMJBH3&Dz*wi$vgbJzD8B2!h' WORKSPACE=$PWD/.. BUILD_URL=http://jenkins bin/build

function verify_env_var() {
  if [ -z "${!1}" ]; then
    echo "The following ENV variable must be set: #{$1}"
    exit 2
  fi
}

set +x
verify_env_var 'ARTIFACTORY_PASSWORD'
verify_env_var 'ARTIFACTORY_USER'
verify_env_var 'BUILD_URL'
verify_env_var 'COMPRESS_ASSETS'
verify_env_var 'RUN_STATIC_ANALYSIS'
verify_env_var 'SERVICE_ARTIFACT'
verify_env_var 'SERVICE_NAME'
verify_env_var 'SERVICE_SHA'
verify_env_var 'SERVICE_VERSION'
verify_env_var 'WORKSPACE'
set -x

# Called by Jenkins to build and package frontend in preparation for a deploy
# Note that dependencies should be installed before running this script.

cd $WORKSPACE/frontend

echo "Configuring bundle to connect to repo.socrata.com with credentials..."
set +x
bundle config repo.socrata.com ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}
set -x
bundle check || bundle install

# install build dependencies. Hate to have to do this manually, but it's not working
# well in our build process.
gem install localeapp -v '2.4.0'
gem install httparty -v '0.15.6'

# Write REVISION file
git rev-parse HEAD > "${WORKSPACE}/frontend/REVISION"

# make sure Cheetah tests stay in-sync with their environments
# set a new cheetah revision only when we cut a release
# preserve existing cheetah revision in the cherry-pick and hotfix cases
# don't bother setting cheetah revision if staging build since this only applies to RC/EU/Fedramp
# fail build if something goes wrong so we don't cause Cheetah tests to get out of sync with environments
#   in the event that this fails and you need to get a hotfix out
#   you can override by unsetting RELEASE_MODE in the frontend-build-release job
#   see: https://jenkins-build.socrata.com/view/frontend-release-pipeline/job/frontend-build-release/configure
if [ -n "$RELEASE_MODE" ]; then
  echo "$RELEASE_MODE release detected"

  if [ $RELEASE_MODE == 'cut' ]; then
    echo 'retrieving Cheetah revision from api.github'
    cheetah_revision=$(curl -sH "Authorization: token $GITHUB_API_TOKEN" \
      https://api.github.com/repos/socrata/cheetah/branches/master | jq -r '.commit.sha')
  elif [ $RELEASE_MODE == 'cherry-pick' ]; then
    echo 'retrieving Cheetah revision from RC /version'
    cheetah_revision=$(curl -s https://cheetah.rc-socrata.com/version.json | jq -r '.cheetahRevision')
  elif [ $RELEASE_MODE == 'hotfix' ]; then
    echo 'retrieving Cheetah revision from Fedramp /version'
    cheetah_revision=$(curl -s https://cheetah.demo.socrata.com/version.json | jq -r '.cheetahRevision')
  else
    echo "ERROR >> unrecognized release mode $RELEASE_MODE"
    echo 'failing build since this would cause Cheetah tests to get out of sync with environments'
    exit 1
  fi

  if [[ $cheetah_revision =~ [a-f0-9]{40} ]]; then
    cheetah_revision_file="${WORKSPACE}/frontend/CHEETAH_REVISION"
    echo "writing Cheetah revision: $cheetah_revision to $cheetah_revision_file"
    echo $cheetah_revision > $cheetah_revision_file
  else
    echo "ERROR >> Cheetah revision: $cheetah_revision is not SHA-like"
    echo 'failing build since this would cause Cheetah tests to get out of sync with environments'
    exit 1
  fi
fi

# Package assets
npm run build:prod

bundle exec rake assets:precompile

shopt -s nocasematch
if [[ ${SKIP_PUSH_LOCALE_DANGEROUS} != "true" ]]; then
  # We want to push our latest en.yml up to LocaleApp and then pull down
  # additional translations in other locales.
  echo "Pushing 'common' locales to LocaleApp"
  `git rev-parse --show-toplevel`/bin/push_locale common

  echo "Pushing 'frontend' locales to LocaleApp"
  `git rev-parse --show-toplevel`/bin/push_locale frontend

  # Pull translations from both common / frontend
  echo "Pulling translations from LocaleApp"
  set +e
  bin/pull_translations
  set -e

else
  echo 'Skipping LocaleApp push and pull because SKIP_PUSH_LOCALE_DANGEROUS is set'
fi
shopt -u nocasematch

if [ ! -f ${WORKSPACE}/frontend/config/locales/es.yml ]; then
  echo "Did not successfully download locales"
  echo `ls -l ${WORKSPACE}/frontend/config/locales/`

  if [[ ${SKIP_PUSH_LOCALE_DANGEROUS} == "true" ]]; then
    echo "Continuing without locales because $SKIP_PUSH_LOCALE_DANGEROUS = ${SKIP_PUSH_LOCALE_DANGEROUS}"
    echo "This build is NOT PRODUCTION READY"
  else
    exit 1
  fi
fi

# Run tests (just running rake _should_ run all the tests, but this often fails)
if [[ ${SKIP_TESTS_DANGEROUS} != "true" ]]; then
  bundle exec rake test:units
  bundle exec rake test:functionals
  bundle exec rspec --no-color
  bundle exec rake test:karma:parallel
else
  echo "Skipping tests because $SKIP_TESTS_DANGEROUS = ${SKIP_TESTS_DANGEROUS}"
fi


# Remove certain javascript files from public/javascripts (BUT WHY)
if [ ! ${COMPRESS_ASSETS} = "true" ] ; then
  bundle exec rake deploy:move_resources
fi

# Tar the entirety of platform-ui to be used by our docker build process.
pushd .. && tar cpzfX ${SERVICE_ARTIFACT} frontend/.package-ignore * && popd

# Get build info for Decima
echo "---" > build_info.yml
echo "service: ${SERVICE_NAME}" >> build_info.yml
echo "version: ${SERVICE_VERSION}" >> build_info.yml
echo "service_sha: ${SERVICE_SHA}" >> build_info.yml
echo "configuration: ${BUILD_URL}" >> build_info.yml

# Static analysis
if ${RUN_STATIC_ANALYSIS}; then
  # FIXME for some reason this works but the commented rake task below does not.
  ./node_modules/.bin/eslint --ignore-path .eslintignore -c package.json -f checkstyle public/javascripts/angular > eslint-results.xml || true
  # bundle exec rake "lint:js:dataCards[checkstyle]" > eslint-results.xml

  bundle exec rake "lint:ruby[xml]" > reek-results.xml
fi
