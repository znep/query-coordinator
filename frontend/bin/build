#!/bin/bash
set -ex

# Example usage:
# COMPRESS_ASSETS=true SERVICE_ARTIFACT=platform-ui.tgz SERVICE_NAME=frontend SERVICE_VERSION=1.0.0 \
#   SERVICE_SHA=$(git rev-parse HEAD | cut -c1-8) ARTIFACTORY_USER=shared-engr \
#   ARTIFACTORY_PASSWORD='2ZfexutMJBH3&Dz*wi$vgbJzD8B2!h' WORKSPACE=$PWD/.. BUILD_URL=http://jenkins bin/build

function verify_env_var() {
  if [ -z "${!1}" ]; then
    echo "The following ENV variable must be set: #{$1}"
    exit 2
  fi
}

set +x
verify_env_var 'ARTIFACTORY_PASSWORD'
verify_env_var 'ARTIFACTORY_USER'
verify_env_var 'BUILD_URL'
verify_env_var 'COMPRESS_ASSETS'
verify_env_var 'RUN_STATIC_ANALYSIS'
verify_env_var 'SERVICE_ARTIFACT'
verify_env_var 'SERVICE_NAME'
verify_env_var 'SERVICE_SHA'
verify_env_var 'SERVICE_VERSION'
verify_env_var 'WORKSPACE'
set -x

# Called by Jenkins to build and package frontend in preparation for a deploy
# Note that dependencies should be installed before running this script.

cd $WORKSPACE/frontend

###########################################
# Install rbenv and ruby
echo "Cloning rbenv and ruby-build into jenkins home directory."
git clone --depth 1 https://github.com/sstephenson/rbenv.git ~/.rbenv
git clone --depth 1 https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build

echo "Setting up profile to use rbenv."
echo 'export PATH="~/.rbenv/bin:${PATH}"' >> ~/.profile
echo 'export RBENV_ROOT="~/.rbenv"' >> ~/.profile
echo 'eval "$(rbenv init -)"' >> ~/.profile
source ~/.profile

if [ -f ~/.ruby-version ]; then
  RUBY_VERSION=`cat ~/.ruby-version`
elif [ -f .ruby-version ]; then
  RUBY_VERSION=`cat .ruby-version`
else
  RUBY_VERSION=2.3.5 # Current as of Sep 26th, 2017
fi

# (StanR) - removing this temporarily
#RUBY_CONFIGURE_OPTS=--enable-shared rbenv install -f ${RUBY_VERSION}
rbenv install -f ${RUBY_VERSION}
rbenv global ${RUBY_VERSION}

echo "Configuring bundle to connect to repo.socrata.com with credentials..."
set +x
bundle config repo.socrata.com ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD}
set -x
bundle check || bundle install

# install build dependencies. Hate to have to do this manually, but it's not working
# well in our build process.
gem install localeapp -v '2.4.0'
gem install httparty -v '0.15.6'

# Write REVISION file
git rev-parse HEAD > "${WORKSPACE}/frontend/REVISION"

# Package assets
npm run build:prod

bundle exec rake assets:precompile

shopt -s nocasematch
if [[ ${SKIP_PUSH_LOCALE_DANGEROUS} != "true" ]]; then
  # We want to push our latest en.yml up to LocaleApp and then pull down
  # additional translations in other locales.
  echo "Pushing 'common' locales to LocaleApp"
  `git rev-parse --show-toplevel`/bin/push_locale common

  echo "Pushing 'frontend' locales to LocaleApp"
  `git rev-parse --show-toplevel`/bin/push_locale frontend
else
  echo 'Skipping LocaleApp push because SKIP_PUSH_LOCALE_DANGEROUS is set'
fi
shopt -u nocasematch

# Pull translations from both common / frontend
set +e
bin/pull_translations
set -e

if [ ! -f ${WORKSPACE}/frontend/config/locales/es.yml ]; then
  echo "Did not successfully download locales"
  echo `ls -l ${WORKSPACE}/frontend/config/locales/`
  exit 1
fi

# Run tests (just running rake _should_ run all the tests, but this often fails)
export CORE_SESSION=${CORE_SESSION:-'frontend-generated'}
bundle exec rake test:units
bundle exec rake test:functionals
bundle exec rspec --no-color
bundle exec rake test:karma:parallel

# Remove certain javascript files from public/javascripts (BUT WHY)
if [ ! ${COMPRESS_ASSETS} = "true" ] ; then
  bundle exec rake deploy:move_resources
fi

# Tar the entirety of platform-ui to be used by our docker build process.
pushd .. && tar cpzfX ${SERVICE_ARTIFACT} frontend/.package-ignore * && popd

# Get build info for Decima
echo "---" > build_info.yml
echo "service: ${SERVICE_NAME}" >> build_info.yml
echo "version: ${SERVICE_VERSION}" >> build_info.yml
echo "service_sha: ${SERVICE_SHA}" >> build_info.yml
echo "configuration: ${BUILD_URL}" >> build_info.yml

# Static analysis
if ${RUN_STATIC_ANALYSIS}; then
  # FIXME for some reason this works but the commented rake task below does not.
  ./node_modules/.bin/eslint --ignore-path .eslintignore -c package.json -f checkstyle public/javascripts/angular > eslint-results.xml || true
  # bundle exec rake "lint:js:dataCards[checkstyle]" > eslint-results.xml

  bundle exec rake "lint:ruby[xml]" > reek-results.xml
fi
