// dataset:
//  Deals with creating/accessing datasets.

var config = require('../../test-config.js');

var _ = require('underscore');
var expect = require('expect.js');
var webdriver = require('selenium-webdriver');
var url = require('url');
var https = require('https');
var soda = require('soda-js');

// List of IDs.
// Any datasets here have to be removed at the end of the run.
//TODO dump to file so they can be cleaned up on ctrl-c.
var datasetsCreatedThisTestRun = [];

var dataset = function(socrataClient)
{
    this._client = socrataClient;
    this.datasetsCreatedThisInstance = [];
    this._flow = webdriver.promise.controlFlow();
};

// Static members

dataset.createJsonEndpointUrl = function(id)
{
    return url.parse(config.server.url.resolve('/resource/'+id+'.json'));
};

//TODO have specification language here.
dataset.datasetTemplates = {};
dataset.datasetTemplates.NameAndAge = 'NAME_AGE'

// Instance members


dataset.prototype.availableTemplates = function()
{
    // TODO We'll probably want to filter based upon site features.
    return dataset.datasetTemplates;
};

// Gets a dataset proxy pointing to a brand new instance of the given template.
// Yields: dataset object or null on error.
dataset.prototype.newFromTemplate = function(templateSpec)
{
    var ds = this;
    expect(templateSpec).to.be.ok();

    return this._flow.execute(function()
    {
        var d = webdriver.promise.defer();

        var proxy = new DatasetProxy(ds._client);
        proxy._create('AUTOMATED_TEST_'+templateSpec, 'Generated by automated tests').then(function()
            {
                expect(proxy.id).to.be.ok()
            });
        proxy._addColumn('Name', 'text');
        proxy._addColumn('Age', 'number');
        proxy._publish().then(function()
        {
            var nameAge = function(n, a) { return { name: n, age: a}; };
            datasetsCreatedThisTestRun.push(proxy.id);
            ds.datasetsCreatedThisInstance.push(proxy.id);
            var toAdd = [
                nameAge("The Stig", -86),
                nameAge("Tim Berners-Lee", 58),
                nameAge("Elon Musk", 42)
            ];

            var wereErrors = false;
            var maybeDone = _.after(toAdd.length, function()
            {
                d.fulfill(wereErrors ? null : proxy);
            });

            var op = proxy.getSodaProducerOperation();
            _.each(toAdd, function(v)
            {
                op.add(v).
                    on('error', function(error)
                    {
                        wereErrors = true;
                        maybeDone();
                    }).
                    on('success', maybeDone);
            });
        });

        return d;
    });
};

// Gets a dataset proxy from an existing dataset. Yields: dataset object or null on error.
// Warning: Tests shouldn't depend upon preexisting datasets!
// Don't do it!
dataset.prototype.fromExisting = function(id)
{
    var ds = this;
    return this._flow.execute(function()
    {
        var d = webdriver.promise.defer();
        var proxy = new DatasetProxy(ds._client, id);
        proxy.exists().then(function(exists)
        {
            d.fulfill(exists ? proxy : null);
        });

        return d;
    });
};

// GUTS

// Call when this entire dataset instance is no longer needed (when the test suite
// finishes).
dataset.prototype._destroy = function()
{
    var ds = this;
    return this._flow.execute(function()
    {
        if (config.datasets.preserveCreatedDatasets)
        {
            return;
        }
        else
        {
            var d = webdriver.promise.defer();

            var maybeDone = _.after(ds.datasetsCreatedThisInstance.length + 1, d.fulfill);
            _.each(ds.datasetsCreatedThisInstance, function(id)
            {
                var proxy = new DatasetProxy(ds._client, id);
                proxy.exists().then(function(exists)
                {
                    if (exists)
                    {
                        proxy.erase().then(maybeDone);
                    }
                    else
                    {
                        maybeDone();
                    }
                });
            });
            maybeDone();

            return d;
        }
    });
};


var DatasetProxy = function(client, id /* optional */)
{
    this.id = id;
    this._client = client;
    this._flow = webdriver.promise.controlFlow();
};

DatasetProxy.prototype.exists = function()
{
    var proxy = this;
    return this._flow.execute(function()
    {
        var d = webdriver.promise.defer();

        var apiUrl = dataset.createJsonEndpointUrl(proxy.id);
        var reqOpts = apiUrl.resolve('?$limit=1');
        https.get(reqOpts, function(res)
        {
            d.fulfill(res.statusCode == 200);
        }).on('error', function(e)
        {
            d.fulfill(false);
        });

        return d;
    });
};

DatasetProxy.prototype.assertExists = function()
{
    var proxy = this;
    return this._flow.execute(function()
    {
        var d = webdriver.promise.defer();

        var apiUrl = dataset.createJsonEndpointUrl(proxy.id);
        var reqOpts = apiUrl.resolve('?$limit=1');
        https.get(reqOpts, function(res)
        {
            d.fulfill(res.statusCode == 200);
        }).on('error', function(e)
        {
            d.fulfill(false);
        });

        return d;
    });
};

// Erases this dataset. Returns a promise that evaluates to an error, if any.
// There exists a safeguard here that prevents erasure if the dataset was not created
// during this test run.
DatasetProxy.prototype.erase = function()
{
    var proxy = this;

    return this._flow.execute(function()
    {
        expect(proxy.id).to.not.be(undefined);

        var d = webdriver.promise.defer();

        // Safeguard - never delete datasets that weren't created this test run.
        if(!_.contains(datasetsCreatedThisTestRun, proxy.id))
        {
            throw new Error("BIG WARNING: TEST TRIED TO DELETE A DATASET THAT WASN'T CREATED BY THIS TEST RUN! This is a possibly dangerous test bug!");
        }

        proxy._client.getLoginCookies().then(function(cookies)
        {
            var reqOpts = url.parse(config.server.url.resolve('/api/views/'+proxy.id+'.json'));

            reqOpts.method="DELETE";
            reqOpts.headers = {
                'Cookie': cookies.CookieHeader
            };

            var req = https.request(reqOpts, function(res)
            {
                expect(res.statusCode).to.be(200);
                if (config.datasets.auditDatasetLifetime) { console.log("DATASET DELETED: "+proxy.id) };
                d.fulfill();
            }).
            on('error', function(e)
            {
                d.fulfill(e);
            });

            req.end();
        });

        return d;
    });
};

DatasetProxy.prototype.getName = function()
{
    var proxy = this;

    return this._flow.execute(function()
    {
        var d = webdriver.promise.defer();
        proxy._getInfoBlob().then(function(blob)
        {
            expect(blob).to.not.be(null);
            d.fulfill(blob.name);
        });

        return d;
    });
};

DatasetProxy.prototype.getSodaProducerOperation = function()
{
    if (!this._sodaProducer)
    {
        var sodaOpts = {
            "username": config.server.username,
            "password" : config.server.password,
            "apiToken" : config.server.token
        }
        var pr = new soda.Producer(config.server.url.host, sodaOpts);
        this._sodaProducer = pr;
    }
    return this._sodaProducer.operation().withDataset(this.id);
};

// GUTS

var buildCreateRequest = function(name, desc)
{
    var req = {
        name: name,
        description: desc,
        displayFormat: {},
        displayType: 'table',
        searchString: null,
        flags: ['dataPublicRead'],
        metadata: {
            availableDisplayTypes:["table","fatrow","page"],
            renderTypeConfig:{"visible":{"table":true}}
        }
    };
    return req;
};

var buildColumnAddRequest = function(name, type, width /*optional*/)
{
    var req = {
        name: name,
        dataTypeName: type,
        format: {},
        metadata: {},
        width: _.isUndefined(width) ? 100 : width
    };
    return req;
};


// Gets dataset info blob via old API. Yields: blob or null on error.
DatasetProxy.prototype._getInfoBlob = function()
{
    var proxy = this;

    return this._flow.execute(function()
    {
        expect(proxy.id).to.not.be(undefined);

        var d = webdriver.promise.defer();

        var reqOpts = url.parse(config.server.url.resolve('/api/views/'+proxy.id+'.json'));

        reqOpts.method="GET";

        var req = https.request(reqOpts, function(res)
        {
            expect(res.statusCode).to.be(200);
            var resData = '';
            res.on('data', function(d)
            {
                resData += d;
            });
            res.on('end', function()
            {
                var resultantDataset = JSON.parse(resData);
                expect(proxy.id).to.be(resultantDataset.id); // sanity...
                d.fulfill(proxy.id);
            });
        }).
        on('error', function(e)
        {
            d.fulfill(null);
        });

        req.end();

        return d;
    });
};

// Creates the dataset via the old API. Yields: 4x4 or null on error.
DatasetProxy.prototype._create = function(name, desc)
{
    var proxy = this;

    return this._flow.execute(function()
    {
        expect(proxy.id).to.be(undefined);

        var d = webdriver.promise.defer();

        proxy._client.isLoggedIn().then(function(loggedIn)
        {
            expect(loggedIn).to.be.ok();
            proxy._client.getLoginCookies().then(function(cookies)
            {
                var reqOpts = url.parse(config.server.url.resolve('/views.json?accessType=WEBSITE'));

                reqOpts.method="POST";
                reqOpts.headers = {
                    'Cookie': cookies.CookieHeader
                };

                var payload = buildCreateRequest(name, desc);

                var req = https.request(reqOpts, function(res)
                {
                    expect(res.statusCode).to.be(200);
                    var resData = '';
                    res.on('data', function(d)
                    {
                        resData += d;
                    });
                    res.on('end', function()
                    {
                        var resultantDataset = JSON.parse(resData);
                        proxy.id = resultantDataset.id;
                        if (config.datasets.auditDatasetLifetime)
                        {
                            console.log("DATASET CREATED: "+proxy.id);
                        }
                        d.fulfill(proxy.id);
                    });
                }).
                on('error', function(e)
                {
                    d.fulfill(null);
                });

                req.write(JSON.stringify(payload));
                req.end();
            });
        });

        return d;
    });
};

// Adds a column via the old API. Dataset must be in a state conducive to this
// call (unpublished or working copy). Yields new column id or null on error.
DatasetProxy.prototype._addColumn = function(name, type)
{
    var proxy = this;

    return this._flow.execute(function()
    {
        expect(proxy.id).to.not.be(undefined);

        var d = webdriver.promise.defer();

        proxy._client.getLoginCookies().then(function(cookies)
        {
            var reqOpts = url.parse(config.server.url.resolve('/views/'+proxy.id+'/columns.json'));

            reqOpts.method="POST";
            reqOpts.headers = {
                'Cookie': cookies.CookieHeader
            };

            var payload = buildColumnAddRequest(name, type);

            var req = https.request(reqOpts, function(res)
            {
                expect(res.statusCode).to.be(200);
                var resData = '';
                res.on('data', function(d)
                {
                    resData += d;
                });
                res.on('end', function()
                {
                    var resultantColumn = JSON.parse(resData);
                    expect(resultantColumn.renderTypeName).to.be(type);
                    expect(resultantColumn.name).to.be(name);
                    //TODO assert column is actually added to full column list.
                    d.fulfill(resultantColumn.id);
                });
            }).
            on('error', function(e)
            {
                d.fulfill(null);
            });

            req.write(JSON.stringify(payload));
            req.end();
        });

        return d;
    });
};

// Publishes this dataset via old api. Yields error or nothing.
DatasetProxy.prototype._publish = function()
{
    var proxy = this;

    return this._flow.execute(function()
    {
        expect(proxy.id).to.not.be(undefined);
        var d = webdriver.promise.defer();

        proxy._client.getLoginCookies().then(function(cookies)
        {
            var reqOpts = url.parse(config.server.url.resolve('/api/views/'+proxy.id+'/publication.json'));

            reqOpts.method="POST";
            reqOpts.headers = {
                'Cookie': cookies.CookieHeader
            };

            var req = https.request(reqOpts, function(res)
            {
                expect(res.statusCode).to.be(200);
                d.fulfill();
            }).
            on('error', function(e)
            {
                d.fulfill(e);
            });

            req.end();
        });

        return d;
    });
};

exports.dataset = dataset;
