<% content_for :headline do %>

<h1 id="title" class="columnPropertiesIcon">Create a New Column</h1>
<% end %>

<div id='columnCreateDialog' class="columnPropertiesWrapper">
  <% form_tag "#", :class => "columnCreate" do %>
      <div>
        <table cellspacing="0">
          <tbody>
            <tr>
              <td colspan="2"><h3 class="separator">Type of Column</h3></td>
            </tr>
            <tr>
              <td class="labelColumn"><label for="type">Type:</label></td>
              <td class="fieldColumn">
                <div class="blist-combo-wrapper lr_justified format_date_view">
                  <div id="types" class="types"></div>
                </div>
              </td>
            </tr>
            <tr>
              <td colspan="2"><h3 class="separator">Column Details</h3></td>
            </tr>
            <tr>
              <td class="labelColumn">
                <label for="columnCreate_name" class="required">Column Name:</label>
              </td>
              <td class="fieldColumn">
                <%= text_field_tag("name", @column.name,
                :class => "textPrompt prompt", :title => "Enter a name",
                :id => "columnCreate_name") %>
              </td>
            </tr>
            <tr>
              <td class="labelColumn">
                <label for="description">Column Description:</label>
              </td>
              <td class="fieldColumn">
                <%= text_area_tag("description", @column.description,
                :class => "textPrompt prompt", :title => "Enter a description",
                :id => "description") %>
              </td>
            </tr>
          </tbody>
        </table>
        <%= render(:partial => 'picklist_manager')%>
      </div>
      <%# Firefox won't trigger submit events unless there is a submit button %>
      <input class='hidden' type='submit' />
  <% end %>
  <div class="createBar">
    <div class="error errorMessage"></div>
    <h3 class="separator"></h3>
    <div class="required">Required Field</div>
    <ul class='actionButtons clearfix'>
      <li><a href='#' class='save arrowButton'>Create</a></li>
      <li><a class="jqmClose" href="#cancel">Cancel</a></li>
    </ul>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
blist.common.modalReady = function()
{
  var column = <%= @column.to_js %>;
  // Since these widgets are created live, we have to populate the default
  // text prompt values manually instead of relying on the plugin.
  $("#columnCreateDialog .textPrompt")
    .example(function () { return $(this).attr("title"); });

  var renderValueInfoFormatRow = function(value)
  {
      var $row = $(this);
      var $span_value = $('<span class="typeSelect datatype-' +
          value.id + '"></span>').html(value.label);
      $row.empty().append($span_value);
  };

  var typeValues = [
      {id: "text", label: "Plain Text"},
      {id: "richtext", label: "Formatted Text"},
      {id: "number", label: "Number"},
      {id: "money", label: "Money"},
      {id: "percent", label: "Percent"},
      {id: "date", label: "Date & Time"},
      {id: "phone", label: "Phone"},
      {id: "email", label: "Email"},
      {id: "url", label: "Website URL"},
      {id: "checkbox", label: "Checkbox"},
      {id: "stars", label: "Star"},
      {id: "flag", label: "Flag"},
      {id: "document", label: "Document"},
      {id: "photo", label: "Photo (Image)"},
      // {id: "document_obsolete", label: "Document (old)"},
      // {id: "photo_obsolete", label: "Photo (Image, old)"},
      {id: 'drop_down_list', label: 'Multiple Choice'}
  ];
  <%- if @parent.nil? -%>
  typeValues.push({id: "nested_table", label: "Nested Table"});
  <%- end -%>

  column.type = "<%= @type.nil? ? "text" : @type %>";

  $("#columnCreateDialog #types").combo({
    name: "types",
    values: typeValues,
    value: column.type,
    renderFn: renderValueInfoFormatRow
  });

  $('#columnCreateDialog #picklistManager').toggleClass('hidden',
      column.type != 'drop_down_list');
  var picklistManagerCallback = picklistManagerSetup();

  var formEnabled = true;
  var toggleEnabled = function()
  {
    $("#columnCreateDialog .columnPropertiesWrapper :input")
      .attr("disabled", formEnabled);
    formEnabled = !formEnabled;
  };

  $("#columnCreateDialog #types").change(function()
    {
        $('#columnCreateDialog #picklistManager').toggleClass('hidden',
          $("#columnCreateDialog #types").value() != 'drop_down_list');
    });

  var updateColumn = function()
  {
      column.name = $("#columnCreateDialog #columnCreate_name:not(.prompt)").val();
      var $desc = $("#columnCreateDialog #description:not(.prompt)");
      column.description = $desc.length > 0 ? $desc.val() : null;
      column.type = $("#columnCreateDialog #types").value();

      if (column.type == 'drop_down_list')
      { column.dropDownList = {values: picklistManagerCallback()}; }
  };

  var saveForm = function()
  {
      if (!formEnabled) { return false; }
      toggleEnabled();

      updateColumn();

      $.ajax({
        type: "POST",
        url: '<%= blist_columns_url(@view_id) %><%= @parent.nil? ?
          '' : "?parent=#{@parent}" %>',
        cache: false,
        dataType: 'json',
        data: {
          json: $.json.serialize(column),
          authenticity_token: "<%= form_authenticity_token %>"
        },
        error: function(request) {
          $("#columnCreateDialog .error")
            .html($.json.deserialize(request.responseText).error).show();
          toggleEnabled();
        },
        success: function(responseData) {
            var $grid = $("#dataGrid");
            if ($grid.length != 0)
            {
              $grid.blistModel()
                .updateColumn(responseData, <%= @parent.nil? ? 'null' : @parent %>);
            }
            $(document).trigger(blist.events.COLUMNS_CHANGED, [responseData.id]);
            $.Tache.DeleteAll();
            $("#modal .jqmClose").click();
        }
      });
  };

  $("#columnCreateDialog .columnCreate").submit( function(e) {
      e.preventDefault();
      // We need to make sure this fires after the change events on any inputs that
      // were being modified
      setTimeout(saveForm, 0);
  });

  $("#columnCreateDialog .save").click(function(event)
  {
      event.preventDefault();
      // We need to make sure this fires after the change events on any inputs that
      // were being modified
      setTimeout(saveForm, 0);
  });

  $('#columnCreateDialog .columnCreate input#columnCreate_name').focus();
};
</script>
