<%- content_for :headline do -%>
<h1 class='vizIcon'>Create a Visualization</h1>
<%- end -%>

<div class='modalContentWrapper vizWrapper viewSetupWrapper'>
  <p class='subtitle'>
  Datasets can be displayed in a variety of visual formats.
  </p>

  <% form_tag("#{@view.href}/create_visualization", :class => 'clearfix') do %>
  <div class='column'>

    <div class='section common'>
      <%- viz_types = View.visualization_config.reject {|k,v|
          v['hidden'] == true || !@view.can_create_visualization_type?(k)}.
          sort {|a,b| a[1]['label'] <=> b[1]['label']} -%>
      <h3>Setup</h3>
      <p class='subtitle separator'>
      Enter a name and choose a chart type
      </p>
      <div class='line'>
        <label class='required' for='vizName'>Name</label>
        <input type='text' id='vizName' name='viewName' class='required' />
      </div>
      <div class='line'>
        <label class='required' for='vizType'>Type</label>
        <select id='vizType' name='vizType' class='prompt required'>
          <option class='prompt' value=''>Select a Chart</option>
          <%- viz_types.each do |t| -%>
          <option value='<%= t[0] %>'><%= h t[1]['label'] %></option>
          <%- end -%>
        </select>
      </div>
    </div>

    <%- cols = {} -%>
    <%- viz_types.each do |t| -%>
    <%- type_config = t[1] -%>
    <div class='typeBlock type-<%= t[0] %>'>

      <%- if !type_config['fixedColumns'].nil? ||
        !type_config['mainOptions'].nil? -%>
      <div class='section'>
        <h3>Configuration</h3>
        <p class='subtitle separator'>
        Choose the data to chart against, and set other options
        </p>

        <%- if !type_config['fixedColumns'].nil? -%>
        <%- count = 0 -%>
        <%- type_config['fixedColumns'].each do |fcol| -%>
        <%- if cols[fcol['dataType']].nil?
              cols[fcol['dataType']] = @view.columns.select {|c|
                c.dataTypeName == fcol['dataType'] && !c.flag?('hidden')}
            end -%>
        <%- fc_name = t[0] + '-fixedColumn-' + count.to_s -%>

        <div class='line'>
          <label class='required' for='<%= fc_name %>'>
            <%= h fcol['label'] %>
          </label>
          <select id='<%= fc_name %>' name='<%= fc_name %>' class='prompt required'>
            <option class='prompt' value=''>Select a Column</option>
            <%- cols[fcol['dataType']].each do |c| -%>
            <option value='<%= c.id %>'><%= h c.name %></option>
            <%- end -%>
          </select>
        </div>

        <%- count += 1 -%>
        <%- end -%>
        <%- end -%>

        <%= render(:partial => 'viz_opts',
          :locals => {:options => type_config['mainOptions'],
          :name_prefix => t[0]}) %>
      </div>
      <%- end -%>

      <%- if !type_config['advancedOptions'].nil? -%>
      <div class='section closed'>
        <h3 class='separator'><a href='#toggle-advanced' class='sectionToggle'>
            Advanced Configuration
        </a></h3>

        <div class='content'>
          <%= render(:partial => 'viz_opts',
            :locals => {:options => type_config['advancedOptions'],
            :name_prefix => t[0]}) %>
        </div>
      </div>
      <%- end -%>
    </div>

    <%- end -%>

    </div>

    <div class='column right'>
      <div class='typeBlock type-'>
        (Choose a chart type to see more details)
      </div>

    <%- viz_types.each do |t| -%>
    <%- type_config = t[1] -%>
    <div class='typeBlock type-<%= t[0] %>'>
      <div class='section'>
        <h3>Data Columns</h3>
        <p class='subtitle separator'>
        Choose the data to display for this <%= h type_config['label'].downcase %>
        </p>

        <div class='scrollBlock'>
          <div class='dataColumnBlock soloBlock clearfix'>
            <a class='removeButton' href='#removeDataBlock'
              title='Remove'>Remove</a>

            <%- count = 0 -%>
            <%- type_config['dataColumns'].each do |dcol| -%>
            <%- if cols[dcol['dataType']].nil?
                  cols[dcol['dataType']] = @view.columns.select {|c|
                    c.dataTypeName == dcol['dataType'] && !c.flag?('hidden')}
                end -%>
            <%- dc_name = t[0] + '-dataColumn-' + count.to_s + '-0' -%>

            <div class='line'>
              <label <%= dcol['optional'] ? '' : "class='required'" %>
                for='<%= dc_name %>'><%= h dcol['label'] %></label>
              <select id='<%= dc_name %>' name='<%= dc_name %>'
                class='prompt <%= dcol['optional'] ? '' : 'required' %>'>
                <option class='prompt' value=''>Select a Column</option>
                <%- cols[dcol['dataType']].each do |c| -%>
                <option value='<%= c.id %>'><%= h c.name %></option>
                <%- end -%>
              </select>
            </div>

            <%- count += 1 -%>
            <%- end -%>

            <%= render(:partial => 'viz_opts',
              :locals => {:options => type_config['dataColumnOptions'],
              :name_prefix => t[0] + '-dataColumn', :name_postfix => '0'}) %>

          </div>
        </div>

        <ul class='actionButtons'>
          <li><a class='button addDataBlock'
            href='#addDataBlock-<%= t[0] %>'>Add Data Column</a></li>
        </ul>
      </div>
    </div>
    <%- end -%>

    </div>

  <%- end -%>

  <div class='error mainError'></div>

  <div class='submitLine clearfix'>
    <div class="required">Required Field</div>
    <ul class='actionButtons clearfix'>
      <li><a href='#create' class='create arrowButton'>Create Visualization</a></li>
    </ul>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
  blist.common.modalReady = function()
  {
    $('.vizWrapper form').validate({ignore: ':hidden', errorElement: 'span'});

    var adjustSelectPrompt = function(event)
    {
      var $sel = $(this);
      setTimeout(function()
          {
            $sel.toggleClass('prompt', $sel.val() === '');
          }, 0);
    };

    $('.vizWrapper select').change(adjustSelectPrompt)
      .keypress(adjustSelectPrompt).click(adjustSelectPrompt);

    var adjustVizType = function(event)
    {
      var $sel = $(this);
      setTimeout(function()
          {
            var v = $sel.val();
            $('.vizWrapper .typeBlock').hide();
            $('.vizWrapper .typeBlock.type-' + v).show();
          }, 0);
    };

    $('.vizWrapper #vizType').change(adjustVizType)
      .keypress(adjustVizType).click(adjustVizType);

    $('.vizWrapper a.sectionToggle').click(function(event)
    {
      event.preventDefault();
       $(event.target).closest('.section').toggleClass('closed');
    });

    $('.vizWrapper a.removeButton').click(function(event)
    {
      event.preventDefault();
      var $section = $(event.target).closest('.section');
      $(event.target).closest('.dataColumnBlock').remove();
      var $blocks = $section.find('.dataColumnBlock');
      if ($blocks.length == 1) { $blocks.addClass('soloBlock'); }
    });

    $('.vizWrapper a.addDataBlock').click(function(event)
    {
      event.preventDefault();
      var $scrollBlock = $(event.target).closest('ul').prev('.scrollBlock');

      $('.vizWrapper .dataColumnBlock.soloBlock').removeClass('soloBlock');
      var $block = $scrollBlock.find('.dataColumnBlock:last').clone(true);
      $block.find('.line').each(function(i, l)
      {
        var $this = $(this);
        var $label = $this.find('label');

        var oldName = $label.attr('for');
        var splitName = oldName.split('-');
        var newIndex =
          parseInt(splitName[splitName.length - 1]) + 1;
        splitName[splitName.length - 1] = newIndex;
        var newName = splitName.join('-');

        $label.attr('for', newName);
        $this.find(':input').attr('id', newName).attr('name', newName);
        $this.find('a[href=#' + oldName + ']').attr('href', '#' + newName);
        var $color = $this.find('a.colorOption');
        if ($color.length > 0 && $color.attr('colorDefaults') !== undefined)
        {
          var colors = $.json.deserialize($color.attr('colorDefaults'));
          var newColor = colors[newIndex % colors.length];
          $color.css('background-color', newColor);
          $this.find('input[type=hidden]').val(newColor);
        }
      });

      $scrollBlock.append($block);
    });

    $('.vizWrapper .number input').spinner({min: 0});

    $('.vizWrapper .colorOption').colorPicker().bind('color_change',
        function(e, newColor)
        {
            var $target = $(e.target);
            $target.css('background-color', newColor)
              .siblings(':input').val(newColor);
        })
    .mousedown(function(e)
        {
            var $target = $(e.target);
            $target.data('colorpicker-color', $target.siblings(':input').val());
        });

    var getValue = function($input)
    {
        var val = $input.val();
        if ($input.attr('type') == 'checkbox')
        {
            val = $input.attr('checked') ? true : false;
            if ($input.attr('trueValue') !== undefined && val === true)
            { val = $input.attr('trueValue'); }
            else if ($input.attr('falseValue') !== undefined && val === false)
            { val = $input.attr('falseValue'); }
        }
        return val;
    };


    var formSubmit = function(event)
    {
      event.preventDefault();
      $('.vizWrapper .mainError').text('');
      var $form = $('.vizWrapper form');
      if (!$form.valid()) { return; }

      var data = {options:{}, columns:[]};
      $('.vizWrapper .section.common :input').each(function()
      {
          var $t = $(this);
          data[$t.attr('name')] = getValue($t);
      });

      var fixedCols = [];
      var dataCols = [];
      $('.vizWrapper .typeBlock:visible :input').each(function()
      {
          var $t = $(this);
          var splitN = $t.attr('name').split('-');
          if (splitN.length < 2) { return true; }

          if (splitN[1] == 'fixedColumn')
          {
              var id = getValue($t);
              if (id !== '')
              {
                  fixedCols[parseInt(splitN[2])] = {id: id,
                      name: $t.find(':selected').text()};
              }
          }

          else if (splitN[1] == 'dataColumn')
          {
              var groupNum = parseInt(splitN[3]);
              var num = parseInt(splitN[2]);
              if (!isNaN(num))
              {
                  if (dataCols[groupNum] === undefined) { dataCols[groupNum] = []; }
                  var id = getValue($t);
                  if (id !== '')
                  {
                      dataCols[groupNum][num] = {id: id,
                          name: $t.find(':selected').text()};
                  }
              }
              else
              {
                  if (data.options[splitN[2]] === undefined)
                  { data.options[splitN[2]] = []; }
                  data.options[splitN[2]][splitN[3]] = getValue($t);
              }
          }

          else
          {
              data.options[splitN[1]] = getValue($t);
          }
      });

      $.each(fixedCols, function(i, c)
      { if (c !== undefined) { data.columns.push(c); } });
      $.each(dataCols, function(j, g)
      {
          if (g !== undefined)
          {
              $.each(g, function(i, c)
                { if (c !== undefined) { data.columns.push(c); } });
          }
      });

      $.each(data.options, function(i, o)
      {
          if (o instanceof Array) { $.compact(o); }
      });

      data.options = $.json.serialize(data.options);
      data.columns = $.json.serialize(data.columns);

      $.ajax({
          url: $form.attr("action"),
          type: "POST",
          data: data,
          dataType: "json",
          success: function(data)
          {
            if (data.status == 'failure')
            {
              $('.vizWrapper .mainError').text(data.errors.join('; '));
            }
            else
            {
              $("#modal").jqmHide();
              blist.util.navigation.redirectToView(data.newViewId);
            }
          }
      });
    };

    $('.vizWrapper form').submit(formSubmit);
    $('.vizWrapper a.create').click(formSubmit);
  };
</script>
