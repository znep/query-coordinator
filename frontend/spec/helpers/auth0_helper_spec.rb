require 'rails_helper'

describe Auth0Helper do
  include TestHelperMethods

  before do
    stub_request(:get, 'https://exists/api/v2/connections?fields=name').
      to_return(:status => 200, :body => '[{"name": "test"}]', :headers => {'Content-Type' => 'application/json'})
  end

  context 'legacy cookies' do

    it 'can be generated by frontend' do
      # Core produces a base64 encoded cookie of the form "uid expiration salt signature"
      cookie_parts = Base64.strict_decode64(gen_cookie('abcd-efgh')).split(' ')
      expect(cookie_parts.length).to eq(4)
      expect(cookie_parts[0]).to eq('abcd-efgh')
      expiration = cookie_parts[1].to_i
      # Expiration is within 30 minutes from now
      expect(Time.now.to_i < expiration).to eq(true)
      expect(expiration < Time.now.to_i + 60 * 30).to eq(true)
    end

  end

  context 'token' do
    let(:federated_user_token) do
      OmniAuth::AuthHash.new(
        'provider' => 'samlp',
        'uid' => 'samlp|magicstring',
        'socrata_user_id' => 'samlp|magicstring|contoso.com',
        'socrata_role' => 'viewer',
        'name' => 'alterego',
        'email' => 'alterego@testshib.org',
        'identities' => [{ 'isSocial' => false }]
      )
    end

    let(:social_user_token) do
      OmniAuth::AuthHash.new(
        'provider' => 'facebook',
        'uid' => 'facebook|magicstring',
        'socrata_user_id' => 'facebook|magicstring|facebook',
        'identities' => [{ 'isSocial' => true }]
      )
    end

    it 'understands federation' do
      expect(valid_token?(federated_user_token)).to eq(true)
    end

    it 'understands social' do
      expect(valid_token?(social_user_token)).to eq(true)
    end

    it 'is rejected when missing a required field' do
      required_fields = %w(email name socrata_user_id)
      required_fields.each do |required_field|
        bad_token = federated_user_token
        bad_token.delete(required_field)
        expect(valid_token?(bad_token)).to be_falsey
      end
    end

    it 'extracts the UID correctly' do
      uid = 'abcd-efgh'
      socrata_user_id = 'auth0|abcd-efgh|socrata.com'
      extracted_uid = extract_uid(socrata_user_id).to_s
      expect(extracted_uid).to eq(uid)
    end

    it 'returns true for username_password_connection? when passed username and password' do
      username_password_id = 'auth0|abcd-efgh|socrata.com'
      expect(username_password_connection?(username_password_id)).to eq(true)
    end

    it 'returns false for username_password_connection? when passed a saml id' do
      saml_id = 'samlp|_c3ac275de528ddea41f237a4142a5704'
      expect(username_password_connection?(saml_id)).to be_falsey
    end

    it 'is rejected when the socrata_user_id is a bad format' do
      authHash = federated_user_token
      authHash['socrata_user_id'] = 'samlp|_somestuff|'
      expect(valid_token?(authHash)).to be_falsey
    end

  end

  context 'generate_authorize_uri' do
    it 'returns the correct URI' do
      expect(generate_authorize_uri('test', '/test/callback')).to eq(
        'https://exists/authorize?scope=openid%20profile&response_type=code&connection=test&callbackURL=/test/callback&sso=true&client_id=exists&redirect_uri=/test/callback'
      )
    end
  end

end
