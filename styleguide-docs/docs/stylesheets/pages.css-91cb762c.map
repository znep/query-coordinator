{"version":3,"sources":["../../src/scss/variables/_grid.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","pages.css","../../src/scss/variables/_colors.scss","pages.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_px-to-em.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","../../node_modules/modularscale-sass/stylesheets/modular-scale/_round-px.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_media.scss","../../node_modules/bourbon/app/assets/stylesheets/functions/_shade.scss","../../node_modules/bourbon/app/assets/stylesheets/addons/_prefixer.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_row.scss","../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_omega.scss"],"names":[],"mappings":"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","file":"pages.css","sourcesContent":["/* Typical media query sizes. */\n$small:   420px;\n$medium:  768px;\n$large:   1200px;\n$xlarge:  1400px;\n$xxlarge: 1600px;\n$gutter: modular-scale(4, 0.938em, 1.618) !default;\n$max-width: em(1140) !default;\n","@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","/*!\n * Socrata Styleguide v12.1.0\n * Copyright 2015-2017 undefined\n * Licensed under undefined\n */\n\n/* Typical media query sizes. */\nhtml {\n  box-sizing: border-box; }\n\n*, *::after, *::before {\n  box-sizing: inherit; }\n\n/* Base Palette Colors */\n/* Colors light version */\n/* Colors dark version */\n/* Greys */\n/* Shades of Grey */\n/* Color Vars */\n/* Button Colors */\n/* Header */\n/* Settings Panel */\n/* Backgrounds */\n.container {\n  max-width: 71.25em;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0 1em;\n  margin-top: 80px; }\n  .container::after {\n    clear: both;\n    content: \"\";\n    display: table; }\n  .container.main {\n    margin-top: 26px; }\n  .container > .menu {\n    float: left;\n    display: block;\n    margin-right: 5.28911%;\n    width: 82.45182%;\n    margin-top: 0;\n    z-index: 1999; }\n    .container > .menu:last-child {\n      margin-right: 0; }\n    @media screen and (min-width: 768px) {\n      .container > .menu {\n        float: left;\n        display: block;\n        margin-right: 5.28911%;\n        width: 29.80726%; }\n        .container > .menu:last-child {\n          margin-right: 0; } }\n    .container > .menu .menu-header .menu-header-title {\n      margin-top: 3rem; }\n    .container > .menu .menu-header .menu-header-dismiss {\n      text-align: right; }\n      .container > .menu .menu-header .menu-header-dismiss:hover, .container > .menu .menu-header .menu-header-dismiss:focus {\n        background-color: #3a3a3a; }\n  .container > .content {\n    float: left;\n    display: block;\n    margin-right: 5.28911%;\n    width: 100%; }\n    .container > .content:last-child {\n      margin-right: 0; }\n  @media screen and (min-width: 768px) {\n    .container {\n      padding: 0; } }\n\n/* Guide Home. TODO: This shouldn't be in here. */\n.jumbotron {\n  min-height: 400px;\n  background-color: #eaf4f9;\n  background-image: url(\"../images/stuart-engineer.png\");\n  background-position: right 200px;\n  background-repeat: no-repeat; }\n  .jumbotron .container {\n    margin-top: 30px; }\n    body.index .jumbotron .container {\n      padding: 80px 0; }\n    .jumbotron .container .page-header {\n      font-size: 35px; }\n    .jumbotron .container p.intro {\n      font-weight: 200;\n      font-size: 20px;\n      color: #474747; }\n\nbody > .responsive-navbar {\n  -webkit-transition: all 0.15s;\n  -moz-transition: all 0.15s;\n  transition: all 0.15s;\n  background-color: #288dc1; }\n  body > .responsive-navbar.responsive-navbar-collapsed {\n    height: 40px;\n    line-height: 36px; }\n    body > .responsive-navbar.responsive-navbar-collapsed img {\n      margin-top: 0; }\n    body > .responsive-navbar.responsive-navbar-collapsed .site-controls {\n      font-size: 15px; }\n  body > .responsive-navbar img {\n    margin-top: -4px; }\n  body > .responsive-navbar span {\n    opacity: 1; }\n  body > .responsive-navbar .btn {\n    -webkit-transition: width 0.15s;\n    -moz-transition: width 0.15s;\n    transition: width 0.15s; }\n\n.responsive-navbar .home,\n.responsive-navbar .menu-link {\n  text-decoration: none;\n  color: #fff;\n  font-weight: 300; }\n\n.responsive-navbar .home {\n  padding-left: 12px; }\n\n.responsive-navbar .menu-link {\n  padding-right: 0; }\n  @media screen and (min-width: 768px) {\n    .responsive-navbar .menu-link {\n      border-right: 1px solid #98ceea;\n      padding-right: 15px;\n      transition: color 0.5s; }\n      .responsive-navbar .menu-link:hover {\n        cursor: pointer;\n        color: #e6e6e6; } }\n  .responsive-navbar .menu-link .menu-link-text {\n    display: none; }\n    @media screen and (min-width: 768px) {\n      .responsive-navbar .menu-link .menu-link-text {\n        display: inline; } }\n\n.responsive-navbar .responsive-navbar-nav {\n  display: none; }\n  @media screen and (min-width: 768px) {\n    .responsive-navbar .responsive-navbar-nav {\n      display: block; } }\n\n.page-header {\n  font-weight: 200; }\n\nsection.styleguide-section {\n  display: block;\n  border-top: 1px solid #e4e4e4;\n  padding-top: 19px;\n  margin-bottom: 19px; }\n  section.styleguide-section::after {\n    clear: both;\n    content: \"\";\n    display: table; }\n\n.meta {\n  float: left;\n  display: block;\n  margin-right: 5.28911%;\n  width: 100%; }\n  .meta:last-child {\n    margin-right: 0; }\n  @media screen and (min-width: 768px) {\n    .meta {\n      float: left;\n      display: block;\n      margin-right: 5.28911%;\n      width: 21.03317%; }\n      .meta:last-child {\n        margin-right: 0; } }\n\n.example {\n  float: left;\n  display: block;\n  margin-right: 5.28911%;\n  width: 100%; }\n  .example:last-child {\n    margin-right: 0; }\n  @media screen and (min-width: 768px) {\n    .example {\n      float: left;\n      display: block;\n      margin-right: 5.28911%;\n      width: 64.90363%;\n      margin-left: 8.77409%; }\n      .example:last-child {\n        margin-right: 0; } }\n  .example .usage.language-markup {\n    margin-bottom: 35px; }\n\n.logo-sample {\n  margin-bottom: 19px; }\n\n.logo-download {\n  margin-bottom: 29px; }\n\n.powered-by-sample {\n  margin-top: 20px; }\n  .powered-by-sample span.powered-by-socrata {\n    display: block;\n    margin-bottom: 29px; }\n\n.dark-context {\n  background-color: #2c2c2c;\n  padding: 11px; }\n\n.medium-context {\n  background-color: #474747;\n  padding: 11px; }\n\n.primary-context {\n  background-color: #288dc1;\n  padding: 11px; }\n\n.medium-dark-context {\n  background-color: #f1f1f1;\n  padding-top: 11px;\n  padding-bottom: 200px;\n  padding-left: 11px;\n  padding-right: 11px; }\n\n.styleguide-title {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  font-size: 1.25rem;\n  font-weight: 300; }\n  .styleguide-title img {\n    width: 100px;\n    vertical-align: sub;\n    margin-right: 0.5rem; }\n\n.styleguide-header {\n  font-weight: 300;\n  color: #767676; }\n\n.styleguide-subheader {\n  margin-top: 2rem;\n  margin-bottom: 1rem; }\n  .styleguide-subheader:first-child {\n    margin-top: 0; }\n\n.modal-section .button-wrapper {\n  max-width: 250px; }\n\n.modal-section .btn-secondary {\n  margin-top: 1rem; }\n\n.specimen,\n.speciment-meta {\n  display: block; }\n\n.specimen {\n  font-size: 19px; }\n  .specimen.italic {\n    font-style: italic; }\n  .specimen.light {\n    font-weight: 200; }\n  .specimen.semibold {\n    font-weight: 600; }\n  .specimen.bold {\n    font-weight: 700; }\n\n.specimen-meta {\n  font-size: 13px;\n  margin-bottom: 19px; }\n\n.usage {\n  background-color: #f1f1f1;\n  font-size: 13px;\n  padding: 12px;\n  border-radius: 1px;\n  color: #767676; }\n\n/* Sample Grids for Styleguide */\n.inline-container {\n  display: block; }\n  .inline-container::after {\n    clear: both;\n    content: \"\";\n    display: table; }\n\n.one {\n  float: left;\n  display: block;\n  margin-right: 5.28911%;\n  width: 3.48499%; }\n  .one:last-child {\n    margin-right: 0; }\n\n.third {\n  float: left;\n  display: block;\n  margin-right: 5.28911%;\n  width: 29.80726%; }\n  .third:last-child {\n    margin-right: 0; }\n\n.half {\n  float: left;\n  display: block;\n  margin-right: 5.28911%;\n  width: 100%; }\n  .half:last-child {\n    margin-right: 0; }\n  @media screen and (min-width: 768px) {\n    .half {\n      float: left;\n      display: block;\n      margin-right: 5.28911%;\n      width: 47.35545%; }\n      .half:last-child {\n        margin-right: 0; } }\n\n.two-thirds {\n  float: left;\n  display: block;\n  margin-right: 5.28911%;\n  width: 64.90363%; }\n  .two-thirds:last-child {\n    margin-right: 0; }\n\n.blockgrid {\n  max-width: 71.25em;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 0; }\n  .blockgrid::after {\n    clear: both;\n    content: \"\";\n    display: table; }\n  .blockgrid li {\n    float: left;\n    display: block;\n    margin-right: 5.28911%;\n    width: 3.48499%;\n    margin-bottom: 23px;\n    padding-left: 0; }\n    .blockgrid li:last-child {\n      margin-right: 0; }\n    .blockgrid li:nth-child(4n) {\n      margin-right: 0; }\n    .blockgrid li:nth-child(4n+1) {\n      clear: left; }\n    .blockgrid li.icon-sample {\n      width: 20%;\n      background-color: #f1f1f1;\n      font-size: 20px;\n      text-align: center;\n      padding-top: 12px; }\n\n/* Responsive Images in the guide? */\nimg {\n  max-width: 100%; }\n\n.usage input {\n  width: 100%; }\n\n#dropdown-container .dropdown-container {\n  width: 100%; }\n\n/** Components **/\n#color-picker-container {\n  width: 238px; }\n\n.special-dropdown-option span {\n  margin-right: 10px; }\n","/* Base Palette Colors */\n$primary: #288dc1;\n$primary-text: shade($primary, 14%);\n$alternate-1: #e28432;\n$alternate-1-text: shade($alternate-1, 30%);\n$alternate-2: #00a1af;\n$alternate-2-text: #00717c;\n$alternate-3: #00be9b;\n$alternate-3-text: shade($alternate-3, 20%);\n$alternate-4: tint(#425363, 40%);\n$alternate-4-text: shade($alternate-4, 40%);\n$success: lighten(#218649, 10%);\n$success-text: shade($success, 14%);\n$error: #ce6565;\n$error-text: shade($error, 14%);\n$warning: shade(#fabe00, 8%);\n$warning-text: shade($warning, 40%);\n\n/* Colors light version */\n$primary-light: tint($primary, 90%);\n$alternate-1-light: tint($alternate-1, 90%);\n$alternate-2-light: tint($alternate-2, 90%);\n$alternate-3-light: tint($alternate-3, 90%);\n$alternate-4-light: tint($alternate-4, 90%);\n$success-light: tint($success, 90%);\n$error-light: tint($error, 90%);\n$warning-light: tint($warning, 93%);\n\n/* Colors dark version */\n$primary-dark: shade($primary, 30%);\n$alternate-1-dark: shade($alternate-1, 30%);\n$alternate-2-dark: shade($alternate-2, 30%);\n$alternate-3-dark: shade($alternate-3, 30%);\n$alternate-4-dark: shade($alternate-4, 30%);\n$success-dark: shade($success, 30%);\n$error-dark: shade($error, 30%);\n$warning-dark: shade($warning, 30%);\n\n/* Greys */\n$white: #fff;\n$grey: #767676;\n$black: #2c2c2c;\n\n/* Shades of Grey */\n$light-grey-0: tint($grey, 10%);\n$light-grey-1: tint($grey, 20%);\n$light-grey-2: tint($grey, 40%);\n$light-grey-3: tint($grey, 60%);\n$light-grey-4: tint($grey, 80%);\n$light-grey-5: tint($grey, 90%);\n$light-grey-6: tint($grey, 93.3%);\n$light-grey-7: tint($grey, 95%);\n$light-grey-8: tint($grey, 97%);\n\n$dark-grey-0: shade($grey, 10%);\n$dark-grey-1: shade($grey, 20%);\n$dark-grey-2: shade($grey, 40%);\n$dark-grey-3: shade($grey, 60%);\n\n/* Color Vars */\n$default-text-color: $dark-grey-1;\n$quiet-text-color: $grey;\n$light-text-color: $white;\n$light-grey-bg: $light-grey-5;\n\n/* Button Colors */\n$btn-active-box-shadow-color: $black;\n\n$btn-default-color: $grey;\n$btn-default-background-color: $white;\n$btn-default-border-color: $light-grey-3;\n$btn-default-hover-color: $dark-grey-0;\n$btn-default-hover-background-color: $light-grey-5;\n$btn-default-active-border-color: shade($white, 20%);\n\n$btn-simple-color: $dark-grey-1;\n$btn-simple-background-color: $light-grey-5;\n$btn-simple-hover-color: $dark-grey-1;\n$btn-simple-hover-background-color: $light-grey-4;\n\n$btn-default-dark-color: $white;\n$btn-default-dark-background-color: $grey;\n$btn-default-dark-border-color: $grey;\n$btn-default-dark-hover-background-color: shade($grey, 20%);\n\n$btn-default-busy-border-color: $white;\n$btn-default-busy-border-right-color: $light-grey-2;\n$btn-default-inverse-color: $white;\n$btn-default-inverse-background-color: transparent;\n$btn-default-inverse-border-color: $white;\n$btn-default-inverse-hover-color: $grey;\n$btn-default-inverse-hover-background-color: white;\n$btn-default-inverse-hover-border-color: transparent;\n\n$btn-primary-color: $white;\n$btn-primary-background-color: $primary-text;\n$btn-primary-border-color: $primary;\n$btn-primary-hover-background-color: shade($primary, 27%);\n$btn-primary-active-border-color: shade($primary, 10%);\n$btn-primary-inverse-color: $primary-text;\n$btn-primary-inverse-background-color: $white;\n$btn-primary-inverse-hover-color: $white;\n$btn-primary-inverse-hover-background-color: $primary-text;\n$btn-primary-busy-border-right-color: tint($primary, 20%);\n\n$btn-alternate-1-color: $white;\n$btn-alternate-1-background-color: shade($alternate-1, 23%);\n$btn-alternate-1-border-color: $alternate-1;\n$btn-alternate-1-hover-background-color: shade($alternate-1, 31%);\n$btn-alternate-1-hover-color: $white;\n$btn-alternate-1-active-border-color: shade($alternate-1, 10%);\n$btn-alternate-1-inverse-color: $alternate-1-text;\n$btn-alternate-1-inverse-background-color: $alternate-1-light;\n$btn-alternate-1-inverse-hover-color: $white;\n$btn-alternate-1-inverse-hover-background-color: $alternate-1;\n$btn-alternate-1-busy-border-right-color: tint($alternate-1, 20%);\n\n$btn-alternate-2-color: $white;\n$btn-alternate-2-background-color: $alternate-2-text;\n$btn-alternate-2-border-color: $alternate-2;\n$btn-alternate-2-hover-background-color: shade($alternate-2-text, 20%);\n$btn-alternate-2-hover-color: $white;\n$btn-alternate-2-active-border-color: shade($alternate-2, 10%);\n$btn-alternate-2-inverse-color: $alternate-2-text;\n$btn-alternate-2-inverse-background-color: $white;\n$btn-alternate-2-inverse-hover-color: $white;\n$btn-alternate-2-inverse-hover-background-color: $alternate-2-text;\n$btn-alternate-2-busy-border-right-color: tint($alternate-2, 20%);\n\n$btn-alternate-3-color: $white;\n$btn-alternate-3-background-color: $alternate-3;\n$btn-alternate-3-border-color: $alternate-3;\n$btn-alternate-3-hover-background-color: shade($alternate-3, 20%);\n$btn-alternate-3-active-border-color: shade($alternate-3, 10%);\n$btn-alternate-3-inverse-color: $alternate-3;\n$btn-alternate-3-inverse-background-color: $white;\n$btn-alternate-3-inverse-hover-color: $white;\n$btn-alternate-3-inverse-hover-background-color: $alternate-3;\n$btn-alternate-3-busy-border-right-color: tint($alternate-3, 20%);\n\n$btn-alternate-4-color: $white;\n$btn-alternate-4-background-color: $alternate-4;\n$btn-alternate-4-border-color: $alternate-4;\n$btn-alternate-4-hover-background-color: shade($alternate-4, 20%);\n$btn-alternate-4-active-border-color: shade($alternate-4, 10%);\n$btn-alternate-4-inverse-color: $alternate-4;\n$btn-alternate-4-inverse-background-color: $white;\n$btn-alternate-4-inverse-hover-color: $white;\n$btn-alternate-4-inverse-hover-background-color: $alternate-4;\n$btn-alternate-4-busy-border-color: $white;\n$btn-alternate-4-busy-border-right-color: tint($alternate-4, 20%);\n\n$btn-warning-color: $white;\n$btn-warning-background-color: $warning;\n$btn-warning-border-color: $warning;\n$btn-warning-hover-background-color: shade($warning, 20%);\n$btn-warning-active-border-color: shade($warning, 10%);\n$btn-warning-inverse-color: $warning;\n$btn-warning-inverse-background-color: $white;\n$btn-warning-inverse-hover-color: $white;\n$btn-warning-inverse-hover-background-color: $warning;\n\n$btn-success-color: $white;\n$btn-success-background-color: $success;\n$btn-success-border-color: $success;\n$btn-success-hover-background-color: shade($success, 20%);\n$btn-success-active-border-color: shade($success, 10%);\n$btn-success-inverse-color: $success-text;\n$btn-success-inverse-background-color: $white;\n$btn-success-inverse-hover-color: $white;\n$btn-success-inverse-hover-background-color: $success;\n\n$btn-error-color: $white;\n$btn-error-background-color: $error;\n$btn-error-border-color: $error;\n$btn-error-hover-background-color: shade($error, 20%);\n$btn-error-active-border-color: shade($error, 10%);\n$btn-error-inverse-color: $error;\n$btn-error-inverse-background-color: $white;\n$btn-error-inverse-hover-color: $white;\n$btn-error-inverse-hover-background-color: $error;\n\n$btn-transparent-busy-border-color: $dark-grey-1;\n$btn-transparent-busy-border-right-color: $light-grey-2;\n\n$btn-disabled-color: $grey;\n$btn-disabled-border-color: $light-grey-1;\n$btn-disabled-background-color: $light-grey-3;\n$btn-disabled-dark-color: $light-grey-1;\n$btn-disabled-dark-border-color: $grey;\n$btn-disabled-dark-background-color: $dark-grey-1;\n\n$tag-color: $dark-grey-2;\n$tag-background-color: $light-grey-5;\n\n/* Header */\n$header-bg-color: #4a4747;\n$header-text-color: $white;\n$header-accent-color: #ddd;\n$header-link-hover-color: #7ac3ff;\n$header-link-hover-bg-color: #2295e1;\n$header-box-shadow-color: rgba(0, 0, 0, 0.2);\n$header-story-title-color: $light-grey-4;\n$header-story-title-hover-color: $white;\n$header-btn-disabled-color: #777;\n$header-publication-status-color: #e0e0e0;\n\n/* Settings Panel */\n$settings-panel-btn-color: $grey;\n\n/* Backgrounds */\n$light-gray-bg: $light-grey-3;\n$almost-white-bg: $light-grey-5;\n$panel-border-color: $light-grey-4;\n$panel-internal-border-color: $light-grey-5;\n\n","@import \"breakpoint\";\n@import \"modular-scale\";\n@import \"bourbon\";\n@import \"variables/grid\";\n@import \"neat\";\n\n@import \"variables/colors\";\n@import \"variables/typography\";\n\n\n.container {\n  @include outer-container();\n  padding: 0 1em;\n  margin-top: 80px;\n  &.main {\n    margin-top: ms(8);\n  }\n  > .menu {\n    @include span-columns(10);\n    @include media($medium) {\n      @include span-columns(4);\n    }\n    margin-top: 0;\n    z-index: 1999;\n    .menu-header {\n      .menu-header-title {\n        margin-top: 3rem;\n      }\n      .menu-header-dismiss {\n        text-align: right;\n        &:hover, &:focus {\n          background-color: #3a3a3a;\n        }\n      }\n    }\n  }\n  > .content {\n    @include span-columns(12);\n  }\n  @include media($medium) {\n    padding: 0;\n  }\n}\n\n/* Guide Home. TODO: This shouldn't be in here. */\n.jumbotron {\n  min-height: 400px;\n  background-color: $primary-light;\n  background-image: url(\"../images/stuart-engineer.png\");\n  background-position: right 200px;\n  background-repeat: no-repeat;\n\n  .container {\n    margin-top: 30px;\n\n    body.index & {\n      padding: 80px 0;\n    }\n\n    .page-header {\n      font-size: ms(12);\n    }\n\n    p.intro {\n      font-weight: 200;\n      font-size: ms(4);\n      color: $dark-grey-2;\n    }\n  }\n}\n\nbody > .responsive-navbar {\n  @include transition(all 0.15s);\n\n  background-color: $primary;\n\n  &.responsive-navbar-collapsed {\n    height: 40px;\n    line-height: 36px;\n\n    img {\n      margin-top: 0;\n    }\n\n    .site-controls {\n      font-size: ms(0);\n    }\n  }\n\n  img {\n    margin-top: -4px;\n  }\n\n  span {\n    opacity: 1;\n  }\n\n  .btn {\n    @include transition(width 0.15s);\n  }\n}\n\n.responsive-navbar {\n  .home,\n  .menu-link {\n    text-decoration: none;\n    color: $white;\n    font-weight: 300;\n  }\n\n  .home {\n    padding-left: ms(-2);\n  }\n\n  .menu-link {\n    padding-right: 0;\n    @include media($medium) {\n      border-right: 1px solid lighten($primary, 30%);\n      padding-right: ms(0);\n      transition: color 0.5s;\n      &:hover {\n        cursor: pointer;\n        color: darken($white, 10%);\n      }\n    }\n    .menu-link-text {\n      display: none;\n      @include media($medium) {\n        display: inline;\n      }\n    }\n  }\n\n  .responsive-navbar-nav {\n    display: none;\n    @include media($medium) {\n      display: block;\n    }\n  }\n\n}\n\n.page-header {\n  font-weight: 200;\n}\n\nsection.styleguide-section {\n  @include row();\n  border-top: 1px solid $light-grey-4;\n  padding-top: ms(2);\n  margin-bottom: ms(2);\n}\n\n.meta {\n  @include span-columns(12);\n\n  @include media($medium) {\n    @include span-columns(3);\n  }\n}\n\n.example {\n  @include span-columns(12);\n  @include media($medium) {\n    @include span-columns(8);\n    @include shift(1);\n  }\n  .usage.language-markup {\n    margin-bottom: ms(12);\n  }\n}\n\n.logo-sample {\n  margin-bottom: ms(2);\n}\n\n.logo-download {\n  margin-bottom: ms(10);\n}\n\n.powered-by-sample {\n  margin-top: ms(4);\n  span.powered-by-socrata {\n    display: block;\n    margin-bottom: ms(10);\n  }\n}\n\n.dark-context {\n  background-color: $black;\n  padding: ms(-3);\n}\n\n.medium-context {\n  background-color: $dark-grey-2;\n  padding: ms(-3);\n}\n\n.primary-context {\n  background-color: $primary;\n  padding: ms(-3);\n}\n\n.medium-dark-context {\n  background-color: $light-grey-bg;\n  padding-top: ms(-3);\n  padding-bottom: 200px;\n  padding-left: ms(-3);\n  padding-right: ms(-3);\n}\n\n.styleguide-title {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  font-size: 1.25rem;\n  font-weight: 300;\n\n  img {\n    width: 100px;\n    vertical-align: sub;\n    margin-right: 0.5rem;\n  }\n}\n\n.styleguide-header {\n  font-weight: 300;\n  color: $quiet-text-color;\n}\n\n.styleguide-subheader {\n  margin-top: 2rem;\n  margin-bottom: 1rem;\n\n  &:first-child {\n    margin-top: 0;\n  }\n}\n\n.modal-section {\n  .button-wrapper {\n    max-width: 250px;\n  }\n\n  .btn-secondary {\n    margin-top: 1rem;\n  }\n}\n\n.specimen,\n.speciment-meta {\n  display: block;\n}\n\n.specimen {\n  font-size: ms(2);\n\n  &.italic {\n    font-style: italic;\n  }\n\n  &.light {\n    font-weight: 200;\n\n  }\n\n  &.semibold {\n    font-weight: 600;\n  }\n\n  &.bold {\n    font-weight: 700;\n  }\n}\n\n.specimen-meta {\n  font-size: ms(-1);\n  margin-bottom: ms(2);\n}\n\n.usage {\n  background-color: $light-grey-5;\n  font-size: ms(-1);\n  padding: ms(-2);\n  border-radius: 1px;\n  color: $grey;\n}\n\n/* Sample Grids for Styleguide */\n.inline-container {\n  @include row();\n}\n\n.one {\n  @include span-columns(1);\n}\n\n.third {\n  @include span-columns(4);\n}\n\n.half {\n  @include span-columns(12);\n  @include media($medium) {\n    @include span-columns(6);\n  }\n}\n\n.two-thirds {\n  @include span-columns(8);\n}\n\n.blockgrid {\n  @include outer-container;\n  padding: 0;\n\n  li {\n    @include span-columns(1);\n    @include omega(4n);\n    margin-bottom: ms(5);\n    padding-left: 0;\n\n    &.icon-sample {\n\n      width: 20%;\n      background-color: $light-grey-5;\n      font-size: ms(3);\n      text-align: center;\n      padding-top: ms(-2);\n    }\n  }\n}\n\n/* Responsive Images in the guide? */\nimg {\n  max-width: 100%;\n}\n.usage {\n  input {\n    width: 100%;\n  }\n}\n\n#dropdown-container .dropdown-container {\n  width: 100%;\n}\n\n/** Components **/\n\n#color-picker-container {\n  width: 238px;\n}\n\n.special-dropdown-option span {\n  margin-right: 10px;\n}\n","// Convert pixels to ems\n// eg. for a relational value of 12px write em(12) when the parent is 16px\n// if the parent is another value say 24px write em(12, 24)\n\n@function em($pxval, $base: $em-base) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1em;\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centering it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@function ms-round-px($Result) {\n  @if unit($Result) == 'px' {\n    @return round($Result);\n  }\n  @return $Result;\n}","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display property of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// Mixes a color with black.\n///\n/// @param {Color} $color\n///\n/// @param {Number (Percentage)} $percent\n///   The amount of black to be mixed in.\n///\n/// @example scss - Usage\n///   .element {\n///     background-color: shade(#ffbb52, 60%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     background-color: #664a20;\n///   }\n///\n/// @return {Color}\n\n@function shade($color, $percent) {\n  @return mix(#000, $color, $percent);\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","@charset \"UTF-8\";\n\n/// Designates the element as a row of columns in the grid layout. It clears the floats on the element and sets its display property. Rows can't be nested, but there can be more than one row element—with different display properties—per layout.\n///\n/// @param {String} $display [default]\n///  Sets the display property of the element and the display context that will be used by its children. Can be `block` or `table`.\n///\n/// @param {String} $direction [$default-layout-direction]\n///  Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).\n///\n/// @example scss - Usage\n///  .element {\n///    @include row();\n///  }\n///\n/// @example css - CSS Output\n///  .element {\n///    *zoom: 1;\n///    display: block;\n///  }\n///\n/// .element:before, .element:after {\n///   content: \" \";\n///   display: table;\n/// }\n///\n/// .element:after {\n///   clear: both;\n/// }\n\n@mixin row($display: default, $direction: $default-layout-direction) {\n  @if $direction != $default-layout-direction {\n    @include -neat-warn(\"The $direction argument will be deprecated in future versions in favor of the direction(){...} mixin.\");\n  }\n\n  $layout-direction: $direction !global;\n\n  @if $display != default {\n    @include -neat-warn(\"The $display argument will be deprecated in future versions in favor of the display(){...} mixin.\");\n  }\n\n  @if $display == table {\n    display: table;\n    @include fill-parent;\n    table-layout: fixed;\n    $container-display-table: true !global;\n  } @else {\n    @include clearfix;\n    display: block;\n    $container-display-table: false !global;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n///\n/// @param {List} $query [block]\n///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n///\n///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.\n///\n///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.\n///\n/// @example scss - Usage\n///   .element {\n///     @include omega;\n///   }\n///\n///   .nth-element {\n///     @include omega(4n);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n) {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n+1) {\n///     clear: left;\n///   }\n\n@mixin omega($query: block, $direction: default) {\n  $table: belongs-to(table, $query);\n  $auto: belongs-to(auto, $query);\n\n  @if $direction != default {\n    @include -neat-warn(\"The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.\");\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @include -neat-warn(\"The omega mixin no longer removes padding in table layouts.\");\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  } @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    } @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  } @else {\n    @include -neat-warn(\"Too many arguments passed to the omega() mixin.\");\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number and unit($query) == \"n\" {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n"],"sourceRoot":"/source/"}