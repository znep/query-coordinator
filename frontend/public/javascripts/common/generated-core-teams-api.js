"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Teams API
 * API for teams
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "http://localhost/api".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
exports.DefaultApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Add a team member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} role The &#x60;Role&#x60; identifier
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeamMember: function (teamId, userId, xAppToken, role, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId', 'Required parameter teamId was null or undefined when calling addTeamMember.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling addTeamMember.');
            }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling addTeamMember.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role', 'Required parameter role was null or undefined when calling addTeamMember.');
            }
            var localVarPath = "/teams/{team-id}/members/{user-id}"
                .replace("{" + "team-id" + "}", encodeURIComponent(String(teamId)))
                .replace("{" + "user-id" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a new `Team` for this domain.
         * @param {string} xAppToken App Token
         * @param {Body} body
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: function (xAppToken, body, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling createTeam.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createTeam.');
            }
            var localVarPath = "/teams";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(body || {});
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: function (teamId, xAppToken, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId', 'Required parameter teamId was null or undefined when calling deleteTeam.');
            }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling deleteTeam.');
            }
            var localVarPath = "/teams/{team-id}"
                .replace("{" + "team-id" + "}", encodeURIComponent(String(teamId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all teams
         * @param {string} xAppToken App Token
         * @param {number} limit The number of users on a page
         * @param {number} page The page of users you are requesting
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams: function (xAppToken, limit, page, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling getAllTeams.');
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit', 'Required parameter limit was null or undefined when calling getAllTeams.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page', 'Required parameter page was null or undefined when calling getAllTeams.');
            }
            var localVarPath = "/teams";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the available team roles
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: function (xAppToken, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling getRoles.');
            }
            var localVarPath = "/teams?method=roles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: function (teamId, xAppToken, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getTeam.');
            }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling getTeam.');
            }
            var localVarPath = "/teams/{team-id}"
                .replace("{" + "team-id" + "}", encodeURIComponent(String(teamId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get members of the given team
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMembers: function (teamId, xAppToken, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId', 'Required parameter teamId was null or undefined when calling getTeamMembers.');
            }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling getTeamMembers.');
            }
            var localVarPath = "/teams/{team-id}/members"
                .replace("{" + "team-id" + "}", encodeURIComponent(String(teamId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove team member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeamMember: function (teamId, userId, xAppToken, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId', 'Required parameter teamId was null or undefined when calling removeTeamMember.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling removeTeamMember.');
            }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling removeTeamMember.');
            }
            var localVarPath = "/teams/{team-id}/members/{user-id}"
                .replace("{" + "team-id" + "}", encodeURIComponent(String(teamId)))
                .replace("{" + "user-id" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {Body1} body
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: function (teamId, xAppToken, body, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId', 'Required parameter teamId was null or undefined when calling updateTeam.');
            }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling updateTeam.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateTeam.');
            }
            var localVarPath = "/teams/{team-id}"
                .replace("{" + "team-id" + "}", encodeURIComponent(String(teamId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(body || {});
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the team role of a member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} role The &#x60;Role&#x60; identifier
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamMember: function (teamId, userId, xAppToken, role, xCSRFToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId', 'Required parameter teamId was null or undefined when calling updateTeamMember.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling updateTeamMember.');
            }
            // verify required parameter 'xAppToken' is not null or undefined
            if (xAppToken === null || xAppToken === undefined) {
                throw new RequiredError('xAppToken', 'Required parameter xAppToken was null or undefined when calling updateTeamMember.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role', 'Required parameter role was null or undefined when calling updateTeamMember.');
            }
            var localVarPath = "/teams/{team-id}/members/{user-id}"
                .replace("{" + "team-id" + "}", encodeURIComponent(String(teamId)))
                .replace("{" + "user-id" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication basic_auth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            if (xAppToken !== undefined && xAppToken !== null) {
                localVarHeaderParameter['X-App-Token'] = String(xAppToken);
            }
            if (xCSRFToken !== undefined && xCSRFToken !== null) {
                localVarHeaderParameter['X-CSRF-Token'] = String(xCSRFToken);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
exports.DefaultApiFp = function (configuration) {
    return {
        /**
         * Add a team member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} role The &#x60;Role&#x60; identifier
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeamMember: function (teamId, userId, xAppToken, role, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).addTeamMember(teamId, userId, xAppToken, role, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Post a new `Team` for this domain.
         * @param {string} xAppToken App Token
         * @param {Body} body
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: function (xAppToken, body, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).createTeam(xAppToken, body, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: function (teamId, xAppToken, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).deleteTeam(teamId, xAppToken, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get all teams
         * @param {string} xAppToken App Token
         * @param {number} limit The number of users on a page
         * @param {number} page The page of users you are requesting
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams: function (xAppToken, limit, page, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).getAllTeams(xAppToken, limit, page, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get the available team roles
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: function (xAppToken, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).getRoles(xAppToken, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: function (teamId, xAppToken, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).getTeam(teamId, xAppToken, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get members of the given team
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMembers: function (teamId, xAppToken, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).getTeamMembers(teamId, xAppToken, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove team member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeamMember: function (teamId, userId, xAppToken, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).removeTeamMember(teamId, userId, xAppToken, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {Body1} body
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: function (teamId, xAppToken, body, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).updateTeam(teamId, xAppToken, body, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the team role of a member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} role The &#x60;Role&#x60; identifier
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamMember: function (teamId, userId, xAppToken, role, xCSRFToken, options) {
            var localVarFetchArgs = exports.DefaultApiFetchParamCreator(configuration).updateTeamMember(teamId, userId, xAppToken, role, xCSRFToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
exports.DefaultApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Add a team member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} role The &#x60;Role&#x60; identifier
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeamMember: function (teamId, userId, xAppToken, role, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).addTeamMember(teamId, userId, xAppToken, role, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Post a new `Team` for this domain.
         * @param {string} xAppToken App Token
         * @param {Body} body
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam: function (xAppToken, body, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).createTeam(xAppToken, body, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Delete a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam: function (teamId, xAppToken, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).deleteTeam(teamId, xAppToken, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Get all teams
         * @param {string} xAppToken App Token
         * @param {number} limit The number of users on a page
         * @param {number} page The page of users you are requesting
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams: function (xAppToken, limit, page, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).getAllTeams(xAppToken, limit, page, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Get the available team roles
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: function (xAppToken, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).getRoles(xAppToken, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Get a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: function (teamId, xAppToken, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).getTeam(teamId, xAppToken, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Get members of the given team
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMembers: function (teamId, xAppToken, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).getTeamMembers(teamId, xAppToken, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Remove team member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeamMember: function (teamId, userId, xAppToken, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).removeTeamMember(teamId, userId, xAppToken, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Update a specific `Team` object for the domain.
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {Body1} body
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: function (teamId, xAppToken, body, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).updateTeam(teamId, xAppToken, body, xCSRFToken, options)(fetch, basePath);
        },
        /**
         * Update the team role of a member
         * @param {string} teamId The &#x60;Team&#x60; identifier (4x4)
         * @param {string} userId The &#x60;User&#x60; identifier (4x4)
         * @param {string} xAppToken App Token
         * @param {string} role The &#x60;Role&#x60; identifier
         * @param {string} [xCSRFToken] CSRF Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamMember: function (teamId, userId, xAppToken, role, xCSRFToken, options) {
            return exports.DefaultApiFp(configuration).updateTeamMember(teamId, userId, xAppToken, role, xCSRFToken, options)(fetch, basePath);
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add a team member
     * @param {} teamId The &#x60;Team&#x60; identifier (4x4)
     * @param {} userId The &#x60;User&#x60; identifier (4x4)
     * @param {} xAppToken App Token
     * @param {} role The &#x60;Role&#x60; identifier
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.addTeamMember = function (teamId, userId, xAppToken, role, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).addTeamMember(teamId, userId, xAppToken, role, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Post a new `Team` for this domain.
     * @param {} xAppToken App Token
     * @param {} body
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.createTeam = function (xAppToken, body, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).createTeam(xAppToken, body, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a specific `Team` object for the domain.
     * @param {} teamId The &#x60;Team&#x60; identifier (4x4)
     * @param {} xAppToken App Token
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.deleteTeam = function (teamId, xAppToken, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).deleteTeam(teamId, xAppToken, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Get all teams
     * @param {} xAppToken App Token
     * @param {} limit The number of users on a page
     * @param {} page The page of users you are requesting
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getAllTeams = function (xAppToken, limit, page, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).getAllTeams(xAppToken, limit, page, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Get the available team roles
     * @param {} xAppToken App Token
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getRoles = function (xAppToken, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).getRoles(xAppToken, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Get a specific `Team` object for the domain.
     * @param {} teamId The &#x60;Team&#x60; identifier (4x4)
     * @param {} xAppToken App Token
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getTeam = function (teamId, xAppToken, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).getTeam(teamId, xAppToken, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Get members of the given team
     * @param {} teamId The &#x60;Team&#x60; identifier (4x4)
     * @param {} xAppToken App Token
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getTeamMembers = function (teamId, xAppToken, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).getTeamMembers(teamId, xAppToken, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Remove team member
     * @param {} teamId The &#x60;Team&#x60; identifier (4x4)
     * @param {} userId The &#x60;User&#x60; identifier (4x4)
     * @param {} xAppToken App Token
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.removeTeamMember = function (teamId, userId, xAppToken, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).removeTeamMember(teamId, userId, xAppToken, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Update a specific `Team` object for the domain.
     * @param {} teamId The &#x60;Team&#x60; identifier (4x4)
     * @param {} xAppToken App Token
     * @param {} body
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.updateTeam = function (teamId, xAppToken, body, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).updateTeam(teamId, xAppToken, body, xCSRFToken, options)(this.fetch, this.basePath);
    };
    /**
     * Update the team role of a member
     * @param {} teamId The &#x60;Team&#x60; identifier (4x4)
     * @param {} userId The &#x60;User&#x60; identifier (4x4)
     * @param {} xAppToken App Token
     * @param {} role The &#x60;Role&#x60; identifier
     * @param {} [xCSRFToken] CSRF Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.updateTeamMember = function (teamId, userId, xAppToken, role, xCSRFToken, options) {
        return exports.DefaultApiFp(this.configuration).updateTeamMember(teamId, userId, xAppToken, role, xCSRFToken, options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
