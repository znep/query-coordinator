/*!
 * Socrata Styleguide v0.7.0
 * Copyright 2015-2016 Socrata, Inc.
 * Licensed under MIT
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.styleguide=e():t.styleguide=e()}(this,function(){return function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return t[o].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports={Dropdown:n(1),FlannelFactory:n(2),FlyoutFactory:n(4),MenuFactory:n(5),ModalFactory:n(6),ToggleFactory:n(7),TourFactory:n(8)}},function(t,e){var n=t.exports=function(t){this.dd=t,this.orientation=t.getAttribute("data-orientation")||"bottom",this.selectable=t.hasAttribute("data-selectable"),this.dd.classList.add("dropdown-orientation-"+this.orientation),this.placeholder=this.dd.querySelector("span"),this.opts=Array.prototype.slice.call(this.dd.querySelectorAll(".dropdown-options > li")),this.val="",this.index=-1,this.initEvents()};n.prototype={initEvents:function(){var t=this;t.dd.addEventListener("click",function(e){return e.stopPropagation(),t.dd.classList.toggle("active"),!1}),t.selectable&&t.opts.forEach(function(e){e.addEventListener("click",function(n){n.preventDefault();for(var o=e,r=0;null!==(o=o.previousElementSibling);)r++;return t.val=e.textContent,t.index=r,t.placeholder.innerHTML=e.innerText.trim(),!1})}),document.addEventListener("click",function(){Array.from(document.querySelectorAll(".dropdown")).forEach(function(t){t.classList.remove("active")})})}}},function(t,e,n){var o=n(3);t.exports=function(t){function e(t,e){document.body.offsetWidth<r?o(t,{left:document.body.offsetWidth},{duration:i,easing:a,complete:function(){t.classList.add("flannel-hidden"),e.classList.remove("active"),document.body.style.overflow=""}}):(t.classList.add("flannel-hidden"),e.classList.remove("active"))}function n(t,e){var n=e,l=0,u=0,c=t.getBoundingClientRect().width,f=document.body.offsetWidth;do l+=n.offsetLeft,u+=n.offsetTop;while(null!==(n=n.offsetParent));l+=e.offsetWidth/2,u=u+e.offsetHeight+s,l+c>f&&f>=r?(t.classList.remove("flannel-right"),t.classList.add("flannel-left"),l-=c):(t.classList.remove("flannel-left"),t.classList.add("flannel-right")),f>=r?(t.style.left=l+"px",t.style.top=u+"px",document.body.style.overflow=""):(t.style.left=f+"px",t.style.top=0,o(t,{left:0},{duration:i,easing:a,complete:function(){document.body.style.overflow="hidden"}}))}var r=420,i=300,a=[.645,.045,.355,1],s=10,l=Array.prototype.slice.apply(document.querySelectorAll("[data-flannel]"));l.forEach(function(t){var o=t.getAttribute("data-flannel"),r=document.querySelector("#"+o),i=Array.prototype.slice.apply(r.querySelectorAll("[data-flannel-dismiss]"));i.forEach(function(n){n.addEventListener("click",function(){e(r,t)})}),t.addEventListener("click",function(e){e.stopPropagation(),r.classList.toggle("flannel-hidden"),n(r,t)}),document.body.addEventListener("click",function(n){if(!r.classList.contains("flannel-hidden")){for(var i=n.target;i.parentElement;){if(i.id===o)return;i=i.parentElement}e(r,t)}}),document.body.addEventListener("keyup",function(n){var o=n.which||n.keyCode;27===o&&e(r,t)}),window.addEventListener("resize",function(){r.classList.contains("flannel-hidden")||n(r,t)})})}},function(t,e,n){var o,r;!function(t){function e(t){var e=t.length,o=n.type(t);return"function"===o||n.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===o||0===e||"number"==typeof e&&e>0&&e-1 in t}if(!t.jQuery){var n=function(t,e){return new n.fn.init(t,e)};n.isWindow=function(t){return null!=t&&t==t.window},n.type=function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?r[a.call(t)]||"object":typeof t},n.isArray=Array.isArray||function(t){return"array"===n.type(t)},n.isPlainObject=function(t){var e;if(!t||"object"!==n.type(t)||t.nodeType||n.isWindow(t))return!1;try{if(t.constructor&&!i.call(t,"constructor")&&!i.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(o){return!1}for(e in t);return void 0===e||i.call(t,e)},n.each=function(t,n,o){var r,i=0,a=t.length,s=e(t);if(o){if(s)for(;a>i&&(r=n.apply(t[i],o),r!==!1);i++);else for(i in t)if(r=n.apply(t[i],o),r===!1)break}else if(s)for(;a>i&&(r=n.call(t[i],i,t[i]),r!==!1);i++);else for(i in t)if(r=n.call(t[i],i,t[i]),r===!1)break;return t},n.data=function(t,e,r){if(void 0===r){var i=t[n.expando],a=i&&o[i];if(void 0===e)return a;if(a&&e in a)return a[e]}else if(void 0!==e){var i=t[n.expando]||(t[n.expando]=++n.uuid);return o[i]=o[i]||{},o[i][e]=r,r}},n.removeData=function(t,e){var r=t[n.expando],i=r&&o[r];i&&n.each(e,function(t,e){delete i[e]})},n.extend=function(){var t,e,o,r,i,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[l]||{},l++),"object"!=typeof s&&"function"!==n.type(s)&&(s={}),l===u&&(s=this,l--);u>l;l++)if(null!=(i=arguments[l]))for(r in i)t=s[r],o=i[r],s!==o&&(c&&o&&(n.isPlainObject(o)||(e=n.isArray(o)))?(e?(e=!1,a=t&&n.isArray(t)?t:[]):a=t&&n.isPlainObject(t)?t:{},s[r]=n.extend(c,a,o)):void 0!==o&&(s[r]=o));return s},n.queue=function(t,o,r){function i(t,n){var o=n||[];return null!=t&&(e(Object(t))?!function(t,e){for(var n=+e.length,o=0,r=t.length;n>o;)t[r++]=e[o++];if(n!==n)for(;void 0!==e[o];)t[r++]=e[o++];return t.length=r,t}(o,"string"==typeof t?[t]:t):[].push.call(o,t)),o}if(t){o=(o||"fx")+"queue";var a=n.data(t,o);return r?(!a||n.isArray(r)?a=n.data(t,o,i(r)):a.push(r),a):a||[]}},n.dequeue=function(t,e){n.each(t.nodeType?[t]:t,function(t,o){e=e||"fx";var r=n.queue(o,e),i=r.shift();"inprogress"===i&&(i=r.shift()),i&&("fx"===e&&r.unshift("inprogress"),i.call(o,function(){n.dequeue(o,e)}))})},n.fn=n.prototype={init:function(t){if(t.nodeType)return this[0]=t,this;throw new Error("Not a DOM node.")},offset:function(){var e=this[0].getBoundingClientRect?this[0].getBoundingClientRect():{top:0,left:0};return{top:e.top+(t.pageYOffset||document.scrollTop||0)-(document.clientTop||0),left:e.left+(t.pageXOffset||document.scrollLeft||0)-(document.clientLeft||0)}},position:function(){function t(){for(var t=this.offsetParent||document;t&&"html"===!t.nodeType.toLowerCase&&"static"===t.style.position;)t=t.offsetParent;return t||document}var e=this[0],t=t.apply(e),o=this.offset(),r=/^(?:body|html)$/i.test(t.nodeName)?{top:0,left:0}:n(t).offset();return o.top-=parseFloat(e.style.marginTop)||0,o.left-=parseFloat(e.style.marginLeft)||0,t.style&&(r.top+=parseFloat(t.style.borderTopWidth)||0,r.left+=parseFloat(t.style.borderLeftWidth)||0),{top:o.top-r.top,left:o.left-r.left}}};var o={};n.expando="velocity"+(new Date).getTime(),n.uuid=0;for(var r={},i=r.hasOwnProperty,a=r.toString,s="Boolean Number String Function Array Date RegExp Object Error".split(" "),l=0;l<s.length;l++)r["[object "+s[l]+"]"]=s[l].toLowerCase();n.fn.init.prototype=n.fn,t.Velocity={Utilities:n}}}(window),function(i){"object"==typeof t&&"object"==typeof t.exports?t.exports=i():(o=i,r="function"==typeof o?o.call(e,n,e,t):o,!(void 0!==r&&(t.exports=r)))}(function(){return function(t,e,n,o){/* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */
function r(t){for(var e=-1,n=t?t.length:0,o=[];++e<n;){var r=t[e];r&&o.push(r)}return o}function i(t){return g.isWrapped(t)?t=[].slice.call(t):g.isNode(t)&&(t=[t]),t}function a(t){var e=d.data(t,"velocity");return null===e?o:e}function s(t){return function(e){return Math.round(e*t)*(1/t)}}/* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
function l(t,n,o,r){function i(t,e){return 1-3*e+3*t}function a(t,e){return 3*e-6*t}function s(t){return 3*t}function l(t,e,n){return((i(e,n)*t+a(e,n))*t+s(e))*t}function u(t,e,n){return 3*i(e,n)*t*t+2*a(e,n)*t+s(e)}function c(e,n){for(var r=0;g>r;++r){var i=u(n,t,o);if(0===i)return n;var a=l(n,t,o)-e;n-=a/i}return n}function f(){for(var e=0;b>e;++e)C[e]=l(e*w,t,o)}function d(e,n,r){var i,a,s=0;do a=n+(r-n)/2,i=l(a,t,o)-e,i>0?r=a:n=a;while(Math.abs(i)>v&&++s<y);return a}function p(e){for(var n=0,r=1,i=b-1;r!=i&&C[r]<=e;++r)n+=w;--r;var a=(e-C[r])/(C[r+1]-C[r]),s=n+a*w,l=u(s,t,o);return l>=m?c(e,s):0==l?s:d(e,n,n+w)}function h(){T=!0,(t!=n||o!=r)&&f()}var g=4,m=.001,v=1e-7,y=10,b=11,w=1/(b-1),x="Float32Array"in e;if(4!==arguments.length)return!1;for(var S=0;4>S;++S)if("number"!=typeof arguments[S]||isNaN(arguments[S])||!isFinite(arguments[S]))return!1;t=Math.min(t,1),o=Math.min(o,1),t=Math.max(t,0),o=Math.max(o,0);var C=x?new Float32Array(b):new Array(b),T=!1,E=function(e){return T||h(),t===n&&o===r?e:0===e?0:1===e?1:l(p(e),n,r)};E.getControlPoints=function(){return[{x:t,y:n},{x:o,y:r}]};var k="generateBezier("+[t,n,o,r]+")";return E.toString=function(){return k},E}function u(t,e){var n=t;return g.isString(t)?b.Easings[t]||(n=!1):n=g.isArray(t)&&1===t.length?s.apply(null,t):g.isArray(t)&&2===t.length?w.apply(null,t.concat([e])):g.isArray(t)&&4===t.length?l.apply(null,t):!1,n===!1&&(n=b.Easings[b.defaults.easing]?b.defaults.easing:y),n}function c(t){if(t){var e=(new Date).getTime(),n=b.State.calls.length;n>1e4&&(b.State.calls=r(b.State.calls));for(var i=0;n>i;i++)if(b.State.calls[i]){var s=b.State.calls[i],l=s[0],u=s[2],p=s[3],h=!!p,m=null;p||(p=b.State.calls[i][3]=e-16);for(var v=Math.min((e-p)/u.duration,1),y=0,w=l.length;w>y;y++){var S=l[y],T=S.element;if(a(T)){var E=!1;if(u.display!==o&&null!==u.display&&"none"!==u.display){if("flex"===u.display){var k=["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex"];d.each(k,function(t,e){x.setPropertyValue(T,"display",e)})}x.setPropertyValue(T,"display",u.display)}u.visibility!==o&&"hidden"!==u.visibility&&x.setPropertyValue(T,"visibility",u.visibility);for(var P in S)if("element"!==P){var A,O=S[P],V=g.isString(O.easing)?b.Easings[O.easing]:O.easing;if(1===v)A=O.endValue;else{var L=O.endValue-O.startValue;if(A=O.startValue+L*V(v,u,L),!h&&A===O.currentValue)continue}if(O.currentValue=A,"tween"===P)m=A;else{if(x.Hooks.registered[P]){var F=x.Hooks.getRoot(P),j=a(T).rootPropertyValueCache[F];j&&(O.rootPropertyValue=j)}var N=x.setPropertyValue(T,P,O.currentValue+(0===parseFloat(A)?"":O.unitType),O.rootPropertyValue,O.scrollData);x.Hooks.registered[P]&&(x.Normalizations.registered[F]?a(T).rootPropertyValueCache[F]=x.Normalizations.registered[F]("extract",null,N[1]):a(T).rootPropertyValueCache[F]=N[1]),"transform"===N[0]&&(E=!0)}}u.mobileHA&&a(T).transformCache.translate3d===o&&(a(T).transformCache.translate3d="(0px, 0px, 0px)",E=!0),E&&x.flushTransformCache(T)}}u.display!==o&&"none"!==u.display&&(b.State.calls[i][2].display=!1),u.visibility!==o&&"hidden"!==u.visibility&&(b.State.calls[i][2].visibility=!1),u.progress&&u.progress.call(s[1],s[1],v,Math.max(0,p+u.duration-e),p,m),1===v&&f(i)}}b.State.isTicking&&C(c)}function f(t,e){if(!b.State.calls[t])return!1;for(var n=b.State.calls[t][0],r=b.State.calls[t][1],i=b.State.calls[t][2],s=b.State.calls[t][4],l=!1,u=0,c=n.length;c>u;u++){var f=n[u].element;if(e||i.loop||("none"===i.display&&x.setPropertyValue(f,"display",i.display),"hidden"===i.visibility&&x.setPropertyValue(f,"visibility",i.visibility)),i.loop!==!0&&(d.queue(f)[1]===o||!/\.velocityQueueEntryFlag/i.test(d.queue(f)[1]))&&a(f)){a(f).isAnimating=!1,a(f).rootPropertyValueCache={};var p=!1;d.each(x.Lists.transforms3D,function(t,e){var n=/^scale/.test(e)?1:0,r=a(f).transformCache[e];a(f).transformCache[e]!==o&&new RegExp("^\\("+n+"[^.]").test(r)&&(p=!0,delete a(f).transformCache[e])}),i.mobileHA&&(p=!0,delete a(f).transformCache.translate3d),p&&x.flushTransformCache(f),x.Values.removeClass(f,"velocity-animating")}if(!e&&i.complete&&!i.loop&&u===c-1)try{i.complete.call(r,r)}catch(h){setTimeout(function(){throw h},1)}s&&i.loop!==!0&&s(r),a(f)&&i.loop===!0&&!e&&(d.each(a(f).tweensContainer,function(t,e){/^rotate/.test(t)&&360===parseFloat(e.endValue)&&(e.endValue=0,e.startValue=360),/^backgroundPosition/.test(t)&&100===parseFloat(e.endValue)&&"%"===e.unitType&&(e.endValue=0,e.startValue=100)}),b(f,"reverse",{loop:!0,delay:i.delay})),i.queue!==!1&&d.dequeue(f,i.queue)}b.State.calls[t]=!1;for(var g=0,m=b.State.calls.length;m>g;g++)if(b.State.calls[g]!==!1){l=!0;break}l===!1&&(b.State.isTicking=!1,delete b.State.calls,b.State.calls=[])}var d,p=function(){if(n.documentMode)return n.documentMode;for(var t=7;t>4;t--){var e=n.createElement("div");if(e.innerHTML="<!--[if IE "+t+"]><span></span><![endif]-->",e.getElementsByTagName("span").length)return e=null,t}return o}(),h=function(){var t=0;return e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||function(e){var n,o=(new Date).getTime();/* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
return n=Math.max(0,16-(o-t)),t=o+n,setTimeout(function(){e(o+n)},n)}}(),g={isString:function(t){return"string"==typeof t},isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},isFunction:function(t){return"[object Function]"===Object.prototype.toString.call(t)},isNode:function(t){return t&&t.nodeType},/* Copyright Martin Bohm. MIT License: https://gist.github.com/Tomalak/818a78a226a0738eaade */
isNodeList:function(t){return"object"==typeof t&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(t))&&t.length!==o&&(0===t.length||"object"==typeof t[0]&&t[0].nodeType>0)},isWrapped:function(t){return t&&(t.jquery||e.Zepto&&e.Zepto.zepto.isZ(t))},isSVG:function(t){return e.SVGElement&&t instanceof e.SVGElement},isEmptyObject:function(t){for(var e in t)return!1;return!0}},m=!1;if(t.fn&&t.fn.jquery?(d=t,m=!0):d=e.Velocity.Utilities,8>=p&&!m)throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");if(7>=p)return void(jQuery.fn.velocity=jQuery.fn.animate);var v=400,y="swing",b={State:{isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isAndroid:/Android/i.test(navigator.userAgent),isGingerbread:/Android 2\.3\.[3-7]/i.test(navigator.userAgent),isChrome:e.chrome,isFirefox:/Firefox/i.test(navigator.userAgent),prefixElement:n.createElement("div"),prefixMatches:{},scrollAnchor:null,scrollPropertyLeft:null,scrollPropertyTop:null,isTicking:!1,calls:[]},CSS:{},Utilities:d,Redirects:{},Easings:{},Promise:e.Promise,defaults:{queue:"",duration:v,easing:y,begin:o,complete:o,progress:o,display:o,visibility:o,loop:!1,delay:!1,mobileHA:!0,_cacheValues:!0},init:function(t){d.data(t,"velocity",{isSVG:g.isSVG(t),isAnimating:!1,computedStyle:null,tweensContainer:null,rootPropertyValueCache:{},transformCache:{}})},hook:null,mock:!1,version:{major:1,minor:2,patch:2},debug:!1};e.pageYOffset!==o?(b.State.scrollAnchor=e,b.State.scrollPropertyLeft="pageXOffset",b.State.scrollPropertyTop="pageYOffset"):(b.State.scrollAnchor=n.documentElement||n.body.parentNode||n.body,b.State.scrollPropertyLeft="scrollLeft",b.State.scrollPropertyTop="scrollTop");/* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
var w=function(){function t(t){return-t.tension*t.x-t.friction*t.v}function e(e,n,o){var r={x:e.x+o.dx*n,v:e.v+o.dv*n,tension:e.tension,friction:e.friction};return{dx:r.v,dv:t(r)}}function n(n,o){var r={dx:n.v,dv:t(n)},i=e(n,.5*o,r),a=e(n,.5*o,i),s=e(n,o,a),l=1/6*(r.dx+2*(i.dx+a.dx)+s.dx),u=1/6*(r.dv+2*(i.dv+a.dv)+s.dv);return n.x=n.x+l*o,n.v=n.v+u*o,n}return function o(t,e,r){var i,a,s,l={x:-1,v:0,tension:null,friction:null},u=[0],c=0,f=1e-4,d=.016;for(t=parseFloat(t)||500,e=parseFloat(e)||20,r=r||null,l.tension=t,l.friction=e,i=null!==r,i?(c=o(t,e),a=c/r*d):a=d;;)if(s=n(s||l,a),u.push(1+s.x),c+=16,!(Math.abs(s.x)>f&&Math.abs(s.v)>f))break;return i?function(t){return u[t*(u.length-1)|0]}:c}}();b.Easings={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},spring:function(t){return 1-Math.cos(4.5*t*Math.PI)*Math.exp(6*-t)}},d.each([["ease",[.25,.1,.25,1]],["ease-in",[.42,0,1,1]],["ease-out",[0,0,.58,1]],["ease-in-out",[.42,0,.58,1]],["easeInSine",[.47,0,.745,.715]],["easeOutSine",[.39,.575,.565,1]],["easeInOutSine",[.445,.05,.55,.95]],["easeInQuad",[.55,.085,.68,.53]],["easeOutQuad",[.25,.46,.45,.94]],["easeInOutQuad",[.455,.03,.515,.955]],["easeInCubic",[.55,.055,.675,.19]],["easeOutCubic",[.215,.61,.355,1]],["easeInOutCubic",[.645,.045,.355,1]],["easeInQuart",[.895,.03,.685,.22]],["easeOutQuart",[.165,.84,.44,1]],["easeInOutQuart",[.77,0,.175,1]],["easeInQuint",[.755,.05,.855,.06]],["easeOutQuint",[.23,1,.32,1]],["easeInOutQuint",[.86,0,.07,1]],["easeInExpo",[.95,.05,.795,.035]],["easeOutExpo",[.19,1,.22,1]],["easeInOutExpo",[1,0,0,1]],["easeInCirc",[.6,.04,.98,.335]],["easeOutCirc",[.075,.82,.165,1]],["easeInOutCirc",[.785,.135,.15,.86]]],function(t,e){b.Easings[e[0]]=l.apply(null,e[1])});var x=b.CSS={RegEx:{isHex:/^#([A-f\d]{3}){1,2}$/i,valueUnwrap:/^[A-z]+\((.*)\)$/i,wrappedValueAlreadyExtracted:/[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,valueSplit:/([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi},Lists:{colors:["fill","stroke","stopColor","color","backgroundColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor"],transformsBase:["translateX","translateY","scale","scaleX","scaleY","skewX","skewY","rotateZ"],transforms3D:["transformPerspective","translateZ","scaleZ","rotateX","rotateY"]},Hooks:{templates:{textShadow:["Color X Y Blur","black 0px 0px 0px"],boxShadow:["Color X Y Blur Spread","black 0px 0px 0px 0px"],clip:["Top Right Bottom Left","0px 0px 0px 0px"],backgroundPosition:["X Y","0% 0%"],transformOrigin:["X Y Z","50% 50% 0px"],perspectiveOrigin:["X Y","50% 50%"]},registered:{},register:function(){for(var t=0;t<x.Lists.colors.length;t++){var e="color"===x.Lists.colors[t]?"0 0 0 1":"255 255 255 1";x.Hooks.templates[x.Lists.colors[t]]=["Red Green Blue Alpha",e]}var n,o,r;if(p)for(n in x.Hooks.templates){o=x.Hooks.templates[n],r=o[0].split(" ");var i=o[1].match(x.RegEx.valueSplit);"Color"===r[0]&&(r.push(r.shift()),i.push(i.shift()),x.Hooks.templates[n]=[r.join(" "),i.join(" ")])}for(n in x.Hooks.templates){o=x.Hooks.templates[n],r=o[0].split(" ");for(var t in r){var a=n+r[t],s=t;x.Hooks.registered[a]=[n,s]}}},getRoot:function(t){var e=x.Hooks.registered[t];return e?e[0]:t},cleanRootPropertyValue:function(t,e){return x.RegEx.valueUnwrap.test(e)&&(e=e.match(x.RegEx.valueUnwrap)[1]),x.Values.isCSSNullValue(e)&&(e=x.Hooks.templates[t][1]),e},extractValue:function(t,e){var n=x.Hooks.registered[t];if(n){var o=n[0],r=n[1];return e=x.Hooks.cleanRootPropertyValue(o,e),e.toString().match(x.RegEx.valueSplit)[r]}return e},injectValue:function(t,e,n){var o=x.Hooks.registered[t];if(o){var r,i,a=o[0],s=o[1];return n=x.Hooks.cleanRootPropertyValue(a,n),r=n.toString().match(x.RegEx.valueSplit),r[s]=e,i=r.join(" ")}return n}},Normalizations:{registered:{clip:function(t,e,n){switch(t){case"name":return"clip";case"extract":var o;return x.RegEx.wrappedValueAlreadyExtracted.test(n)?o=n:(o=n.toString().match(x.RegEx.valueUnwrap),o=o?o[1].replace(/,(\s+)?/g," "):n),o;case"inject":return"rect("+n+")"}},blur:function(t,e,n){switch(t){case"name":return b.State.isFirefox?"filter":"-webkit-filter";case"extract":var o=parseFloat(n);if(!o&&0!==o){var r=n.toString().match(/blur\(([0-9]+[A-z]+)\)/i);o=r?r[1]:0}return o;case"inject":return parseFloat(n)?"blur("+n+")":"none"}},opacity:function(t,e,n){if(8>=p)switch(t){case"name":return"filter";case"extract":var o=n.toString().match(/alpha\(opacity=(.*)\)/i);return n=o?o[1]/100:1;case"inject":return e.style.zoom=1,parseFloat(n)>=1?"":"alpha(opacity="+parseInt(100*parseFloat(n),10)+")"}else switch(t){case"name":return"opacity";case"extract":return n;case"inject":return n}}},register:function(){9>=p||b.State.isGingerbread||(x.Lists.transformsBase=x.Lists.transformsBase.concat(x.Lists.transforms3D));for(var t=0;t<x.Lists.transformsBase.length;t++)!function(){var e=x.Lists.transformsBase[t];x.Normalizations.registered[e]=function(t,n,r){switch(t){case"name":return"transform";case"extract":return a(n)===o||a(n).transformCache[e]===o?/^scale/i.test(e)?1:0:a(n).transformCache[e].replace(/[()]/g,"");case"inject":var i=!1;switch(e.substr(0,e.length-1)){case"translate":i=!/(%|px|em|rem|vw|vh|\d)$/i.test(r);break;case"scal":case"scale":b.State.isAndroid&&a(n).transformCache[e]===o&&1>r&&(r=1),i=!/(\d)$/i.test(r);break;case"skew":i=!/(deg|\d)$/i.test(r);break;case"rotate":i=!/(deg|\d)$/i.test(r)}return i||(a(n).transformCache[e]="("+r+")"),a(n).transformCache[e]}}}();for(var t=0;t<x.Lists.colors.length;t++)!function(){var e=x.Lists.colors[t];x.Normalizations.registered[e]=function(t,n,r){switch(t){case"name":return e;case"extract":var i;if(x.RegEx.wrappedValueAlreadyExtracted.test(r))i=r;else{var a,s={black:"rgb(0, 0, 0)",blue:"rgb(0, 0, 255)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",red:"rgb(255, 0, 0)",white:"rgb(255, 255, 255)"};/^[A-z]+$/i.test(r)?a=s[r]!==o?s[r]:s.black:x.RegEx.isHex.test(r)?a="rgb("+x.Values.hexToRgb(r).join(" ")+")":/^rgba?\(/i.test(r)||(a=s.black),i=(a||r).toString().match(x.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g," ")}return 8>=p||3!==i.split(" ").length||(i+=" 1"),i;case"inject":return 8>=p?4===r.split(" ").length&&(r=r.split(/\s+/).slice(0,3).join(" ")):3===r.split(" ").length&&(r+=" 1"),(8>=p?"rgb":"rgba")+"("+r.replace(/\s+/g,",").replace(/\.(\d)+(?=,)/g,"")+")"}}}()}},Names:{camelCase:function(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})},SVGAttribute:function(t){var e="width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";return(p||b.State.isAndroid&&!b.State.isChrome)&&(e+="|transform"),new RegExp("^("+e+")$","i").test(t)},prefixCheck:function(t){if(b.State.prefixMatches[t])return[b.State.prefixMatches[t],!0];for(var e=["","Webkit","Moz","ms","O"],n=0,o=e.length;o>n;n++){var r;if(r=0===n?t:e[n]+t.replace(/^\w/,function(t){return t.toUpperCase()}),g.isString(b.State.prefixElement.style[r]))return b.State.prefixMatches[t]=r,[r,!0]}return[t,!1]}},Values:{/* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
hexToRgb:function(t){var e,n=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,o=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;return t=t.replace(n,function(t,e,n,o){return e+e+n+n+o+o}),e=o.exec(t),e?[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]:[0,0,0]},isCSSNullValue:function(t){return 0==t||/^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(t)},getUnitType:function(t){return/^(rotate|skew)/i.test(t)?"deg":/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(t)?"":"px"},getDisplayType:function(t){var e=t&&t.tagName.toString().toLowerCase();return/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(e)?"inline":/^(li)$/i.test(e)?"list-item":/^(tr)$/i.test(e)?"table-row":/^(table)$/i.test(e)?"table":/^(tbody)$/i.test(e)?"table-row-group":"block"},addClass:function(t,e){t.classList?t.classList.add(e):t.className+=(t.className.length?" ":"")+e},removeClass:function(t,e){t.classList?t.classList.remove(e):t.className=t.className.toString().replace(new RegExp("(^|\\s)"+e.split(" ").join("|")+"(\\s|$)","gi")," ")}},getPropertyValue:function(t,n,r,i){function s(t,n){function r(){u&&x.setPropertyValue(t,"display","none")}var l=0;if(8>=p)l=d.css(t,n);else{var u=!1;if(/^(width|height)$/.test(n)&&0===x.getPropertyValue(t,"display")&&(u=!0,x.setPropertyValue(t,"display",x.Values.getDisplayType(t))),!i){if("height"===n&&"border-box"!==x.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var c=t.offsetHeight-(parseFloat(x.getPropertyValue(t,"borderTopWidth"))||0)-(parseFloat(x.getPropertyValue(t,"borderBottomWidth"))||0)-(parseFloat(x.getPropertyValue(t,"paddingTop"))||0)-(parseFloat(x.getPropertyValue(t,"paddingBottom"))||0);return r(),c}if("width"===n&&"border-box"!==x.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var f=t.offsetWidth-(parseFloat(x.getPropertyValue(t,"borderLeftWidth"))||0)-(parseFloat(x.getPropertyValue(t,"borderRightWidth"))||0)-(parseFloat(x.getPropertyValue(t,"paddingLeft"))||0)-(parseFloat(x.getPropertyValue(t,"paddingRight"))||0);return r(),f}}var h;h=a(t)===o?e.getComputedStyle(t,null):a(t).computedStyle?a(t).computedStyle:a(t).computedStyle=e.getComputedStyle(t,null),"borderColor"===n&&(n="borderTopColor"),l=9===p&&"filter"===n?h.getPropertyValue(n):h[n],(""===l||null===l)&&(l=t.style[n]),r()}if("auto"===l&&/^(top|right|bottom|left)$/i.test(n)){var g=s(t,"position");("fixed"===g||"absolute"===g&&/top|left/i.test(n))&&(l=d(t).position()[n]+"px")}return l}var l;if(x.Hooks.registered[n]){var u=n,c=x.Hooks.getRoot(u);r===o&&(r=x.getPropertyValue(t,x.Names.prefixCheck(c)[0])),x.Normalizations.registered[c]&&(r=x.Normalizations.registered[c]("extract",t,r)),l=x.Hooks.extractValue(u,r)}else if(x.Normalizations.registered[n]){var f,h;f=x.Normalizations.registered[n]("name",t),"transform"!==f&&(h=s(t,x.Names.prefixCheck(f)[0]),x.Values.isCSSNullValue(h)&&x.Hooks.templates[n]&&(h=x.Hooks.templates[n][1])),l=x.Normalizations.registered[n]("extract",t,h)}if(!/^[\d-]/.test(l))if(a(t)&&a(t).isSVG&&x.Names.SVGAttribute(n))if(/^(height|width)$/i.test(n))try{l=t.getBBox()[n]}catch(g){l=0}else l=t.getAttribute(n);else l=s(t,x.Names.prefixCheck(n)[0]);return x.Values.isCSSNullValue(l)&&(l=0),b.debug>=2&&console.log("Get "+n+": "+l),l},setPropertyValue:function(t,n,o,r,i){var s=n;if("scroll"===n)i.container?i.container["scroll"+i.direction]=o:"Left"===i.direction?e.scrollTo(o,i.alternateValue):e.scrollTo(i.alternateValue,o);else if(x.Normalizations.registered[n]&&"transform"===x.Normalizations.registered[n]("name",t))x.Normalizations.registered[n]("inject",t,o),s="transform",o=a(t).transformCache[n];else{if(x.Hooks.registered[n]){var l=n,u=x.Hooks.getRoot(n);r=r||x.getPropertyValue(t,u),o=x.Hooks.injectValue(l,o,r),n=u}if(x.Normalizations.registered[n]&&(o=x.Normalizations.registered[n]("inject",t,o),n=x.Normalizations.registered[n]("name",t)),s=x.Names.prefixCheck(n)[0],8>=p)try{t.style[s]=o}catch(c){b.debug&&console.log("Browser does not support ["+o+"] for ["+s+"]")}else a(t)&&a(t).isSVG&&x.Names.SVGAttribute(n)?t.setAttribute(n,o):t.style[s]=o;b.debug>=2&&console.log("Set "+n+" ("+s+"): "+o)}return[s,o]},flushTransformCache:function(t){function e(e){return parseFloat(x.getPropertyValue(t,e))}var n="";if((p||b.State.isAndroid&&!b.State.isChrome)&&a(t).isSVG){var o={translate:[e("translateX"),e("translateY")],skewX:[e("skewX")],skewY:[e("skewY")],scale:1!==e("scale")?[e("scale"),e("scale")]:[e("scaleX"),e("scaleY")],rotate:[e("rotateZ"),0,0]};d.each(a(t).transformCache,function(t){/^translate/i.test(t)?t="translate":/^scale/i.test(t)?t="scale":/^rotate/i.test(t)&&(t="rotate"),o[t]&&(n+=t+"("+o[t].join(" ")+") ",delete o[t])})}else{var r,i;d.each(a(t).transformCache,function(e){return r=a(t).transformCache[e],"transformPerspective"===e?(i=r,!0):(9===p&&"rotateZ"===e&&(e="rotate"),void(n+=e+r+" "))}),i&&(n="perspective"+i+" "+n)}x.setPropertyValue(t,"transform",n)}};x.Hooks.register(),x.Normalizations.register(),b.hook=function(t,e,n){var r=o;return t=i(t),d.each(t,function(t,i){if(a(i)===o&&b.init(i),n===o)r===o&&(r=b.CSS.getPropertyValue(i,e));else{var s=b.CSS.setPropertyValue(i,e,n);"transform"===s[0]&&b.CSS.flushTransformCache(i),r=s}}),r};var S=function(){function t(){return s?P.promise||null:l}function r(){function t(t){function f(t,e){var n=o,r=o,a=o;return g.isArray(t)?(n=t[0],!g.isArray(t[1])&&/^[\d-]/.test(t[1])||g.isFunction(t[1])||x.RegEx.isHex.test(t[1])?a=t[1]:(g.isString(t[1])&&!x.RegEx.isHex.test(t[1])||g.isArray(t[1]))&&(r=e?t[1]:u(t[1],s.duration),t[2]!==o&&(a=t[2]))):n=t,e||(r=r||s.easing),g.isFunction(n)&&(n=n.call(i,T,C)),g.isFunction(a)&&(a=a.call(i,T,C)),[n||0,r,a]}function p(t,e){var n,o;return o=(e||"0").toString().toLowerCase().replace(/[%A-z]+$/,function(t){return n=t,""}),n||(n=x.Values.getUnitType(t)),[o,n]}function v(){var t={myParent:i.parentNode||n.body,position:x.getPropertyValue(i,"position"),fontSize:x.getPropertyValue(i,"fontSize")},o=t.position===N.lastPosition&&t.myParent===N.lastParent,r=t.fontSize===N.lastFontSize;N.lastParent=t.myParent,N.lastPosition=t.position,N.lastFontSize=t.fontSize;var s=100,l={};if(r&&o)l.emToPx=N.lastEmToPx,l.percentToPxWidth=N.lastPercentToPxWidth,l.percentToPxHeight=N.lastPercentToPxHeight;else{var u=a(i).isSVG?n.createElementNS("http://www.w3.org/2000/svg","rect"):n.createElement("div");b.init(u),t.myParent.appendChild(u),d.each(["overflow","overflowX","overflowY"],function(t,e){b.CSS.setPropertyValue(u,e,"hidden")}),b.CSS.setPropertyValue(u,"position",t.position),b.CSS.setPropertyValue(u,"fontSize",t.fontSize),b.CSS.setPropertyValue(u,"boxSizing","content-box"),d.each(["minWidth","maxWidth","width","minHeight","maxHeight","height"],function(t,e){b.CSS.setPropertyValue(u,e,s+"%")}),b.CSS.setPropertyValue(u,"paddingLeft",s+"em"),l.percentToPxWidth=N.lastPercentToPxWidth=(parseFloat(x.getPropertyValue(u,"width",null,!0))||1)/s,l.percentToPxHeight=N.lastPercentToPxHeight=(parseFloat(x.getPropertyValue(u,"height",null,!0))||1)/s,l.emToPx=N.lastEmToPx=(parseFloat(x.getPropertyValue(u,"paddingLeft"))||1)/s,t.myParent.removeChild(u)}return null===N.remToPx&&(N.remToPx=parseFloat(x.getPropertyValue(n.body,"fontSize"))||16),null===N.vwToPx&&(N.vwToPx=parseFloat(e.innerWidth)/100,N.vhToPx=parseFloat(e.innerHeight)/100),l.remToPx=N.remToPx,l.vwToPx=N.vwToPx,l.vhToPx=N.vhToPx,b.debug>=1&&console.log("Unit ratios: "+JSON.stringify(l),i),l}if(s.begin&&0===T)try{s.begin.call(h,h)}catch(w){setTimeout(function(){throw w},1)}if("scroll"===A){var S,E,k,O=/^x$/i.test(s.axis)?"Left":"Top",V=parseFloat(s.offset)||0;s.container?g.isWrapped(s.container)||g.isNode(s.container)?(s.container=s.container[0]||s.container,S=s.container["scroll"+O],k=S+d(i).position()[O.toLowerCase()]+V):s.container=null:(S=b.State.scrollAnchor[b.State["scrollProperty"+O]],E=b.State.scrollAnchor[b.State["scrollProperty"+("Left"===O?"Top":"Left")]],k=d(i).offset()[O.toLowerCase()]+V),l={scroll:{rootPropertyValue:!1,startValue:S,currentValue:S,endValue:k,unitType:"",easing:s.easing,scrollData:{container:s.container,direction:O,alternateValue:E}},element:i},b.debug&&console.log("tweensContainer (scroll): ",l.scroll,i)}else if("reverse"===A){if(!a(i).tweensContainer)return void d.dequeue(i,s.queue);"none"===a(i).opts.display&&(a(i).opts.display="auto"),"hidden"===a(i).opts.visibility&&(a(i).opts.visibility="visible"),a(i).opts.loop=!1,a(i).opts.begin=null,a(i).opts.complete=null,y.easing||delete s.easing,y.duration||delete s.duration,s=d.extend({},a(i).opts,s);var L=d.extend(!0,{},a(i).tweensContainer);for(var F in L)if("element"!==F){var j=L[F].startValue;L[F].startValue=L[F].currentValue=L[F].endValue,L[F].endValue=j,g.isEmptyObject(y)||(L[F].easing=s.easing),b.debug&&console.log("reverse tweensContainer ("+F+"): "+JSON.stringify(L[F]),i)}l=L}else if("start"===A){var L;a(i).tweensContainer&&a(i).isAnimating===!0&&(L=a(i).tweensContainer),d.each(m,function(t,e){if(RegExp("^"+x.Lists.colors.join("$|^")+"$").test(t)){var n=f(e,!0),r=n[0],i=n[1],a=n[2];if(x.RegEx.isHex.test(r)){for(var s=["Red","Green","Blue"],l=x.Values.hexToRgb(r),u=a?x.Values.hexToRgb(a):o,c=0;c<s.length;c++){var d=[l[c]];i&&d.push(i),u!==o&&d.push(u[c]),m[t+s[c]]=d}delete m[t]}}});for(var M in m){var z=f(m[M]),q=z[0],W=z[1],R=z[2];M=x.Names.camelCase(M);var B=x.Hooks.getRoot(M),I=!1;if(a(i).isSVG||"tween"===B||x.Names.prefixCheck(B)[1]!==!1||x.Normalizations.registered[B]!==o){(s.display!==o&&null!==s.display&&"none"!==s.display||s.visibility!==o&&"hidden"!==s.visibility)&&/opacity|filter/.test(M)&&!R&&0!==q&&(R=0),s._cacheValues&&L&&L[M]?(R===o&&(R=L[M].endValue+L[M].unitType),I=a(i).rootPropertyValueCache[B]):x.Hooks.registered[M]?R===o?(I=x.getPropertyValue(i,B),R=x.getPropertyValue(i,M,I)):I=x.Hooks.templates[B][1]:R===o&&(R=x.getPropertyValue(i,M));var $,Y,X,_=!1;if($=p(M,R),R=$[0],X=$[1],$=p(M,q),q=$[0].replace(/^([+-\/*])=/,function(t,e){return _=e,""}),Y=$[1],R=parseFloat(R)||0,q=parseFloat(q)||0,"%"===Y&&(/^(fontSize|lineHeight)$/.test(M)?(q/=100,Y="em"):/^scale/.test(M)?(q/=100,Y=""):/(Red|Green|Blue)$/i.test(M)&&(q=q/100*255,Y="")),/[\/*]/.test(_))Y=X;else if(X!==Y&&0!==R)if(0===q)Y=X;else{r=r||v();var D=/margin|padding|left|right|width|text|word|letter/i.test(M)||/X$/.test(M)||"x"===M?"x":"y";switch(X){case"%":R*="x"===D?r.percentToPxWidth:r.percentToPxHeight;break;case"px":break;default:R*=r[X+"ToPx"]}switch(Y){case"%":R*=1/("x"===D?r.percentToPxWidth:r.percentToPxHeight);break;case"px":break;default:R*=1/r[Y+"ToPx"]}}switch(_){case"+":q=R+q;break;case"-":q=R-q;break;case"*":q=R*q;break;case"/":q=R/q}l[M]={rootPropertyValue:I,startValue:R,currentValue:R,endValue:q,unitType:Y,easing:W},b.debug&&console.log("tweensContainer ("+M+"): "+JSON.stringify(l[M]),i)}else b.debug&&console.log("Skipping ["+B+"] due to a lack of browser support.")}l.element=i}l.element&&(x.Values.addClass(i,"velocity-animating"),H.push(l),""===s.queue&&(a(i).tweensContainer=l,a(i).opts=s),a(i).isAnimating=!0,T===C-1?(b.State.calls.push([H,h,s,null,P.resolver]),b.State.isTicking===!1&&(b.State.isTicking=!0,c())):T++)}var r,i=this,s=d.extend({},b.defaults,y),l={};switch(a(i)===o&&b.init(i),parseFloat(s.delay)&&s.queue!==!1&&d.queue(i,s.queue,function(t){b.velocityQueueEntryFlag=!0,a(i).delayTimer={setTimeout:setTimeout(t,parseFloat(s.delay)),next:t}}),s.duration.toString().toLowerCase()){case"fast":s.duration=200;break;case"normal":s.duration=v;break;case"slow":s.duration=600;break;default:s.duration=parseFloat(s.duration)||1}b.mock!==!1&&(b.mock===!0?s.duration=s.delay=1:(s.duration*=parseFloat(b.mock)||1,s.delay*=parseFloat(b.mock)||1)),s.easing=u(s.easing,s.duration),s.begin&&!g.isFunction(s.begin)&&(s.begin=null),s.progress&&!g.isFunction(s.progress)&&(s.progress=null),s.complete&&!g.isFunction(s.complete)&&(s.complete=null),s.display!==o&&null!==s.display&&(s.display=s.display.toString().toLowerCase(),"auto"===s.display&&(s.display=b.CSS.Values.getDisplayType(i))),s.visibility!==o&&null!==s.visibility&&(s.visibility=s.visibility.toString().toLowerCase()),s.mobileHA=s.mobileHA&&b.State.isMobile&&!b.State.isGingerbread,s.queue===!1?s.delay?setTimeout(t,s.delay):t():d.queue(i,s.queue,function(e,n){return n===!0?(P.promise&&P.resolver(h),!0):(b.velocityQueueEntryFlag=!0,void t(e))}),""!==s.queue&&"fx"!==s.queue||"inprogress"===d.queue(i)[0]||d.dequeue(i)}var s,l,p,h,m,y,w=arguments[0]&&(arguments[0].p||d.isPlainObject(arguments[0].properties)&&!arguments[0].properties.names||g.isString(arguments[0].properties));if(g.isWrapped(this)?(s=!1,p=0,h=this,l=this):(s=!0,p=1,h=w?arguments[0].elements||arguments[0].e:arguments[0]),h=i(h)){w?(m=arguments[0].properties||arguments[0].p,y=arguments[0].options||arguments[0].o):(m=arguments[p],y=arguments[p+1]);var C=h.length,T=0;if(!/^(stop|finish|finishAll)$/i.test(m)&&!d.isPlainObject(y)){var E=p+1;y={};for(var k=E;k<arguments.length;k++)g.isArray(arguments[k])||!/^(fast|normal|slow)$/i.test(arguments[k])&&!/^\d/.test(arguments[k])?g.isString(arguments[k])||g.isArray(arguments[k])?y.easing=arguments[k]:g.isFunction(arguments[k])&&(y.complete=arguments[k]):y.duration=arguments[k]}var P={promise:null,resolver:null,rejecter:null};s&&b.Promise&&(P.promise=new b.Promise(function(t,e){P.resolver=t,P.rejecter=e}));var A;switch(m){case"scroll":A="scroll";break;case"reverse":A="reverse";break;case"finish":case"finishAll":case"stop":d.each(h,function(t,e){a(e)&&a(e).delayTimer&&(clearTimeout(a(e).delayTimer.setTimeout),a(e).delayTimer.next&&a(e).delayTimer.next(),delete a(e).delayTimer),"finishAll"!==m||y!==!0&&!g.isString(y)||(d.each(d.queue(e,g.isString(y)?y:""),function(t,e){g.isFunction(e)&&e()}),d.queue(e,g.isString(y)?y:"",[]))});var O=[];return d.each(b.State.calls,function(t,e){e&&d.each(e[1],function(n,r){var i=y===o?"":y;return i===!0||e[2].queue===i||y===o&&e[2].queue===!1?void d.each(h,function(n,o){o===r&&((y===!0||g.isString(y))&&(d.each(d.queue(o,g.isString(y)?y:""),function(t,e){g.isFunction(e)&&e(null,!0)}),d.queue(o,g.isString(y)?y:"",[])),"stop"===m?(a(o)&&a(o).tweensContainer&&i!==!1&&d.each(a(o).tweensContainer,function(t,e){e.endValue=e.currentValue}),O.push(t)):("finish"===m||"finishAll"===m)&&(e[2].duration=1))}):!0})}),"stop"===m&&(d.each(O,function(t,e){f(e,!0)}),P.promise&&P.resolver(h)),t();default:if(!d.isPlainObject(m)||g.isEmptyObject(m)){if(g.isString(m)&&b.Redirects[m]){var V=d.extend({},y),L=V.duration,F=V.delay||0;return V.backwards===!0&&(h=d.extend(!0,[],h).reverse()),d.each(h,function(t,e){parseFloat(V.stagger)?V.delay=F+parseFloat(V.stagger)*t:g.isFunction(V.stagger)&&(V.delay=F+V.stagger.call(e,t,C)),V.drag&&(V.duration=parseFloat(L)||(/^(callout|transition)/.test(m)?1e3:v),V.duration=Math.max(V.duration*(V.backwards?1-t/C:(t+1)/C),.75*V.duration,200)),b.Redirects[m].call(e,e,V||{},t,C,h,P.promise?P:o)}),t()}var j="Velocity: First argument ("+m+") was not a property map, a known action, or a registered redirect. Aborting.";return P.promise?P.rejecter(new Error(j)):console.log(j),t()}A="start"}var N={lastParent:null,lastPosition:null,lastFontSize:null,lastPercentToPxWidth:null,lastPercentToPxHeight:null,lastEmToPx:null,remToPx:null,vwToPx:null,vhToPx:null},H=[];d.each(h,function(t,e){g.isNode(e)&&r.call(e)});var M,V=d.extend({},b.defaults,y);if(V.loop=parseInt(V.loop),M=2*V.loop-1,V.loop)for(var z=0;M>z;z++){var q={delay:V.delay,progress:V.progress};z===M-1&&(q.display=V.display,q.visibility=V.visibility,q.complete=V.complete),S(h,"reverse",q)}return t()}};b=d.extend(S,b),b.animate=S;var C=e.requestAnimationFrame||h;return b.State.isMobile||n.hidden===o||n.addEventListener("visibilitychange",function(){n.hidden?(C=function(t){return setTimeout(function(){t(!0)},16)},c()):C=e.requestAnimationFrame||h}),t.Velocity=b,t!==e&&(t.fn.velocity=S,t.fn.velocity.defaults=b.defaults),d.each(["Down","Up"],function(t,e){b.Redirects["slide"+e]=function(t,n,r,i,a,s){var l=d.extend({},n),u=l.begin,c=l.complete,f={height:"",marginTop:"",marginBottom:"",paddingTop:"",paddingBottom:""},p={};l.display===o&&(l.display="Down"===e?"inline"===b.CSS.Values.getDisplayType(t)?"inline-block":"block":"none"),l.begin=function(){u&&u.call(a,a);for(var n in f){p[n]=t.style[n];var o=b.CSS.getPropertyValue(t,n);f[n]="Down"===e?[o,0]:[0,o]}p.overflow=t.style.overflow,t.style.overflow="hidden"},l.complete=function(){for(var e in p)t.style[e]=p[e];c&&c.call(a,a),s&&s.resolver(a)},b(t,f,l)}}),d.each(["In","Out"],function(t,e){b.Redirects["fade"+e]=function(t,n,r,i,a,s){var l=d.extend({},n),u={opacity:"In"===e?1:0},c=l.complete;r!==i-1?l.complete=l.begin=null:l.complete=function(){c&&c.call(a,a),s&&s.resolver(a)},l.display===o&&(l.display="In"===e?"auto":"none"),b(this,u,l)}}),b}(window.jQuery||window.Zepto||window,window,document)})},function(t,e){t.exports=function(t){var e=10,n=Array.prototype.slice.apply(document.querySelectorAll("[data-flyout]"));n.forEach(function(t){var n=document.querySelector("#"+t.getAttribute("data-flyout"));t.addEventListener("mouseover",function(){n.classList.remove("flyout-hidden");var o=t,r=0,i=0;do r+=o.offsetLeft,i+=o.offsetTop;while(null!==(o=o.offsetParent));r+=t.offsetWidth/2,i=i+t.offsetHeight+e,n.style.left=r+"px",n.style.top=i+"px"}),t.addEventListener("mouseout",function(){n.classList.add("flyout-hidden")})})}},function(t,e){t.exports=function(t){var e=Array.prototype.slice.call(t.querySelectorAll(".menu")),n=Array.prototype.slice.call(t.querySelectorAll("[data-menu-toggle]"));n.forEach(function(e){e.addEventListener("click",function(){var n=t.querySelector("#"+e.getAttribute("data-menu-toggle"));n.classList.toggle("active")})}),e.forEach(function(t){var e=Array.prototype.slice.call(t.querySelectorAll("[data-menu-dismiss]"));e.forEach(function(e){e.addEventListener("click",function(){t.classList.remove("active"),document.querySelector('[data-menu-toggle="'+t.id+'"]').classList.remove("active")})})})}},function(t,e,n){var o=n(3),r=420,i=300,a=[.645,.045,.355,1],s=t.exports=function(t){this.root=t,this.dismissals=Array.prototype.slice.apply(t.querySelectorAll("[data-modal-dismiss]")),this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-modal]")),this.attachEvents()};s.prototype={attachEvents:function(){this.dismissals.forEach(function(t){t.addEventListener("click",this.dismiss.bind(this))},this),this.openers.forEach(function(t){t.addEventListener("click",this.open.bind(this))},this),document.addEventListener("keyup",function(t){var e=t.which||t.keyCode;if(27===e){var n=Array.prototype.slice.call(document.querySelectorAll(".modal:not(.modal-hidden)"));n.forEach(function(t){t.classList.add("modal-hidden")})}}),window.addEventListener("resize",function(t){var e=Array.prototype.slice.call(document.querySelectorAll(".modal:not(.modal-hidden)"));e.forEach(function(t){this.reposition(t.querySelector(".modal-container"))}.bind(this))}.bind(this))},open:function(t){var e=t.target.getAttribute("data-modal");e=this.root.querySelector("#"+e),e.classList.remove("modal-hidden");var n=document.body.offsetWidth,s=e.querySelector(".modal-container");r>=n&&(s.style.left=n+"px",o(s,{left:0},{duration:i,easing:a,complete:function(){document.body.style.overflow="hidden"}})),this.reposition(s)},dismiss:function(t){function e(){document.body.style.overflow="",u&&n.classList.add("modal-hidden")}var n,s=this,l=t.target,u=l===t.currentTarget&&l.classList.contains("modal-overlay");do if(l.hasAttribute("data-modal-dismiss")&&!l.classList.contains("modal"))u=!0;else if(l.classList.contains("modal")){n=l;break}while((l=l.parentNode)!==s.root);if(n){var c=document.body.offsetWidth,f=n.querySelector(".modal-container");r>=c?o(f,{left:c},{duration:i,easing:a,complete:e}):e()}},reposition:function(t){if(!t.classList.contains("modal-hidden")){var e=document.body.offsetWidth;e>=r?(t.style.margin="",document.body.style.overflow=""):(t.style.margin=0,document.body.style.overflow="hidden")}}}},function(t,e){var n=t.exports=function(t){var e=Array.prototype.slice.apply(t.querySelectorAll("[data-toggle]"));this.element=t,e.forEach(function(t){t.addEventListener("click",this.toggle.bind(this))},this)};n.prototype={toggle:function(t){var e=t.target;do if(e.hasAttribute("data-toggle"))return e.classList.toggle("active");while((e=e.parentNode)!==this.element)}}},function(t,e,n){var o=n(9),r=function(t,e){var n={bubbles:!1,cancelable:!1,detail:void 0};for(var o in e)e.hasOwnProperty(o)&&(n[o]=e[o]);var r=document.createEvent("CustomEvent");return r.initCustomEvent(t,n.bubbles,n.cancelable,n.detail),r},i=t.exports=function(t){if(this.root=t,this.tourElements=Array.prototype.slice.apply(t.querySelectorAll("[data-tour]")),this.tourElements.length>0){this.tours={},this.currentTourName=null,this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-tour-opener]"));var e=document.createElement("div");if(e.classList.add("tour-overlay","overlay-hidden"),this.tourOverlay=t.body.appendChild(e),this.initialize(),this.openers.length<this.tourElements.length){var n=this,o=n.openers.map(function(t){return t.getAttribute("data-tour-opener")});n.tourElements.forEach(function(t){var e=t.getAttribute("data-tour-name");o.includes(e)||n.openTour(e)})}}};i.prototype={initialize:function(){var t=this;t.tourElements.forEach(function(e){t.initializeTour(e)}),t.attachEvents()},initializeTour:function(t){var e=this,n=t.getAttribute("data-tour-name"),r=new o.Tour({defaults:{showCancelLink:!0,buttons:[{text:t.getAttribute("data-tour-skip"),classes:"btn-default",action:function(){e.closeTour(n)}},{text:t.getAttribute("data-tour-next"),classes:"btn-primary",action:function(){e.clickNext(n)}}]}});e.tours[n]={tour:r,name:n},e.addSteps(r,t)},addSteps:function(t,e){var n=this,o=Array.prototype.slice.apply(e.querySelectorAll("[data-tour-step]")),r=o.sort(function(t,e){var n=parseInt(t.getAttribute("data-step-number")),o=parseInt(e.getAttribute("data-step-number"));return n>o?1:o>n?-1:0});r.forEach(function(o,i){var a={title:o.getAttribute("data-title")||"",text:o.innerHTML},s=o.getAttribute("data-classes")||"",l=o.getAttribute("data-attach-to-element"),u=o.getAttribute("data-attach-to-position"),c={left:"0 25px",right:"0 -25px",top:"25px 0",bottom:"-25px 0"}[u];s&&(a.classes=s.split(" ")),l&&u&&c&&(a.attachTo={element:l,on:u},a.tetherOptions={offset:c}),r.length-1===i&&(a.buttons=[{text:e.getAttribute("data-tour-done"),classes:"btn-primary",action:t.complete}]),t.addStep(a),t.on("active",function(){n.tourOverlay.classList.remove("overlay-hidden")}),t.on("inactive",function(){n.tourOverlay.classList.add("overlay-hidden")})})},attachEvents:function(){var t=this;t.openers.forEach(function(e){e.addEventListener("click",t.openTour.bind(t,e.getAttribute("data-tour-opener")))},t),document.addEventListener("keyup",function(e){var n=e.which||e.keyCode;null!==t.currentTourName&&27===n&&t.closeTour(t.currentTourName)}),t.tourOverlay.addEventListener("click",function(){t.closeTour(t.currentTourName)})},openTour:function(t){var e=this.tours[t];this.currentTourName=e.name,e.tour.start(),this.tourOverlay.classList.remove("tour-overlay-hidden")},clickNext:function(t){var e=this.tours[t],n={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new r("next",{detail:n})),e.tour.next()},closeTour:function(t){var e=this.tours[t],n={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new r("cancel",{detail:n})),e.tour.cancel()}}},function(t,e,n){var o,r,i;/*! tether-shepherd 1.2.0 */
!function(a,s){r=[n(10)],o=s,i="function"==typeof o?o.apply(e,r):o,!(void 0!==i&&(t.exports=i))}(this,function(t){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function o(t){var e=document.createElement("div");return e.innerHTML=t,e.children[0]}function r(t,e){var n=void 0;return"undefined"!=typeof t.matches?n=t.matches:"undefined"!=typeof t.matchesSelector?n=t.matchesSelector:"undefined"!=typeof t.msMatchesSelector?n=t.msMatchesSelector:"undefined"!=typeof t.webkitMatchesSelector?n=t.webkitMatchesSelector:"undefined"!=typeof t.mozMatchesSelector?n=t.mozMatchesSelector:"undefined"!=typeof t.oMatchesSelector&&(n=t.oMatchesSelector),n.call(t,e)}function i(t,e){if(null===t||"undefined"==typeof t)return t;if("object"==typeof t)return t;var n=t.split(" "),o=n.length,r=e.length;o>r&&(n[0]=n.slice(0,o-r+1).join(" "),n.splice(1,r));for(var i={},a=0;r>a;++a){var s=e[a];i[s]=n[a]}return i}var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),s=function(t,e,n){for(var o=!0;o;){var r=t,i=e,a=n;s=u=l=void 0,o=!1,null===r&&(r=Function.prototype);var s=Object.getOwnPropertyDescriptor(r,i);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(r);if(null===u)return;t=u,e=i,n=a,o=!0}},l=t.Utils,u=l.Evented,c=l.addClass,f=l.extend,d=l.hasClass,p=l.removeClass,h=l.uniqueId,g=new u,m={top:"bottom center",left:"middle right",right:"middle left",bottom:"top center",center:"middle center"},v=function(l){function u(t,n){return e(this,u),s(Object.getPrototypeOf(u.prototype),"constructor",this).call(this,t,n),this.tour=t,this.bindMethods(),this.setOptions(n),this}return n(u,l),a(u,[{key:"bindMethods",value:function(){var t=this,e=["_show","show","hide","isOpen","cancel","complete","scrollTo","destroy"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"setOptions",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t,this.destroy(),this.id=this.options.id||this.id||"step-"+h();var e=this.options.when;if(e)for(var n in e)if({}.hasOwnProperty.call(e,n)){var o=e[n];this.on(n,o,this)}this.options.buttons||(this.options.buttons=[{text:"Next",action:this.tour.next}])}},{key:"getTour",value:function(){return this.tour}},{key:"bindAdvance",value:function(){var t=this,e=i(this.options.advanceOn,["selector","event"]),n=e.event,o=e.selector,a=function(e){t.isOpen()&&("undefined"!=typeof o?r(e.target,o)&&t.tour.next():t.el&&e.target===t.el&&t.tour.next())};document.body.addEventListener(n,a),this.on("destroy",function(){return document.body.removeEventListener(n,a)})}},{key:"getAttachTo",value:function(){var t=i(this.options.attachTo,["element","on"])||{},e=t.element;if("string"==typeof e&&(t.element=document.querySelector(e),!t.element))throw new Error("The element for this Shepherd step was not found "+e);return t}},{key:"setupTether",value:function(){if("undefined"==typeof t)throw new Error("Using the attachment feature of Shepherd requires the Tether library");var e=this.getAttachTo(),n=m[e.on||"right"];"undefined"==typeof e.element&&(e.element="viewport",n="middle center");var o={classPrefix:"shepherd",element:this.el,constraints:[{to:"window",pin:!0,attachment:"together"}],target:e.element,offset:e.offset||"0 0",attachment:n};this.tether&&this.tether.destroy(),this.tether=new t(f(o,this.options.tetherOptions))}},{key:"show",value:function(){var t=this;if("undefined"!=typeof this.options.beforeShowPromise){var e=this.options.beforeShowPromise();if("undefined"!=typeof e)return e.then(function(){return t._show()})}this._show()}},{key:"_show",value:function(){var t=this;this.trigger("before-show"),this.el||this.render(),c(this.el,"shepherd-open"),document.body.setAttribute("data-shepherd-step",this.id),this.setupTether(),this.options.scrollTo&&setTimeout(function(){t.scrollTo()}),this.trigger("show")}},{key:"hide",value:function(){this.trigger("before-hide"),p(this.el,"shepherd-open"),document.body.removeAttribute("data-shepherd-step"),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("hide")}},{key:"isOpen",value:function(){return d(this.el,"shepherd-open")}},{key:"cancel",value:function(){this.tour.cancel(),this.trigger("cancel")}},{key:"complete",value:function(){this.tour.complete(),this.trigger("complete")}},{key:"scrollTo",value:function(){var t=this.getAttachTo(),e=t.element;"undefined"!=typeof this.options.scrollToHandler?this.options.scrollToHandler(e):"undefined"!=typeof e&&e.scrollIntoView()}},{key:"destroy",value:function(){"undefined"!=typeof this.el&&(document.body.removeChild(this.el),delete this.el),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("destroy")}},{key:"render",value:function(){var t=this;"undefined"!=typeof this.el&&this.destroy(),this.el=o("<div class='shepherd-step "+(this.options.classes||"")+"' data-id='"+this.id+"' "+(this.options.idAttribute?'id="'+this.options.idAttribute+'"':"")+"></div>");var e=document.createElement("div");e.className="shepherd-content",this.el.appendChild(e);var n=document.createElement("header");if(e.appendChild(n),"undefined"!=typeof this.options.title&&(n.innerHTML+="<h3 class='shepherd-title'>"+this.options.title+"</h3>",this.el.className+=" shepherd-has-title"),this.options.showCancelLink){var r=o("<a href class='shepherd-cancel-link'>✕</a>");n.appendChild(r),this.el.className+=" shepherd-has-cancel-link",this.bindCancelLink(r)}"undefined"!=typeof this.options.text&&!function(){var n=o("<div class='shepherd-text'></div>"),r=t.options.text;"function"==typeof r&&(r=r.call(t,n)),r instanceof HTMLElement?n.appendChild(r):("string"==typeof r&&(r=[r]),r.map(function(t){n.innerHTML+="<p>"+t+"</p>"})),e.appendChild(n)}();var i=document.createElement("footer");this.options.buttons&&!function(){var e=o("<ul class='shepherd-buttons'></ul>");t.options.buttons.map(function(n){var r=o("<li><a class='shepherd-button "+(n.classes||"")+"'>"+n.text+"</a>");e.appendChild(r),t.bindButtonEvents(n,r.querySelector("a"))}),i.appendChild(e)}(),e.appendChild(i),document.body.appendChild(this.el),this.setupTether(),this.options.advanceOn&&this.bindAdvance()}},{key:"bindCancelLink",value:function(t){var e=this;t.addEventListener("click",function(t){t.preventDefault(),e.cancel()})}},{key:"bindButtonEvents",value:function(t,e){var n=this;t.events=t.events||{},"undefined"!=typeof t.action&&(t.events.click=t.action);for(var o in t.events)if({}.hasOwnProperty.call(t.events,o)){var r=t.events[o];"string"==typeof r&&!function(){var t=r;r=function(){return n.tour.show(t)}}(),e.addEventListener(o,r)}this.on("destroy",function(){for(var n in t.events)if({}.hasOwnProperty.call(t.events,n)){var o=t.events[n];e.removeEventListener(n,o)}})}}]),u}(u),y=function(t){function o(){var t=this,n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];e(this,o),s(Object.getPrototypeOf(o.prototype),"constructor",this).call(this,n),this.bindMethods(),this.options=n,this.steps=this.options.steps||[];var r=["complete","cancel","hide","start","show","active","inactive"];return r.map(function(e){!function(e){t.on(e,function(n){n=n||{},n.tour=t,g.trigger(e,n)})}(e)}),this}return n(o,t),a(o,[{key:"bindMethods",value:function(){var t=this,e=["next","back","cancel","complete","hide"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"addStep",value:function(t,e){return"undefined"==typeof e&&(e=t),e instanceof v?e.tour=this:(("string"==typeof t||"number"==typeof t)&&(e.id=t.toString()),e=f({},this.options.defaults,e),e=new v(this,e)),this.steps.push(e),this}},{key:"getById",value:function(t){for(var e=0;e<this.steps.length;++e){var n=this.steps[e];if(n.id===t)return n}}},{key:"getCurrentStep",value:function(){return this.currentStep}},{key:"next",value:function(){var t=this.steps.indexOf(this.currentStep);t===this.steps.length-1?(this.hide(t),this.trigger("complete"),this.done()):this.show(t+1,!0)}},{key:"back",value:function(){var t=this.steps.indexOf(this.currentStep);this.show(t-1,!1)}},{key:"cancel",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("cancel"),this.done()}},{key:"complete",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("complete"),this.done()}},{key:"hide",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("hide"),this.done()}},{key:"done",value:function(){g.activeTour=null,p(document.body,"shepherd-active"),this.trigger("inactive",{tour:this})}},{key:"show",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];this.currentStep?this.currentStep.hide():(c(document.body,"shepherd-active"),this.trigger("active",{tour:this})),g.activeTour=this;var n=void 0;if(n="string"==typeof t?this.getById(t):this.steps[t])if("undefined"==typeof n.options.showOn||n.options.showOn())this.trigger("show",{step:n,previous:this.currentStep}),this.currentStep=n,n.show();else{var o=this.steps.indexOf(n),r=e?o+1:o-1;this.show(r,e)}}},{key:"start",value:function(){this.trigger("start"),this.currentStep=null,this.next()}}]),o}(u);return f(g,{Tour:y,Step:v,Evented:u}),g})},function(t,e,n){var o,r;/*! tether 1.2.0 */
!function(i,a){o=a,r="function"==typeof o?o.call(e,n,e,t):o,!(void 0!==r&&(t.exports=r))}(this,function(t,e,n){"use strict";function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t){var e=getComputedStyle(t)||{},n=e.position;if("fixed"===n)return t;for(var o=t;o=o.parentNode;){var r=void 0;try{r=getComputedStyle(o)}catch(i){}if("undefined"==typeof r||null===r)return o;var a=r,s=a.overflow,l=a.overflowX,u=a.overflowY;if(/(auto|scroll)/.test(s+u+l)&&("absolute"!==n||["relative","absolute","fixed"].indexOf(r.position)>=0))return o}return document.body}function i(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var n=e.documentElement,o={},r=t.getBoundingClientRect();for(var i in r)o[i]=r[i];var a=T(e);return o.top-=a.top,o.left-=a.left,"undefined"==typeof o.width&&(o.width=document.body.scrollWidth-o.left-o.right),"undefined"==typeof o.height&&(o.height=document.body.scrollHeight-o.top-o.bottom),o.top=o.top-n.clientTop,o.left=o.left-n.clientLeft,o.right=e.body.clientWidth-o.width-o.left,o.bottom=e.body.clientHeight-o.height-o.top,o}function a(t){return t.offsetParent||document.documentElement}function s(){var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");l(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var n=t.offsetWidth;e.style.overflow="scroll";var o=t.offsetWidth;n===o&&(o=e.clientWidth),document.body.removeChild(e);var r=n-o;return{width:r,height:r}}function l(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var n in e)({}).hasOwnProperty.call(e,n)&&(t[n]=e[n])}),t}function u(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var n=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),o=d(t).replace(n," ");p(t,o)}}function c(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{u(t,e);var n=d(t)+(" "+e);p(t,n)}}function f(t,e){if("undefined"!=typeof t.classList)return t.classList.contains(e);var n=d(t);return new RegExp("(^| )"+e+"( |$)","gi").test(n)}function d(t){return t.className instanceof SVGAnimatedString?t.className.baseVal:t.className}function p(t,e){t.setAttribute("class",e)}function h(t,e,n){n.forEach(function(n){-1===e.indexOf(n)&&f(t,n)&&u(t,n)}),e.forEach(function(e){f(t,e)||c(t,e)})}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function g(t,e){var n=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+n>=e&&e>=t-n}function m(){return"undefined"!=typeof performance&&"undefined"!=typeof performance.now?performance.now():+new Date}function v(){for(var t={top:0,left:0},e=arguments.length,n=Array(e),o=0;e>o;o++)n[o]=arguments[o];return n.forEach(function(e){var n=e.top,o=e.left;"string"==typeof n&&(n=parseFloat(n,10)),"string"==typeof o&&(o=parseFloat(o,10)),t.top+=n,t.left+=o}),t}function y(t,e){return"string"==typeof t.left&&-1!==t.left.indexOf("%")&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&-1!==t.top.indexOf("%")&&(t.top=parseFloat(t.top,10)/100*e.height),t}function b(t,e){return"scrollParent"===e?e=t.scrollParent:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),"undefined"!=typeof e.nodeType&&!function(){var t=i(e),n=t,o=getComputedStyle(e);e=[n.left,n.top,t.width+n.left,t.height+n.top],$.forEach(function(t,n){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[n]+=parseFloat(o["border"+t+"Width"]):e[n]-=parseFloat(o["border"+t+"Width"])})}(),e}var w=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),x=void 0;"undefined"==typeof x&&(x={modules:[]});var S=function(){var t=0;return function(){return++t}}(),C={},T=function(t){var e=t._tetherZeroElement;"undefined"==typeof e&&(e=t.createElement("div"),e.setAttribute("data-tether-id",S()),l(e.style,{top:0,left:0,position:"absolute"}),t.body.appendChild(e),t._tetherZeroElement=e);var n=e.getAttribute("data-tether-id");if("undefined"==typeof C[n]){C[n]={};var o=e.getBoundingClientRect();for(var r in o)C[n][r]=o[r];k(function(){delete C[n]})}return C[n]},E=[],k=function(t){E.push(t)},P=function(){for(var t=void 0;t=E.pop();)t()},A=function(){function t(){o(this,t)}return w(t,[{key:"on",value:function(t,e,n){var o=arguments.length<=3||void 0===arguments[3]?!1:arguments[3];"undefined"==typeof this.bindings&&(this.bindings={}),"undefined"==typeof this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:n,once:o})}},{key:"once",value:function(t,e,n){this.on(t,e,n,!0)}},{key:"off",value:function(t,e){if("undefined"==typeof this.bindings||"undefined"==typeof this.bindings[t])if("undefined"==typeof e)delete this.bindings[t];else for(var n=0;n<this.bindings[t].length;)this.bindings[t][n].handler===e?this.bindings[t].splice(n,1):++n}},{key:"trigger",value:function(t){if("undefined"!=typeof this.bindings&&this.bindings[t]){for(var e=0,n=arguments.length,o=Array(n>1?n-1:0),r=1;n>r;r++)o[r-1]=arguments[r];for(;e<this.bindings[t].length;){var i=this.bindings[t][e],a=i.handler,s=i.ctx,l=i.once,u=s;"undefined"==typeof u&&(u=this),a.apply(u,o),l?this.bindings[t].splice(e,1):++e}}}}]),t}();x.Utils={getScrollParent:r,getBounds:i,getOffsetParent:a,extend:l,addClass:c,removeClass:u,hasClass:f,updateClasses:h,defer:k,flush:P,uniqueId:S,Evented:A,getScrollBarSize:s};var O=function(){function t(t,e){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(l){r=!0,i=l}finally{try{!o&&s["return"]&&s["return"]()}finally{if(r)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),w=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}();if("undefined"==typeof x)throw new Error("You must include the utils.js file before tether.js");var V=x.Utils,r=V.getScrollParent,i=V.getBounds,a=V.getOffsetParent,l=V.extend,c=V.addClass,u=V.removeClass,h=V.updateClasses,k=V.defer,P=V.flush,s=V.getScrollBarSize,L=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","webkitTransform","OTransform","MozTransform","msTransform"],n=0;n<e.length;++n){var o=e[n];if(void 0!==t.style[o])return o}}(),F=[],j=function(){F.forEach(function(t){t.position(!1)}),P()};!function(){var t=null,e=null,n=null,o=function r(){return"undefined"!=typeof e&&e>16?(e=Math.min(e-16,250),void(n=setTimeout(r,250))):void("undefined"!=typeof t&&m()-t<10||("undefined"!=typeof n&&(clearTimeout(n),n=null),t=m(),j(),e=m()-t))};"undefined"!=typeof window&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,o)})}();var N={center:"center",left:"right",right:"left"},H={middle:"middle",top:"bottom",bottom:"top"},M={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},z=function(t,e){var n=t.left,o=t.top;return"auto"===n&&(n=N[e.left]),"auto"===o&&(o=H[e.top]),{left:n,top:o}},q=function(t){var e=t.left,n=t.top;return"undefined"!=typeof M[t.left]&&(e=M[t.left]),"undefined"!=typeof M[t.top]&&(n=M[t.top]),{left:e,top:n}},W=function(t){var e=t.split(" "),n=O(e,2),o=n[0],r=n[1];return{top:o,left:r}},R=W,B=function(){function t(e){var n=this;o(this,t),this.position=this.position.bind(this),F.push(this),this.history=[],this.setOptions(e,!1),x.modules.forEach(function(t){"undefined"!=typeof t.initialize&&t.initialize.call(n)}),this.position()}return w(t,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return"undefined"!=typeof e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,n=arguments.length<=1||void 0===arguments[1]?!0:arguments[1],o={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=l(o,t);var i=this.options,a=i.element,s=i.target,u=i.targetModifier;if(this.element=a,this.target=s,this.targetModifier=u,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if("undefined"==typeof e[t])throw new Error("Tether Error: Both element and target must be defined");"undefined"!=typeof e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),c(this.element,this.getClass("element")),this.options.addTargetClasses!==!1&&c(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=R(this.options.targetAttachment),this.attachment=R(this.options.attachment),this.offset=W(this.options.offset),this.targetOffset=W(this.options.targetOffset),"undefined"!=typeof this.scrollParent&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParent=this.target:this.scrollParent=r(this.target),this.options.enabled!==!1&&this.enable(n)}},{key:"getTargetBounds",value:function(){if("undefined"==typeof this.targetModifier)return i(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=i(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,n=this.target;n===document.body?(n=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=i(n);var o=getComputedStyle(n),r=n.scrollWidth>n.clientWidth||[o.overflow,o.overflowX].indexOf("scroll")>=0||this.target!==document.body,a=0;r&&(a=15);var s=t.height-parseFloat(o.borderTopWidth)-parseFloat(o.borderBottomWidth)-a,e={width:15,height:.975*s*(s/n.scrollHeight),left:t.left+t.width-parseFloat(o.borderLeftWidth)-15},l=0;408>s&&this.target===document.body&&(l=-11e-5*Math.pow(s,2)-.00727*s+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var u=this.target.scrollTop/(n.scrollHeight-s);return e.top=u*(s-e.height-l)+t.top+parseFloat(o.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return"undefined"==typeof this._cache&&(this._cache={}),"undefined"==typeof this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];this.options.addTargetClasses!==!1&&c(this.target,this.getClass("enabled")),c(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParent!==document&&this.scrollParent.addEventListener("scroll",this.position),t&&this.position()}},{key:"disable",value:function(){u(this.target,this.getClass("enabled")),u(this.element,this.getClass("enabled")),this.enabled=!1,"undefined"!=typeof this.scrollParent&&this.scrollParent.removeEventListener("scroll",this.position)}},{key:"destroy",value:function(){var t=this;this.disable(),F.forEach(function(e,n){return e===t?void F.splice(n,1):void 0})}},{key:"updateAttachClasses",value:function(t,e){var n=this;t=t||this.attachment,e=e||this.targetAttachment;var o=["left","top","bottom","right","middle","center"];"undefined"!=typeof this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),"undefined"==typeof this._addAttachClasses&&(this._addAttachClasses=[]);var r=this._addAttachClasses;t.top&&r.push(this.getClass("element-attached")+"-"+t.top),t.left&&r.push(this.getClass("element-attached")+"-"+t.left),e.top&&r.push(this.getClass("target-attached")+"-"+e.top),e.left&&r.push(this.getClass("target-attached")+"-"+e.left);var i=[];o.forEach(function(t){i.push(n.getClass("element-attached")+"-"+t),i.push(n.getClass("target-attached")+"-"+t)}),k(function(){"undefined"!=typeof n._addAttachClasses&&(h(n.element,n._addAttachClasses,i),n.options.addTargetClasses!==!1&&h(n.target,n._addAttachClasses,i),delete n._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];if(this.enabled){this.clearCache();var n=z(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,n);var o=this.cache("element-bounds",function(){return i(t.element)}),r=o.width,l=o.height;if(0===r&&0===l&&"undefined"!=typeof this.lastSize){var u=this.lastSize;r=u.width,l=u.height}else this.lastSize={width:r,height:l};var c=this.cache("target-bounds",function(){return t.getTargetBounds()}),f=c,d=y(q(this.attachment),{width:r,height:l}),p=y(q(n),f),h=y(this.offset,{width:r,height:l}),g=y(this.targetOffset,f);d=v(d,h),p=v(p,g);for(var m=c.left+p.left-d.left,b=c.top+p.top-d.top,w=0;w<x.modules.length;++w){var S=x.modules[w],C=S.position.call(this,{left:m,top:b,targetAttachment:n,targetPos:c,elementPos:o,offset:d,targetOffset:p,manualOffset:h,manualTargetOffset:g,scrollbarSize:E,attachment:this.attachment});if(C===!1)return!1;"undefined"!=typeof C&&"object"==typeof C&&(b=C.top,m=C.left)}var T={page:{top:b,left:m},viewport:{top:b-pageYOffset,bottom:pageYOffset-b-l+innerHeight,left:m-pageXOffset,right:pageXOffset-m-r+innerWidth}},E=void 0;return document.body.scrollWidth>window.innerWidth&&(E=this.cache("scrollbar-size",s),T.viewport.bottom-=E.height),document.body.scrollHeight>window.innerHeight&&(E=this.cache("scrollbar-size",s),T.viewport.right-=E.width),(-1===["","static"].indexOf(document.body.style.position)||-1===["","static"].indexOf(document.body.parentElement.style.position))&&(T.page.bottom=document.body.scrollHeight-b-l,T.page.right=document.body.scrollWidth-m-r),"undefined"!=typeof this.options.optimizations&&this.options.optimizations.moveElement!==!1&&"undefined"==typeof this.targetModifier&&!function(){var e=t.cache("target-offsetparent",function(){return a(t.target)}),n=t.cache("target-offsetparent-bounds",function(){return i(e)}),o=getComputedStyle(e),r=n,s={};if(["Top","Left","Bottom","Right"].forEach(function(t){s[t.toLowerCase()]=parseFloat(o["border"+t+"Width"])}),n.right=document.body.scrollWidth-n.left-r.width+s.right,n.bottom=document.body.scrollHeight-n.top-r.height+s.bottom,T.page.top>=n.top+s.top&&T.page.bottom>=n.bottom&&T.page.left>=n.left+s.left&&T.page.right>=n.right){var l=e.scrollTop,u=e.scrollLeft;T.offset={top:T.page.top-n.top+l-s.top,left:T.page.left-n.left+u-s.left}}}(),this.move(T),this.history.unshift(T),this.history.length>3&&this.history.pop(),e&&P(),!0}}},{key:"move",value:function(t){var e=this;if("undefined"!=typeof this.element.parentNode){var n={};for(var o in t){n[o]={};for(var r in t[o]){for(var i=!1,s=0;s<this.history.length;++s){var u=this.history[s];if("undefined"!=typeof u[o]&&!g(u[o][r],t[o][r])){i=!0;break}}i||(n[o][r]=!0)}}var c={top:"",left:"",right:"",bottom:""},f=function(t,n){var o="undefined"!=typeof e.options.optimizations,r=o?e.options.optimizations.gpu:null;if(r!==!1){var i=void 0,a=void 0;t.top?(c.top=0,i=n.top):(c.bottom=0,i=-n.bottom),t.left?(c.left=0,a=n.left):(c.right=0,a=-n.right),c[L]="translateX("+Math.round(a)+"px) translateY("+Math.round(i)+"px)","msTransform"!==L&&(c[L]+=" translateZ(0)")}else t.top?c.top=n.top+"px":c.bottom=n.bottom+"px",t.left?c.left=n.left+"px":c.right=n.right+"px"},d=!1;if((n.page.top||n.page.bottom)&&(n.page.left||n.page.right)?(c.position="absolute",f(n.page,t.page)):(n.viewport.top||n.viewport.bottom)&&(n.viewport.left||n.viewport.right)?(c.position="fixed",f(n.viewport,t.viewport)):"undefined"!=typeof n.offset&&n.offset.top&&n.offset.left?!function(){c.position="absolute";var o=e.cache("target-offsetparent",function(){return a(e.target)});a(e.element)!==o&&k(function(){e.element.parentNode.removeChild(e.element),o.appendChild(e.element)}),f(n.offset,t.offset),d=!0}():(c.position="absolute",f({top:!0,left:!0},t.page)),!d){for(var p=!0,h=this.element.parentNode;h&&"BODY"!==h.tagName;){if("static"!==getComputedStyle(h).position){p=!1;break}h=h.parentNode}p||(this.element.parentNode.removeChild(this.element),document.body.appendChild(this.element))}var m={},v=!1;for(var r in c){var y=c[r],b=this.element.style[r];""!==b&&""!==y&&["top","left","bottom","right"].indexOf(r)>=0&&(b=parseFloat(b),y=parseFloat(y)),b!==y&&(v=!0,m[r]=y)}v&&k(function(){l(e.element.style,m)})}}}]),t}();B.modules=[],x.position=j;var I=l(B,x),O=function(){function t(t,e){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(l){r=!0,i=l}finally{try{!o&&s["return"]&&s["return"]()}finally{if(r)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),V=x.Utils,i=V.getBounds,l=V.extend,h=V.updateClasses,k=V.defer,$=["left","top","right","bottom"];x.modules.push({position:function(t){var e=this,n=t.top,o=t.left,r=t.targetAttachment;if(!this.options.constraints)return!0;var a=this.cache("element-bounds",function(){return i(e.element)}),s=a.height,u=a.width;if(0===u&&0===s&&"undefined"!=typeof this.lastSize){var c=this.lastSize;u=c.width,s=c.height}var f=this.cache("target-bounds",function(){return e.getTargetBounds()}),d=f.height,p=f.width,g=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,n=t.pinnedClass;e&&g.push(e),n&&g.push(n)}),g.forEach(function(t){["left","top","right","bottom"].forEach(function(e){g.push(t+"-"+e)})});var m=[],v=l({},r),y=l({},this.attachment);return this.options.constraints.forEach(function(t){var i=t.to,a=t.attachment,l=t.pin;"undefined"==typeof a&&(a="");var c=void 0,f=void 0;if(a.indexOf(" ")>=0){var h=a.split(" "),g=O(h,2);f=g[0],c=g[1]}else c=f=a;var w=b(e,i);("target"===f||"both"===f)&&(n<w[1]&&"top"===v.top&&(n+=d,v.top="bottom"),n+s>w[3]&&"bottom"===v.top&&(n-=d,v.top="top")),"together"===f&&(n<w[1]&&"top"===v.top&&("bottom"===y.top?(n+=d,v.top="bottom",n+=s,y.top="top"):"top"===y.top&&(n+=d,v.top="bottom",n-=s,y.top="bottom")),n+s>w[3]&&"bottom"===v.top&&("top"===y.top?(n-=d,v.top="top",n-=s,y.top="bottom"):"bottom"===y.top&&(n-=d,v.top="top",n+=s,y.top="top")),"middle"===v.top&&(n+s>w[3]&&"top"===y.top?(n-=s,y.top="bottom"):n<w[1]&&"bottom"===y.top&&(n+=s,y.top="top"))),("target"===c||"both"===c)&&(o<w[0]&&"left"===v.left&&(o+=p,v.left="right"),o+u>w[2]&&"right"===v.left&&(o-=p,v.left="left")),"together"===c&&(o<w[0]&&"left"===v.left?"right"===y.left?(o+=p,v.left="right",o+=u,y.left="left"):"left"===y.left&&(o+=p,v.left="right",o-=u,y.left="right"):o+u>w[2]&&"right"===v.left?"left"===y.left?(o-=p,v.left="left",o-=u,y.left="right"):"right"===y.left&&(o-=p,v.left="left",o+=u,y.left="left"):"center"===v.left&&(o+u>w[2]&&"left"===y.left?(o-=u,y.left="right"):o<w[0]&&"right"===y.left&&(o+=u,y.left="left"))),("element"===f||"both"===f)&&(n<w[1]&&"bottom"===y.top&&(n+=s,y.top="top"),n+s>w[3]&&"top"===y.top&&(n-=s,y.top="bottom")),("element"===c||"both"===c)&&(o<w[0]&&("right"===y.left?(o+=u,y.left="left"):"center"===y.left&&(o+=u/2,y.left="left")),o+u>w[2]&&("left"===y.left?(o-=u,y.left="right"):"center"===y.left&&(o-=u/2,y.left="right"))),"string"==typeof l?l=l.split(",").map(function(t){return t.trim()}):l===!0&&(l=["top","left","right","bottom"]),l=l||[];var x=[],S=[];n<w[1]&&(l.indexOf("top")>=0?(n=w[1],x.push("top")):S.push("top")),n+s>w[3]&&(l.indexOf("bottom")>=0?(n=w[3]-s,x.push("bottom")):S.push("bottom")),o<w[0]&&(l.indexOf("left")>=0?(o=w[0],x.push("left")):S.push("left")),o+u>w[2]&&(l.indexOf("right")>=0?(o=w[2]-u,x.push("right")):S.push("right")),x.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),m.push(t),x.forEach(function(e){m.push(t+"-"+e)})}(),S.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),m.push(t),S.forEach(function(e){m.push(t+"-"+e)})}(),(x.indexOf("left")>=0||x.indexOf("right")>=0)&&(y.left=v.left=!1),(x.indexOf("top")>=0||x.indexOf("bottom")>=0)&&(y.top=v.top=!1),(v.top!==r.top||v.left!==r.left||y.top!==e.attachment.top||y.left!==e.attachment.left)&&e.updateAttachClasses(y,v)}),k(function(){e.options.addTargetClasses!==!1&&h(e.target,m,g),h(e.element,m,g)}),{top:n,left:o}}});var V=x.Utils,i=V.getBounds,h=V.updateClasses,k=V.defer;x.modules.push({position:function(t){var e=this,n=t.top,o=t.left,r=this.cache("element-bounds",function(){return i(e.element)}),a=r.height,s=r.width,l=this.getTargetBounds(),u=n+a,c=o+s,f=[];n<=l.bottom&&u>=l.top&&["left","right"].forEach(function(t){var e=l[t];(e===o||e===c)&&f.push(t)}),o<=l.right&&c>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];(e===n||e===u)&&f.push(t)});var d=[],p=[],g=["left","top","right","bottom"];return d.push(this.getClass("abutted")),g.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),f.length&&p.push(this.getClass("abutted")),f.forEach(function(t){p.push(e.getClass("abutted")+"-"+t)}),k(function(){e.options.addTargetClasses!==!1&&h(e.target,p,d),h(e.element,p,d)}),!0}});var O=function(){function t(t,e){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(l){r=!0,i=l}finally{try{!o&&s["return"]&&s["return"]()}finally{if(r)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return x.modules.push({position:function(t){var e=t.top,n=t.left;if(this.options.shift){var o=this.options.shift;"function"==typeof this.options.shift&&(o=this.options.shift.call(this,{top:e,left:n}));var r=void 0,i=void 0;if("string"==typeof o){o=o.split(" "),o[1]=o[1]||o[0];var a=o,s=O(a,2);r=s[0],i=s[1],r=parseFloat(r,10),i=parseFloat(i,10)}else r=o.top,i=o.left;return e+=r,n+=i,{top:e,left:n}}}}),I})}])});
//# sourceMappingURL=data:application/json;base64,
