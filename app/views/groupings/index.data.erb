<% content_for :headline do %>
<h1><span class="groupingIcon">Roll Ups &amp; Drill Downs</span></h1>
<% end %>

<div class='modalContentWrapper groupingWrapper columnPickerModal'>
  <div class='loading'></div>

  <p class='subtitle'>
  Roll Ups &amp; Drill Downs allows you to
  create a new view by grouping columns containing repeated values so that you
  can sum, count or average other columns.  For example, you might group census
  data by state, summing the population column.
  </p>

  <%- is_empty = @grouped.length < 1 && @ungrouped.length < 1 &&
      @agged.length < 1 && @unagged.length < 1 -%>

  <%- if is_empty -%>
  <p class='emptyMessage'>
    There are no visible columns to group on.  Please add or unhide some
    columns, then try again.
  </p>

  <%- else -%>
  <div id="groupingList" class="reorderList clearfix">
    <div class='activeBlock listBlock'>
      <h4>Group by These Column(s)</h4>
      <div class='listWrapper clearfix'>
        <div class="border"></div>
        <div class="activeList list">
          <ul class="reorder">
            <%= render(:partial => 'list_item', :collection => @grouped,
              :locals => {:type => 'group', :is_inactive => false}) %>
          </ul>
        </div>
      </div>
    </div>

    <div class="swapArrows">
      <a href="#addItem" class="addItemButton">Add</a>
      <a href="#removeItem" class="removeItemButton">Remove</a>
    </div>

    <div class='listBlock'>
      <h4>Columns Available for Grouping</h4>
      <div class='listWrapper clearfix'>
        <div class="border"></div>
        <div class="inactiveList list">
          <ul class="reorder">
            <%= render(:partial => 'list_item', :collection => @ungrouped,
              :locals => {:type => 'group', :is_inactive => true}) %>
          </ul>
        </div>
      </div>
    </div>

  </div>

  <div id="aggregateList" class="reorderList clearfix">
    <div class='activeBlock listBlock'>
      <h4>Roll Up These Columns</h4>
      <h4 class='actionLabel'>Operation</h4>
      <div class='listWrapper clearfix'>
        <div class="border"></div>
        <div class="activeList list">
          <ul class="reorder">
            <%= render(:partial => 'list_item', :collection => @agged,
              :locals => {:type => 'aggregate', :is_inactive => false}) %>
          </ul>
        </div>
      </div>
    </div>

    <div class="swapArrows">
      <a href="#addItem" class="addItemButton">Add</a>
      <a href="#removeItem" class="removeItemButton">Remove</a>
    </div>

    <div class='listBlock'>
      <h4>Columns Available to Roll Up</h4>
      <div class='listWrapper clearfix'>
        <div class="border"></div>
        <div class="inactiveList list">
          <ul class="reorder">
            <%= render(:partial => 'list_item', :collection => @unagged,
              :locals => {:type => 'aggregate', :is_inactive => true}) %>
          </ul>
        </div>
      </div>
    </div>

  </div>

  <div class='error mainError'></div>
  <%- end -%>

  <div class='submitLine clearfix'>
    <ul class='actionButtons clearfix'>
      <%- if !is_empty -%>
      <%- if !@view.is_invalid? -%>
      <li><a href='#saveAs' class='update'>Save As</a></li>
      <%- end -%>
      <%- if current_user && @view.owner.id == current_user.id &&
        !@is_temp && (@grouped.length > 0 ||
          @view.is_invalid? && @view.message.include?('group')) -%>
      <li><a href='#save' class='update arrowButton'>Save</a></li>
      <%- else -%>
      <li><a href='#update' class='update arrowButton'>OK</a></li>
      <%- end -%>
      <%- end -%>
      <li><a href='#cancel' class='jqmClose <%= is_empty ? 'arrowButton' : '' %>'>
        <%= is_empty ? 'Continue' : 'Cancel' %>
      </a></li>
    </ul>
  </div>
</div>


<%- if !is_empty -%>
<script type="text/javascript" charset="utf-8">
  blist.common.modalReady = function()
  {
    $('.groupingWrapper .reorderList').reorderableList();

    $(".groupingWrapper .update").click(function(event)
    {
        event.preventDefault();
        var href = $(event.target).attr('href');
        var action = href.slice(href.indexOf('#') + 1);

        $('.groupingWrapper .mainError').text('');

        var groupCols = [];
        $(".groupingWrapper #groupingList .activeList .itemWrapper")
          .each(function(i, item)
        {
            var $item = $(item);

            groupCols.push({
                columnId: $item.find("input.columnId").val(),
                position: parseInt($item.find(".orderIndex").text()),
                type: 'column'
            });
        });
        groupCols.sort(function(s1, s2) { return s1.position - s2.position; });
        _.each(groupCols, function(gc) { delete gc.position; });

        var successCallback = function()
        {
            $("#modal").jqmHide();
        };

        var errorCallback = function(xhr)
        {
            $('.groupingWrapper .loading').hide();
            $('.groupingWrapper .mainError')
                .text(JSON.parse(xhr.responseText).message);
        };

        var aggCols = [];
        var failed = false;
        $(".groupingWrapper #aggregateList .activeList .itemWrapper")
          .each(function(i, item)
        {
            var $item = $(item);

            var func = $item.find('select.aggregateFunction').val();
            if (func === '')
            {
                errorCallback("A function is required for each rolled up column");
                failed = true;
                return false;
            }

            var id = $item.find("input.columnId").val();
            var col = blist.dataset.columnForID(id);
            aggCols.push({
                id: id,
                position: parseInt($item.find(".orderIndex").text()),
                format: $.extend({}, col.format, { grouping_aggregate: func })
            });
        });
        if (failed) { return; }
        aggCols.sort(function(s1, s2) { return s1.position - s2.position; });
        _.each(aggCols, function(ac) { delete ac.position; });

        if (aggCols.length > 0 && groupCols.length < 1)
        {
            $('.groupingWrapper .mainError')
                .text('At least one grouped column is required for grouping');
            return;
        }

        $(".groupingWrapper #aggregateList .inactiveList .itemWrapper")
          .each(function(i, item)
        {
            var $item = $(item);
            var id = $item.find("input.columnId").val();
            var col = blist.dataset.columnForID(id);
            aggCols.push({ id: id,
              format: $.extend({}, col.format, {grouping_aggregate: null}) });
        });

        var query = $.extend({}, blist.dataset.query, {groupBys: groupCols});
        blist.dataset.update({query: query, columns: aggCols});

        switch (action)
        {
            case 'saveAs':
                var newName = prompt('Enter a name for a new view:');
                if (newName !== null)
                {
                    if (newName === '')
                    {
                        $('.groupingWrapper .mainError')
                            .text('Please enter a name for the view');
                    }
                    else
                    {
                        $('.groupingWrapper .loading').show();
                        // create view
                        blist.dataset.update({name: newName});
                        blist.dataset.saveNew(successCallback, errorCallback);
                    }
                }
                break;
            case 'save':
                // save to view
                $('.groupingWrapper .loading').show();
                blist.dataset.save(successCallback, errorCallback);
                break;
            case 'update':
                // do temp view
                successCallback();
                break;
        }
    });

    $.analytics.trackEvent('Dataset Page Menu', 'Grouping dialog opened', blist.dataset.id);
  };
</script>
<%- end -%>
