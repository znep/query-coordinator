/*!
 * Socrata Styleguide v1.0.0
 * Copyright 2015-2016 Socrata, Inc.
 * Licensed under MIT
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.styleguide=e():t.styleguide=e()}(this,function(){return function(t){function e(n){if(o[n])return o[n].exports;var i=o[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var o={};return e.m=t,e.c=o,e.p="",e(0)}([function(t,e,o){var n={DropdownFactory:o(1),FlannelFactory:o(2),FlyoutFactory:o(4),MenuFactory:o(5),ModalFactory:o(6),ToggleFactory:o(7),TourFactory:o(8)};t.exports=function(t){return document.addEventListener("DOMContentLoaded",function(){new n.DropdownFactory(t),new n.FlannelFactory(t),new n.FlyoutFactory(t),new n.MenuFactory(t),new n.ModalFactory(t),new n.ToggleFactory(t),new n.TourFactory(t)}),n}},function(t,e){var o=(t.exports=function(t){this.dropdowns=Array.prototype.slice.call(t.querySelectorAll("[data-dropdown]")),this.dropdowns.forEach(function(t){new o(t)})},function(t){this.dd=t,this.orientation=this.dd.getAttribute("data-orientation")||"bottom",this.selectable=this.dd.hasAttribute("data-selectable"),this.dd.classList.add("dropdown-orientation-"+this.orientation),this.placeholder=this.dd.querySelector("span"),this.opts=Array.prototype.slice.call(this.dd.querySelectorAll(".dropdown-options > li")),this.dd.dataset.value="",this.dd.dataset.index=-1,this.initEvents()});o.prototype={initEvents:function(){function t(){var t=e.dd.querySelector(".dropdown-options"),o=t.offsetWidth,n=document.body.offsetWidth,i=t,r=0;do r+=i.offsetLeft;while(null!==(i=i.offsetParent));if(o+r>=n||t.style.left){var a=e.dd.getBoundingClientRect().width;t.style.left=-(o-a)+"px"}}var e=this;t(),e.dd.addEventListener("click",function(o){return o.stopPropagation(),t(),e.dd.classList.toggle("active"),!1}),e.selectable&&e.opts.forEach(function(t){t.addEventListener("click",function(o){o.preventDefault();for(var n=t,i=0;null!==(n=n.previousElementSibling);)i++;return e.dd.dataset.value=t.textContent,e.dd.dataset.index=i,e.placeholder.innerHTML=t.innerText.trim(),!1})}),document.addEventListener("click",function(){for(var t=document.querySelectorAll(".dropdown"),e=0;e<t.length;e++)t[e].classList.remove("active")}),window.addEventListener("resize",function(){t()})}}},function(t,e,o){var n=o(3);t.exports=function(t){function e(t,e){document.body.offsetWidth<i?n(t,{left:document.body.offsetWidth},{duration:r,easing:a,complete:function(){t.classList.add("flannel-hidden"),e.classList.remove("active"),document.body.style.overflow=""}}):(t.classList.add("flannel-hidden"),e.classList.remove("active"))}function o(t,e){var o=e,l=0,u=0,c=t.getBoundingClientRect().width,f=document.body.offsetWidth;do l+=o.offsetLeft,u+=o.offsetTop;while(null!==(o=o.offsetParent));l+=e.offsetWidth/2,u=u+e.offsetHeight+s,l+c>f&&f>=i?(t.classList.remove("flannel-right"),t.classList.add("flannel-left"),l-=c):(t.classList.remove("flannel-left"),t.classList.add("flannel-right")),f>=i?(t.style.left=l+"px",t.style.top=u+"px",document.body.style.overflow=""):(t.style.left=f+"px",t.style.top=0,n(t,{left:0},{duration:r,easing:a,complete:function(){document.body.style.overflow="hidden"}}))}var i=420,r=300,a=[.645,.045,.355,1],s=10,l=Array.prototype.slice.apply(document.querySelectorAll("[data-flannel]"));l.forEach(function(t){var n=t.getAttribute("data-flannel"),i=document.querySelector("#"+n),r=Array.prototype.slice.apply(i.querySelectorAll("[data-flannel-dismiss]"));r.forEach(function(o){o.addEventListener("click",function(){e(i,t)})}),t.addEventListener("click",function(e){e.stopPropagation(),i.classList.toggle("flannel-hidden"),o(i,t)}),document.body.addEventListener("click",function(o){if(!i.classList.contains("flannel-hidden")){for(var r=o.target;r.parentElement;){if(r.id===n)return;r=r.parentElement}e(i,t)}}),document.body.addEventListener("keyup",function(o){var n=o.which||o.keyCode;27===n&&e(i,t)}),window.addEventListener("resize",function(){i.classList.contains("flannel-hidden")||o(i,t)}),o(i,t)})}},function(t,e,o){var n,i;!function(t){function e(t){var e=t.length,n=o.type(t);return"function"===n||o.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}if(!t.jQuery){var o=function(t,e){return new o.fn.init(t,e)};o.isWindow=function(t){return null!=t&&t==t.window},o.type=function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[a.call(t)]||"object":typeof t},o.isArray=Array.isArray||function(t){return"array"===o.type(t)},o.isPlainObject=function(t){var e;if(!t||"object"!==o.type(t)||t.nodeType||o.isWindow(t))return!1;try{if(t.constructor&&!r.call(t,"constructor")&&!r.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}for(e in t);return void 0===e||r.call(t,e)},o.each=function(t,o,n){var i,r=0,a=t.length,s=e(t);if(n){if(s)for(;a>r&&(i=o.apply(t[r],n),i!==!1);r++);else for(r in t)if(i=o.apply(t[r],n),i===!1)break}else if(s)for(;a>r&&(i=o.call(t[r],r,t[r]),i!==!1);r++);else for(r in t)if(i=o.call(t[r],r,t[r]),i===!1)break;return t},o.data=function(t,e,i){if(void 0===i){var r=t[o.expando],a=r&&n[r];if(void 0===e)return a;if(a&&e in a)return a[e]}else if(void 0!==e){var r=t[o.expando]||(t[o.expando]=++o.uuid);return n[r]=n[r]||{},n[r][e]=i,i}},o.removeData=function(t,e){var i=t[o.expando],r=i&&n[i];r&&o.each(e,function(t,e){delete r[e]})},o.extend=function(){var t,e,n,i,r,a,s=arguments[0]||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[l]||{},l++),"object"!=typeof s&&"function"!==o.type(s)&&(s={}),l===u&&(s=this,l--);u>l;l++)if(null!=(r=arguments[l]))for(i in r)t=s[i],n=r[i],s!==n&&(c&&n&&(o.isPlainObject(n)||(e=o.isArray(n)))?(e?(e=!1,a=t&&o.isArray(t)?t:[]):a=t&&o.isPlainObject(t)?t:{},s[i]=o.extend(c,a,n)):void 0!==n&&(s[i]=n));return s},o.queue=function(t,n,i){function r(t,o){var n=o||[];return null!=t&&(e(Object(t))?!function(t,e){for(var o=+e.length,n=0,i=t.length;o>n;)t[i++]=e[n++];if(o!==o)for(;void 0!==e[n];)t[i++]=e[n++];return t.length=i,t}(n,"string"==typeof t?[t]:t):[].push.call(n,t)),n}if(t){n=(n||"fx")+"queue";var a=o.data(t,n);return i?(!a||o.isArray(i)?a=o.data(t,n,r(i)):a.push(i),a):a||[]}},o.dequeue=function(t,e){o.each(t.nodeType?[t]:t,function(t,n){e=e||"fx";var i=o.queue(n,e),r=i.shift();"inprogress"===r&&(r=i.shift()),r&&("fx"===e&&i.unshift("inprogress"),r.call(n,function(){o.dequeue(n,e)}))})},o.fn=o.prototype={init:function(t){if(t.nodeType)return this[0]=t,this;throw new Error("Not a DOM node.")},offset:function(){var e=this[0].getBoundingClientRect?this[0].getBoundingClientRect():{top:0,left:0};return{top:e.top+(t.pageYOffset||document.scrollTop||0)-(document.clientTop||0),left:e.left+(t.pageXOffset||document.scrollLeft||0)-(document.clientLeft||0)}},position:function(){function t(){for(var t=this.offsetParent||document;t&&"html"===!t.nodeType.toLowerCase&&"static"===t.style.position;)t=t.offsetParent;return t||document}var e=this[0],t=t.apply(e),n=this.offset(),i=/^(?:body|html)$/i.test(t.nodeName)?{top:0,left:0}:o(t).offset();return n.top-=parseFloat(e.style.marginTop)||0,n.left-=parseFloat(e.style.marginLeft)||0,t.style&&(i.top+=parseFloat(t.style.borderTopWidth)||0,i.left+=parseFloat(t.style.borderLeftWidth)||0),{top:n.top-i.top,left:n.left-i.left}}};var n={};o.expando="velocity"+(new Date).getTime(),o.uuid=0;for(var i={},r=i.hasOwnProperty,a=i.toString,s="Boolean Number String Function Array Date RegExp Object Error".split(" "),l=0;l<s.length;l++)i["[object "+s[l]+"]"]=s[l].toLowerCase();o.fn.init.prototype=o.fn,t.Velocity={Utilities:o}}}(window),function(r){"object"==typeof t&&"object"==typeof t.exports?t.exports=r():(n=r,i="function"==typeof n?n.call(e,o,e,t):n,!(void 0!==i&&(t.exports=i)))}(function(){return function(t,e,o,n){/* Array compacting. Copyright Lo-Dash. MIT License: https://github.com/lodash/lodash/blob/master/LICENSE.txt */
function i(t){for(var e=-1,o=t?t.length:0,n=[];++e<o;){var i=t[e];i&&n.push(i)}return n}function r(t){return g.isWrapped(t)?t=[].slice.call(t):g.isNode(t)&&(t=[t]),t}function a(t){var e=d.data(t,"velocity");return null===e?n:e}function s(t){return function(e){return Math.round(e*t)*(1/t)}}/* Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
function l(t,o,n,i){function r(t,e){return 1-3*e+3*t}function a(t,e){return 3*e-6*t}function s(t){return 3*t}function l(t,e,o){return((r(e,o)*t+a(e,o))*t+s(e))*t}function u(t,e,o){return 3*r(e,o)*t*t+2*a(e,o)*t+s(e)}function c(e,o){for(var i=0;g>i;++i){var r=u(o,t,n);if(0===r)return o;var a=l(o,t,n)-e;o-=a/r}return o}function f(){for(var e=0;b>e;++e)C[e]=l(e*w,t,n)}function d(e,o,i){var r,a,s=0;do a=o+(i-o)/2,r=l(a,t,n)-e,r>0?i=a:o=a;while(Math.abs(r)>y&&++s<m);return a}function p(e){for(var o=0,i=1,r=b-1;i!=r&&C[i]<=e;++i)o+=w;--i;var a=(e-C[i])/(C[i+1]-C[i]),s=o+a*w,l=u(s,t,n);return l>=v?c(e,s):0==l?s:d(e,o,o+w)}function h(){T=!0,t==o&&n==i||f()}var g=4,v=.001,y=1e-7,m=10,b=11,w=1/(b-1),x="Float32Array"in e;if(4!==arguments.length)return!1;for(var S=0;4>S;++S)if("number"!=typeof arguments[S]||isNaN(arguments[S])||!isFinite(arguments[S]))return!1;t=Math.min(t,1),n=Math.min(n,1),t=Math.max(t,0),n=Math.max(n,0);var C=x?new Float32Array(b):new Array(b),T=!1,E=function(e){return T||h(),t===o&&n===i?e:0===e?0:1===e?1:l(p(e),o,i)};E.getControlPoints=function(){return[{x:t,y:o},{x:n,y:i}]};var k="generateBezier("+[t,o,n,i]+")";return E.toString=function(){return k},E}function u(t,e){var o=t;return g.isString(t)?b.Easings[t]||(o=!1):o=g.isArray(t)&&1===t.length?s.apply(null,t):g.isArray(t)&&2===t.length?w.apply(null,t.concat([e])):g.isArray(t)&&4===t.length?l.apply(null,t):!1,o===!1&&(o=b.Easings[b.defaults.easing]?b.defaults.easing:m),o}function c(t){if(t){var e=(new Date).getTime(),o=b.State.calls.length;o>1e4&&(b.State.calls=i(b.State.calls));for(var r=0;o>r;r++)if(b.State.calls[r]){var s=b.State.calls[r],l=s[0],u=s[2],p=s[3],h=!!p,v=null;p||(p=b.State.calls[r][3]=e-16);for(var y=Math.min((e-p)/u.duration,1),m=0,w=l.length;w>m;m++){var S=l[m],T=S.element;if(a(T)){var E=!1;if(u.display!==n&&null!==u.display&&"none"!==u.display){if("flex"===u.display){var k=["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex"];d.each(k,function(t,e){x.setPropertyValue(T,"display",e)})}x.setPropertyValue(T,"display",u.display)}u.visibility!==n&&"hidden"!==u.visibility&&x.setPropertyValue(T,"visibility",u.visibility);for(var P in S)if("element"!==P){var A,O=S[P],L=g.isString(O.easing)?b.Easings[O.easing]:O.easing;if(1===y)A=O.endValue;else{var V=O.endValue-O.startValue;if(A=O.startValue+V*L(y,u,V),!h&&A===O.currentValue)continue}if(O.currentValue=A,"tween"===P)v=A;else{if(x.Hooks.registered[P]){var F=x.Hooks.getRoot(P),j=a(T).rootPropertyValueCache[F];j&&(O.rootPropertyValue=j)}var N=x.setPropertyValue(T,P,O.currentValue+(0===parseFloat(A)?"":O.unitType),O.rootPropertyValue,O.scrollData);x.Hooks.registered[P]&&(x.Normalizations.registered[F]?a(T).rootPropertyValueCache[F]=x.Normalizations.registered[F]("extract",null,N[1]):a(T).rootPropertyValueCache[F]=N[1]),"transform"===N[0]&&(E=!0)}}u.mobileHA&&a(T).transformCache.translate3d===n&&(a(T).transformCache.translate3d="(0px, 0px, 0px)",E=!0),E&&x.flushTransformCache(T)}}u.display!==n&&"none"!==u.display&&(b.State.calls[r][2].display=!1),u.visibility!==n&&"hidden"!==u.visibility&&(b.State.calls[r][2].visibility=!1),u.progress&&u.progress.call(s[1],s[1],y,Math.max(0,p+u.duration-e),p,v),1===y&&f(r)}}b.State.isTicking&&C(c)}function f(t,e){if(!b.State.calls[t])return!1;for(var o=b.State.calls[t][0],i=b.State.calls[t][1],r=b.State.calls[t][2],s=b.State.calls[t][4],l=!1,u=0,c=o.length;c>u;u++){var f=o[u].element;if(e||r.loop||("none"===r.display&&x.setPropertyValue(f,"display",r.display),"hidden"===r.visibility&&x.setPropertyValue(f,"visibility",r.visibility)),r.loop!==!0&&(d.queue(f)[1]===n||!/\.velocityQueueEntryFlag/i.test(d.queue(f)[1]))&&a(f)){a(f).isAnimating=!1,a(f).rootPropertyValueCache={};var p=!1;d.each(x.Lists.transforms3D,function(t,e){var o=/^scale/.test(e)?1:0,i=a(f).transformCache[e];a(f).transformCache[e]!==n&&new RegExp("^\\("+o+"[^.]").test(i)&&(p=!0,delete a(f).transformCache[e])}),r.mobileHA&&(p=!0,delete a(f).transformCache.translate3d),p&&x.flushTransformCache(f),x.Values.removeClass(f,"velocity-animating")}if(!e&&r.complete&&!r.loop&&u===c-1)try{r.complete.call(i,i)}catch(h){setTimeout(function(){throw h},1)}s&&r.loop!==!0&&s(i),a(f)&&r.loop===!0&&!e&&(d.each(a(f).tweensContainer,function(t,e){/^rotate/.test(t)&&360===parseFloat(e.endValue)&&(e.endValue=0,e.startValue=360),/^backgroundPosition/.test(t)&&100===parseFloat(e.endValue)&&"%"===e.unitType&&(e.endValue=0,e.startValue=100)}),b(f,"reverse",{loop:!0,delay:r.delay})),r.queue!==!1&&d.dequeue(f,r.queue)}b.State.calls[t]=!1;for(var g=0,v=b.State.calls.length;v>g;g++)if(b.State.calls[g]!==!1){l=!0;break}l===!1&&(b.State.isTicking=!1,delete b.State.calls,b.State.calls=[])}var d,p=function(){if(o.documentMode)return o.documentMode;for(var t=7;t>4;t--){var e=o.createElement("div");if(e.innerHTML="<!--[if IE "+t+"]><span></span><![endif]-->",e.getElementsByTagName("span").length)return e=null,t}return n}(),h=function(){var t=0;return e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||function(e){var o,n=(new Date).getTime();/* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
return o=Math.max(0,16-(n-t)),t=n+o,setTimeout(function(){e(n+o)},o)}}(),g={isString:function(t){return"string"==typeof t},isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},isFunction:function(t){return"[object Function]"===Object.prototype.toString.call(t)},isNode:function(t){return t&&t.nodeType},/* Copyright Martin Bohm. MIT License: https://gist.github.com/Tomalak/818a78a226a0738eaade */
isNodeList:function(t){return"object"==typeof t&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(t))&&t.length!==n&&(0===t.length||"object"==typeof t[0]&&t[0].nodeType>0)},isWrapped:function(t){return t&&(t.jquery||e.Zepto&&e.Zepto.zepto.isZ(t))},isSVG:function(t){return e.SVGElement&&t instanceof e.SVGElement},isEmptyObject:function(t){for(var e in t)return!1;return!0}},v=!1;if(t.fn&&t.fn.jquery?(d=t,v=!0):d=e.Velocity.Utilities,8>=p&&!v)throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");if(7>=p)return void(jQuery.fn.velocity=jQuery.fn.animate);var y=400,m="swing",b={State:{isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isAndroid:/Android/i.test(navigator.userAgent),isGingerbread:/Android 2\.3\.[3-7]/i.test(navigator.userAgent),isChrome:e.chrome,isFirefox:/Firefox/i.test(navigator.userAgent),prefixElement:o.createElement("div"),prefixMatches:{},scrollAnchor:null,scrollPropertyLeft:null,scrollPropertyTop:null,isTicking:!1,calls:[]},CSS:{},Utilities:d,Redirects:{},Easings:{},Promise:e.Promise,defaults:{queue:"",duration:y,easing:m,begin:n,complete:n,progress:n,display:n,visibility:n,loop:!1,delay:!1,mobileHA:!0,_cacheValues:!0},init:function(t){d.data(t,"velocity",{isSVG:g.isSVG(t),isAnimating:!1,computedStyle:null,tweensContainer:null,rootPropertyValueCache:{},transformCache:{}})},hook:null,mock:!1,version:{major:1,minor:2,patch:2},debug:!1};e.pageYOffset!==n?(b.State.scrollAnchor=e,b.State.scrollPropertyLeft="pageXOffset",b.State.scrollPropertyTop="pageYOffset"):(b.State.scrollAnchor=o.documentElement||o.body.parentNode||o.body,b.State.scrollPropertyLeft="scrollLeft",b.State.scrollPropertyTop="scrollTop");/* Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	       then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
var w=function(){function t(t){return-t.tension*t.x-t.friction*t.v}function e(e,o,n){var i={x:e.x+n.dx*o,v:e.v+n.dv*o,tension:e.tension,friction:e.friction};return{dx:i.v,dv:t(i)}}function o(o,n){var i={dx:o.v,dv:t(o)},r=e(o,.5*n,i),a=e(o,.5*n,r),s=e(o,n,a),l=1/6*(i.dx+2*(r.dx+a.dx)+s.dx),u=1/6*(i.dv+2*(r.dv+a.dv)+s.dv);return o.x=o.x+l*n,o.v=o.v+u*n,o}return function n(t,e,i){var r,a,s,l={x:-1,v:0,tension:null,friction:null},u=[0],c=0,f=1e-4,d=.016;for(t=parseFloat(t)||500,e=parseFloat(e)||20,i=i||null,l.tension=t,l.friction=e,r=null!==i,r?(c=n(t,e),a=c/i*d):a=d;;)if(s=o(s||l,a),u.push(1+s.x),c+=16,!(Math.abs(s.x)>f&&Math.abs(s.v)>f))break;return r?function(t){return u[t*(u.length-1)|0]}:c}}();b.Easings={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},spring:function(t){return 1-Math.cos(4.5*t*Math.PI)*Math.exp(6*-t)}},d.each([["ease",[.25,.1,.25,1]],["ease-in",[.42,0,1,1]],["ease-out",[0,0,.58,1]],["ease-in-out",[.42,0,.58,1]],["easeInSine",[.47,0,.745,.715]],["easeOutSine",[.39,.575,.565,1]],["easeInOutSine",[.445,.05,.55,.95]],["easeInQuad",[.55,.085,.68,.53]],["easeOutQuad",[.25,.46,.45,.94]],["easeInOutQuad",[.455,.03,.515,.955]],["easeInCubic",[.55,.055,.675,.19]],["easeOutCubic",[.215,.61,.355,1]],["easeInOutCubic",[.645,.045,.355,1]],["easeInQuart",[.895,.03,.685,.22]],["easeOutQuart",[.165,.84,.44,1]],["easeInOutQuart",[.77,0,.175,1]],["easeInQuint",[.755,.05,.855,.06]],["easeOutQuint",[.23,1,.32,1]],["easeInOutQuint",[.86,0,.07,1]],["easeInExpo",[.95,.05,.795,.035]],["easeOutExpo",[.19,1,.22,1]],["easeInOutExpo",[1,0,0,1]],["easeInCirc",[.6,.04,.98,.335]],["easeOutCirc",[.075,.82,.165,1]],["easeInOutCirc",[.785,.135,.15,.86]]],function(t,e){b.Easings[e[0]]=l.apply(null,e[1])});var x=b.CSS={RegEx:{isHex:/^#([A-f\d]{3}){1,2}$/i,valueUnwrap:/^[A-z]+\((.*)\)$/i,wrappedValueAlreadyExtracted:/[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,valueSplit:/([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi},Lists:{colors:["fill","stroke","stopColor","color","backgroundColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor"],transformsBase:["translateX","translateY","scale","scaleX","scaleY","skewX","skewY","rotateZ"],transforms3D:["transformPerspective","translateZ","scaleZ","rotateX","rotateY"]},Hooks:{templates:{textShadow:["Color X Y Blur","black 0px 0px 0px"],boxShadow:["Color X Y Blur Spread","black 0px 0px 0px 0px"],clip:["Top Right Bottom Left","0px 0px 0px 0px"],backgroundPosition:["X Y","0% 0%"],transformOrigin:["X Y Z","50% 50% 0px"],perspectiveOrigin:["X Y","50% 50%"]},registered:{},register:function(){for(var t=0;t<x.Lists.colors.length;t++){var e="color"===x.Lists.colors[t]?"0 0 0 1":"255 255 255 1";x.Hooks.templates[x.Lists.colors[t]]=["Red Green Blue Alpha",e]}var o,n,i;if(p)for(o in x.Hooks.templates){n=x.Hooks.templates[o],i=n[0].split(" ");var r=n[1].match(x.RegEx.valueSplit);"Color"===i[0]&&(i.push(i.shift()),r.push(r.shift()),x.Hooks.templates[o]=[i.join(" "),r.join(" ")])}for(o in x.Hooks.templates){n=x.Hooks.templates[o],i=n[0].split(" ");for(var t in i){var a=o+i[t],s=t;x.Hooks.registered[a]=[o,s]}}},getRoot:function(t){var e=x.Hooks.registered[t];return e?e[0]:t},cleanRootPropertyValue:function(t,e){return x.RegEx.valueUnwrap.test(e)&&(e=e.match(x.RegEx.valueUnwrap)[1]),x.Values.isCSSNullValue(e)&&(e=x.Hooks.templates[t][1]),e},extractValue:function(t,e){var o=x.Hooks.registered[t];if(o){var n=o[0],i=o[1];return e=x.Hooks.cleanRootPropertyValue(n,e),e.toString().match(x.RegEx.valueSplit)[i]}return e},injectValue:function(t,e,o){var n=x.Hooks.registered[t];if(n){var i,r,a=n[0],s=n[1];return o=x.Hooks.cleanRootPropertyValue(a,o),i=o.toString().match(x.RegEx.valueSplit),i[s]=e,r=i.join(" ")}return o}},Normalizations:{registered:{clip:function(t,e,o){switch(t){case"name":return"clip";case"extract":var n;return x.RegEx.wrappedValueAlreadyExtracted.test(o)?n=o:(n=o.toString().match(x.RegEx.valueUnwrap),n=n?n[1].replace(/,(\s+)?/g," "):o),n;case"inject":return"rect("+o+")"}},blur:function(t,e,o){switch(t){case"name":return b.State.isFirefox?"filter":"-webkit-filter";case"extract":var n=parseFloat(o);if(!n&&0!==n){var i=o.toString().match(/blur\(([0-9]+[A-z]+)\)/i);n=i?i[1]:0}return n;case"inject":return parseFloat(o)?"blur("+o+")":"none"}},opacity:function(t,e,o){if(8>=p)switch(t){case"name":return"filter";case"extract":var n=o.toString().match(/alpha\(opacity=(.*)\)/i);return o=n?n[1]/100:1;case"inject":return e.style.zoom=1,parseFloat(o)>=1?"":"alpha(opacity="+parseInt(100*parseFloat(o),10)+")"}else switch(t){case"name":return"opacity";case"extract":return o;case"inject":return o}}},register:function(){9>=p||b.State.isGingerbread||(x.Lists.transformsBase=x.Lists.transformsBase.concat(x.Lists.transforms3D));for(var t=0;t<x.Lists.transformsBase.length;t++)!function(){var e=x.Lists.transformsBase[t];x.Normalizations.registered[e]=function(t,o,i){switch(t){case"name":return"transform";case"extract":return a(o)===n||a(o).transformCache[e]===n?/^scale/i.test(e)?1:0:a(o).transformCache[e].replace(/[()]/g,"");case"inject":var r=!1;switch(e.substr(0,e.length-1)){case"translate":r=!/(%|px|em|rem|vw|vh|\d)$/i.test(i);break;case"scal":case"scale":b.State.isAndroid&&a(o).transformCache[e]===n&&1>i&&(i=1),r=!/(\d)$/i.test(i);break;case"skew":r=!/(deg|\d)$/i.test(i);break;case"rotate":r=!/(deg|\d)$/i.test(i)}return r||(a(o).transformCache[e]="("+i+")"),a(o).transformCache[e]}}}();for(var t=0;t<x.Lists.colors.length;t++)!function(){var e=x.Lists.colors[t];x.Normalizations.registered[e]=function(t,o,i){switch(t){case"name":return e;case"extract":var r;if(x.RegEx.wrappedValueAlreadyExtracted.test(i))r=i;else{var a,s={black:"rgb(0, 0, 0)",blue:"rgb(0, 0, 255)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",red:"rgb(255, 0, 0)",white:"rgb(255, 255, 255)"};/^[A-z]+$/i.test(i)?a=s[i]!==n?s[i]:s.black:x.RegEx.isHex.test(i)?a="rgb("+x.Values.hexToRgb(i).join(" ")+")":/^rgba?\(/i.test(i)||(a=s.black),r=(a||i).toString().match(x.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g," ")}return 8>=p||3!==r.split(" ").length||(r+=" 1"),r;case"inject":return 8>=p?4===i.split(" ").length&&(i=i.split(/\s+/).slice(0,3).join(" ")):3===i.split(" ").length&&(i+=" 1"),(8>=p?"rgb":"rgba")+"("+i.replace(/\s+/g,",").replace(/\.(\d)+(?=,)/g,"")+")"}}}()}},Names:{camelCase:function(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})},SVGAttribute:function(t){var e="width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";return(p||b.State.isAndroid&&!b.State.isChrome)&&(e+="|transform"),new RegExp("^("+e+")$","i").test(t)},prefixCheck:function(t){if(b.State.prefixMatches[t])return[b.State.prefixMatches[t],!0];for(var e=["","Webkit","Moz","ms","O"],o=0,n=e.length;n>o;o++){var i;if(i=0===o?t:e[o]+t.replace(/^\w/,function(t){return t.toUpperCase()}),g.isString(b.State.prefixElement.style[i]))return b.State.prefixMatches[t]=i,[i,!0]}return[t,!1]}},Values:{/* Hex to RGB conversion. Copyright Tim Down: http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */
hexToRgb:function(t){var e,o=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;return t=t.replace(o,function(t,e,o,n){return e+e+o+o+n+n}),e=n.exec(t),e?[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]:[0,0,0]},isCSSNullValue:function(t){return 0==t||/^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(t)},getUnitType:function(t){return/^(rotate|skew)/i.test(t)?"deg":/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(t)?"":"px"},getDisplayType:function(t){var e=t&&t.tagName.toString().toLowerCase();return/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(e)?"inline":/^(li)$/i.test(e)?"list-item":/^(tr)$/i.test(e)?"table-row":/^(table)$/i.test(e)?"table":/^(tbody)$/i.test(e)?"table-row-group":"block"},addClass:function(t,e){t.classList?t.classList.add(e):t.className+=(t.className.length?" ":"")+e},removeClass:function(t,e){t.classList?t.classList.remove(e):t.className=t.className.toString().replace(new RegExp("(^|\\s)"+e.split(" ").join("|")+"(\\s|$)","gi")," ")}},getPropertyValue:function(t,o,i,r){function s(t,o){function i(){u&&x.setPropertyValue(t,"display","none")}var l=0;if(8>=p)l=d.css(t,o);else{var u=!1;if(/^(width|height)$/.test(o)&&0===x.getPropertyValue(t,"display")&&(u=!0,x.setPropertyValue(t,"display",x.Values.getDisplayType(t))),!r){if("height"===o&&"border-box"!==x.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var c=t.offsetHeight-(parseFloat(x.getPropertyValue(t,"borderTopWidth"))||0)-(parseFloat(x.getPropertyValue(t,"borderBottomWidth"))||0)-(parseFloat(x.getPropertyValue(t,"paddingTop"))||0)-(parseFloat(x.getPropertyValue(t,"paddingBottom"))||0);return i(),c}if("width"===o&&"border-box"!==x.getPropertyValue(t,"boxSizing").toString().toLowerCase()){var f=t.offsetWidth-(parseFloat(x.getPropertyValue(t,"borderLeftWidth"))||0)-(parseFloat(x.getPropertyValue(t,"borderRightWidth"))||0)-(parseFloat(x.getPropertyValue(t,"paddingLeft"))||0)-(parseFloat(x.getPropertyValue(t,"paddingRight"))||0);return i(),f}}var h;h=a(t)===n?e.getComputedStyle(t,null):a(t).computedStyle?a(t).computedStyle:a(t).computedStyle=e.getComputedStyle(t,null),"borderColor"===o&&(o="borderTopColor"),l=9===p&&"filter"===o?h.getPropertyValue(o):h[o],""!==l&&null!==l||(l=t.style[o]),i()}if("auto"===l&&/^(top|right|bottom|left)$/i.test(o)){var g=s(t,"position");("fixed"===g||"absolute"===g&&/top|left/i.test(o))&&(l=d(t).position()[o]+"px")}return l}var l;if(x.Hooks.registered[o]){var u=o,c=x.Hooks.getRoot(u);i===n&&(i=x.getPropertyValue(t,x.Names.prefixCheck(c)[0])),x.Normalizations.registered[c]&&(i=x.Normalizations.registered[c]("extract",t,i)),l=x.Hooks.extractValue(u,i)}else if(x.Normalizations.registered[o]){var f,h;f=x.Normalizations.registered[o]("name",t),"transform"!==f&&(h=s(t,x.Names.prefixCheck(f)[0]),x.Values.isCSSNullValue(h)&&x.Hooks.templates[o]&&(h=x.Hooks.templates[o][1])),l=x.Normalizations.registered[o]("extract",t,h)}if(!/^[\d-]/.test(l))if(a(t)&&a(t).isSVG&&x.Names.SVGAttribute(o))if(/^(height|width)$/i.test(o))try{l=t.getBBox()[o]}catch(g){l=0}else l=t.getAttribute(o);else l=s(t,x.Names.prefixCheck(o)[0]);return x.Values.isCSSNullValue(l)&&(l=0),b.debug>=2&&console.log("Get "+o+": "+l),l},setPropertyValue:function(t,o,n,i,r){var s=o;if("scroll"===o)r.container?r.container["scroll"+r.direction]=n:"Left"===r.direction?e.scrollTo(n,r.alternateValue):e.scrollTo(r.alternateValue,n);else if(x.Normalizations.registered[o]&&"transform"===x.Normalizations.registered[o]("name",t))x.Normalizations.registered[o]("inject",t,n),s="transform",n=a(t).transformCache[o];else{if(x.Hooks.registered[o]){var l=o,u=x.Hooks.getRoot(o);i=i||x.getPropertyValue(t,u),n=x.Hooks.injectValue(l,n,i),o=u}if(x.Normalizations.registered[o]&&(n=x.Normalizations.registered[o]("inject",t,n),o=x.Normalizations.registered[o]("name",t)),s=x.Names.prefixCheck(o)[0],8>=p)try{t.style[s]=n}catch(c){b.debug&&console.log("Browser does not support ["+n+"] for ["+s+"]")}else a(t)&&a(t).isSVG&&x.Names.SVGAttribute(o)?t.setAttribute(o,n):t.style[s]=n;b.debug>=2&&console.log("Set "+o+" ("+s+"): "+n)}return[s,n]},flushTransformCache:function(t){function e(e){return parseFloat(x.getPropertyValue(t,e))}var o="";if((p||b.State.isAndroid&&!b.State.isChrome)&&a(t).isSVG){var n={translate:[e("translateX"),e("translateY")],skewX:[e("skewX")],skewY:[e("skewY")],scale:1!==e("scale")?[e("scale"),e("scale")]:[e("scaleX"),e("scaleY")],rotate:[e("rotateZ"),0,0]};d.each(a(t).transformCache,function(t){/^translate/i.test(t)?t="translate":/^scale/i.test(t)?t="scale":/^rotate/i.test(t)&&(t="rotate"),n[t]&&(o+=t+"("+n[t].join(" ")+") ",delete n[t])})}else{var i,r;d.each(a(t).transformCache,function(e){return i=a(t).transformCache[e],"transformPerspective"===e?(r=i,!0):(9===p&&"rotateZ"===e&&(e="rotate"),void(o+=e+i+" "))}),r&&(o="perspective"+r+" "+o)}x.setPropertyValue(t,"transform",o)}};x.Hooks.register(),x.Normalizations.register(),b.hook=function(t,e,o){var i=n;return t=r(t),d.each(t,function(t,r){if(a(r)===n&&b.init(r),o===n)i===n&&(i=b.CSS.getPropertyValue(r,e));else{var s=b.CSS.setPropertyValue(r,e,o);"transform"===s[0]&&b.CSS.flushTransformCache(r),i=s}}),i};var S=function(){function t(){return s?P.promise||null:l}function i(){function t(t){function f(t,e){var o=n,i=n,a=n;return g.isArray(t)?(o=t[0],!g.isArray(t[1])&&/^[\d-]/.test(t[1])||g.isFunction(t[1])||x.RegEx.isHex.test(t[1])?a=t[1]:(g.isString(t[1])&&!x.RegEx.isHex.test(t[1])||g.isArray(t[1]))&&(i=e?t[1]:u(t[1],s.duration),t[2]!==n&&(a=t[2]))):o=t,e||(i=i||s.easing),g.isFunction(o)&&(o=o.call(r,T,C)),g.isFunction(a)&&(a=a.call(r,T,C)),[o||0,i,a]}function p(t,e){var o,n;return n=(e||"0").toString().toLowerCase().replace(/[%A-z]+$/,function(t){return o=t,""}),o||(o=x.Values.getUnitType(t)),[n,o]}function y(){var t={myParent:r.parentNode||o.body,position:x.getPropertyValue(r,"position"),fontSize:x.getPropertyValue(r,"fontSize")},n=t.position===N.lastPosition&&t.myParent===N.lastParent,i=t.fontSize===N.lastFontSize;N.lastParent=t.myParent,N.lastPosition=t.position,N.lastFontSize=t.fontSize;var s=100,l={};if(i&&n)l.emToPx=N.lastEmToPx,l.percentToPxWidth=N.lastPercentToPxWidth,l.percentToPxHeight=N.lastPercentToPxHeight;else{var u=a(r).isSVG?o.createElementNS("http://www.w3.org/2000/svg","rect"):o.createElement("div");b.init(u),t.myParent.appendChild(u),d.each(["overflow","overflowX","overflowY"],function(t,e){b.CSS.setPropertyValue(u,e,"hidden")}),b.CSS.setPropertyValue(u,"position",t.position),b.CSS.setPropertyValue(u,"fontSize",t.fontSize),b.CSS.setPropertyValue(u,"boxSizing","content-box"),d.each(["minWidth","maxWidth","width","minHeight","maxHeight","height"],function(t,e){b.CSS.setPropertyValue(u,e,s+"%")}),b.CSS.setPropertyValue(u,"paddingLeft",s+"em"),l.percentToPxWidth=N.lastPercentToPxWidth=(parseFloat(x.getPropertyValue(u,"width",null,!0))||1)/s,l.percentToPxHeight=N.lastPercentToPxHeight=(parseFloat(x.getPropertyValue(u,"height",null,!0))||1)/s,l.emToPx=N.lastEmToPx=(parseFloat(x.getPropertyValue(u,"paddingLeft"))||1)/s,t.myParent.removeChild(u)}return null===N.remToPx&&(N.remToPx=parseFloat(x.getPropertyValue(o.body,"fontSize"))||16),null===N.vwToPx&&(N.vwToPx=parseFloat(e.innerWidth)/100,N.vhToPx=parseFloat(e.innerHeight)/100),l.remToPx=N.remToPx,l.vwToPx=N.vwToPx,l.vhToPx=N.vhToPx,b.debug>=1&&console.log("Unit ratios: "+JSON.stringify(l),r),l}if(s.begin&&0===T)try{s.begin.call(h,h)}catch(w){setTimeout(function(){throw w},1)}if("scroll"===A){var S,E,k,O=/^x$/i.test(s.axis)?"Left":"Top",L=parseFloat(s.offset)||0;s.container?g.isWrapped(s.container)||g.isNode(s.container)?(s.container=s.container[0]||s.container,S=s.container["scroll"+O],k=S+d(r).position()[O.toLowerCase()]+L):s.container=null:(S=b.State.scrollAnchor[b.State["scrollProperty"+O]],E=b.State.scrollAnchor[b.State["scrollProperty"+("Left"===O?"Top":"Left")]],k=d(r).offset()[O.toLowerCase()]+L),l={scroll:{rootPropertyValue:!1,startValue:S,currentValue:S,endValue:k,unitType:"",easing:s.easing,scrollData:{container:s.container,direction:O,alternateValue:E}},element:r},b.debug&&console.log("tweensContainer (scroll): ",l.scroll,r)}else if("reverse"===A){if(!a(r).tweensContainer)return void d.dequeue(r,s.queue);"none"===a(r).opts.display&&(a(r).opts.display="auto"),"hidden"===a(r).opts.visibility&&(a(r).opts.visibility="visible"),a(r).opts.loop=!1,a(r).opts.begin=null,a(r).opts.complete=null,m.easing||delete s.easing,m.duration||delete s.duration,s=d.extend({},a(r).opts,s);var V=d.extend(!0,{},a(r).tweensContainer);for(var F in V)if("element"!==F){var j=V[F].startValue;V[F].startValue=V[F].currentValue=V[F].endValue,V[F].endValue=j,g.isEmptyObject(m)||(V[F].easing=s.easing),b.debug&&console.log("reverse tweensContainer ("+F+"): "+JSON.stringify(V[F]),r)}l=V}else if("start"===A){var V;a(r).tweensContainer&&a(r).isAnimating===!0&&(V=a(r).tweensContainer),d.each(v,function(t,e){if(RegExp("^"+x.Lists.colors.join("$|^")+"$").test(t)){var o=f(e,!0),i=o[0],r=o[1],a=o[2];if(x.RegEx.isHex.test(i)){for(var s=["Red","Green","Blue"],l=x.Values.hexToRgb(i),u=a?x.Values.hexToRgb(a):n,c=0;c<s.length;c++){var d=[l[c]];r&&d.push(r),u!==n&&d.push(u[c]),v[t+s[c]]=d}delete v[t]}}});for(var M in v){var q=f(v[M]),z=q[0],W=q[1],R=q[2];M=x.Names.camelCase(M);var B=x.Hooks.getRoot(M),I=!1;if(a(r).isSVG||"tween"===B||x.Names.prefixCheck(B)[1]!==!1||x.Normalizations.registered[B]!==n){(s.display!==n&&null!==s.display&&"none"!==s.display||s.visibility!==n&&"hidden"!==s.visibility)&&/opacity|filter/.test(M)&&!R&&0!==z&&(R=0),s._cacheValues&&V&&V[M]?(R===n&&(R=V[M].endValue+V[M].unitType),I=a(r).rootPropertyValueCache[B]):x.Hooks.registered[M]?R===n?(I=x.getPropertyValue(r,B),R=x.getPropertyValue(r,M,I)):I=x.Hooks.templates[B][1]:R===n&&(R=x.getPropertyValue(r,M));var $,Y,X,_=!1;if($=p(M,R),R=$[0],X=$[1],$=p(M,z),z=$[0].replace(/^([+-\/*])=/,function(t,e){return _=e,""}),Y=$[1],R=parseFloat(R)||0,z=parseFloat(z)||0,"%"===Y&&(/^(fontSize|lineHeight)$/.test(M)?(z/=100,Y="em"):/^scale/.test(M)?(z/=100,Y=""):/(Red|Green|Blue)$/i.test(M)&&(z=z/100*255,Y="")),/[\/*]/.test(_))Y=X;else if(X!==Y&&0!==R)if(0===z)Y=X;else{i=i||y();var D=/margin|padding|left|right|width|text|word|letter/i.test(M)||/X$/.test(M)||"x"===M?"x":"y";switch(X){case"%":R*="x"===D?i.percentToPxWidth:i.percentToPxHeight;break;case"px":break;default:R*=i[X+"ToPx"]}switch(Y){case"%":R*=1/("x"===D?i.percentToPxWidth:i.percentToPxHeight);break;case"px":break;default:R*=1/i[Y+"ToPx"]}}switch(_){case"+":z=R+z;break;case"-":z=R-z;break;case"*":z=R*z;break;case"/":z=R/z}l[M]={rootPropertyValue:I,startValue:R,currentValue:R,endValue:z,unitType:Y,easing:W},b.debug&&console.log("tweensContainer ("+M+"): "+JSON.stringify(l[M]),r)}else b.debug&&console.log("Skipping ["+B+"] due to a lack of browser support.")}l.element=r}l.element&&(x.Values.addClass(r,"velocity-animating"),H.push(l),""===s.queue&&(a(r).tweensContainer=l,a(r).opts=s),a(r).isAnimating=!0,T===C-1?(b.State.calls.push([H,h,s,null,P.resolver]),b.State.isTicking===!1&&(b.State.isTicking=!0,c())):T++)}var i,r=this,s=d.extend({},b.defaults,m),l={};switch(a(r)===n&&b.init(r),parseFloat(s.delay)&&s.queue!==!1&&d.queue(r,s.queue,function(t){b.velocityQueueEntryFlag=!0,a(r).delayTimer={setTimeout:setTimeout(t,parseFloat(s.delay)),next:t}}),s.duration.toString().toLowerCase()){case"fast":s.duration=200;break;case"normal":s.duration=y;break;case"slow":s.duration=600;break;default:s.duration=parseFloat(s.duration)||1}b.mock!==!1&&(b.mock===!0?s.duration=s.delay=1:(s.duration*=parseFloat(b.mock)||1,s.delay*=parseFloat(b.mock)||1)),s.easing=u(s.easing,s.duration),s.begin&&!g.isFunction(s.begin)&&(s.begin=null),s.progress&&!g.isFunction(s.progress)&&(s.progress=null),s.complete&&!g.isFunction(s.complete)&&(s.complete=null),s.display!==n&&null!==s.display&&(s.display=s.display.toString().toLowerCase(),"auto"===s.display&&(s.display=b.CSS.Values.getDisplayType(r))),s.visibility!==n&&null!==s.visibility&&(s.visibility=s.visibility.toString().toLowerCase()),s.mobileHA=s.mobileHA&&b.State.isMobile&&!b.State.isGingerbread,s.queue===!1?s.delay?setTimeout(t,s.delay):t():d.queue(r,s.queue,function(e,o){return o===!0?(P.promise&&P.resolver(h),!0):(b.velocityQueueEntryFlag=!0,void t(e))}),""!==s.queue&&"fx"!==s.queue||"inprogress"===d.queue(r)[0]||d.dequeue(r)}var s,l,p,h,v,m,w=arguments[0]&&(arguments[0].p||d.isPlainObject(arguments[0].properties)&&!arguments[0].properties.names||g.isString(arguments[0].properties));if(g.isWrapped(this)?(s=!1,p=0,h=this,l=this):(s=!0,p=1,h=w?arguments[0].elements||arguments[0].e:arguments[0]),h=r(h)){w?(v=arguments[0].properties||arguments[0].p,m=arguments[0].options||arguments[0].o):(v=arguments[p],m=arguments[p+1]);var C=h.length,T=0;if(!/^(stop|finish|finishAll)$/i.test(v)&&!d.isPlainObject(m)){var E=p+1;m={};for(var k=E;k<arguments.length;k++)g.isArray(arguments[k])||!/^(fast|normal|slow)$/i.test(arguments[k])&&!/^\d/.test(arguments[k])?g.isString(arguments[k])||g.isArray(arguments[k])?m.easing=arguments[k]:g.isFunction(arguments[k])&&(m.complete=arguments[k]):m.duration=arguments[k]}var P={promise:null,resolver:null,rejecter:null};s&&b.Promise&&(P.promise=new b.Promise(function(t,e){P.resolver=t,P.rejecter=e}));var A;switch(v){case"scroll":A="scroll";break;case"reverse":A="reverse";break;case"finish":case"finishAll":case"stop":d.each(h,function(t,e){a(e)&&a(e).delayTimer&&(clearTimeout(a(e).delayTimer.setTimeout),a(e).delayTimer.next&&a(e).delayTimer.next(),delete a(e).delayTimer),"finishAll"!==v||m!==!0&&!g.isString(m)||(d.each(d.queue(e,g.isString(m)?m:""),function(t,e){g.isFunction(e)&&e()}),d.queue(e,g.isString(m)?m:"",[]))});var O=[];return d.each(b.State.calls,function(t,e){e&&d.each(e[1],function(o,i){var r=m===n?"":m;return r===!0||e[2].queue===r||m===n&&e[2].queue===!1?void d.each(h,function(o,n){n===i&&((m===!0||g.isString(m))&&(d.each(d.queue(n,g.isString(m)?m:""),function(t,e){g.isFunction(e)&&e(null,!0)}),d.queue(n,g.isString(m)?m:"",[])),"stop"===v?(a(n)&&a(n).tweensContainer&&r!==!1&&d.each(a(n).tweensContainer,function(t,e){e.endValue=e.currentValue}),O.push(t)):"finish"!==v&&"finishAll"!==v||(e[2].duration=1))}):!0})}),"stop"===v&&(d.each(O,function(t,e){f(e,!0)}),P.promise&&P.resolver(h)),t();default:if(!d.isPlainObject(v)||g.isEmptyObject(v)){if(g.isString(v)&&b.Redirects[v]){var L=d.extend({},m),V=L.duration,F=L.delay||0;return L.backwards===!0&&(h=d.extend(!0,[],h).reverse()),d.each(h,function(t,e){parseFloat(L.stagger)?L.delay=F+parseFloat(L.stagger)*t:g.isFunction(L.stagger)&&(L.delay=F+L.stagger.call(e,t,C)),L.drag&&(L.duration=parseFloat(V)||(/^(callout|transition)/.test(v)?1e3:y),L.duration=Math.max(L.duration*(L.backwards?1-t/C:(t+1)/C),.75*L.duration,200)),b.Redirects[v].call(e,e,L||{},t,C,h,P.promise?P:n)}),t()}var j="Velocity: First argument ("+v+") was not a property map, a known action, or a registered redirect. Aborting.";return P.promise?P.rejecter(new Error(j)):console.log(j),t()}A="start"}var N={lastParent:null,lastPosition:null,lastFontSize:null,lastPercentToPxWidth:null,lastPercentToPxHeight:null,lastEmToPx:null,remToPx:null,vwToPx:null,vhToPx:null},H=[];d.each(h,function(t,e){g.isNode(e)&&i.call(e)});var M,L=d.extend({},b.defaults,m);if(L.loop=parseInt(L.loop),M=2*L.loop-1,L.loop)for(var q=0;M>q;q++){var z={delay:L.delay,progress:L.progress};q===M-1&&(z.display=L.display,z.visibility=L.visibility,z.complete=L.complete),S(h,"reverse",z)}return t()}};b=d.extend(S,b),b.animate=S;var C=e.requestAnimationFrame||h;return b.State.isMobile||o.hidden===n||o.addEventListener("visibilitychange",function(){o.hidden?(C=function(t){return setTimeout(function(){t(!0)},16)},c()):C=e.requestAnimationFrame||h}),t.Velocity=b,t!==e&&(t.fn.velocity=S,t.fn.velocity.defaults=b.defaults),d.each(["Down","Up"],function(t,e){b.Redirects["slide"+e]=function(t,o,i,r,a,s){var l=d.extend({},o),u=l.begin,c=l.complete,f={height:"",marginTop:"",marginBottom:"",paddingTop:"",paddingBottom:""},p={};l.display===n&&(l.display="Down"===e?"inline"===b.CSS.Values.getDisplayType(t)?"inline-block":"block":"none"),l.begin=function(){u&&u.call(a,a);for(var o in f){p[o]=t.style[o];var n=b.CSS.getPropertyValue(t,o);f[o]="Down"===e?[n,0]:[0,n]}p.overflow=t.style.overflow,t.style.overflow="hidden"},l.complete=function(){for(var e in p)t.style[e]=p[e];c&&c.call(a,a),s&&s.resolver(a)},b(t,f,l)}}),d.each(["In","Out"],function(t,e){b.Redirects["fade"+e]=function(t,o,i,r,a,s){var l=d.extend({},o),u={opacity:"In"===e?1:0},c=l.complete;i!==r-1?l.complete=l.begin=null:l.complete=function(){c&&c.call(a,a),s&&s.resolver(a)},l.display===n&&(l.display="In"===e?"auto":"none"),b(this,u,l)}}),b}(window.jQuery||window.Zepto||window,window,document)})},function(t,e){t.exports=function(t){var e=10,o=Array.prototype.slice.apply(t.querySelectorAll("[data-flyout]"));o.forEach(function(o){var n=t.querySelector("#"+o.getAttribute("data-flyout"));o.addEventListener("mouseover",function(){n.classList.remove("flyout-hidden");var t=o,i=0,r=0;do i+=t.offsetLeft,r+=t.offsetTop;while(null!==(t=t.offsetParent));i+=o.offsetWidth/2,r=r+o.offsetHeight+e,n.style.left=i+"px",n.style.top=r+"px"}),o.addEventListener("mouseout",function(){n.classList.add("flyout-hidden")})})}},function(t,e){t.exports=function(t){var e=Array.prototype.slice.call(t.querySelectorAll(".menu")),o=Array.prototype.slice.call(t.querySelectorAll("[data-menu-toggle]"));o.forEach(function(e){e.addEventListener("click",function(){var o=t.querySelector("#"+e.getAttribute("data-menu-toggle"));o.classList.toggle("active")})}),e.forEach(function(t){var e=Array.prototype.slice.call(t.querySelectorAll("[data-menu-dismiss]"));e.forEach(function(e){e.addEventListener("click",function(){t.classList.remove("active"),document.querySelector('[data-menu-toggle="'+t.id+'"]').classList.remove("active")})})})}},function(t,e,o){var n=o(3),i=420,r=300,a=[.645,.045,.355,1],s=t.exports=function(t){this.root=t,this.dismissals=Array.prototype.slice.apply(t.querySelectorAll("[data-modal-dismiss]")),this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-modal]")),this.attachEvents()};s.prototype={attachEvents:function(){this.dismissals.forEach(function(t){t.addEventListener("click",this.dismiss.bind(this))},this),this.openers.forEach(function(t){t.addEventListener("click",this.open.bind(this))},this),document.addEventListener("keyup",function(t){var e=t.which||t.keyCode;if(27===e){var o=Array.prototype.slice.call(document.querySelectorAll(".modal:not(.modal-hidden)"));o.forEach(function(t){t.classList.add("modal-hidden")})}}),window.addEventListener("resize",function(t){var e=Array.prototype.slice.call(document.querySelectorAll(".modal:not(.modal-hidden)"));e.forEach(function(t){this.reposition(t.querySelector(".modal-container"))}.bind(this))}.bind(this))},open:function(t){var e=t.target.getAttribute("data-modal");e=this.root.querySelector("#"+e),e.classList.remove("modal-hidden");var o=document.body.offsetWidth,s=e.querySelector(".modal-container");i>=o&&(s.style.left=o+"px",n(s,{left:0},{duration:r,easing:a,complete:function(){document.body.style.overflow="hidden"}})),this.reposition(s)},dismiss:function(t){function e(){document.body.style.overflow="",u&&o.classList.add("modal-hidden")}var o,s=this,l=t.target,u=l===t.currentTarget&&l.classList.contains("modal-overlay");do if(l.hasAttribute("data-modal-dismiss")&&!l.classList.contains("modal"))u=!0;else if(l.classList.contains("modal")){o=l;break}while((l=l.parentNode)!==s.root);if(o){var c=document.body.offsetWidth,f=o.querySelector(".modal-container");i>=c?n(f,{left:c},{duration:r,easing:a,complete:e}):e()}},reposition:function(t){if(!t.classList.contains("modal-hidden")){var e=document.body.offsetWidth;e>=i?(t.style.margin="",document.body.style.overflow=""):(t.style.margin=0,document.body.style.overflow="hidden")}}}},function(t,e){var o=t.exports=function(t){var e=Array.prototype.slice.apply(t.querySelectorAll("[data-toggle]"));this.element=t,e.forEach(function(t){t.addEventListener("click",this.toggle.bind(this))},this)};o.prototype={toggle:function(t){var e=t.target;do if(e.hasAttribute("data-toggle"))return e.classList.toggle("active");while((e=e.parentNode)!==this.element)}}},function(t,e,o){var n=o(9),i=function(t,e){var o={bubbles:!1,cancelable:!1,detail:void 0};for(var n in e)e.hasOwnProperty(n)&&(o[n]=e[n]);var i=document.createEvent("CustomEvent");return i.initCustomEvent(t,o.bubbles,o.cancelable,o.detail),i},r=t.exports=function(t){if(this.root=t,this.tourElements=Array.prototype.slice.apply(t.querySelectorAll("[data-tour]")),this.tourElements.length>0){this.tours={},this.currentTourName=null,this.openers=Array.prototype.slice.apply(t.querySelectorAll("[data-tour-opener]"));var e=document.createElement("div");if(e.classList.add("tour-overlay","overlay-hidden"),this.tourOverlay=t.body.appendChild(e),this.initialize(),this.openers.length<this.tourElements.length){var o=this,n=o.openers.map(function(t){return t.getAttribute("data-tour-opener")});o.tourElements.forEach(function(t){var e=t.getAttribute("data-tour-name");n.includes(e)||o.openTour(e)})}}};r.prototype={initialize:function(){var t=this;t.tourElements.forEach(function(e){t.initializeTour(e)}),t.attachEvents()},initializeTour:function(t){var e=this,o=t.getAttribute("data-tour-name"),i=new n.Tour({defaults:{showCancelLink:!0,buttons:[{text:t.getAttribute("data-tour-skip"),classes:"btn-default",action:function(){e.closeTour(o)}},{text:t.getAttribute("data-tour-next"),classes:"btn-primary",action:function(){e.clickNext(o)}}]}});e.tours[o]={tour:i,name:o},e.addSteps(i,t)},addSteps:function(t,e){var o=this,n=Array.prototype.slice.apply(e.querySelectorAll("[data-tour-step]")),i=n.sort(function(t,e){var o=parseInt(t.getAttribute("data-step-number")),n=parseInt(e.getAttribute("data-step-number"));return o>n?1:n>o?-1:0});i.forEach(function(n,r){var a={title:n.getAttribute("data-title")||"",text:n.innerHTML},s=n.getAttribute("data-classes")||"",l=n.getAttribute("data-attach-to-element"),u=n.getAttribute("data-attach-to-position"),c={left:"0 25px",right:"0 -25px",top:"25px 0",bottom:"-25px 0"}[u];s&&(a.classes=s.split(" ")),l&&u&&c&&(a.attachTo={element:l,on:u},a.tetherOptions={offset:c}),i.length-1===r&&(a.buttons=[{text:e.getAttribute("data-tour-done"),classes:"btn-primary",action:t.complete}]),t.addStep(a),t.on("active",function(){o.tourOverlay.classList.remove("overlay-hidden")}),t.on("inactive",function(){o.tourOverlay.classList.add("overlay-hidden")})})},attachEvents:function(){var t=this;t.openers.forEach(function(e){e.addEventListener("click",t.openTour.bind(t,e.getAttribute("data-tour-opener")))},t),document.addEventListener("keyup",function(e){var o=e.which||e.keyCode;null!==t.currentTourName&&27===o&&t.closeTour(t.currentTourName)}),t.tourOverlay.addEventListener("click",function(){t.closeTour(t.currentTourName)})},openTour:function(t){var e=this.tours[t];this.currentTourName=e.name,e.tour.start(),this.tourOverlay.classList.remove("tour-overlay-hidden")},clickNext:function(t){var e=this.tours[t],o={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new i("next",{detail:o})),e.tour.next()},closeTour:function(t){var e=this.tours[t],o={currentStep:e.tour.getCurrentStep().id.replace("step-",""),tourName:e.name};document.dispatchEvent(new i("cancel",{detail:o})),e.tour.cancel()}}},function(t,e,o){var n,i,r;/*! tether-shepherd 1.2.0 */
!function(a,s){i=[o(10)],n=s,r="function"==typeof n?n.apply(e,i):n,!(void 0!==r&&(t.exports=r))}(this,function(t){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function n(t){var e=document.createElement("div");return e.innerHTML=t,e.children[0]}function i(t,e){var o=void 0;return"undefined"!=typeof t.matches?o=t.matches:"undefined"!=typeof t.matchesSelector?o=t.matchesSelector:"undefined"!=typeof t.msMatchesSelector?o=t.msMatchesSelector:"undefined"!=typeof t.webkitMatchesSelector?o=t.webkitMatchesSelector:"undefined"!=typeof t.mozMatchesSelector?o=t.mozMatchesSelector:"undefined"!=typeof t.oMatchesSelector&&(o=t.oMatchesSelector),o.call(t,e)}function r(t,e){if(null===t||"undefined"==typeof t)return t;if("object"==typeof t)return t;var o=t.split(" "),n=o.length,i=e.length;n>i&&(o[0]=o.slice(0,n-i+1).join(" "),o.splice(1,i));for(var r={},a=0;i>a;++a){var s=e[a];r[s]=o[a]}return r}var a=function(){function t(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,o,n){return o&&t(e.prototype,o),n&&t(e,n),e}}(),s=function(t,e,o){for(var n=!0;n;){var i=t,r=e,a=o;s=u=l=void 0,n=!1,null===i&&(i=Function.prototype);var s=Object.getOwnPropertyDescriptor(i,r);if(void 0!==s){if("value"in s)return s.value;var l=s.get;if(void 0===l)return;return l.call(a)}var u=Object.getPrototypeOf(i);if(null===u)return;t=u,e=r,o=a,n=!0}},l=t.Utils,u=l.Evented,c=l.addClass,f=l.extend,d=l.hasClass,p=l.removeClass,h=l.uniqueId,g=new u,v={top:"bottom center",left:"middle right",right:"middle left",bottom:"top center",center:"middle center"},y=function(l){function u(t,o){return e(this,u),s(Object.getPrototypeOf(u.prototype),"constructor",this).call(this,t,o),this.tour=t,this.bindMethods(),this.setOptions(o),this}return o(u,l),a(u,[{key:"bindMethods",value:function(){var t=this,e=["_show","show","hide","isOpen","cancel","complete","scrollTo","destroy"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"setOptions",value:function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t,this.destroy(),this.id=this.options.id||this.id||"step-"+h();var e=this.options.when;if(e)for(var o in e)if({}.hasOwnProperty.call(e,o)){var n=e[o];this.on(o,n,this)}this.options.buttons||(this.options.buttons=[{text:"Next",action:this.tour.next}])}},{key:"getTour",value:function(){return this.tour}},{key:"bindAdvance",value:function(){var t=this,e=r(this.options.advanceOn,["selector","event"]),o=e.event,n=e.selector,a=function(e){t.isOpen()&&("undefined"!=typeof n?i(e.target,n)&&t.tour.next():t.el&&e.target===t.el&&t.tour.next())};document.body.addEventListener(o,a),this.on("destroy",function(){return document.body.removeEventListener(o,a)})}},{key:"getAttachTo",value:function(){var t=r(this.options.attachTo,["element","on"])||{},e=t.element;if("string"==typeof e&&(t.element=document.querySelector(e),!t.element))throw new Error("The element for this Shepherd step was not found "+e);return t}},{key:"setupTether",value:function(){if("undefined"==typeof t)throw new Error("Using the attachment feature of Shepherd requires the Tether library");var e=this.getAttachTo(),o=v[e.on||"right"];"undefined"==typeof e.element&&(e.element="viewport",o="middle center");var n={classPrefix:"shepherd",element:this.el,constraints:[{to:"window",pin:!0,attachment:"together"}],target:e.element,offset:e.offset||"0 0",attachment:o};this.tether&&this.tether.destroy(),this.tether=new t(f(n,this.options.tetherOptions))}},{key:"show",value:function(){var t=this;if("undefined"!=typeof this.options.beforeShowPromise){var e=this.options.beforeShowPromise();if("undefined"!=typeof e)return e.then(function(){return t._show()})}this._show()}},{key:"_show",value:function(){var t=this;this.trigger("before-show"),this.el||this.render(),c(this.el,"shepherd-open"),document.body.setAttribute("data-shepherd-step",this.id),this.setupTether(),this.options.scrollTo&&setTimeout(function(){t.scrollTo()}),this.trigger("show")}},{key:"hide",value:function(){this.trigger("before-hide"),p(this.el,"shepherd-open"),document.body.removeAttribute("data-shepherd-step"),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("hide")}},{key:"isOpen",value:function(){return d(this.el,"shepherd-open")}},{key:"cancel",value:function(){this.tour.cancel(),this.trigger("cancel")}},{key:"complete",value:function(){this.tour.complete(),this.trigger("complete")}},{key:"scrollTo",value:function(){var t=this.getAttachTo(),e=t.element;"undefined"!=typeof this.options.scrollToHandler?this.options.scrollToHandler(e):"undefined"!=typeof e&&e.scrollIntoView()}},{key:"destroy",value:function(){"undefined"!=typeof this.el&&(document.body.removeChild(this.el),delete this.el),this.tether&&this.tether.destroy(),this.tether=null,this.trigger("destroy")}},{key:"render",value:function(){var t=this;"undefined"!=typeof this.el&&this.destroy(),this.el=n("<div class='shepherd-step "+(this.options.classes||"")+"' data-id='"+this.id+"' "+(this.options.idAttribute?'id="'+this.options.idAttribute+'"':"")+"></div>");var e=document.createElement("div");e.className="shepherd-content",this.el.appendChild(e);var o=document.createElement("header");if(e.appendChild(o),"undefined"!=typeof this.options.title&&(o.innerHTML+="<h3 class='shepherd-title'>"+this.options.title+"</h3>",this.el.className+=" shepherd-has-title"),this.options.showCancelLink){var i=n("<a href class='shepherd-cancel-link'>✕</a>");o.appendChild(i),this.el.className+=" shepherd-has-cancel-link",this.bindCancelLink(i)}"undefined"!=typeof this.options.text&&!function(){var o=n("<div class='shepherd-text'></div>"),i=t.options.text;"function"==typeof i&&(i=i.call(t,o)),i instanceof HTMLElement?o.appendChild(i):("string"==typeof i&&(i=[i]),i.map(function(t){o.innerHTML+="<p>"+t+"</p>"})),e.appendChild(o)}();var r=document.createElement("footer");this.options.buttons&&!function(){var e=n("<ul class='shepherd-buttons'></ul>");t.options.buttons.map(function(o){var i=n("<li><a class='shepherd-button "+(o.classes||"")+"'>"+o.text+"</a>");e.appendChild(i),t.bindButtonEvents(o,i.querySelector("a"))}),r.appendChild(e)}(),e.appendChild(r),document.body.appendChild(this.el),this.setupTether(),this.options.advanceOn&&this.bindAdvance()}},{key:"bindCancelLink",value:function(t){var e=this;t.addEventListener("click",function(t){t.preventDefault(),e.cancel()})}},{key:"bindButtonEvents",value:function(t,e){var o=this;t.events=t.events||{},"undefined"!=typeof t.action&&(t.events.click=t.action);for(var n in t.events)if({}.hasOwnProperty.call(t.events,n)){var i=t.events[n];"string"==typeof i&&!function(){var t=i;i=function(){return o.tour.show(t)}}(),e.addEventListener(n,i)}this.on("destroy",function(){for(var o in t.events)if({}.hasOwnProperty.call(t.events,o)){var n=t.events[o];e.removeEventListener(o,n)}})}}]),u}(u),m=function(t){function n(){var t=this,o=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];e(this,n),s(Object.getPrototypeOf(n.prototype),"constructor",this).call(this,o),this.bindMethods(),this.options=o,this.steps=this.options.steps||[];var i=["complete","cancel","hide","start","show","active","inactive"];return i.map(function(e){!function(e){t.on(e,function(o){o=o||{},o.tour=t,g.trigger(e,o)})}(e)}),this}return o(n,t),a(n,[{key:"bindMethods",value:function(){var t=this,e=["next","back","cancel","complete","hide"];e.map(function(e){t[e]=t[e].bind(t)})}},{key:"addStep",value:function(t,e){return"undefined"==typeof e&&(e=t),e instanceof y?e.tour=this:("string"!=typeof t&&"number"!=typeof t||(e.id=t.toString()),e=f({},this.options.defaults,e),e=new y(this,e)),this.steps.push(e),this}},{key:"getById",value:function(t){for(var e=0;e<this.steps.length;++e){var o=this.steps[e];if(o.id===t)return o}}},{key:"getCurrentStep",value:function(){return this.currentStep}},{key:"next",value:function(){var t=this.steps.indexOf(this.currentStep);t===this.steps.length-1?(this.hide(t),this.trigger("complete"),this.done()):this.show(t+1,!0)}},{key:"back",value:function(){var t=this.steps.indexOf(this.currentStep);this.show(t-1,!1)}},{key:"cancel",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("cancel"),this.done()}},{key:"complete",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("complete"),this.done()}},{key:"hide",value:function(){"undefined"!=typeof this.currentStep&&this.currentStep.hide(),this.trigger("hide"),this.done()}},{key:"done",value:function(){g.activeTour=null,p(document.body,"shepherd-active"),this.trigger("inactive",{tour:this})}},{key:"show",value:function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];this.currentStep?this.currentStep.hide():(c(document.body,"shepherd-active"),this.trigger("active",{tour:this})),g.activeTour=this;var o=void 0;if(o="string"==typeof t?this.getById(t):this.steps[t])if("undefined"==typeof o.options.showOn||o.options.showOn())this.trigger("show",{step:o,previous:this.currentStep}),this.currentStep=o,o.show();else{var n=this.steps.indexOf(o),i=e?n+1:n-1;this.show(i,e)}}},{key:"start",value:function(){this.trigger("start"),this.currentStep=null,this.next()}}]),n}(u);return f(g,{Tour:m,Step:y,Evented:u}),g})},function(t,e,o){var n,i;/*! tether 1.2.0 */
!function(r,a){n=a,i="function"==typeof n?n.call(e,o,e,t):n,!(void 0!==i&&(t.exports=i))}(this,function(t,e,o){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t){var e=getComputedStyle(t)||{},o=e.position;if("fixed"===o)return t;for(var n=t;n=n.parentNode;){var i=void 0;try{i=getComputedStyle(n)}catch(r){}if("undefined"==typeof i||null===i)return n;var a=i,s=a.overflow,l=a.overflowX,u=a.overflowY;if(/(auto|scroll)/.test(s+u+l)&&("absolute"!==o||["relative","absolute","fixed"].indexOf(i.position)>=0))return n}return document.body}function r(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var o=e.documentElement,n={},i=t.getBoundingClientRect();for(var r in i)n[r]=i[r];var a=T(e);return n.top-=a.top,n.left-=a.left,"undefined"==typeof n.width&&(n.width=document.body.scrollWidth-n.left-n.right),"undefined"==typeof n.height&&(n.height=document.body.scrollHeight-n.top-n.bottom),n.top=n.top-o.clientTop,n.left=n.left-o.clientLeft,n.right=e.body.clientWidth-n.width-n.left,n.bottom=e.body.clientHeight-n.height-n.top,n}function a(t){return t.offsetParent||document.documentElement}function s(){var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");l(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var o=t.offsetWidth;e.style.overflow="scroll";var n=t.offsetWidth;o===n&&(n=e.clientWidth),document.body.removeChild(e);var i=o-n;return{width:i,height:i}}function l(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var o in e)({}).hasOwnProperty.call(e,o)&&(t[o]=e[o])}),t}function u(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var o=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),n=d(t).replace(o," ");p(t,n)}}function c(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{u(t,e);var o=d(t)+(" "+e);p(t,o)}}function f(t,e){if("undefined"!=typeof t.classList)return t.classList.contains(e);var o=d(t);return new RegExp("(^| )"+e+"( |$)","gi").test(o)}function d(t){return t.className instanceof SVGAnimatedString?t.className.baseVal:t.className}function p(t,e){t.setAttribute("class",e)}function h(t,e,o){o.forEach(function(o){-1===e.indexOf(o)&&f(t,o)&&u(t,o)}),e.forEach(function(e){f(t,e)||c(t,e)})}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function g(t,e){var o=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+o>=e&&e>=t-o}function v(){return"undefined"!=typeof performance&&"undefined"!=typeof performance.now?performance.now():+new Date}function y(){for(var t={top:0,left:0},e=arguments.length,o=Array(e),n=0;e>n;n++)o[n]=arguments[n];return o.forEach(function(e){var o=e.top,n=e.left;"string"==typeof o&&(o=parseFloat(o,10)),"string"==typeof n&&(n=parseFloat(n,10)),t.top+=o,t.left+=n}),t}function m(t,e){return"string"==typeof t.left&&-1!==t.left.indexOf("%")&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&-1!==t.top.indexOf("%")&&(t.top=parseFloat(t.top,10)/100*e.height),t}function b(t,e){return"scrollParent"===e?e=t.scrollParent:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),"undefined"!=typeof e.nodeType&&!function(){var t=r(e),o=t,n=getComputedStyle(e);e=[o.left,o.top,t.width+o.left,t.height+o.top],$.forEach(function(t,o){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[o]+=parseFloat(n["border"+t+"Width"]):e[o]-=parseFloat(n["border"+t+"Width"])})}(),e}var w=function(){function t(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,o,n){return o&&t(e.prototype,o),n&&t(e,n),e}}(),x=void 0;"undefined"==typeof x&&(x={modules:[]});var S=function(){var t=0;return function(){return++t}}(),C={},T=function(t){var e=t._tetherZeroElement;"undefined"==typeof e&&(e=t.createElement("div"),e.setAttribute("data-tether-id",S()),l(e.style,{top:0,left:0,position:"absolute"}),t.body.appendChild(e),t._tetherZeroElement=e);var o=e.getAttribute("data-tether-id");if("undefined"==typeof C[o]){C[o]={};var n=e.getBoundingClientRect();for(var i in n)C[o][i]=n[i];k(function(){delete C[o]})}return C[o]},E=[],k=function(t){E.push(t)},P=function(){for(var t=void 0;t=E.pop();)t()},A=function(){function t(){n(this,t)}return w(t,[{key:"on",value:function(t,e,o){var n=arguments.length<=3||void 0===arguments[3]?!1:arguments[3];"undefined"==typeof this.bindings&&(this.bindings={}),"undefined"==typeof this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:o,once:n})}},{key:"once",value:function(t,e,o){this.on(t,e,o,!0)}},{key:"off",value:function(t,e){if("undefined"==typeof this.bindings||"undefined"==typeof this.bindings[t])if("undefined"==typeof e)delete this.bindings[t];else for(var o=0;o<this.bindings[t].length;)this.bindings[t][o].handler===e?this.bindings[t].splice(o,1):++o}},{key:"trigger",value:function(t){if("undefined"!=typeof this.bindings&&this.bindings[t]){for(var e=0,o=arguments.length,n=Array(o>1?o-1:0),i=1;o>i;i++)n[i-1]=arguments[i];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],a=r.handler,s=r.ctx,l=r.once,u=s;"undefined"==typeof u&&(u=this),a.apply(u,n),l?this.bindings[t].splice(e,1):++e}}}}]),t}();x.Utils={getScrollParent:i,getBounds:r,getOffsetParent:a,extend:l,addClass:c,removeClass:u,hasClass:f,updateClasses:h,defer:k,flush:P,uniqueId:S,Evented:A,getScrollBarSize:s};var O=function(){function t(t,e){var o=[],n=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(o.push(a.value),!e||o.length!==e);n=!0);}catch(l){i=!0,r=l}finally{try{!n&&s["return"]&&s["return"]()}finally{if(i)throw r}}return o}return function(e,o){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),w=function(){function t(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,o,n){return o&&t(e.prototype,o),n&&t(e,n),e}}();if("undefined"==typeof x)throw new Error("You must include the utils.js file before tether.js");var L=x.Utils,i=L.getScrollParent,r=L.getBounds,a=L.getOffsetParent,l=L.extend,c=L.addClass,u=L.removeClass,h=L.updateClasses,k=L.defer,P=L.flush,s=L.getScrollBarSize,V=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","webkitTransform","OTransform","MozTransform","msTransform"],o=0;o<e.length;++o){var n=e[o];if(void 0!==t.style[n])return n}}(),F=[],j=function(){F.forEach(function(t){t.position(!1)}),P()};!function(){var t=null,e=null,o=null,n=function i(){return"undefined"!=typeof e&&e>16?(e=Math.min(e-16,250),void(o=setTimeout(i,250))):void("undefined"!=typeof t&&v()-t<10||("undefined"!=typeof o&&(clearTimeout(o),o=null),t=v(),j(),e=v()-t))};"undefined"!=typeof window&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,n)})}();var N={center:"center",left:"right",right:"left"},H={middle:"middle",top:"bottom",bottom:"top"},M={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},q=function(t,e){var o=t.left,n=t.top;return"auto"===o&&(o=N[e.left]),"auto"===n&&(n=H[e.top]),{left:o,top:n}},z=function(t){var e=t.left,o=t.top;return"undefined"!=typeof M[t.left]&&(e=M[t.left]),"undefined"!=typeof M[t.top]&&(o=M[t.top]),{left:e,top:o}},W=function(t){var e=t.split(" "),o=O(e,2),n=o[0],i=o[1];return{top:n,left:i}},R=W,B=function(){function t(e){var o=this;n(this,t),this.position=this.position.bind(this),F.push(this),this.history=[],this.setOptions(e,!1),x.modules.forEach(function(t){"undefined"!=typeof t.initialize&&t.initialize.call(o)}),this.position()}return w(t,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return"undefined"!=typeof e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,o=arguments.length<=1||void 0===arguments[1]?!0:arguments[1],n={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=l(n,t);var r=this.options,a=r.element,s=r.target,u=r.targetModifier;if(this.element=a,this.target=s,this.targetModifier=u,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if("undefined"==typeof e[t])throw new Error("Tether Error: Both element and target must be defined");"undefined"!=typeof e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),c(this.element,this.getClass("element")),this.options.addTargetClasses!==!1&&c(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=R(this.options.targetAttachment),this.attachment=R(this.options.attachment),this.offset=W(this.options.offset),this.targetOffset=W(this.options.targetOffset),"undefined"!=typeof this.scrollParent&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParent=this.target:this.scrollParent=i(this.target),this.options.enabled!==!1&&this.enable(o)}},{key:"getTargetBounds",value:function(){if("undefined"==typeof this.targetModifier)return r(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=r(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,o=this.target;o===document.body?(o=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=r(o);var n=getComputedStyle(o),i=o.scrollWidth>o.clientWidth||[n.overflow,n.overflowX].indexOf("scroll")>=0||this.target!==document.body,a=0;i&&(a=15);var s=t.height-parseFloat(n.borderTopWidth)-parseFloat(n.borderBottomWidth)-a,e={width:15,height:.975*s*(s/o.scrollHeight),left:t.left+t.width-parseFloat(n.borderLeftWidth)-15},l=0;408>s&&this.target===document.body&&(l=-11e-5*Math.pow(s,2)-.00727*s+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var u=this.target.scrollTop/(o.scrollHeight-s);return e.top=u*(s-e.height-l)+t.top+parseFloat(n.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return"undefined"==typeof this._cache&&(this._cache={}),"undefined"==typeof this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];this.options.addTargetClasses!==!1&&c(this.target,this.getClass("enabled")),c(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParent!==document&&this.scrollParent.addEventListener("scroll",this.position),t&&this.position()}},{key:"disable",value:function(){u(this.target,this.getClass("enabled")),u(this.element,this.getClass("enabled")),this.enabled=!1,"undefined"!=typeof this.scrollParent&&this.scrollParent.removeEventListener("scroll",this.position)}},{key:"destroy",value:function(){var t=this;this.disable(),F.forEach(function(e,o){return e===t?void F.splice(o,1):void 0})}},{key:"updateAttachClasses",value:function(t,e){var o=this;t=t||this.attachment,e=e||this.targetAttachment;var n=["left","top","bottom","right","middle","center"];"undefined"!=typeof this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),"undefined"==typeof this._addAttachClasses&&(this._addAttachClasses=[]);var i=this._addAttachClasses;t.top&&i.push(this.getClass("element-attached")+"-"+t.top),t.left&&i.push(this.getClass("element-attached")+"-"+t.left),e.top&&i.push(this.getClass("target-attached")+"-"+e.top),e.left&&i.push(this.getClass("target-attached")+"-"+e.left);var r=[];n.forEach(function(t){r.push(o.getClass("element-attached")+"-"+t),r.push(o.getClass("target-attached")+"-"+t)}),k(function(){"undefined"!=typeof o._addAttachClasses&&(h(o.element,o._addAttachClasses,r),o.options.addTargetClasses!==!1&&h(o.target,o._addAttachClasses,r),delete o._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];if(this.enabled){this.clearCache();var o=q(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,o);var n=this.cache("element-bounds",function(){return r(t.element)}),i=n.width,l=n.height;if(0===i&&0===l&&"undefined"!=typeof this.lastSize){var u=this.lastSize;i=u.width,l=u.height}else this.lastSize={width:i,height:l};var c=this.cache("target-bounds",function(){return t.getTargetBounds()}),f=c,d=m(z(this.attachment),{width:i,height:l}),p=m(z(o),f),h=m(this.offset,{width:i,height:l}),g=m(this.targetOffset,f);d=y(d,h),p=y(p,g);for(var v=c.left+p.left-d.left,b=c.top+p.top-d.top,w=0;w<x.modules.length;++w){var S=x.modules[w],C=S.position.call(this,{left:v,top:b,targetAttachment:o,targetPos:c,elementPos:n,offset:d,targetOffset:p,manualOffset:h,manualTargetOffset:g,scrollbarSize:E,attachment:this.attachment});if(C===!1)return!1;"undefined"!=typeof C&&"object"==typeof C&&(b=C.top,v=C.left)}var T={page:{top:b,left:v},viewport:{top:b-pageYOffset,bottom:pageYOffset-b-l+innerHeight,left:v-pageXOffset,right:pageXOffset-v-i+innerWidth}},E=void 0;return document.body.scrollWidth>window.innerWidth&&(E=this.cache("scrollbar-size",s),T.viewport.bottom-=E.height),document.body.scrollHeight>window.innerHeight&&(E=this.cache("scrollbar-size",s),T.viewport.right-=E.width),-1!==["","static"].indexOf(document.body.style.position)&&-1!==["","static"].indexOf(document.body.parentElement.style.position)||(T.page.bottom=document.body.scrollHeight-b-l,T.page.right=document.body.scrollWidth-v-i),"undefined"!=typeof this.options.optimizations&&this.options.optimizations.moveElement!==!1&&"undefined"==typeof this.targetModifier&&!function(){var e=t.cache("target-offsetparent",function(){return a(t.target)}),o=t.cache("target-offsetparent-bounds",function(){return r(e)}),n=getComputedStyle(e),i=o,s={};if(["Top","Left","Bottom","Right"].forEach(function(t){s[t.toLowerCase()]=parseFloat(n["border"+t+"Width"])}),o.right=document.body.scrollWidth-o.left-i.width+s.right,o.bottom=document.body.scrollHeight-o.top-i.height+s.bottom,T.page.top>=o.top+s.top&&T.page.bottom>=o.bottom&&T.page.left>=o.left+s.left&&T.page.right>=o.right){var l=e.scrollTop,u=e.scrollLeft;T.offset={top:T.page.top-o.top+l-s.top,left:T.page.left-o.left+u-s.left}}}(),this.move(T),this.history.unshift(T),this.history.length>3&&this.history.pop(),e&&P(),!0}}},{key:"move",value:function(t){var e=this;if("undefined"!=typeof this.element.parentNode){var o={};for(var n in t){o[n]={};for(var i in t[n]){for(var r=!1,s=0;s<this.history.length;++s){var u=this.history[s];if("undefined"!=typeof u[n]&&!g(u[n][i],t[n][i])){r=!0;break}}r||(o[n][i]=!0)}}var c={top:"",left:"",right:"",bottom:""},f=function(t,o){var n="undefined"!=typeof e.options.optimizations,i=n?e.options.optimizations.gpu:null;if(i!==!1){var r=void 0,a=void 0;t.top?(c.top=0,r=o.top):(c.bottom=0,r=-o.bottom),t.left?(c.left=0,a=o.left):(c.right=0,a=-o.right),c[V]="translateX("+Math.round(a)+"px) translateY("+Math.round(r)+"px)","msTransform"!==V&&(c[V]+=" translateZ(0)")}else t.top?c.top=o.top+"px":c.bottom=o.bottom+"px",t.left?c.left=o.left+"px":c.right=o.right+"px"},d=!1;if((o.page.top||o.page.bottom)&&(o.page.left||o.page.right)?(c.position="absolute",f(o.page,t.page)):(o.viewport.top||o.viewport.bottom)&&(o.viewport.left||o.viewport.right)?(c.position="fixed",f(o.viewport,t.viewport)):"undefined"!=typeof o.offset&&o.offset.top&&o.offset.left?!function(){c.position="absolute";var n=e.cache("target-offsetparent",function(){return a(e.target)});a(e.element)!==n&&k(function(){e.element.parentNode.removeChild(e.element),n.appendChild(e.element)}),f(o.offset,t.offset),d=!0}():(c.position="absolute",f({top:!0,left:!0},t.page)),!d){for(var p=!0,h=this.element.parentNode;h&&"BODY"!==h.tagName;){if("static"!==getComputedStyle(h).position){p=!1;break}h=h.parentNode}p||(this.element.parentNode.removeChild(this.element),document.body.appendChild(this.element))}var v={},y=!1;for(var i in c){var m=c[i],b=this.element.style[i];""!==b&&""!==m&&["top","left","bottom","right"].indexOf(i)>=0&&(b=parseFloat(b),m=parseFloat(m)),b!==m&&(y=!0,v[i]=m)}y&&k(function(){l(e.element.style,v)})}}}]),t}();B.modules=[],x.position=j;var I=l(B,x),O=function(){function t(t,e){var o=[],n=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(o.push(a.value),!e||o.length!==e);n=!0);}catch(l){i=!0,r=l}finally{try{!n&&s["return"]&&s["return"]()}finally{if(i)throw r}}return o}return function(e,o){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),L=x.Utils,r=L.getBounds,l=L.extend,h=L.updateClasses,k=L.defer,$=["left","top","right","bottom"];x.modules.push({position:function(t){var e=this,o=t.top,n=t.left,i=t.targetAttachment;if(!this.options.constraints)return!0;var a=this.cache("element-bounds",function(){return r(e.element)}),s=a.height,u=a.width;if(0===u&&0===s&&"undefined"!=typeof this.lastSize){var c=this.lastSize;u=c.width,s=c.height}var f=this.cache("target-bounds",function(){return e.getTargetBounds()}),d=f.height,p=f.width,g=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,o=t.pinnedClass;e&&g.push(e),o&&g.push(o)}),g.forEach(function(t){["left","top","right","bottom"].forEach(function(e){g.push(t+"-"+e)})});var v=[],y=l({},i),m=l({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,a=t.attachment,l=t.pin;"undefined"==typeof a&&(a="");var c=void 0,f=void 0;if(a.indexOf(" ")>=0){var h=a.split(" "),g=O(h,2);f=g[0],c=g[1]}else c=f=a;var w=b(e,r);"target"!==f&&"both"!==f||(o<w[1]&&"top"===y.top&&(o+=d,y.top="bottom"),o+s>w[3]&&"bottom"===y.top&&(o-=d,y.top="top")),"together"===f&&(o<w[1]&&"top"===y.top&&("bottom"===m.top?(o+=d,y.top="bottom",o+=s,m.top="top"):"top"===m.top&&(o+=d,y.top="bottom",o-=s,m.top="bottom")),o+s>w[3]&&"bottom"===y.top&&("top"===m.top?(o-=d,y.top="top",o-=s,m.top="bottom"):"bottom"===m.top&&(o-=d,y.top="top",o+=s,m.top="top")),"middle"===y.top&&(o+s>w[3]&&"top"===m.top?(o-=s,m.top="bottom"):o<w[1]&&"bottom"===m.top&&(o+=s,m.top="top"))),"target"!==c&&"both"!==c||(n<w[0]&&"left"===y.left&&(n+=p,y.left="right"),n+u>w[2]&&"right"===y.left&&(n-=p,y.left="left")),"together"===c&&(n<w[0]&&"left"===y.left?"right"===m.left?(n+=p,y.left="right",n+=u,m.left="left"):"left"===m.left&&(n+=p,y.left="right",n-=u,m.left="right"):n+u>w[2]&&"right"===y.left?"left"===m.left?(n-=p,y.left="left",n-=u,m.left="right"):"right"===m.left&&(n-=p,y.left="left",n+=u,m.left="left"):"center"===y.left&&(n+u>w[2]&&"left"===m.left?(n-=u,m.left="right"):n<w[0]&&"right"===m.left&&(n+=u,m.left="left"))),"element"!==f&&"both"!==f||(o<w[1]&&"bottom"===m.top&&(o+=s,m.top="top"),o+s>w[3]&&"top"===m.top&&(o-=s,m.top="bottom")),"element"!==c&&"both"!==c||(n<w[0]&&("right"===m.left?(n+=u,m.left="left"):"center"===m.left&&(n+=u/2,m.left="left")),n+u>w[2]&&("left"===m.left?(n-=u,m.left="right"):"center"===m.left&&(n-=u/2,m.left="right"))),"string"==typeof l?l=l.split(",").map(function(t){return t.trim()}):l===!0&&(l=["top","left","right","bottom"]),l=l||[];var x=[],S=[];o<w[1]&&(l.indexOf("top")>=0?(o=w[1],x.push("top")):S.push("top")),o+s>w[3]&&(l.indexOf("bottom")>=0?(o=w[3]-s,x.push("bottom")):S.push("bottom")),n<w[0]&&(l.indexOf("left")>=0?(n=w[0],x.push("left")):S.push("left")),n+u>w[2]&&(l.indexOf("right")>=0?(n=w[2]-u,x.push("right")):S.push("right")),x.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),v.push(t),x.forEach(function(e){v.push(t+"-"+e)})}(),S.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),v.push(t),S.forEach(function(e){v.push(t+"-"+e)})}(),(x.indexOf("left")>=0||x.indexOf("right")>=0)&&(m.left=y.left=!1),(x.indexOf("top")>=0||x.indexOf("bottom")>=0)&&(m.top=y.top=!1),y.top===i.top&&y.left===i.left&&m.top===e.attachment.top&&m.left===e.attachment.left||e.updateAttachClasses(m,y)}),k(function(){e.options.addTargetClasses!==!1&&h(e.target,v,g),h(e.element,v,g)}),{top:o,left:n}}});var L=x.Utils,r=L.getBounds,h=L.updateClasses,k=L.defer;x.modules.push({position:function(t){var e=this,o=t.top,n=t.left,i=this.cache("element-bounds",function(){return r(e.element)}),a=i.height,s=i.width,l=this.getTargetBounds(),u=o+a,c=n+s,f=[];o<=l.bottom&&u>=l.top&&["left","right"].forEach(function(t){var e=l[t];e!==n&&e!==c||f.push(t)}),n<=l.right&&c>=l.left&&["top","bottom"].forEach(function(t){var e=l[t];e!==o&&e!==u||f.push(t)});var d=[],p=[],g=["left","top","right","bottom"];return d.push(this.getClass("abutted")),g.forEach(function(t){d.push(e.getClass("abutted")+"-"+t)}),f.length&&p.push(this.getClass("abutted")),f.forEach(function(t){p.push(e.getClass("abutted")+"-"+t)}),k(function(){e.options.addTargetClasses!==!1&&h(e.target,p,d),h(e.element,p,d)}),!0}});var O=function(){function t(t,e){var o=[],n=!0,i=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(o.push(a.value),!e||o.length!==e);n=!0);}catch(l){i=!0,r=l}finally{try{!n&&s["return"]&&s["return"]()}finally{if(i)throw r}}return o}return function(e,o){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return x.modules.push({position:function(t){var e=t.top,o=t.left;if(this.options.shift){var n=this.options.shift;"function"==typeof this.options.shift&&(n=this.options.shift.call(this,{top:e,left:o}));var i=void 0,r=void 0;if("string"==typeof n){n=n.split(" "),n[1]=n[1]||n[0];var a=n,s=O(a,2);i=s[0],r=s[1],i=parseFloat(i,10),r=parseFloat(r,10)}else i=n.top,r=n.left;return e+=i,o+=r,{top:e,left:o}}}}),I})}])});
//# sourceMappingURL=data:application/json;base64,
